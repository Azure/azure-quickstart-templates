{
    "$schema":"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion":"1.0.0.0",
    "parameters":{
       "workspaceLocation":{
          "type":"string",
          "defaultValue":"",
          "metadata":{
             "description":"Specify the workspace region"
          }
       },
       "workspaceName":{
          "type":"string",
          "defaultValue":"",
          "metadata":{
             "description":"Specify the workspace name"
          }
       }
    },
    "variables":{
       "omsSolutions":{
          "customSolution":{
             "name":"Azure Backup Monitoring Solution",
             "view1":"Backup Jobs (Non Log)",
             "view2":"Backup Jobs (Log)",
             "view3":"Restore Jobs",
             "view4":"Alerts from Azure Resources Backup",
             "view5":"Alerts from On-Premises Resources Backup",
             "view6":"Backup Items",
             "view7":"Cloud Storage",
             "solutionName":"[concat('AzureBackup', '[', parameters('workspaceName'), ']')]",
             "publisher":"Microsoft",
             "displayName":"Azure Backup Monitoring and Reporting Solution",
             "description":"Analyze your Backup Vaults",
             "author":"Microsoft"
          }
       }
    },
        "resources":[
             {
                "apiVersion":"2015-11-01-preview",
                "name": "[concat(parameters('workspaceName'), '/', 'Backup Jobs (Non Log)')]",
                "type":"Microsoft.OperationalInsights/workspaces/views",
                "location":"[parameters('workspaceLocation')]",
                "properties":{
                   "Id":"Backup Jobs (Non Log)",
                   "Name":"[variables('omsSolutions').customSolution.view1]",
                   "Author":"[variables('omsSolutions').customSolution.author]",
                   "Source":"Local",
                   "Version":2,
                   "Dashboard":[
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Jobs by Job Status",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Jobs by Job Status",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "Donut":{
                               "Query":" let Events= AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\" | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"); let Jobs = Events | where OperationName == \"Job\" |extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"); Jobs | extend TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobOperation_s = columnifexists (\"JobOperation_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\") | summarize arg_max(TimeGenerated,*) by JobUniqueId_g | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s == \"Backup\" and JobOperationSubType_s !in~(\"Log\", \"Recovery point_Log\") | join kind=leftouter ( BackupItems ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize AggregatedValue = dcount(JobUniqueId_g) by JobStatus_s | order by AggregatedValue desc",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#55d455",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
                                     {
                                        "value":"Completed",
                                        "color":"#55d455"
                                     },
                                     {
                                        "value":"Failed",
                                        "color":"#eb3c00"
                                     },
                                     {
                                        "value":"CompletedWithWarnings",
                                        "color":"#ffb900"
                                     }
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":" let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let Jobs = Events | where OperationName ==\"Job\" | extend BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"); let BackupItems = Events | where OperationName ==\"BackupItem\" | extend BackupItemType_s= columnifexists (\"BackupItemType_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"); Jobs | extend JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), Resource = columnifexists(\"Resource\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s == \"Backup\" and JobOperationSubType_s !in~(\"Log\",\"Recovery point_Log\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | project BackupItemUniqueId_s, JobStatus_s, Resource | join kind=leftouter ( BackupItems | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s ) on BackupItemUniqueId_s| where ${DatasourceType} | project BackupItemFriendlyName_s, BackupItemUniqueId_s, JobStatus_s, Vault=Resource | summarize count() by BackupItemUniqueId_s , BackupItemFriendlyName_s, JobStatus_s, Vault | order by count_ desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "ColumnsTitle":{
                                  "Name":"Backup Item ID",
                                  "Value":"No of Jobs"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events=AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let Jobs = Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"); let BackupItems = Events | where OperationName == \"BackupItem\" | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\" , \"\"); let ProtectedContainers = Events | where OperationName == \"ProtectedContainer\" | extend ProtectedContainerFriendlyName_s = columnifexists(\"ProtectedContainerFriendlyName_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists (\"ProtectedContainerUniqueId_s\",\"\"); Jobs | extend JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode_s = columnifexists(\"JobFailureCode_s\",\"\"), Resource = columnifexists(\"Resource\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s == \"Backup\" and JobOperationSubType_s !in~(\"Log\",\"Recovery point_Log\") | summarize arg_max(TimeGenerated,*) by JobUniqueId_g | project BackupItemUniqueId_s, ProtectedContainerUniqueId_s, JobStatus_s, Resource, JobFailureCode_s | join kind=leftouter ( BackupItems | summarize arg_max(TimeGenerated,*) by BackupItemUniqueId_s | project BackupItemUniqueId_s , BackupItemFriendlyName_s, BackupItemType_s ) on BackupItemUniqueId_s | join kind=leftouter ( ProtectedContainers | summarize arg_max(TimeGenerated,*) by ProtectedContainerUniqueId_s | project ProtectedContainerUniqueId_s , ProtectedContainerFriendlyName_s ) on ProtectedContainerUniqueId_s | project BackupItemFriendlyName_s, BackupItemUniqueId_s , ProtectedContainerFriendlyName_s, BackupItemType_s, JobStatus_s, Vault=Resource, JobFailureCode_s | where {selected item}",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events=AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let Jobs = Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"); let BackupItems = Events | where OperationName == \"BackupItem\" | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\" , \"\"); let ProtectedContainers = Events | where OperationName == \"ProtectedContainer\" | extend ProtectedContainerFriendlyName_s = columnifexists(\"ProtectedContainerFriendlyName_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists (\"ProtectedContainerUniqueId_s\",\"\"); Jobs | extend JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode_s = columnifexists(\"JobFailureCode_s\",\"\"), Resource = columnifexists(\"Resource\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s == \"Backup\" and JobOperationSubType_s !in~(\"Log\",\"Recovery point_Log\") | summarize arg_max(TimeGenerated,*) by JobUniqueId_g | project BackupItemUniqueId_s, ProtectedContainerUniqueId_s, JobStatus_s, Resource, JobFailureCode_s | join kind=leftouter ( BackupItems | summarize arg_max(TimeGenerated,*) by BackupItemUniqueId_s | project BackupItemUniqueId_s , BackupItemFriendlyName_s, BackupItemType_s ) on BackupItemUniqueId_s | join kind=leftouter ( ProtectedContainers | summarize arg_max(TimeGenerated,*) by ProtectedContainerUniqueId_s | project ProtectedContainerUniqueId_s , ProtectedContainerFriendlyName_s ) on ProtectedContainerUniqueId_s | project BackupItemFriendlyName_s, BackupItemUniqueId_s , ProtectedContainerFriendlyName_s, BackupItemType_s, JobStatus_s, Vault=Resource, JobFailureCode_s | where {selected item}"
                               }
                            }
                         }
                      },
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Top 3 Backup Items by Job Duration",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Total Job Duration (Hrs)",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "Donut":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\" ; let BackupIdNameMap = BackupItems | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\") |where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemType_s, BackupItemFriendlyName_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let ContainerIdNameMap = Events | where OperationName == \"ProtectedContainer\" | extend ProtectedContainerFriendlyName_s = columnifexists(\"ProtectedContainerFriendlyName_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\") |where ProtectedContainerFriendlyName_s != \"\" | project TimeGenerated, ProtectedContainerFriendlyName_s , ProtectedContainerUniqueId_s | summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId_s; let Jobs = Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s= columnifexists (\"BackupItemUniqueId_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\") , JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated =columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobDurationInSecs_s = columnifexists(\"JobDurationInSecs_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s==\"Backup\" | where JobOperationSubType_s !in~(\"Log\", \"Recovery point_Log\" )| summarize arg_max(TimeGenerated, *) by JobUniqueId_g | project BackupItemUniqueId_s, JobUniqueId_g , JobDurationInSecs_s, ProtectedContainerUniqueId_s; let Table1 = Jobs | join kind=leftouter ( ContainerIdNameMap ) on ProtectedContainerUniqueId_s; let Table2 = Table1 | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s; Table2 | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where BackupItemFriendlyName_s !=\"\" | summarize totalDurationInHrs = round(sum(todouble(JobDurationInSecs_s)/3600),2) by BackupItemUniqueId_s | sort by totalDurationInHrs desc",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
 
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") |where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemType_s, BackupItemFriendlyName_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let ContainerIdNameMap = Events | where OperationName==\"ProtectedContainer\" | extend ProtectedContainerFriendlyName_s = columnifexists(\"ProtectedContainerFriendlyName_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\") | where ProtectedContainerFriendlyName_s != \"\" | project TimeGenerated, ProtectedContainerFriendlyName_s , ProtectedContainerUniqueId_s | summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId_s; let Jobs = Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\") , JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobDurationInSecs_s = columnifexists(\"JobDurationInSecs_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s==\"Backup\" | where JobOperationSubType_s !in~(\"Log\" , \"Recovery point_Log\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | project BackupItemUniqueId_s, JobUniqueId_g , JobDurationInSecs_s, ProtectedContainerUniqueId_s; let Table1 = Jobs | join kind=leftouter ( ContainerIdNameMap ) on ProtectedContainerUniqueId_s; let Table2 = Table1 | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s; Table2 | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where BackupItemFriendlyName_s !=\"\" | summarize totalDurationInHrs = round(sum(todouble(JobDurationInSecs_s)/3600),2) by BackupItemUniqueId_s, BackupItemFriendlyName_s | sort by totalDurationInHrs desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Backup Item ID",
                                  "Value":"Total Job Duration (hrs)"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists (\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemType_s, BackupItemFriendlyName_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let ContainerIdNameMap = Events | where OperationName ==\"ProtectedContainer\" | extend ProtectedContainerFriendlyName_s = columnifexists(\"ProtectedContainerFriendlyName_s\",\"\"), TimeGenerated = columnifexists (\"TimeGenerated\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\") |where ProtectedContainerFriendlyName_s != \"\" | project TimeGenerated, ProtectedContainerFriendlyName_s , ProtectedContainerUniqueId_s | summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId_s; let Jobs = Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\") , JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobDurationInSecs_s = columnifexists (\"JobDurationInSecs_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s==\"Backup\" | where JobOperationSubType_s !in~(\"Log\" , \"Recovery point_Log\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | project BackupItemUniqueId_s, JobUniqueId_g , JobStatus_s, JobDurationInSecs_s, ProtectedContainerUniqueId_s; let Table1 = Jobs | join kind=leftouter ( ContainerIdNameMap ) on ProtectedContainerUniqueId_s; let Table2 = Table1 | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s; let Selection = Table2 | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where BackupItemFriendlyName_s !=\"\" | summarize totalDurationInHrs = round(sum(todouble(JobDurationInSecs_s)/3600),2) by BackupItemUniqueId_s, BackupItemFriendlyName_s | sort by totalDurationInHrs desc | search {selected item} | join ( BackupIdNameMap ) on BackupItemFriendlyName_s; Selection | join(Jobs) on BackupItemUniqueId_s ",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists (\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemType_s, BackupItemFriendlyName_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let ContainerIdNameMap = Events | where OperationName ==\"ProtectedContainer\" | extend ProtectedContainerFriendlyName_s = columnifexists(\"ProtectedContainerFriendlyName_s\",\"\"), TimeGenerated = columnifexists (\"TimeGenerated\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\") |where ProtectedContainerFriendlyName_s != \"\" | project TimeGenerated, ProtectedContainerFriendlyName_s , ProtectedContainerUniqueId_s | summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId_s; let Jobs = Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\") , JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobDurationInSecs_s = columnifexists (\"JobDurationInSecs_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s==\"Backup\" | where JobOperationSubType_s !in~(\"Log\" , \"Recovery point_Log\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | project BackupItemUniqueId_s, JobUniqueId_g , JobStatus_s, JobDurationInSecs_s, ProtectedContainerUniqueId_s; let Table1 = Jobs | join kind=leftouter ( ContainerIdNameMap ) on ProtectedContainerUniqueId_s; let Table2 = Table1 | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s; let Selection = Table2 | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where BackupItemFriendlyName_s !=\"\" | summarize totalDurationInHrs = round(sum(todouble(JobDurationInSecs_s)/3600),2) by BackupItemUniqueId_s, BackupItemFriendlyName_s | sort by totalDurationInHrs desc | search {selected item} | join ( BackupIdNameMap ) on BackupItemFriendlyName_s; Selection | join(Jobs) on BackupItemUniqueId_s "
                               }
                            }
                         }
                      },
                      {
                         "Id":"LineChartBuilderBlade",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Jobs by Total Data Transferred",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Jobs by Total Data Transferred (MB)",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "LineChart":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\" ; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), TimeGenerated =columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs = Events| where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists (\"JobOperation_s\",\"\"), TimeGenerated = columnifexists (\"TimeGenerated\", \"\"), JobUniqueId_g = columnifexists (\"JobUniqueId_g\",\"\"), DataTransferredInMB_s = columnifexists(\"DataTransferredInMB_s\", \"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\")| where JobOperation_s==\"Backup\" | where JobOperationSubType_s !in~(\"Log\", \"Recovery point_Log\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g; Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\", \"BackupItemType_s\") | where ${DatasourceType} | summarize sum(todouble(DataTransferredInMB_s)) by bin(TimeGenerated, 1d), JobOperation_s",
                               "yAxis":{
                                  "isLogarithmic":false,
                                  "units":{
                                     "baseUnitType":"",
                                     "baseUnit":"",
                                     "displayUnit":""
                                  },
                                  "customLabel":""
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":" let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s, BackupItemFriendlyName_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs = Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") , JobOperation_s = columnifexists(\"JobOperation_s\", \"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\") , TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), DataTransferredInMB_s = columnifexists(\"DataTransferredInMB_s\", \"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s==\"Backup\" | where JobOperationSubType_s !in~(\"Log\" , \"Recovery point_Log\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g; Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s1\",\"BackupItemFriendlyName_s\") | where ${DatasourceType} | summarize totalDataTransferred=sum(todouble(DataTransferredInMB_s)) by BackupItemUniqueId_s, BackupItemFriendlyName | sort by totalDataTransferred desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Backup Item ID",
                                  "Value":"Total Data Transferred (MB)"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":" let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let Jobs = Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\") , ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\", \"\") , JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), DataTransferredInMB_s = columnifexists(\"DataTransferredInMB_s\",\"\") | extend JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\", \"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s, BackupItemFriendlyName_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let JobsWithTotalDataTransferred = Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | where JobOperation_s==\"Backup\" | where JobOperationSubType_s !in~(\"Log\",\"Recovery point_Log\") | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s1\",\"BackupItemFriendlyName_s\") | where ${DatasourceType} | summarize totalDataTransferred=sum(todouble(DataTransferredInMB_s)) by BackupItemUniqueId_s, BackupItemFriendlyName | sort by totalDataTransferred desc | search {selected item}; JobsWithTotalDataTransferred | join(Jobs| where JobOperation_s==\"Backup\" | where JobOperationSubType_s !in~(\"Log\",\"Recovery point_Log\")) on BackupItemUniqueId_s | project JobUniqueId_g, TimeGenerated, DataTransferredInMB_s, JobStatus_s, ProtectedContainerUniqueId_s, BackupItemUniqueId_s, BackupItemFriendlyName, JobOperation_s",
                               "NavigationSelect":{
                                  "NavigationQuery":" let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let Jobs = Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\") , ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\", \"\") , JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), DataTransferredInMB_s = columnifexists(\"DataTransferredInMB_s\",\"\") | extend JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\", \"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s, BackupItemFriendlyName_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let JobsWithTotalDataTransferred = Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | where JobOperation_s==\"Backup\" | where JobOperationSubType_s !in~(\"Log\",\"Recovery point_Log\") | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s1\",\"BackupItemFriendlyName_s\") | where ${DatasourceType} | summarize totalDataTransferred=sum(todouble(DataTransferredInMB_s)) by BackupItemUniqueId_s, BackupItemFriendlyName | sort by totalDataTransferred desc | search {selected item}; JobsWithTotalDataTransferred | join(Jobs| where JobOperation_s==\"Backup\" | where JobOperationSubType_s !in~(\"Log\",\"Recovery point_Log\")) on BackupItemUniqueId_s | project JobUniqueId_g, TimeGenerated, DataTransferredInMB_s, JobStatus_s, ProtectedContainerUniqueId_s, BackupItemUniqueId_s, BackupItemFriendlyName, JobOperation_s"
                               }
                            }
                         }
                      },
                      {
                         "Id":"LineChartBuilderBlade",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Failed Backup Job Count Per Day",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Failed Backup Job Count Per Day",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "LineChart":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\", \"\"), BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s , BackupItemType_s, BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs= Events | where OperationName == \"Job\" | extend JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\")| where JobStatus_s == \"Failed\" | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s == \"Backup\" and JobOperationSubType_s !in~(\"Log\" , \"Recovery point_Log\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | extend timeOfJob = TimeGenerated; let FailedBackupJobs = Jobs | join kind=leftouter ( BackupIdNameMap | extend BackupItemFriendlyName=BackupItemFriendlyName_s ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} ; FailedBackupJobs | extend JobDate = format_datetime(timeOfJob, \"MM/dd/yy\") | summarize count(JobUniqueId_g) by BackupItemUniqueId_s, BackupItemFriendlyName, JobDate, timeOfJob | project timeOfJob, BackupItemFriendlyName, JobDate, FailedBackupJobCount=count_JobUniqueId_g | sort by JobDate asc | summarize sum(toint(FailedBackupJobCount)) by bin(timeOfJob, 1d)",
                               "yAxis":{
                                  "isLogarithmic":false,
                                  "units":{
                                     "baseUnitType":"",
                                     "baseUnit":"",
                                     "displayUnit":""
                                  },
                                  "customLabel":""
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\") , BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s , BackupItemType_s, BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs= Events | where OperationName == \"Job\" | extend JobStatus_s = columnifexists(\"JobStatus_s\", \"\"),BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists (\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\")| where JobStatus_s == \"Failed\" | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s == \"Backup\" and JobOperationSubType_s !in~(\"Log\" , \"Recovery point_Log\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | extend timeOfJob = TimeGenerated; let FailedBackupJobs = Jobs | join kind=leftouter ( BackupIdNameMap | extend BackupItemFriendlyName=BackupItemFriendlyName_s ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} ; FailedBackupJobs | extend Job_Date = format_datetime(TimeGenerated, \"MM/dd/yy\") | summarize count(JobUniqueId_g) by BackupItemFriendlyName, BackupItemUniqueId_s, Job_Date | project BackupItemUniqueId_s, BackupItemFriendlyName, Job_Date, FailedBackupJobCount=count_JobUniqueId_g | sort by Job_Date asc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Backup Item Id",
                                  "Value":"#Failed Jobs"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\" | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\") | where ${DatasourceType}; let Jobs = Events| where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists (\"JobOperation_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobStatus_s == \"Failed\" | where JobOperation_s == \"Backup\" and JobOperationSubType_s !in~(\"Log\",\"Recovery point_Log\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | extend timeOfJob = TimeGenerated; let BackupIdNameMap = BackupItems |extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s , BackupItemUniqueId_s, BackupItemType_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let FailedBackupJobs = Jobs | join kind=leftouter ( BackupIdNameMap | extend BackupItemFriendlyName=BackupItemFriendlyName_s ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} ; FailedBackupJobs | extend Job_Date = format_datetime(timeOfJob, \"MM/dd/yy\") | summarize count(JobUniqueId_g) by BackupItemUniqueId_s, BackupItemFriendlyName, Job_Date, ProtectedContainerUniqueId_s, timeOfJob | project BackupItemUniqueId_s,BackupItemFriendlyName, Job_Date, ProtectedContainerUniqueId_s, timeOfJob| sort by Job_Date desc | search {selected item}",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\" | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\") | where ${DatasourceType}; let Jobs = Events| where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists (\"JobOperation_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobStatus_s == \"Failed\" | where JobOperation_s == \"Backup\" and JobOperationSubType_s !in~(\"Log\",\"Recovery point_Log\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | extend timeOfJob = TimeGenerated; let BackupIdNameMap = BackupItems |extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s , BackupItemUniqueId_s, BackupItemType_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let FailedBackupJobs = Jobs | join kind=leftouter ( BackupIdNameMap | extend BackupItemFriendlyName=BackupItemFriendlyName_s ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} ; FailedBackupJobs | extend Job_Date = format_datetime(timeOfJob, \"MM/dd/yy\") | summarize count(JobUniqueId_g) by BackupItemUniqueId_s, BackupItemFriendlyName, Job_Date, ProtectedContainerUniqueId_s, timeOfJob | project BackupItemUniqueId_s,BackupItemFriendlyName, Job_Date, ProtectedContainerUniqueId_s, timeOfJob| sort by Job_Date desc | search {selected item}"
                               }
                            }
                         }
                      },
                      {
                         "Id":"LineChartBuilderBlade",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Successful Backup Job Count Per Day",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Successful Backup Job Count Per Day",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "LineChart":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s, BackupItemType_s, BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs= Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\")| where JobStatus_s == \"Completed\" | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s == \"Backup\" and JobOperationSubType_s !in~(\"Log\" , \"Recovery point_Log\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | extend timeOfJob = TimeGenerated; let SuccessfulBackupJobs = Jobs | join kind=leftouter ( BackupIdNameMap | extend BackupItemFriendlyName=BackupItemFriendlyName_s ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} ; SuccessfulBackupJobs | extend JobDate = format_datetime(TimeGenerated, \"MM/dd/yy\") | summarize count(JobUniqueId_g) by BackupItemUniqueId_s, BackupItemFriendlyName, JobDate, timeOfJob | project timeOfJob, BackupItemFriendlyName, JobDate, SuccessfulBackupJobCount=count_JobUniqueId_g | sort by JobDate asc | summarize sum(SuccessfulBackupJobCount) by bin(timeOfJob, 1d)",
                               "yAxis":{
                                  "isLogarithmic":false,
                                  "units":{
                                     "baseUnitType":"",
                                     "baseUnit":"",
                                     "displayUnit":""
                                  },
                                  "customLabel":""
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"); let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), BackupItem_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project BackupItem_TimeGenerated, BackupItemFriendlyName_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let Jobs= Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\", \"\"), Job_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\", \"\") | where JobStatus_s == \"Completed\" | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s == \"Backup\" and JobOperationSubType_s !in~(\"Log\" , \"Recovery point_Log\") | summarize arg_max(Job_TimeGenerated, *) by JobUniqueId_g | extend timeOfJob = Job_TimeGenerated; let SuccessfulBackupJobs = Jobs | join kind=leftouter ( BackupIdNameMap | extend BackupItemFriendlyName=BackupItemFriendlyName_s ) on BackupItemUniqueId_s | where ${DatasourceType}; SuccessfulBackupJobs | extend Job_Date = format_datetime(Job_TimeGenerated, \"MM/dd/yy\") | summarize count(JobUniqueId_g) by BackupItemUniqueId_s, BackupItemFriendlyName, Job_Date | project BackupItemUniqueId_s, BackupItemFriendlyName, Job_Date, SuccessfulBackupJobCount=count_JobUniqueId_g | sort by Job_Date desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Backup Item ID",
                                  "Value":"#Successful Jobs"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":" let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"); let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), BackupItem_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project BackupItem_TimeGenerated, BackupItemFriendlyName_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let Jobs= Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\", \"\"), Job_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\", \"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\")| where JobStatus_s == \"Completed\" | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s == \"Backup\" and JobOperationSubType_s !in~(\"Log\" , \"Recovery point_Log\") | summarize arg_max(Job_TimeGenerated, *) by JobUniqueId_g | extend timeOfJob = Job_TimeGenerated; let SuccessfulBackupJobs = Jobs | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s | where ${DatasourceType}; SuccessfulBackupJobs | extend Job_Date = format_datetime(Job_TimeGenerated, \"MM/dd/yy\") | summarize count() by BackupItemUniqueId_s, BackupItemFriendlyName=columnifexists(\"BackupItemFriendlyName_s1\",\"BackupItemFriendlyName_s\"), Job_Date, timeOfJob, JobUniqueId_g, JobStatus_s, ProtectedContainerUniqueId_s | sort by Job_Date desc | search {selected item}",
                               "NavigationSelect":{
                                  "NavigationQuery":" let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"); let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), BackupItem_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project BackupItem_TimeGenerated, BackupItemFriendlyName_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let Jobs= Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\", \"\"), Job_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\", \"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\")| where JobStatus_s == \"Completed\" | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s == \"Backup\" and JobOperationSubType_s !in~(\"Log\" , \"Recovery point_Log\") | summarize arg_max(Job_TimeGenerated, *) by JobUniqueId_g | extend timeOfJob = Job_TimeGenerated; let SuccessfulBackupJobs = Jobs | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s | where ${DatasourceType}; SuccessfulBackupJobs | extend Job_Date = format_datetime(Job_TimeGenerated, \"MM/dd/yy\") | summarize count() by BackupItemUniqueId_s, BackupItemFriendlyName=columnifexists(\"BackupItemFriendlyName_s1\",\"BackupItemFriendlyName_s\"), Job_Date, timeOfJob, JobUniqueId_g, JobStatus_s, ProtectedContainerUniqueId_s | sort by Job_Date desc | search {selected item}"
                               }
                            }
                         }
                      },
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Failed Jobs by Failure Code",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Failed jobs by Failure Code",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "Donut":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), TimeGenerated =columnifexists (\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs= Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobFailureCode_s = columnifexists(\"JobFailureCode_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobStatus_s == \"Failed\" | where JobOperation_s==\"Backup\" | where JobOperationSubType_s !in~(\"Log\",\"Recovery point_Log\") | where JobUniqueId_g!=\"\"; Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count(JobUniqueId_g) by JobFailureCode_s | sort by count_JobUniqueId_g desc",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
 
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), TimeGenerated =columnifexists (\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs= Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobFailureCode_s = columnifexists(\"JobFailureCode_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobStatus_s == \"Failed\" | where JobOperation_s==\"Backup\" | where JobOperationSubType_s !in~(\"Log\",\"Recovery point_Log\") | where JobUniqueId_g!=\"\"; Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count(JobUniqueId_g) by JobFailureCode_s | sort by count_JobUniqueId_g desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Failure Code",
                                  "Value":"No of Jobs"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), TimeGenerated =columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs=Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") , JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobFailureCode_s = columnifexists(\"JobFailureCode_s\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobStatus_s == \"Failed\" | where JobOperation_s==\"Backup\" | where JobOperationSubType_s !in~(\"Log\" ,\"Recovery point_Log\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | where JobUniqueId_g!=\"\"; Jobs | join kind=leftouter (BackupIdTypeMap) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where {selected item}",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), TimeGenerated =columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs=Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") , JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobFailureCode_s = columnifexists(\"JobFailureCode_s\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobStatus_s == \"Failed\" | where JobOperation_s==\"Backup\" | where JobOperationSubType_s !in~(\"Log\" ,\"Recovery point_Log\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | where JobUniqueId_g!=\"\"; Jobs | join kind=leftouter (BackupIdTypeMap) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where {selected item}"
                               }
                            }
                         }
                      },
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Jobs by Job Creation Time",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Jobs by Job Creation Time",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "Donut":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s= columnifexists(\"BackupItemType_s\",\"\"), BackupItem_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project BackupItem_TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let Jobs = Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\", \"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), Job_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobUniqueId_g!=\"\" | summarize arg_max(Job_TimeGenerated, *) by JobUniqueId_g | where JobOperation_s==\"Backup\" | where JobOperationSubType_s !in~(\"Log\" , \"Recovery point_Log\") ; Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | extend timeOfDay=datetime_part(\"Hour\",Job_TimeGenerated) | summarize count(JobUniqueId_g) by bin(timeOfDay,3) | extend timeBucketStart24 = iff(timeOfDay-1.5>0,timeOfDay-1.5,timeOfDay-1.5+24), timeBucketEnd24=iff(timeOfDay+1.5<24,timeOfDay+1.5,timeOfDay+1.5-24) | extend timeBucketStart12=iff(timeBucketStart24>12,timeBucketStart24-12, timeBucketStart24) , timeBucketStartMeridian = iff(timeBucketStart24<12,\"AM\", iff(timeBucketStart24<24,\"PM\",\"AM\")), timeBucketEnd12=iff(timeBucketEnd24>12,timeBucketEnd24-12, timeBucketEnd24) , timeBucketEndMeridian = iff(timeBucketEnd24<12,\"AM\", iff(timeBucketEnd24<24,\"PM\",\"AM\")) | project timeBucketStart24, timeBucketStart12 , timeBucketEnd12 , timeBucketStartMeridian , timeBucketEndMeridian , count_JobUniqueId_g | extend timeBucketStartHr=toint(timeBucketStart12), timeBucketStartMin=toint((timeBucketStart12-floor(timeBucketStart12,1))*60), timeBucketEndHr=toint(timeBucketEnd12), timeBucketEndMin=toint((timeBucketEnd12-floor(timeBucketEnd12,1))*60) | extend timeBucketStartMinString=iff(timeBucketStartMin>9,tostring(timeBucketStartMin),iff(timeBucketStartMin>0,strcat(\"0\",timeBucketStartMin), \"00\")), timeBucketEndMinString=iff(timeBucketEndMin>9,tostring(timeBucketEndMin),iff(timeBucketEndMin>0,strcat(\"0\",timeBucketEndMin), \"00\")) | extend timeBucketString = strcat(tostring(timeBucketStartHr),\":\",timeBucketStartMinString,timeBucketStartMeridian, \"-\",tostring(timeBucketEndHr), \":\", timeBucketEndMinString,timeBucketEndMeridian) | summarize noOfJobs=sum(count_JobUniqueId_g) by timeBucketString | sort by noOfJobs desc",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
 
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s= columnifexists(\"BackupItemType_s\",\"\"), BackupItem_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project BackupItem_TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let Jobs = Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\", \"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), Job_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobUniqueId_g!=\"\" | summarize arg_max(Job_TimeGenerated, *) by JobUniqueId_g | where JobOperation_s==\"Backup\" | where JobOperationSubType_s !in~(\"Log\" , \"Recovery point_Log\") ; Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | extend timeOfDay=datetime_part(\"Hour\",Job_TimeGenerated) | summarize count(JobUniqueId_g) by bin(timeOfDay,3) | extend timeBucketStart24 = iff(timeOfDay-1.5>0,timeOfDay-1.5,timeOfDay-1.5+24), timeBucketEnd24=iff(timeOfDay+1.5<24,timeOfDay+1.5,timeOfDay+1.5-24) | extend timeBucketStart12=iff(timeBucketStart24>12,timeBucketStart24-12, timeBucketStart24) , timeBucketStartMeridian = iff(timeBucketStart24<12,\"AM\", iff(timeBucketStart24<24,\"PM\",\"AM\")), timeBucketEnd12=iff(timeBucketEnd24>12,timeBucketEnd24-12, timeBucketEnd24) , timeBucketEndMeridian = iff(timeBucketEnd24<12,\"AM\", iff(timeBucketEnd24<24,\"PM\",\"AM\")) | project timeBucketStart24, timeBucketStart12 , timeBucketEnd12 , timeBucketStartMeridian , timeBucketEndMeridian , count_JobUniqueId_g | extend timeBucketStartHr=toint(timeBucketStart12), timeBucketStartMin=toint((timeBucketStart12-floor(timeBucketStart12,1))*60), timeBucketEndHr=toint(timeBucketEnd12), timeBucketEndMin=toint((timeBucketEnd12-floor(timeBucketEnd12,1))*60) | extend timeBucketStartMinString=iff(timeBucketStartMin>9,tostring(timeBucketStartMin),iff(timeBucketStartMin>0,strcat(\"0\",timeBucketStartMin), \"00\")), timeBucketEndMinString=iff(timeBucketEndMin>9,tostring(timeBucketEndMin),iff(timeBucketEndMin>0,strcat(\"0\",timeBucketEndMin), \"00\")) | extend timeBucketString = strcat(tostring(timeBucketStartHr),\":\",timeBucketStartMinString,timeBucketStartMeridian, \"-\",tostring(timeBucketEndHr), \":\", timeBucketEndMinString,timeBucketEndMeridian) | summarize noOfJobs=sum(count_JobUniqueId_g) by timeBucketString | sort by noOfJobs desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Time of Day",
                                  "Value":"No of Jobs"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName == \"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists(\"BackupItemType_s\", \"\"), BackupItem_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs = Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") , JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), Job_TimeGenerated= columnifexists(\"TimeGenerated\",\"\"), ProtectedContainerUniqueId_s=columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobUniqueId_g!=\"\" | where JobOperation_s==\"Backup\" | where JobOperationSubType_s !in~(\"Log\" ,\"Recovery point_Log\") | summarize arg_max(Job_TimeGenerated, *) by JobUniqueId_g; let JobsWithTimeBucket = Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | extend timeOfDay=datetime_part(\"Hour\",Job_TimeGenerated) | summarize count(JobUniqueId_g) by bin(timeOfDay,3), JobUniqueId_g, BackupItemUniqueId_s, ProtectedContainerUniqueId_s, JobStatus_s | extend timeBucketStart24 = iff(timeOfDay-1.5>0,timeOfDay-1.5,timeOfDay-1.5+24), timeBucketEnd24=iff(timeOfDay+1.5<24,timeOfDay+1.5,timeOfDay+1.5-24) | extend timeBucketStart12=iff(timeBucketStart24>12,timeBucketStart24-12, timeBucketStart24) , timeBucketStartMeridian = iff(timeBucketStart24<12,\"AM\", iff(timeBucketStart24<24,\"PM\",\"AM\")), timeBucketEnd12=iff(timeBucketEnd24>12,timeBucketEnd24-12, timeBucketEnd24) , timeBucketEndMeridian = iff(timeBucketEnd24<12,\"AM\", iff(timeBucketEnd24<24,\"PM\",\"AM\")) | extend timeBucketStartHr=toint(timeBucketStart12), timeBucketStartMin=toint((timeBucketStart12-floor(timeBucketStart12,1))*60), timeBucketEndHr=toint(timeBucketEnd12), timeBucketEndMin=toint((timeBucketEnd12-floor(timeBucketEnd12,1))*60) | extend timeBucketStartMinString=iff(timeBucketStartMin>9,tostring(timeBucketStartMin),iff(timeBucketStartMin>0,strcat(\"0\",timeBucketStartMin), \"00\")), timeBucketEndMinString=iff(timeBucketEndMin>9,tostring(timeBucketEndMin),iff(timeBucketEndMin>0,strcat(\"0\",timeBucketEndMin), \"00\")) | extend timeBucketString = strcat(tostring(timeBucketStartHr),\":\",timeBucketStartMinString,timeBucketStartMeridian, \"-\",tostring(timeBucketEndHr), \":\", timeBucketEndMinString,timeBucketEndMeridian) | sort by count_JobUniqueId_g desc; let Selection=JobsWithTimeBucket | search {selected item}; Selection | join( JobsWithTimeBucket) on timeBucketString | project TimeOfDay=timeBucketString, JobUniqueId_g, BackupItemUniqueId_s, ProtectedContainerUniqueId_s, JobStatus_s",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName == \"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists(\"BackupItemType_s\", \"\"), BackupItem_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs = Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") , JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), Job_TimeGenerated= columnifexists(\"TimeGenerated\",\"\"), ProtectedContainerUniqueId_s=columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobUniqueId_g!=\"\" | where JobOperation_s==\"Backup\" | where JobOperationSubType_s !in~(\"Log\" ,\"Recovery point_Log\") | summarize arg_max(Job_TimeGenerated, *) by JobUniqueId_g; let JobsWithTimeBucket = Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | extend timeOfDay=datetime_part(\"Hour\",Job_TimeGenerated) | summarize count(JobUniqueId_g) by bin(timeOfDay,3), JobUniqueId_g, BackupItemUniqueId_s, ProtectedContainerUniqueId_s, JobStatus_s | extend timeBucketStart24 = iff(timeOfDay-1.5>0,timeOfDay-1.5,timeOfDay-1.5+24), timeBucketEnd24=iff(timeOfDay+1.5<24,timeOfDay+1.5,timeOfDay+1.5-24) | extend timeBucketStart12=iff(timeBucketStart24>12,timeBucketStart24-12, timeBucketStart24) , timeBucketStartMeridian = iff(timeBucketStart24<12,\"AM\", iff(timeBucketStart24<24,\"PM\",\"AM\")), timeBucketEnd12=iff(timeBucketEnd24>12,timeBucketEnd24-12, timeBucketEnd24) , timeBucketEndMeridian = iff(timeBucketEnd24<12,\"AM\", iff(timeBucketEnd24<24,\"PM\",\"AM\")) | extend timeBucketStartHr=toint(timeBucketStart12), timeBucketStartMin=toint((timeBucketStart12-floor(timeBucketStart12,1))*60), timeBucketEndHr=toint(timeBucketEnd12), timeBucketEndMin=toint((timeBucketEnd12-floor(timeBucketEnd12,1))*60) | extend timeBucketStartMinString=iff(timeBucketStartMin>9,tostring(timeBucketStartMin),iff(timeBucketStartMin>0,strcat(\"0\",timeBucketStartMin), \"00\")), timeBucketEndMinString=iff(timeBucketEndMin>9,tostring(timeBucketEndMin),iff(timeBucketEndMin>0,strcat(\"0\",timeBucketEndMin), \"00\")) | extend timeBucketString = strcat(tostring(timeBucketStartHr),\":\",timeBucketStartMinString,timeBucketStartMeridian, \"-\",tostring(timeBucketEndHr), \":\", timeBucketEndMinString,timeBucketEndMeridian) | sort by count_JobUniqueId_g desc; let Selection=JobsWithTimeBucket | search {selected item}; Selection | join( JobsWithTimeBucket) on timeBucketString | project TimeOfDay=timeBucketString, JobUniqueId_g, BackupItemUniqueId_s, ProtectedContainerUniqueId_s, JobStatus_s"
                               }
                            }
                         }
                      },
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Jobs by Job Duration",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Jobs by Job Duration",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "Donut":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItem_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project BackupItem_TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let Jobs = Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists (\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\") , Job_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobDurationInSecs_s = columnifexists(\"JobDurationInSecs_s\", \"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s==\"Backup\" | where JobOperationSubType_s !in~(\"Log\" , \"Recovery point_Log\") |summarize arg_max(Job_TimeGenerated,*) by JobUniqueId_g ; Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count(JobUniqueId_g) by bin(todouble(JobDurationInSecs_s), 600) | extend JobDurationInMin = todouble(JobDurationInSecs_s) / 60 | extend JobDurationLowerLimit=iff(JobDurationInMin>5,JobDurationInMin - 5,todouble(0)), JobDurationUpperLimit = JobDurationInMin + 5 | extend JobDurationString=strcat(tostring(JobDurationLowerLimit),\" to \",tostring(JobDurationUpperLimit), \" min\") | summarize noOfJobs= sum(count_JobUniqueId_g) by JobDurationString | sort by noOfJobs desc",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
 
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItem_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project BackupItem_TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let Jobs = Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists (\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\") , Job_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobDurationInSecs_s = columnifexists(\"JobDurationInSecs_s\", \"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s==\"Backup\" | where JobOperationSubType_s !in~(\"Log\" , \"Recovery point_Log\") |summarize arg_max(Job_TimeGenerated,*) by JobUniqueId_g ; Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count(JobUniqueId_g) by bin(todouble(JobDurationInSecs_s), 600) | extend JobDurationInMin = todouble(JobDurationInSecs_s) / 60 | extend JobDurationLowerLimit=iff(JobDurationInMin>5,JobDurationInMin - 5,todouble(0)), JobDurationUpperLimit = JobDurationInMin + 5 | extend JobDurationString=strcat(tostring(JobDurationLowerLimit),\" to \",tostring(JobDurationUpperLimit), \" min\") | summarize noOfJobs= sum(count_JobUniqueId_g) by JobDurationString | sort by noOfJobs desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Job Duration",
                                  "Value":"No of Jobs"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let Jobs = Events | where OperationName == \"Job\" | extend JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), Job_TimeGenerated = columnifexists(\"TimeGenerated\", \"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobDurationInSecs_s = columnifexists(\"JobDurationInSecs_s\",\"\"), ProtectedContainerUniqueId_s =columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), JobStatus_s=columnifexists(\"JobStatus_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | summarize arg_max(Job_TimeGenerated,*) by JobUniqueId_g; let BackupIdTypeMap = BackupItems |extend BackupItem_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project BackupItem_TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let JobsWithDurationString = Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | where JobOperation_s==\"Backup\" | where JobOperationSubType_s !in~(\"Log\" ,\"Recovery point_Log\") | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count(JobUniqueId_g) by bin(todouble(JobDurationInSecs_s), 600), JobUniqueId_g, BackupItemUniqueId_s, ProtectedContainerUniqueId_s, JobStatus_s | extend JobDurationInMin = todouble(JobDurationInSecs_s) / 60 | extend JobDurationLowerLimit=iff(JobDurationInMin>5,JobDurationInMin - 5,todouble(0)), JobDurationUpperLimit = JobDurationInMin + 5 | extend JobDurationString=strcat(tostring(JobDurationLowerLimit),\" to \",tostring(JobDurationUpperLimit), \" min\") | sort by count_JobUniqueId_g desc; let Selection = JobsWithDurationString | search {selected item}; Selection | join ( JobsWithDurationString ) on JobDurationString | project JobDurationString,JobUniqueId_g, JobStatus_s, BackupItemUniqueId_s, ProtectedContainerUniqueId_s ",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let Jobs = Events | where OperationName == \"Job\" | extend JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), Job_TimeGenerated = columnifexists(\"TimeGenerated\", \"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobDurationInSecs_s = columnifexists(\"JobDurationInSecs_s\",\"\"), ProtectedContainerUniqueId_s =columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), JobStatus_s=columnifexists(\"JobStatus_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | summarize arg_max(Job_TimeGenerated,*) by JobUniqueId_g; let BackupIdTypeMap = BackupItems |extend BackupItem_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project BackupItem_TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let JobsWithDurationString = Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | where JobOperation_s==\"Backup\" | where JobOperationSubType_s !in~(\"Log\" ,\"Recovery point_Log\") | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count(JobUniqueId_g) by bin(todouble(JobDurationInSecs_s), 600), JobUniqueId_g, BackupItemUniqueId_s, ProtectedContainerUniqueId_s, JobStatus_s | extend JobDurationInMin = todouble(JobDurationInSecs_s) / 60 | extend JobDurationLowerLimit=iff(JobDurationInMin>5,JobDurationInMin - 5,todouble(0)), JobDurationUpperLimit = JobDurationInMin + 5 | extend JobDurationString=strcat(tostring(JobDurationLowerLimit),\" to \",tostring(JobDurationUpperLimit), \" min\") | sort by count_JobUniqueId_g desc; let Selection = JobsWithDurationString | search {selected item}; Selection | join ( JobsWithDurationString ) on JobDurationString | project JobDurationString,JobUniqueId_g, JobStatus_s, BackupItemUniqueId_s, ProtectedContainerUniqueId_s "
                               }
                            }
                         }
                      }
                   ],
                   "Filters":[
                      {
                         "FieldName":"BackupItemType_s",
                         "QueryForValues":"AzureDiagnostics | where Category == \"AzureBackupReport\" |distinct BackupItemType_s",
                         "Title":"DatasourceType"
                      }
                   ],
                   "OverviewTile":{
                      "Id":"SingleQueryDonutBuilderTileV1",
                      "Type":"OverviewTile",
                      "Version":2,
                      "Configuration":{
                         "Donut":{
                            "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; Events | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where OperationName == \"Job\" | extend JobOperation_s=columnifexists(\"JobOperation_s\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\") | where JobOperation_s == \"Backup\" and JobOperationSubType_s !in~(\"Log\",\"Recovery point_Log\") | summarize dcount(JobUniqueId_g) by JobStatus_s ",
                            "CenterLegend":{
                               "Text":"Total",
                               "Operation":"Sum",
                               "ArcsToSelect":[
 
                               ]
                            },
                            "Options":{
                               "colors":[
                                  "#00188f",
                                  "#0072c6",
                                  "#00bcf2"
                               ],
                               "valueColorMapping":[
                                  {
                                     "value":"Completed",
                                     "color":"#55d455"
                                  },
                                  {
                                     "value":"Failed",
                                     "color":"#e81123"
                                  },
                                  {
                                     "value":"CompletedWithWarnings",
                                     "color":"#ffb900"
                                  }
                               ]
                            }
                         },
                         "Advanced":{
                            "DataFlowVerification":{
                               "Enabled":false,
                               "Query":"search * | limit 1 | project TimeGenerated",
                               "Message":""
                            }
                         }
                      }
                   }
                }
             },
             {
                "apiVersion":"2015-11-01-preview",
                "name": "[concat(parameters('workspaceName'), '/', 'Backup Jobs (Log)')]",
                "type":"Microsoft.OperationalInsights/workspaces/views",
                "location":"[parameters('workspaceLocation')]",
                "properties":{
                   "Id":"Backup Jobs (Log)",
                   "Name":"[variables('omsSolutions').customSolution.view2]",
                   "Author":"[variables('omsSolutions').customSolution.author]",
                   "Source":"Local",
                   "Version":2,
                   "Dashboard":[
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Jobs by Job Status",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Jobs by Job Status",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "Donut":{
                               "Query":" let Events= AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\" | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"); let Jobs = Events | where OperationName == \"Job\" |extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"); Jobs | extend TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobOperation_s = columnifexists (\"JobOperation_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\") | summarize arg_max(TimeGenerated,*) by JobUniqueId_g | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s == \"Backup\" and JobOperationSubType_s in~(\"Log\", \"Recovery point_Log\") | join kind=leftouter ( BackupItems ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize AggregatedValue = dcount(JobUniqueId_g) by JobStatus_s | order by AggregatedValue desc",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
                                     {
                                        "value":"Completed",
                                        "color":"#55d455"
                                     },
                                     {
                                        "value":"Failed",
                                        "color":"#eb3c00"
                                     },
                                     {
                                        "value":"CompletedWithWarnings",
                                        "color":"#ffb900"
                                     }
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":" let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let Jobs = Events | where OperationName ==\"Job\" | extend BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"); let BackupItems = Events | where OperationName ==\"BackupItem\" | extend BackupItemType_s= columnifexists (\"BackupItemType_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"); Jobs | extend JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), Resource = columnifexists(\"Resource\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s == \"Backup\" and JobOperationSubType_s in~(\"Log\",\"Recovery point_Log\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | project BackupItemUniqueId_s, JobStatus_s, Resource | join kind=leftouter ( BackupItems | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s ) on BackupItemUniqueId_s| where ${DatasourceType} | project BackupItemFriendlyName_s, BackupItemUniqueId_s, JobStatus_s, Vault=Resource | summarize count() by BackupItemUniqueId_s , BackupItemFriendlyName_s, JobStatus_s, Vault | order by count_ desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "ColumnsTitle":{
                                  "Name":"Backup Item ID",
                                  "Value":"No of Jobs"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events=AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let Jobs = Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"); let BackupItems = Events | where OperationName == \"BackupItem\" | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\" , \"\"); let ProtectedContainers = Events | where OperationName == \"ProtectedContainer\" | extend ProtectedContainerFriendlyName_s = columnifexists(\"ProtectedContainerFriendlyName_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists (\"ProtectedContainerUniqueId_s\",\"\"); Jobs | extend JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode_s = columnifexists(\"JobFailureCode_s\",\"\"), Resource = columnifexists(\"Resource\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s == \"Backup\" and JobOperationSubType_s in~(\"Log\",\"Recovery point_Log\") | summarize arg_max(TimeGenerated,*) by JobUniqueId_g | project BackupItemUniqueId_s, ProtectedContainerUniqueId_s, JobStatus_s, Resource, JobFailureCode_s | join kind=leftouter ( BackupItems | summarize arg_max(TimeGenerated,*) by BackupItemUniqueId_s | project BackupItemUniqueId_s , BackupItemFriendlyName_s, BackupItemType_s ) on BackupItemUniqueId_s | join kind=leftouter ( ProtectedContainers | summarize arg_max(TimeGenerated,*) by ProtectedContainerUniqueId_s | project ProtectedContainerUniqueId_s , ProtectedContainerFriendlyName_s ) on ProtectedContainerUniqueId_s | project BackupItemFriendlyName_s, BackupItemUniqueId_s , ProtectedContainerFriendlyName_s, BackupItemType_s, JobStatus_s, Vault=Resource, JobFailureCode_s | where {selected item}",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events=AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let Jobs = Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"); let BackupItems = Events | where OperationName == \"BackupItem\" | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\" , \"\"); let ProtectedContainers = Events | where OperationName == \"ProtectedContainer\" | extend ProtectedContainerFriendlyName_s = columnifexists(\"ProtectedContainerFriendlyName_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists (\"ProtectedContainerUniqueId_s\",\"\"); Jobs | extend JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode_s = columnifexists(\"JobFailureCode_s\",\"\"), Resource = columnifexists(\"Resource\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s == \"Backup\" and JobOperationSubType_s in~(\"Log\",\"Recovery point_Log\") | summarize arg_max(TimeGenerated,*) by JobUniqueId_g | project BackupItemUniqueId_s, ProtectedContainerUniqueId_s, JobStatus_s, Resource, JobFailureCode_s | join kind=leftouter ( BackupItems | summarize arg_max(TimeGenerated,*) by BackupItemUniqueId_s | project BackupItemUniqueId_s , BackupItemFriendlyName_s, BackupItemType_s ) on BackupItemUniqueId_s | join kind=leftouter ( ProtectedContainers | summarize arg_max(TimeGenerated,*) by ProtectedContainerUniqueId_s | project ProtectedContainerUniqueId_s , ProtectedContainerFriendlyName_s ) on ProtectedContainerUniqueId_s | project BackupItemFriendlyName_s, BackupItemUniqueId_s , ProtectedContainerFriendlyName_s, BackupItemType_s, JobStatus_s, Vault=Resource, JobFailureCode_s | where {selected item}"
                               }
                            }
                         }
                      },
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Top 3 Backup Items by Job Duration",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Total Job Duration (Hrs)",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "Donut":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\" ; let BackupIdNameMap = BackupItems | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\") |where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemType_s, BackupItemFriendlyName_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let ContainerIdNameMap = Events | where OperationName == \"ProtectedContainer\" | extend ProtectedContainerFriendlyName_s = columnifexists(\"ProtectedContainerFriendlyName_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\") |where ProtectedContainerFriendlyName_s != \"\" | project TimeGenerated, ProtectedContainerFriendlyName_s , ProtectedContainerUniqueId_s | summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId_s; let Jobs = Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s= columnifexists (\"BackupItemUniqueId_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\") , JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated =columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobDurationInSecs_s = columnifexists(\"JobDurationInSecs_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s==\"Backup\" | where JobOperationSubType_s==\"Log\" or JobOperationSubType_s == \"Recovery point_Log\" | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | project BackupItemUniqueId_s, JobUniqueId_g , JobDurationInSecs_s, ProtectedContainerUniqueId_s; let Table1 = Jobs | join kind=leftouter ( ContainerIdNameMap ) on ProtectedContainerUniqueId_s; let Table2 = Table1 | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s; Table2 | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where BackupItemFriendlyName_s !=\"\" | summarize totalDurationInHrs = round(sum(todouble(JobDurationInSecs_s)/3600),2) by BackupItemUniqueId_s | sort by totalDurationInHrs desc",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
 
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") |where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemType_s, BackupItemFriendlyName_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let ContainerIdNameMap = Events | where OperationName==\"ProtectedContainer\" | extend ProtectedContainerFriendlyName_s = columnifexists(\"ProtectedContainerFriendlyName_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\") | where ProtectedContainerFriendlyName_s != \"\" | project TimeGenerated, ProtectedContainerFriendlyName_s , ProtectedContainerUniqueId_s | summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId_s; let Jobs = Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\") , JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobDurationInSecs_s = columnifexists(\"JobDurationInSecs_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s==\"Backup\" | where JobOperationSubType_s in~(\"Log\" , \"Recovery point_Log\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | project BackupItemUniqueId_s, JobUniqueId_g , JobDurationInSecs_s, ProtectedContainerUniqueId_s; let Table1 = Jobs | join kind=leftouter ( ContainerIdNameMap ) on ProtectedContainerUniqueId_s; let Table2 = Table1 | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s; Table2 | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where BackupItemFriendlyName_s !=\"\" | summarize totalDurationInHrs = round(sum(todouble(JobDurationInSecs_s)/3600),2) by BackupItemUniqueId_s, BackupItemFriendlyName_s | sort by totalDurationInHrs desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Backup Item ID",
                                  "Value":"Total Job Duration (hrs)"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists (\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemType_s, BackupItemFriendlyName_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let ContainerIdNameMap = Events | where OperationName ==\"ProtectedContainer\" | extend ProtectedContainerFriendlyName_s = columnifexists(\"ProtectedContainerFriendlyName_s\",\"\"), TimeGenerated = columnifexists (\"TimeGenerated\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\") |where ProtectedContainerFriendlyName_s != \"\" | project TimeGenerated, ProtectedContainerFriendlyName_s , ProtectedContainerUniqueId_s | summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId_s; let Jobs = Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\") , JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobDurationInSecs_s = columnifexists (\"JobDurationInSecs_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s==\"Backup\" | where JobOperationSubType_s in~(\"Log\" , \"Recovery point_Log\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | project BackupItemUniqueId_s, JobUniqueId_g , JobStatus_s, JobDurationInSecs_s, ProtectedContainerUniqueId_s; let Table1 = Jobs | join kind=leftouter ( ContainerIdNameMap ) on ProtectedContainerUniqueId_s; let Table2 = Table1 | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s; let Selection = Table2 | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where BackupItemFriendlyName_s !=\"\" | summarize totalDurationInHrs = round(sum(todouble(JobDurationInSecs_s)/3600),2) by BackupItemUniqueId_s, BackupItemFriendlyName_s | sort by totalDurationInHrs desc | search {selected item} | join ( BackupIdNameMap ) on BackupItemFriendlyName_s; Selection | join(Jobs) on BackupItemUniqueId_s ",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists (\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemType_s, BackupItemFriendlyName_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let ContainerIdNameMap = Events | where OperationName ==\"ProtectedContainer\" | extend ProtectedContainerFriendlyName_s = columnifexists(\"ProtectedContainerFriendlyName_s\",\"\"), TimeGenerated = columnifexists (\"TimeGenerated\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\") |where ProtectedContainerFriendlyName_s != \"\" | project TimeGenerated, ProtectedContainerFriendlyName_s , ProtectedContainerUniqueId_s | summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId_s; let Jobs = Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\") , JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobDurationInSecs_s = columnifexists (\"JobDurationInSecs_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s==\"Backup\" | where JobOperationSubType_s in~(\"Log\" , \"Recovery point_Log\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | project BackupItemUniqueId_s, JobUniqueId_g , JobStatus_s, JobDurationInSecs_s, ProtectedContainerUniqueId_s; let Table1 = Jobs | join kind=leftouter ( ContainerIdNameMap ) on ProtectedContainerUniqueId_s; let Table2 = Table1 | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s; let Selection = Table2 | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where BackupItemFriendlyName_s !=\"\" | summarize totalDurationInHrs = round(sum(todouble(JobDurationInSecs_s)/3600),2) by BackupItemUniqueId_s, BackupItemFriendlyName_s | sort by totalDurationInHrs desc | search {selected item} | join ( BackupIdNameMap ) on BackupItemFriendlyName_s; Selection | join(Jobs) on BackupItemUniqueId_s "
                               }
                            }
                         }
                      },
                      {
                         "Id":"LineChartBuilderBlade",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Jobs by Total Data Transferred",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Jobs by Total Data Transferred (MB)",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "LineChart":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\" ; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), TimeGenerated =columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs = Events| where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists (\"JobOperation_s\",\"\"), TimeGenerated = columnifexists (\"TimeGenerated\", \"\"), JobUniqueId_g = columnifexists (\"JobUniqueId_g\",\"\"), DataTransferredInMB_s = columnifexists(\"DataTransferredInMB_s\", \"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\")| where JobOperation_s==\"Backup\" | where JobOperationSubType_s==\"Log\" or JobOperationSubType_s == \"Recovery point_Log\" | summarize arg_max(TimeGenerated, *) by JobUniqueId_g; Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\", \"BackupItemType_s\") | where ${DatasourceType} | summarize sum(todouble(DataTransferredInMB_s)) by bin(TimeGenerated, 1d), JobOperation_s",
                               "yAxis":{
                                  "isLogarithmic":false,
                                  "units":{
                                     "baseUnitType":"",
                                     "baseUnit":"",
                                     "displayUnit":""
                                  },
                                  "customLabel":""
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":" let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s, BackupItemFriendlyName_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs = Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") , JobOperation_s = columnifexists(\"JobOperation_s\", \"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\") , TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), DataTransferredInMB_s = columnifexists(\"DataTransferredInMB_s\", \"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s==\"Backup\" | where JobOperationSubType_s in~(\"Log\" , \"Recovery point_Log\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g; Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s1\",\"BackupItemFriendlyName_s\") | where ${DatasourceType} | summarize totalDataTransferred=sum(todouble(DataTransferredInMB_s)) by BackupItemUniqueId_s, BackupItemFriendlyName | sort by totalDataTransferred desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Backup Item ID",
                                  "Value":"Total Data Transferred (MB)"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":" let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let Jobs = Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\") , ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\", \"\") , JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), DataTransferredInMB_s = columnifexists(\"DataTransferredInMB_s\",\"\") | extend JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\", \"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s, BackupItemFriendlyName_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let JobsWithTotalDataTransferred = Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | where JobOperation_s==\"Backup\" | where JobOperationSubType_s in~(\"Log\",\"Recovery point_Log\") | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s1\",\"BackupItemFriendlyName_s\") | where ${DatasourceType} | summarize totalDataTransferred=sum(todouble(DataTransferredInMB_s)) by BackupItemUniqueId_s, BackupItemFriendlyName | sort by totalDataTransferred desc | search {selected item}; JobsWithTotalDataTransferred | join(Jobs| where JobOperation_s==\"Backup\" | where JobOperationSubType_s in~(\"Log\",\"Recovery point_Log\")) on BackupItemUniqueId_s | project JobUniqueId_g, TimeGenerated, DataTransferredInMB_s, JobStatus_s, ProtectedContainerUniqueId_s, BackupItemUniqueId_s, BackupItemFriendlyName, JobOperation_s",
                               "NavigationSelect":{
                                  "NavigationQuery":" let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let Jobs = Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\") , ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\", \"\") , JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), DataTransferredInMB_s = columnifexists(\"DataTransferredInMB_s\",\"\") | extend JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\", \"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s, BackupItemFriendlyName_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let JobsWithTotalDataTransferred = Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | where JobOperation_s==\"Backup\" | where JobOperationSubType_s in~(\"Log\",\"Recovery point_Log\") | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s1\",\"BackupItemFriendlyName_s\") | where ${DatasourceType} | summarize totalDataTransferred=sum(todouble(DataTransferredInMB_s)) by BackupItemUniqueId_s, BackupItemFriendlyName | sort by totalDataTransferred desc | search {selected item}; JobsWithTotalDataTransferred | join(Jobs| where JobOperation_s==\"Backup\" | where JobOperationSubType_s in~(\"Log\",\"Recovery point_Log\")) on BackupItemUniqueId_s | project JobUniqueId_g, TimeGenerated, DataTransferredInMB_s, JobStatus_s, ProtectedContainerUniqueId_s, BackupItemUniqueId_s, BackupItemFriendlyName, JobOperation_s"
                               }
                            }
                         }
                      },
                      {
                         "Id":"LineChartBuilderBlade",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Failed Backup Job Count per day",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Failed Backup Job Count per day",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "LineChart":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\", \"\"), BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s , BackupItemType_s, BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs= Events | where OperationName == \"Job\" | extend JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\")| where JobStatus_s == \"Failed\" | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s == \"Backup\" and JobOperationSubType_s in~(\"Log\" , \"Recovery point_Log\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | extend timeOfJob = TimeGenerated; let FailedBackupJobs = Jobs | join kind=leftouter ( BackupIdNameMap | extend BackupItemFriendlyName=BackupItemFriendlyName_s ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} ; FailedBackupJobs | extend JobDate = format_datetime(timeOfJob, \"MM/dd/yy\") | summarize count(JobUniqueId_g) by BackupItemUniqueId_s, BackupItemFriendlyName, JobDate, timeOfJob | project timeOfJob, BackupItemFriendlyName, JobDate, FailedBackupJobCount=count_JobUniqueId_g | sort by JobDate asc | summarize sum(toint(FailedBackupJobCount)) by bin(timeOfJob, 1d)",
                               "yAxis":{
                                  "isLogarithmic":false,
                                  "units":{
                                     "baseUnitType":"",
                                     "baseUnit":"",
                                     "displayUnit":""
                                  },
                                  "customLabel":""
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\") , BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s , BackupItemType_s, BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs= Events | where OperationName == \"Job\" | extend JobStatus_s = columnifexists(\"JobStatus_s\", \"\"),BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists (\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\")| where JobStatus_s == \"Failed\" | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s == \"Backup\" and JobOperationSubType_s in~(\"Log\" , \"Recovery point_Log\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | extend timeOfJob = TimeGenerated; let FailedBackupJobs = Jobs | join kind=leftouter ( BackupIdNameMap | extend BackupItemFriendlyName=BackupItemFriendlyName_s ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} ; FailedBackupJobs | extend Job_Date = format_datetime(TimeGenerated, \"MM/dd/yy\") | summarize count(JobUniqueId_g) by BackupItemFriendlyName, BackupItemUniqueId_s, Job_Date | project BackupItemUniqueId_s, BackupItemFriendlyName, Job_Date, FailedBackupJobCount=count_JobUniqueId_g | sort by Job_Date asc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Backup Item ID",
                                  "Value":"#Failed Jobs"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\" | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\") | where ${DatasourceType}; let Jobs = Events| where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists (\"JobOperation_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobStatus_s == \"Failed\" | where JobOperation_s == \"Backup\" and JobOperationSubType_s in~(\"Log\",\"Recovery point_Log\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | extend timeOfJob = TimeGenerated; let BackupIdNameMap = BackupItems |extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s , BackupItemUniqueId_s, BackupItemType_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let FailedBackupJobs = Jobs | join kind=leftouter ( BackupIdNameMap | extend BackupItemFriendlyName=BackupItemFriendlyName_s ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} ; FailedBackupJobs | extend Job_Date = format_datetime(timeOfJob, \"MM/dd/yy\") | summarize count(JobUniqueId_g) by BackupItemUniqueId_s, BackupItemFriendlyName, Job_Date, ProtectedContainerUniqueId_s, timeOfJob | project BackupItemUniqueId_s,BackupItemFriendlyName, Job_Date, ProtectedContainerUniqueId_s, timeOfJob| sort by Job_Date desc | search {selected item}",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\" | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\") | where ${DatasourceType}; let Jobs = Events| where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists (\"JobOperation_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobStatus_s == \"Failed\" | where JobOperation_s == \"Backup\" and JobOperationSubType_s in~(\"Log\",\"Recovery point_Log\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | extend timeOfJob = TimeGenerated; let BackupIdNameMap = BackupItems |extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s , BackupItemUniqueId_s, BackupItemType_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let FailedBackupJobs = Jobs | join kind=leftouter ( BackupIdNameMap | extend BackupItemFriendlyName=BackupItemFriendlyName_s ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} ; FailedBackupJobs | extend Job_Date = format_datetime(timeOfJob, \"MM/dd/yy\") | summarize count(JobUniqueId_g) by BackupItemUniqueId_s, BackupItemFriendlyName, Job_Date, ProtectedContainerUniqueId_s, timeOfJob | project BackupItemUniqueId_s,BackupItemFriendlyName, Job_Date, ProtectedContainerUniqueId_s, timeOfJob| sort by Job_Date desc | search {selected item}"
                               }
                            }
                         }
                      },
                      {
                         "Id":"LineChartBuilderBlade",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Successful Backup Job Count Per Day",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Successful Backup Job Count Per Day",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "LineChart":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s, BackupItemType_s, BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs= Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\")| where JobStatus_s == \"Completed\" | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s == \"Backup\" and JobOperationSubType_s in~(\"Log\" , \"Recovery point_Log\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | extend timeOfJob = TimeGenerated; let SuccessfulBackupJobs = Jobs | join kind=leftouter ( BackupIdNameMap | extend BackupItemFriendlyName=BackupItemFriendlyName_s ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} ; SuccessfulBackupJobs | extend JobDate = format_datetime(TimeGenerated, \"MM/dd/yy\") | summarize count(JobUniqueId_g) by BackupItemUniqueId_s, BackupItemFriendlyName, JobDate, timeOfJob | project timeOfJob, BackupItemFriendlyName, JobDate, SuccessfulBackupJobCount=count_JobUniqueId_g | sort by JobDate asc | summarize sum(SuccessfulBackupJobCount) by bin(timeOfJob, 1d)",
                               "yAxis":{
                                  "isLogarithmic":false,
                                  "units":{
                                     "baseUnitType":"",
                                     "baseUnit":"",
                                     "displayUnit":""
                                  },
                                  "customLabel":""
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"); let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), BackupItem_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project BackupItem_TimeGenerated, BackupItemFriendlyName_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let Jobs= Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\", \"\"), Job_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\", \"\") | where JobStatus_s == \"Completed\" | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s == \"Backup\" and JobOperationSubType_s in~(\"Log\" , \"Recovery point_Log\") | summarize arg_max(Job_TimeGenerated, *) by JobUniqueId_g | extend timeOfJob = Job_TimeGenerated; let SuccessfulBackupJobs = Jobs | join kind=leftouter ( BackupIdNameMap | extend BackupItemFriendlyName=BackupItemFriendlyName_s ) on BackupItemUniqueId_s | where ${DatasourceType}; SuccessfulBackupJobs | extend Job_Date = format_datetime(Job_TimeGenerated, \"MM/dd/yy\") | summarize count(JobUniqueId_g) by BackupItemUniqueId_s, BackupItemFriendlyName, Job_Date | project BackupItemUniqueId_s, BackupItemFriendlyName, Job_Date, SuccessfulBackupJobCount=count_JobUniqueId_g | sort by Job_Date desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Backup Item ID",
                                  "Value":"#Successful Backup Jobs"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":" let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"); let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), BackupItem_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project BackupItem_TimeGenerated, BackupItemFriendlyName_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let Jobs= Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\", \"\"), Job_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\", \"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\")| where JobStatus_s == \"Completed\" | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s == \"Backup\" and JobOperationSubType_s in~(\"Log\" , \"Recovery point_Log\") | summarize arg_max(Job_TimeGenerated, *) by JobUniqueId_g | extend timeOfJob = Job_TimeGenerated; let SuccessfulBackupJobs = Jobs | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s | where ${DatasourceType}; SuccessfulBackupJobs | extend Job_Date = format_datetime(Job_TimeGenerated, \"MM/dd/yy\") | summarize count() by BackupItemUniqueId_s, BackupItemFriendlyName=columnifexists(\"BackupItemFriendlyName_s1\",\"BackupItemFriendlyName_s\"), Job_Date, timeOfJob, JobUniqueId_g, JobStatus_s, ProtectedContainerUniqueId_s | sort by Job_Date desc | search {selected item}",
                               "NavigationSelect":{
                                  "NavigationQuery":" let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"); let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), BackupItem_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project BackupItem_TimeGenerated, BackupItemFriendlyName_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let Jobs= Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\", \"\"), Job_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\", \"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\")| where JobStatus_s == \"Completed\" | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s == \"Backup\" and JobOperationSubType_s in~(\"Log\" , \"Recovery point_Log\") | summarize arg_max(Job_TimeGenerated, *) by JobUniqueId_g | extend timeOfJob = Job_TimeGenerated; let SuccessfulBackupJobs = Jobs | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s | where ${DatasourceType}; SuccessfulBackupJobs | extend Job_Date = format_datetime(Job_TimeGenerated, \"MM/dd/yy\") | summarize count() by BackupItemUniqueId_s, BackupItemFriendlyName=columnifexists(\"BackupItemFriendlyName_s1\",\"BackupItemFriendlyName_s\"), Job_Date, timeOfJob, JobUniqueId_g, JobStatus_s, ProtectedContainerUniqueId_s | sort by Job_Date desc | search {selected item}"
                               }
                            }
                         }
                      },
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Failed Jobs by Failure Code",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Failed jobs by Failure Code",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "Donut":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), TimeGenerated =columnifexists (\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs= Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobFailureCode_s = columnifexists(\"JobFailureCode_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobStatus_s == \"Failed\" | where JobOperation_s==\"Backup\" | where JobOperationSubType_s in~(\"Log\",\"Recovery point_Log\") | where JobUniqueId_g!=\"\"; Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count(JobUniqueId_g) by JobFailureCode_s | sort by count_JobUniqueId_g desc",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
 
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), TimeGenerated =columnifexists (\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs= Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobFailureCode_s = columnifexists(\"JobFailureCode_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobStatus_s == \"Failed\" | where JobOperation_s==\"Backup\" | where JobOperationSubType_s in~(\"Log\",\"Recovery point_Log\") | where JobUniqueId_g!=\"\"; Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count(JobUniqueId_g) by JobFailureCode_s | sort by count_JobUniqueId_g desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Failure Code",
                                  "Value":"No of Jobs"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), TimeGenerated =columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs=Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") , JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobFailureCode_s = columnifexists(\"JobFailureCode_s\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobStatus_s == \"Failed\" | where JobOperation_s==\"Backup\" | where JobOperationSubType_s in~(\"Log\" ,\"Recovery point_Log\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | where JobUniqueId_g!=\"\"; Jobs | join kind=leftouter (BackupIdTypeMap) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where {selected item}",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), TimeGenerated =columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs=Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") , JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobFailureCode_s = columnifexists(\"JobFailureCode_s\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobStatus_s == \"Failed\" | where JobOperation_s==\"Backup\" | where JobOperationSubType_s in~(\"Log\" ,\"Recovery point_Log\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | where JobUniqueId_g!=\"\"; Jobs | join kind=leftouter (BackupIdTypeMap) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where {selected item}"
                               }
                            }
                         }
                      },
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Jobs by Job Creation Time",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Jobs by Job Creation Time",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "Donut":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s= columnifexists(\"BackupItemType_s\",\"\"), BackupItem_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project BackupItem_TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let Jobs = Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\", \"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), Job_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobUniqueId_g!=\"\" | summarize arg_max(Job_TimeGenerated, *) by JobUniqueId_g | where JobOperation_s==\"Backup\" | where JobOperationSubType_s in~(\"Log\" , \"Recovery point_Log\") ; Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | extend timeOfDay=datetime_part(\"Hour\",Job_TimeGenerated) | summarize count(JobUniqueId_g) by bin(timeOfDay,3) | extend timeBucketStart24 = iff(timeOfDay-1.5>0,timeOfDay-1.5,timeOfDay-1.5+24), timeBucketEnd24=iff(timeOfDay+1.5<24,timeOfDay+1.5,timeOfDay+1.5-24) | extend timeBucketStart12=iff(timeBucketStart24>12,timeBucketStart24-12, timeBucketStart24) , timeBucketStartMeridian = iff(timeBucketStart24<12,\"AM\", iff(timeBucketStart24<24,\"PM\",\"AM\")), timeBucketEnd12=iff(timeBucketEnd24>12,timeBucketEnd24-12, timeBucketEnd24) , timeBucketEndMeridian = iff(timeBucketEnd24<12,\"AM\", iff(timeBucketEnd24<24,\"PM\",\"AM\")) | project timeBucketStart24, timeBucketStart12 , timeBucketEnd12 , timeBucketStartMeridian , timeBucketEndMeridian , count_JobUniqueId_g | extend timeBucketStartHr=toint(timeBucketStart12), timeBucketStartMin=toint((timeBucketStart12-floor(timeBucketStart12,1))*60), timeBucketEndHr=toint(timeBucketEnd12), timeBucketEndMin=toint((timeBucketEnd12-floor(timeBucketEnd12,1))*60) | extend timeBucketStartMinString=iff(timeBucketStartMin>9,tostring(timeBucketStartMin),iff(timeBucketStartMin>0,strcat(\"0\",timeBucketStartMin), \"00\")), timeBucketEndMinString=iff(timeBucketEndMin>9,tostring(timeBucketEndMin),iff(timeBucketEndMin>0,strcat(\"0\",timeBucketEndMin), \"00\")) | extend timeBucketString = strcat(tostring(timeBucketStartHr),\":\",timeBucketStartMinString,timeBucketStartMeridian, \"-\",tostring(timeBucketEndHr), \":\", timeBucketEndMinString,timeBucketEndMeridian) | summarize noOfJobs=sum(count_JobUniqueId_g) by timeBucketString | sort by noOfJobs desc",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
 
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s= columnifexists(\"BackupItemType_s\",\"\"), BackupItem_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project BackupItem_TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let Jobs = Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\", \"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), Job_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobUniqueId_g!=\"\" | summarize arg_max(Job_TimeGenerated, *) by JobUniqueId_g | where JobOperation_s==\"Backup\" | where JobOperationSubType_s in~(\"Log\" , \"Recovery point_Log\") ; Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | extend timeOfDay=datetime_part(\"Hour\",Job_TimeGenerated) | summarize count(JobUniqueId_g) by bin(timeOfDay,3) | extend timeBucketStart24 = iff(timeOfDay-1.5>0,timeOfDay-1.5,timeOfDay-1.5+24), timeBucketEnd24=iff(timeOfDay+1.5<24,timeOfDay+1.5,timeOfDay+1.5-24) | extend timeBucketStart12=iff(timeBucketStart24>12,timeBucketStart24-12, timeBucketStart24) , timeBucketStartMeridian = iff(timeBucketStart24<12,\"AM\", iff(timeBucketStart24<24,\"PM\",\"AM\")), timeBucketEnd12=iff(timeBucketEnd24>12,timeBucketEnd24-12, timeBucketEnd24) , timeBucketEndMeridian = iff(timeBucketEnd24<12,\"AM\", iff(timeBucketEnd24<24,\"PM\",\"AM\")) | project timeBucketStart24, timeBucketStart12 , timeBucketEnd12 , timeBucketStartMeridian , timeBucketEndMeridian , count_JobUniqueId_g | extend timeBucketStartHr=toint(timeBucketStart12), timeBucketStartMin=toint((timeBucketStart12-floor(timeBucketStart12,1))*60), timeBucketEndHr=toint(timeBucketEnd12), timeBucketEndMin=toint((timeBucketEnd12-floor(timeBucketEnd12,1))*60) | extend timeBucketStartMinString=iff(timeBucketStartMin>9,tostring(timeBucketStartMin),iff(timeBucketStartMin>0,strcat(\"0\",timeBucketStartMin), \"00\")), timeBucketEndMinString=iff(timeBucketEndMin>9,tostring(timeBucketEndMin),iff(timeBucketEndMin>0,strcat(\"0\",timeBucketEndMin), \"00\")) | extend timeBucketString = strcat(tostring(timeBucketStartHr),\":\",timeBucketStartMinString,timeBucketStartMeridian, \"-\",tostring(timeBucketEndHr), \":\", timeBucketEndMinString,timeBucketEndMeridian) | summarize noOfJobs=sum(count_JobUniqueId_g) by timeBucketString | sort by noOfJobs desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Time of Day",
                                  "Value":"No of Jobs"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName == \"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists(\"BackupItemType_s\", \"\"), BackupItem_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs = Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") , JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), Job_TimeGenerated= columnifexists(\"TimeGenerated\",\"\"), ProtectedContainerUniqueId_s=columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobUniqueId_g!=\"\" | where JobOperation_s==\"Backup\" | where JobOperationSubType_s in~(\"Log\" ,\"Recovery point_Log\") | summarize arg_max(Job_TimeGenerated, *) by JobUniqueId_g; let JobsWithTimeBucket = Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | extend timeOfDay=datetime_part(\"Hour\",Job_TimeGenerated) | summarize count(JobUniqueId_g) by bin(timeOfDay,3), JobUniqueId_g, BackupItemUniqueId_s, ProtectedContainerUniqueId_s, JobStatus_s | extend timeBucketStart24 = iff(timeOfDay-1.5>0,timeOfDay-1.5,timeOfDay-1.5+24), timeBucketEnd24=iff(timeOfDay+1.5<24,timeOfDay+1.5,timeOfDay+1.5-24) | extend timeBucketStart12=iff(timeBucketStart24>12,timeBucketStart24-12, timeBucketStart24) , timeBucketStartMeridian = iff(timeBucketStart24<12,\"AM\", iff(timeBucketStart24<24,\"PM\",\"AM\")), timeBucketEnd12=iff(timeBucketEnd24>12,timeBucketEnd24-12, timeBucketEnd24) , timeBucketEndMeridian = iff(timeBucketEnd24<12,\"AM\", iff(timeBucketEnd24<24,\"PM\",\"AM\")) | extend timeBucketStartHr=toint(timeBucketStart12), timeBucketStartMin=toint((timeBucketStart12-floor(timeBucketStart12,1))*60), timeBucketEndHr=toint(timeBucketEnd12), timeBucketEndMin=toint((timeBucketEnd12-floor(timeBucketEnd12,1))*60) | extend timeBucketStartMinString=iff(timeBucketStartMin>9,tostring(timeBucketStartMin),iff(timeBucketStartMin>0,strcat(\"0\",timeBucketStartMin), \"00\")), timeBucketEndMinString=iff(timeBucketEndMin>9,tostring(timeBucketEndMin),iff(timeBucketEndMin>0,strcat(\"0\",timeBucketEndMin), \"00\")) | extend timeBucketString = strcat(tostring(timeBucketStartHr),\":\",timeBucketStartMinString,timeBucketStartMeridian, \"-\",tostring(timeBucketEndHr), \":\", timeBucketEndMinString,timeBucketEndMeridian) | sort by count_JobUniqueId_g desc; let Selection=JobsWithTimeBucket | search {selected item}; Selection | join( JobsWithTimeBucket) on timeBucketString | project TimeOfDay=timeBucketString, JobUniqueId_g, BackupItemUniqueId_s, ProtectedContainerUniqueId_s, JobStatus_s",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName == \"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists(\"BackupItemType_s\", \"\"), BackupItem_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs = Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") , JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), Job_TimeGenerated= columnifexists(\"TimeGenerated\",\"\"), ProtectedContainerUniqueId_s=columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobUniqueId_g!=\"\" | where JobOperation_s==\"Backup\" | where JobOperationSubType_s in~(\"Log\" ,\"Recovery point_Log\") | summarize arg_max(Job_TimeGenerated, *) by JobUniqueId_g; let JobsWithTimeBucket = Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | extend timeOfDay=datetime_part(\"Hour\",Job_TimeGenerated) | summarize count(JobUniqueId_g) by bin(timeOfDay,3), JobUniqueId_g, BackupItemUniqueId_s, ProtectedContainerUniqueId_s, JobStatus_s | extend timeBucketStart24 = iff(timeOfDay-1.5>0,timeOfDay-1.5,timeOfDay-1.5+24), timeBucketEnd24=iff(timeOfDay+1.5<24,timeOfDay+1.5,timeOfDay+1.5-24) | extend timeBucketStart12=iff(timeBucketStart24>12,timeBucketStart24-12, timeBucketStart24) , timeBucketStartMeridian = iff(timeBucketStart24<12,\"AM\", iff(timeBucketStart24<24,\"PM\",\"AM\")), timeBucketEnd12=iff(timeBucketEnd24>12,timeBucketEnd24-12, timeBucketEnd24) , timeBucketEndMeridian = iff(timeBucketEnd24<12,\"AM\", iff(timeBucketEnd24<24,\"PM\",\"AM\")) | extend timeBucketStartHr=toint(timeBucketStart12), timeBucketStartMin=toint((timeBucketStart12-floor(timeBucketStart12,1))*60), timeBucketEndHr=toint(timeBucketEnd12), timeBucketEndMin=toint((timeBucketEnd12-floor(timeBucketEnd12,1))*60) | extend timeBucketStartMinString=iff(timeBucketStartMin>9,tostring(timeBucketStartMin),iff(timeBucketStartMin>0,strcat(\"0\",timeBucketStartMin), \"00\")), timeBucketEndMinString=iff(timeBucketEndMin>9,tostring(timeBucketEndMin),iff(timeBucketEndMin>0,strcat(\"0\",timeBucketEndMin), \"00\")) | extend timeBucketString = strcat(tostring(timeBucketStartHr),\":\",timeBucketStartMinString,timeBucketStartMeridian, \"-\",tostring(timeBucketEndHr), \":\", timeBucketEndMinString,timeBucketEndMeridian) | sort by count_JobUniqueId_g desc; let Selection=JobsWithTimeBucket | search {selected item}; Selection | join( JobsWithTimeBucket) on timeBucketString | project TimeOfDay=timeBucketString, JobUniqueId_g, BackupItemUniqueId_s, ProtectedContainerUniqueId_s, JobStatus_s"
                               }
                            }
                         }
                      },
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Jobs by Job Duration",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Jobs by Job Duration",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "Donut":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItem_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project BackupItem_TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let Jobs = Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists (\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\") , Job_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobDurationInSecs_s = columnifexists(\"JobDurationInSecs_s\", \"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s==\"Backup\" | where JobOperationSubType_s in~(\"Log\" , \"Recovery point_Log\") |summarize arg_max(Job_TimeGenerated,*) by JobUniqueId_g ; Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count(JobUniqueId_g) by bin(todouble(JobDurationInSecs_s), 600) | extend JobDurationInMin = todouble(JobDurationInSecs_s) / 60 | extend JobDurationLowerLimit=iff(JobDurationInMin>5,JobDurationInMin - 5,todouble(0)), JobDurationUpperLimit = JobDurationInMin + 5 | extend JobDurationString=strcat(tostring(JobDurationLowerLimit),\" to \",tostring(JobDurationUpperLimit), \" min\") | summarize noOfJobs= sum(count_JobUniqueId_g) by JobDurationString | sort by noOfJobs desc",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
 
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItem_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project BackupItem_TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let Jobs = Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists (\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\") , Job_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobDurationInSecs_s = columnifexists(\"JobDurationInSecs_s\", \"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s==\"Backup\" | where JobOperationSubType_s in~(\"Log\" , \"Recovery point_Log\") |summarize arg_max(Job_TimeGenerated,*) by JobUniqueId_g ; Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count(JobUniqueId_g) by bin(todouble(JobDurationInSecs_s), 600) | extend JobDurationInMin = todouble(JobDurationInSecs_s) / 60 | extend JobDurationLowerLimit=iff(JobDurationInMin>5,JobDurationInMin - 5,todouble(0)), JobDurationUpperLimit = JobDurationInMin + 5 | extend JobDurationString=strcat(tostring(JobDurationLowerLimit),\" to \",tostring(JobDurationUpperLimit), \" min\") | summarize noOfJobs= sum(count_JobUniqueId_g) by JobDurationString | sort by noOfJobs desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Job Duration",
                                  "Value":"No of Jobs"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let Jobs = Events | where OperationName == \"Job\" | extend JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), Job_TimeGenerated = columnifexists(\"TimeGenerated\", \"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobDurationInSecs_s = columnifexists(\"JobDurationInSecs_s\",\"\"), ProtectedContainerUniqueId_s =columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), JobStatus_s=columnifexists(\"JobStatus_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | summarize arg_max(Job_TimeGenerated,*) by JobUniqueId_g; let BackupIdTypeMap = BackupItems |extend BackupItem_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project BackupItem_TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let JobsWithDurationString = Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | where JobOperation_s==\"Backup\" | where JobOperationSubType_s in~(\"Log\" ,\"Recovery point_Log\") | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count(JobUniqueId_g) by bin(todouble(JobDurationInSecs_s), 600), JobUniqueId_g, BackupItemUniqueId_s, ProtectedContainerUniqueId_s, JobStatus_s | extend JobDurationInMin = todouble(JobDurationInSecs_s) / 60 | extend JobDurationLowerLimit=iff(JobDurationInMin>5,JobDurationInMin - 5,todouble(0)), JobDurationUpperLimit = JobDurationInMin + 5 | extend JobDurationString=strcat(tostring(JobDurationLowerLimit),\" to \",tostring(JobDurationUpperLimit), \" min\") | sort by count_JobUniqueId_g desc; let Selection = JobsWithDurationString | search {selected item}; Selection | join ( JobsWithDurationString ) on JobDurationString | project JobDurationString,JobUniqueId_g, JobStatus_s, BackupItemUniqueId_s, ProtectedContainerUniqueId_s ",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let Jobs = Events | where OperationName == \"Job\" | extend JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), Job_TimeGenerated = columnifexists(\"TimeGenerated\", \"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobDurationInSecs_s = columnifexists(\"JobDurationInSecs_s\",\"\"), ProtectedContainerUniqueId_s =columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), JobStatus_s=columnifexists(\"JobStatus_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | summarize arg_max(Job_TimeGenerated,*) by JobUniqueId_g; let BackupIdTypeMap = BackupItems |extend BackupItem_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project BackupItem_TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let JobsWithDurationString = Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | where JobOperation_s==\"Backup\" | where JobOperationSubType_s in~(\"Log\" ,\"Recovery point_Log\") | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count(JobUniqueId_g) by bin(todouble(JobDurationInSecs_s), 600), JobUniqueId_g, BackupItemUniqueId_s, ProtectedContainerUniqueId_s, JobStatus_s | extend JobDurationInMin = todouble(JobDurationInSecs_s) / 60 | extend JobDurationLowerLimit=iff(JobDurationInMin>5,JobDurationInMin - 5,todouble(0)), JobDurationUpperLimit = JobDurationInMin + 5 | extend JobDurationString=strcat(tostring(JobDurationLowerLimit),\" to \",tostring(JobDurationUpperLimit), \" min\") | sort by count_JobUniqueId_g desc; let Selection = JobsWithDurationString | search {selected item}; Selection | join ( JobsWithDurationString ) on JobDurationString | project JobDurationString,JobUniqueId_g, JobStatus_s, BackupItemUniqueId_s, ProtectedContainerUniqueId_s "
                               }
                            }
                         }
                      }
                   ],
                   "Filters":[
                      {
                         "FieldName":"BackupItemType_s",
                         "QueryForValues":"AzureDiagnostics | where Category == \"AzureBackupReport\"| distinct BackupItemType_s",
                         "Title":"DatasourceType"
                      }
                   ],
                   "OverviewTile":{
                      "Id":"SingleQueryDonutBuilderTileV1",
                      "Type":"OverviewTile",
                      "Version":2,
                      "Configuration":{
                         "Donut":{
                            "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; Events | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where OperationName == \"Job\" | extend JobOperation_s=columnifexists(\"JobOperation_s\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\") | where JobOperation_s == \"Backup\" and JobOperationSubType_s in~(\"Log\",\"Recovery point_Log\") | summarize dcount(JobUniqueId_g) by JobStatus_s",
                            "CenterLegend":{
                               "Text":"Total",
                               "Operation":"Sum",
                               "ArcsToSelect":[
 
                               ]
                            },
                            "Options":{
                               "colors":[
                                  "#00188f",
                                  "#0072c6",
                                  "#00bcf2"
                               ],
                               "valueColorMapping":[
                                  {
                                     "value":"Completed",
                                     "color":"#55d455"
                                  },
                                  {
                                     "value":"Failed",
                                     "color":"#eb3c00"
                                  },
                                  {
                                     "value":"CompletedWithWarnings",
                                     "color":"#ffb900"
                                  }
                               ]
                            }
                         },
                         "Advanced":{
                            "DataFlowVerification":{
                               "Enabled":false,
                               "Query":"search * | limit 1 | project TimeGenerated",
                               "Message":""
                            }
                         }
                      }
                   }
                }
             },
             {
                "apiVersion":"2015-11-01-preview",
                "name": "[concat(parameters('workspaceName'), '/', 'Restore Jobs')]",
                "type":"Microsoft.OperationalInsights/workspaces/views",
                "location":"[parameters('workspaceLocation')]",
                "properties":{
                   "Id":"Restore Jobs",
                   "Name":"[variables('omsSolutions').customSolution.view3]",
                   "Author":"[variables('omsSolutions').customSolution.author]",
                   "Source":"Local",
                   "Version":2,
                   "Dashboard":[
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Jobs by Job Status",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Jobs by Job Status",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "Donut":{
                               "Query":" let Events= AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\" | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"); let Jobs = Events | where OperationName == \"Job\" |extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"); Jobs | extend TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobOperation_s = columnifexists (\"JobOperation_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\") | summarize arg_max(TimeGenerated,*) by JobUniqueId_g | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s in~(\"Restore\", \"Recovery\") | join kind=leftouter ( BackupItems ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize AggregatedValue = dcount(JobUniqueId_g) by JobStatus_s | order by AggregatedValue desc ",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
                                     {
                                        "value":"Completed",
                                        "color":"#55d455"
                                     },
                                     {
                                        "value":"Failed",
                                        "color":"#eb3c00"
                                     },
                                     {
                                        "value":"CompletedWithWarnings",
                                        "color":"#ffb900"
                                     }
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":" let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let Jobs = Events | where OperationName ==\"Job\" | extend BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"); let BackupItems = Events | where OperationName ==\"BackupItem\" | extend BackupItemType_s= columnifexists (\"BackupItemType_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"); Jobs | extend JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), Resource = columnifexists(\"Resource\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s in~(\"Restore\",\"Recovery\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | project BackupItemUniqueId_s, JobStatus_s, Resource | join kind=leftouter ( BackupItems | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s ) on BackupItemUniqueId_s| where ${DatasourceType} | project BackupItemFriendlyName_s, BackupItemUniqueId_s, JobStatus_s, Vault=Resource | summarize count() by BackupItemUniqueId_s , BackupItemFriendlyName_s, JobStatus_s, Vault | order by count_ desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "ColumnsTitle":{
                                  "Name":"Backup Item ID",
                                  "Value":"No of Jobs"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events=AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let Jobs = Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"); let BackupItems = Events | where OperationName == \"BackupItem\" | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\" , \"\"); let ProtectedContainers = Events | where OperationName == \"ProtectedContainer\" | extend ProtectedContainerFriendlyName_s = columnifexists(\"ProtectedContainerFriendlyName_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists (\"ProtectedContainerUniqueId_s\",\"\"); Jobs | extend JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode_s = columnifexists(\"JobFailureCode_s\",\"\"), Resource = columnifexists(\"Resource\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s in~(\"Restore\",\"Recovery\") | summarize arg_max(TimeGenerated,*) by JobUniqueId_g | project BackupItemUniqueId_s, ProtectedContainerUniqueId_s, JobStatus_s, Resource, JobFailureCode_s | join kind=leftouter ( BackupItems | summarize arg_max(TimeGenerated,*) by BackupItemUniqueId_s | project BackupItemUniqueId_s , BackupItemFriendlyName_s, BackupItemType_s ) on BackupItemUniqueId_s | join kind=leftouter ( ProtectedContainers | summarize arg_max(TimeGenerated,*) by ProtectedContainerUniqueId_s | project ProtectedContainerUniqueId_s , ProtectedContainerFriendlyName_s ) on ProtectedContainerUniqueId_s | project BackupItemFriendlyName_s, BackupItemUniqueId_s , ProtectedContainerFriendlyName_s, BackupItemType_s, JobStatus_s, Vault=Resource, JobFailureCode_s | where {selected item}",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events=AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let Jobs = Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"); let BackupItems = Events | where OperationName == \"BackupItem\" | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\" , \"\"); let ProtectedContainers = Events | where OperationName == \"ProtectedContainer\" | extend ProtectedContainerFriendlyName_s = columnifexists(\"ProtectedContainerFriendlyName_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists (\"ProtectedContainerUniqueId_s\",\"\"); Jobs | extend JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode_s = columnifexists(\"JobFailureCode_s\",\"\"), Resource = columnifexists(\"Resource\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s in~(\"Restore\",\"Recovery\") | summarize arg_max(TimeGenerated,*) by JobUniqueId_g | project BackupItemUniqueId_s, ProtectedContainerUniqueId_s, JobStatus_s, Resource, JobFailureCode_s | join kind=leftouter ( BackupItems | summarize arg_max(TimeGenerated,*) by BackupItemUniqueId_s | project BackupItemUniqueId_s , BackupItemFriendlyName_s, BackupItemType_s ) on BackupItemUniqueId_s | join kind=leftouter ( ProtectedContainers | summarize arg_max(TimeGenerated,*) by ProtectedContainerUniqueId_s | project ProtectedContainerUniqueId_s , ProtectedContainerFriendlyName_s ) on ProtectedContainerUniqueId_s | project BackupItemFriendlyName_s, BackupItemUniqueId_s , ProtectedContainerFriendlyName_s, BackupItemType_s, JobStatus_s, Vault=Resource, JobFailureCode_s | where {selected item}"
                               }
                            }
                         }
                      },
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Top 3 Backup Items by Job Duration",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Total Job Duration (Hrs)",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "Donut":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\" ; let BackupIdNameMap = BackupItems | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\") |where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemType_s, BackupItemFriendlyName_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let ContainerIdNameMap = Events | where OperationName == \"ProtectedContainer\" | extend ProtectedContainerFriendlyName_s = columnifexists(\"ProtectedContainerFriendlyName_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\") |where ProtectedContainerFriendlyName_s != \"\" | project TimeGenerated, ProtectedContainerFriendlyName_s , ProtectedContainerUniqueId_s | summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId_s; let Jobs = Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s= columnifexists (\"BackupItemUniqueId_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\") , JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated =columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobDurationInSecs_s = columnifexists(\"JobDurationInSecs_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s in~(\"Restore\",\"Recovery\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | project BackupItemUniqueId_s, JobUniqueId_g , JobDurationInSecs_s, ProtectedContainerUniqueId_s; let Table1 = Jobs | join kind=leftouter ( ContainerIdNameMap ) on ProtectedContainerUniqueId_s; let Table2 = Table1 | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s; Table2 | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where BackupItemFriendlyName_s !=\"\" | summarize totalDurationInHrs = round(sum(todouble(JobDurationInSecs_s)/3600),2) by BackupItemUniqueId_s | sort by totalDurationInHrs desc",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
 
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") |where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemType_s, BackupItemFriendlyName_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let ContainerIdNameMap = Events | where OperationName==\"ProtectedContainer\" | extend ProtectedContainerFriendlyName_s = columnifexists(\"ProtectedContainerFriendlyName_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\") | where ProtectedContainerFriendlyName_s != \"\" | project TimeGenerated, ProtectedContainerFriendlyName_s , ProtectedContainerUniqueId_s | summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId_s; let Jobs = Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\") , JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobDurationInSecs_s = columnifexists(\"JobDurationInSecs_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s in~(\"Restore\" , \"Recovery\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | project BackupItemUniqueId_s, JobUniqueId_g , JobDurationInSecs_s, ProtectedContainerUniqueId_s; let Table1 = Jobs | join kind=leftouter ( ContainerIdNameMap ) on ProtectedContainerUniqueId_s; let Table2 = Table1 | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s; Table2 | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where BackupItemFriendlyName_s !=\"\" | summarize totalDurationInHrs = round(sum(todouble(JobDurationInSecs_s)/3600),2) by BackupItemUniqueId_s, BackupItemFriendlyName_s | sort by totalDurationInHrs desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Backup Item ID",
                                  "Value":"Total Job Duration (hrs)"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists (\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemType_s, BackupItemFriendlyName_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let ContainerIdNameMap = Events | where OperationName ==\"ProtectedContainer\" | extend ProtectedContainerFriendlyName_s = columnifexists(\"ProtectedContainerFriendlyName_s\",\"\"), TimeGenerated = columnifexists (\"TimeGenerated\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\") |where ProtectedContainerFriendlyName_s != \"\" | project TimeGenerated, ProtectedContainerFriendlyName_s , ProtectedContainerUniqueId_s | summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId_s; let Jobs = Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\") , JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobDurationInSecs_s = columnifexists (\"JobDurationInSecs_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s in~(\"Restore\" , \"Recovery\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | project BackupItemUniqueId_s, JobUniqueId_g , JobStatus_s, JobDurationInSecs_s, ProtectedContainerUniqueId_s; let Table1 = Jobs | join kind=leftouter ( ContainerIdNameMap ) on ProtectedContainerUniqueId_s; let Table2 = Table1 | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s; let Selection = Table2 | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where BackupItemFriendlyName_s !=\"\" | summarize totalDurationInHrs = round(sum(todouble(JobDurationInSecs_s)/3600),2) by BackupItemUniqueId_s, BackupItemFriendlyName_s | sort by totalDurationInHrs desc | search {selected item} | join ( BackupIdNameMap ) on BackupItemFriendlyName_s; Selection | join(Jobs) on BackupItemUniqueId_s ",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists (\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemType_s, BackupItemFriendlyName_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let ContainerIdNameMap = Events | where OperationName ==\"ProtectedContainer\" | extend ProtectedContainerFriendlyName_s = columnifexists(\"ProtectedContainerFriendlyName_s\",\"\"), TimeGenerated = columnifexists (\"TimeGenerated\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\") |where ProtectedContainerFriendlyName_s != \"\" | project TimeGenerated, ProtectedContainerFriendlyName_s , ProtectedContainerUniqueId_s | summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId_s; let Jobs = Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\") , JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobDurationInSecs_s = columnifexists (\"JobDurationInSecs_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s in~(\"Restore\" , \"Recovery\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | project BackupItemUniqueId_s, JobUniqueId_g , JobStatus_s, JobDurationInSecs_s, ProtectedContainerUniqueId_s; let Table1 = Jobs | join kind=leftouter ( ContainerIdNameMap ) on ProtectedContainerUniqueId_s; let Table2 = Table1 | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s; let Selection = Table2 | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where BackupItemFriendlyName_s !=\"\" | summarize totalDurationInHrs = round(sum(todouble(JobDurationInSecs_s)/3600),2) by BackupItemUniqueId_s, BackupItemFriendlyName_s | sort by totalDurationInHrs desc | search {selected item} | join ( BackupIdNameMap ) on BackupItemFriendlyName_s; Selection | join(Jobs) on BackupItemUniqueId_s "
                               }
                            }
                         }
                      },
                      {
                         "Id":"LineChartBuilderBlade",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Jobs by Total Data Transferred",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Jobs by Total Data Transferred (MB)",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "LineChart":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\" ; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), TimeGenerated =columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs = Events| where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists (\"JobOperation_s\",\"\"), TimeGenerated = columnifexists (\"TimeGenerated\", \"\"), JobUniqueId_g = columnifexists (\"JobUniqueId_g\",\"\"), DataTransferredInMB_s = columnifexists(\"DataTransferredInMB_s\", \"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\")| where JobOperation_s !in~(\"Restore\", \"Recovery\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g; Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\", \"BackupItemType_s\") | where ${DatasourceType} | summarize sum(todouble(DataTransferredInMB_s)) by bin(TimeGenerated, 1d), JobOperation_s",
                               "yAxis":{
                                  "isLogarithmic":false,
                                  "units":{
                                     "baseUnitType":"",
                                     "baseUnit":"",
                                     "displayUnit":""
                                  },
                                  "customLabel":""
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":" let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s, BackupItemFriendlyName_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs = Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") , JobOperation_s = columnifexists(\"JobOperation_s\", \"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\") , TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), DataTransferredInMB_s = columnifexists(\"DataTransferredInMB_s\", \"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s in~(\"Restore\" , \"Recovery\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g; Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s1\",\"BackupItemFriendlyName_s\") | where ${DatasourceType} | summarize totalDataTransferred=sum(todouble(DataTransferredInMB_s)) by BackupItemUniqueId_s, BackupItemFriendlyName | sort by totalDataTransferred desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Backup Item ID",
                                  "Value":"Total Data Transferred (MB)"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":" let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let Jobs = Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\") , ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\", \"\") , JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), DataTransferredInMB_s = columnifexists(\"DataTransferredInMB_s\",\"\") | extend JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\", \"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s, BackupItemFriendlyName_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let JobsWithTotalDataTransferred = Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | where JobOperation_s in~(\"Restore\",\"Recovery\") | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s1\",\"BackupItemFriendlyName_s\") | where ${DatasourceType} | summarize totalDataTransferred=sum(todouble(DataTransferredInMB_s)) by BackupItemUniqueId_s, BackupItemFriendlyName | sort by totalDataTransferred desc | search {selected item}; JobsWithTotalDataTransferred | join(Jobs| where JobOperation_s in~(\"Restore\",\"Recovery\")) on BackupItemUniqueId_s | project JobUniqueId_g, TimeGenerated, DataTransferredInMB_s, JobStatus_s, ProtectedContainerUniqueId_s, BackupItemUniqueId_s, BackupItemFriendlyName, JobOperation_s",
                               "NavigationSelect":{
                                  "NavigationQuery":" let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let Jobs = Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\") , ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\", \"\") , JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), DataTransferredInMB_s = columnifexists(\"DataTransferredInMB_s\",\"\") | extend JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\", \"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s, BackupItemFriendlyName_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let JobsWithTotalDataTransferred = Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | where JobOperation_s in~(\"Restore\",\"Recovery\") | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s1\",\"BackupItemFriendlyName_s\") | where ${DatasourceType} | summarize totalDataTransferred=sum(todouble(DataTransferredInMB_s)) by BackupItemUniqueId_s, BackupItemFriendlyName | sort by totalDataTransferred desc | search {selected item}; JobsWithTotalDataTransferred | join(Jobs| where JobOperation_s in~(\"Restore\",\"Recovery\")) on BackupItemUniqueId_s | project JobUniqueId_g, TimeGenerated, DataTransferredInMB_s, JobStatus_s, ProtectedContainerUniqueId_s, BackupItemUniqueId_s, BackupItemFriendlyName, JobOperation_s"
                               }
                            }
                         }
                      },
                      {
                         "Id":"LineChartBuilderBlade",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Failed Restore Job Count per day",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Failed Restore Job Count per day",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "LineChart":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\", \"\"), BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s , BackupItemType_s, BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs= Events | where OperationName == \"Job\" | extend JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\")| where JobStatus_s == \"Failed\" | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s in~(\"Restore\" , \"Recovery\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | extend timeOfJob = TimeGenerated; let FailedBackupJobs = Jobs | join kind=leftouter ( BackupIdNameMap | extend BackupItemFriendlyName=BackupItemFriendlyName_s ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} ; FailedBackupJobs | extend JobDate = format_datetime(timeOfJob, \"MM/dd/yy\") | summarize count(JobUniqueId_g) by BackupItemUniqueId_s, BackupItemFriendlyName, JobDate, timeOfJob | project timeOfJob, BackupItemFriendlyName, JobDate, FailedBackupJobCount=count_JobUniqueId_g | sort by JobDate asc | summarize sum(toint(FailedBackupJobCount)) by bin(timeOfJob, 1d)",
                               "yAxis":{
                                  "isLogarithmic":false,
                                  "units":{
                                     "baseUnitType":"",
                                     "baseUnit":"",
                                     "displayUnit":""
                                  },
                                  "customLabel":""
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\") , BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s , BackupItemType_s, BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs= Events | where OperationName == \"Job\" | extend JobStatus_s = columnifexists(\"JobStatus_s\", \"\"),BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists (\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\")| where JobStatus_s == \"Failed\" | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s in~(\"Restore\" , \"Recovery\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | extend timeOfJob = TimeGenerated; let FailedBackupJobs = Jobs | join kind=leftouter ( BackupIdNameMap | extend BackupItemFriendlyName=BackupItemFriendlyName_s ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} ; FailedBackupJobs | extend Job_Date = format_datetime(TimeGenerated, \"MM/dd/yy\") | summarize count(JobUniqueId_g) by BackupItemFriendlyName, BackupItemUniqueId_s, Job_Date | project BackupItemUniqueId_s, BackupItemFriendlyName, Job_Date, FailedBackupJobCount=count_JobUniqueId_g | sort by Job_Date asc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Backup Item Id",
                                  "Value":"#Failed Jobs"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\" | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\") | where ${DatasourceType}; let Jobs = Events| where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists (\"JobOperation_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobStatus_s == \"Failed\" | where JobOperation_s in~(\"Restore\",\"Recovery\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | extend timeOfJob = TimeGenerated; let BackupIdNameMap = BackupItems |extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s , BackupItemUniqueId_s, BackupItemType_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let FailedBackupJobs = Jobs | join kind=leftouter ( BackupIdNameMap | extend BackupItemFriendlyName=BackupItemFriendlyName_s ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} ; FailedBackupJobs | extend Job_Date = format_datetime(timeOfJob, \"MM/dd/yy\") | summarize count(JobUniqueId_g) by BackupItemUniqueId_s, BackupItemFriendlyName, Job_Date, ProtectedContainerUniqueId_s, timeOfJob | project BackupItemUniqueId_s,BackupItemFriendlyName, Job_Date, ProtectedContainerUniqueId_s, timeOfJob| sort by Job_Date desc | search {selected item}",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\" | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\") | where ${DatasourceType}; let Jobs = Events| where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists (\"JobOperation_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobStatus_s == \"Failed\" | where JobOperation_s in~(\"Restore\",\"Recovery\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | extend timeOfJob = TimeGenerated; let BackupIdNameMap = BackupItems |extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s , BackupItemUniqueId_s, BackupItemType_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let FailedBackupJobs = Jobs | join kind=leftouter ( BackupIdNameMap | extend BackupItemFriendlyName=BackupItemFriendlyName_s ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} ; FailedBackupJobs | extend Job_Date = format_datetime(timeOfJob, \"MM/dd/yy\") | summarize count(JobUniqueId_g) by BackupItemUniqueId_s, BackupItemFriendlyName, Job_Date, ProtectedContainerUniqueId_s, timeOfJob | project BackupItemUniqueId_s,BackupItemFriendlyName, Job_Date, ProtectedContainerUniqueId_s, timeOfJob| sort by Job_Date desc | search {selected item}"
                               }
                            }
                         }
                      },
                      {
                         "Id":"LineChartBuilderBlade",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Successful Restore Job Count Per day",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Successful Restore Job Count Per day",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "LineChart":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s, BackupItemType_s, BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs= Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\")| where JobStatus_s == \"Completed\" | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s in~(\"Restore\" , \"Recovery\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | extend timeOfJob = TimeGenerated; let SuccessfulBackupJobs = Jobs | join kind=leftouter ( BackupIdNameMap | extend BackupItemFriendlyName=BackupItemFriendlyName_s ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} ; SuccessfulBackupJobs | extend JobDate = format_datetime(TimeGenerated, \"MM/dd/yy\") | summarize count(JobUniqueId_g) by BackupItemUniqueId_s, BackupItemFriendlyName, JobDate, timeOfJob | project timeOfJob, BackupItemFriendlyName, JobDate, SuccessfulBackupJobCount=count_JobUniqueId_g | sort by JobDate asc | summarize sum(SuccessfulBackupJobCount) by bin(timeOfJob, 1d)",
                               "yAxis":{
                                  "isLogarithmic":false,
                                  "units":{
                                     "baseUnitType":"",
                                     "baseUnit":"",
                                     "displayUnit":""
                                  },
                                  "customLabel":""
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"); let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), BackupItem_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project BackupItem_TimeGenerated, BackupItemFriendlyName_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let Jobs= Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\", \"\"), Job_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\", \"\") | where JobStatus_s == \"Completed\" | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s in~(\"Restore\" , \"Recovery\") | summarize arg_max(Job_TimeGenerated, *) by JobUniqueId_g | extend timeOfJob = Job_TimeGenerated; let SuccessfulBackupJobs = Jobs | join kind=leftouter ( BackupIdNameMap | extend BackupItemFriendlyName=BackupItemFriendlyName_s ) on BackupItemUniqueId_s | where ${DatasourceType}; SuccessfulBackupJobs | extend Job_Date = format_datetime(Job_TimeGenerated, \"MM/dd/yy\") | summarize count(JobUniqueId_g) by BackupItemUniqueId_s, BackupItemFriendlyName, Job_Date | project BackupItemUniqueId_s, BackupItemFriendlyName, Job_Date, SuccessfulBackupJobCount=count_JobUniqueId_g | sort by Job_Date desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Backup Item ID",
                                  "Value":"#Successful Backup Jobs"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":" let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"); let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), BackupItem_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project BackupItem_TimeGenerated, BackupItemFriendlyName_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let Jobs= Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\", \"\"), Job_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\", \"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\")| where JobStatus_s == \"Completed\" | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s in~(\"Restore\" , \"Recovery\") | summarize arg_max(Job_TimeGenerated, *) by JobUniqueId_g | extend timeOfJob = Job_TimeGenerated; let SuccessfulBackupJobs = Jobs | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s | where ${DatasourceType}; SuccessfulBackupJobs | extend Job_Date = format_datetime(Job_TimeGenerated, \"MM/dd/yy\") | summarize count() by BackupItemUniqueId_s, BackupItemFriendlyName=columnifexists(\"BackupItemFriendlyName_s1\",\"BackupItemFriendlyName_s\"), Job_Date, timeOfJob, JobUniqueId_g, JobStatus_s, ProtectedContainerUniqueId_s | sort by Job_Date desc | search {selected item}",
                               "NavigationSelect":{
                                  "NavigationQuery":" let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"); let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), BackupItem_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project BackupItem_TimeGenerated, BackupItemFriendlyName_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let Jobs= Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\", \"\"), Job_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\", \"\"), ProtectedContainerUniqueId_s = columnifexists(\"ProtectedContainerUniqueId_s\",\"\")| where JobStatus_s == \"Completed\" | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s in~(\"Restore\" , \"Recovery\") | summarize arg_max(Job_TimeGenerated, *) by JobUniqueId_g | extend timeOfJob = Job_TimeGenerated; let SuccessfulBackupJobs = Jobs | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s | where ${DatasourceType}; SuccessfulBackupJobs | extend Job_Date = format_datetime(Job_TimeGenerated, \"MM/dd/yy\") | summarize count() by BackupItemUniqueId_s, BackupItemFriendlyName=columnifexists(\"BackupItemFriendlyName_s1\",\"BackupItemFriendlyName_s\"), Job_Date, timeOfJob, JobUniqueId_g, JobStatus_s, ProtectedContainerUniqueId_s | sort by Job_Date desc | search {selected item}"
                               }
                            }
                         }
                      },
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Failed jobs by Failure Code",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Failed jobs by Failure Code",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "Donut":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), TimeGenerated =columnifexists (\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs= Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobFailureCode_s = columnifexists(\"JobFailureCode_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobStatus_s == \"Failed\" | where JobOperation_s in~(\"Restore\",\"Recovery\") | where JobUniqueId_g!=\"\"; Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count(JobUniqueId_g) by JobFailureCode_s | sort by count_JobUniqueId_g desc",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
 
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), TimeGenerated =columnifexists (\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs= Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobFailureCode_s = columnifexists(\"JobFailureCode_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobStatus_s == \"Failed\" | where JobOperation_s in~(\"Restore\",\"Recovery\") | where JobUniqueId_g!=\"\"; Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count(JobUniqueId_g) by JobFailureCode_s | sort by count_JobUniqueId_g desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Failure Code",
                                  "Value":"No of Jobs"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), TimeGenerated =columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs=Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") , JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobFailureCode_s = columnifexists(\"JobFailureCode_s\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobStatus_s == \"Failed\" | where JobOperation_s in~(\"Restore\" ,\"Recovery\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | where JobUniqueId_g!=\"\"; Jobs | join kind=leftouter (BackupIdTypeMap) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where {selected item}",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), TimeGenerated =columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs=Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") , JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobFailureCode_s = columnifexists(\"JobFailureCode_s\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobStatus_s == \"Failed\" | where JobOperation_s in~(\"Restore\" ,\"Recovery\") | summarize arg_max(TimeGenerated, *) by JobUniqueId_g | where JobUniqueId_g!=\"\"; Jobs | join kind=leftouter (BackupIdTypeMap) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where {selected item}"
                               }
                            }
                         }
                      },
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Jobs by Job Creation Time",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Jobs by Job Creation Time",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "Donut":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s= columnifexists(\"BackupItemType_s\",\"\"), BackupItem_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project BackupItem_TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let Jobs = Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\", \"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), Job_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobUniqueId_g!=\"\" | summarize arg_max(Job_TimeGenerated, *) by JobUniqueId_g | where JobOperation_s in~(\"Restore\" , \"Recovery\") ; Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | extend timeOfDay=datetime_part(\"Hour\",Job_TimeGenerated) | summarize count(JobUniqueId_g) by bin(timeOfDay,3) | extend timeBucketStart24 = iff(timeOfDay-1.5>0,timeOfDay-1.5,timeOfDay-1.5+24), timeBucketEnd24=iff(timeOfDay+1.5<24,timeOfDay+1.5,timeOfDay+1.5-24) | extend timeBucketStart12=iff(timeBucketStart24>12,timeBucketStart24-12, timeBucketStart24) , timeBucketStartMeridian = iff(timeBucketStart24<12,\"AM\", iff(timeBucketStart24<24,\"PM\",\"AM\")), timeBucketEnd12=iff(timeBucketEnd24>12,timeBucketEnd24-12, timeBucketEnd24) , timeBucketEndMeridian = iff(timeBucketEnd24<12,\"AM\", iff(timeBucketEnd24<24,\"PM\",\"AM\")) | project timeBucketStart24, timeBucketStart12 , timeBucketEnd12 , timeBucketStartMeridian , timeBucketEndMeridian , count_JobUniqueId_g | extend timeBucketStartHr=toint(timeBucketStart12), timeBucketStartMin=toint((timeBucketStart12-floor(timeBucketStart12,1))*60), timeBucketEndHr=toint(timeBucketEnd12), timeBucketEndMin=toint((timeBucketEnd12-floor(timeBucketEnd12,1))*60) | extend timeBucketStartMinString=iff(timeBucketStartMin>9,tostring(timeBucketStartMin),iff(timeBucketStartMin>0,strcat(\"0\",timeBucketStartMin), \"00\")), timeBucketEndMinString=iff(timeBucketEndMin>9,tostring(timeBucketEndMin),iff(timeBucketEndMin>0,strcat(\"0\",timeBucketEndMin), \"00\")) | extend timeBucketString = strcat(tostring(timeBucketStartHr),\":\",timeBucketStartMinString,timeBucketStartMeridian, \"-\",tostring(timeBucketEndHr), \":\", timeBucketEndMinString,timeBucketEndMeridian) | summarize noOfJobs=sum(count_JobUniqueId_g) by timeBucketString | sort by noOfJobs desc",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
 
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s= columnifexists(\"BackupItemType_s\",\"\"), BackupItem_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project BackupItem_TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let Jobs = Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\", \"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), Job_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobUniqueId_g!=\"\" | summarize arg_max(Job_TimeGenerated, *) by JobUniqueId_g | where JobOperation_s in~(\"Restore\" , \"Recovery\") ; Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | extend timeOfDay=datetime_part(\"Hour\",Job_TimeGenerated) | summarize count(JobUniqueId_g) by bin(timeOfDay,3) | extend timeBucketStart24 = iff(timeOfDay-1.5>0,timeOfDay-1.5,timeOfDay-1.5+24), timeBucketEnd24=iff(timeOfDay+1.5<24,timeOfDay+1.5,timeOfDay+1.5-24) | extend timeBucketStart12=iff(timeBucketStart24>12,timeBucketStart24-12, timeBucketStart24) , timeBucketStartMeridian = iff(timeBucketStart24<12,\"AM\", iff(timeBucketStart24<24,\"PM\",\"AM\")), timeBucketEnd12=iff(timeBucketEnd24>12,timeBucketEnd24-12, timeBucketEnd24) , timeBucketEndMeridian = iff(timeBucketEnd24<12,\"AM\", iff(timeBucketEnd24<24,\"PM\",\"AM\")) | project timeBucketStart24, timeBucketStart12 , timeBucketEnd12 , timeBucketStartMeridian , timeBucketEndMeridian , count_JobUniqueId_g | extend timeBucketStartHr=toint(timeBucketStart12), timeBucketStartMin=toint((timeBucketStart12-floor(timeBucketStart12,1))*60), timeBucketEndHr=toint(timeBucketEnd12), timeBucketEndMin=toint((timeBucketEnd12-floor(timeBucketEnd12,1))*60) | extend timeBucketStartMinString=iff(timeBucketStartMin>9,tostring(timeBucketStartMin),iff(timeBucketStartMin>0,strcat(\"0\",timeBucketStartMin), \"00\")), timeBucketEndMinString=iff(timeBucketEndMin>9,tostring(timeBucketEndMin),iff(timeBucketEndMin>0,strcat(\"0\",timeBucketEndMin), \"00\")) | extend timeBucketString = strcat(tostring(timeBucketStartHr),\":\",timeBucketStartMinString,timeBucketStartMeridian, \"-\",tostring(timeBucketEndHr), \":\", timeBucketEndMinString,timeBucketEndMeridian) | summarize noOfJobs=sum(count_JobUniqueId_g) by timeBucketString | sort by noOfJobs desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Time of Day",
                                  "Value":"No of Jobs"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName == \"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists(\"BackupItemType_s\", \"\"), BackupItem_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs = Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") , JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), Job_TimeGenerated= columnifexists(\"TimeGenerated\",\"\"), ProtectedContainerUniqueId_s=columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobUniqueId_g!=\"\" | where JobOperation_s in~(\"Restore\" ,\"Recovery\") | summarize arg_max(Job_TimeGenerated, *) by JobUniqueId_g; let JobsWithTimeBucket = Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | extend timeOfDay=datetime_part(\"Hour\",Job_TimeGenerated) | summarize count(JobUniqueId_g) by bin(timeOfDay,3), JobUniqueId_g, BackupItemUniqueId_s, ProtectedContainerUniqueId_s, JobStatus_s | extend timeBucketStart24 = iff(timeOfDay-1.5>0,timeOfDay-1.5,timeOfDay-1.5+24), timeBucketEnd24=iff(timeOfDay+1.5<24,timeOfDay+1.5,timeOfDay+1.5-24) | extend timeBucketStart12=iff(timeBucketStart24>12,timeBucketStart24-12, timeBucketStart24) , timeBucketStartMeridian = iff(timeBucketStart24<12,\"AM\", iff(timeBucketStart24<24,\"PM\",\"AM\")), timeBucketEnd12=iff(timeBucketEnd24>12,timeBucketEnd24-12, timeBucketEnd24) , timeBucketEndMeridian = iff(timeBucketEnd24<12,\"AM\", iff(timeBucketEnd24<24,\"PM\",\"AM\")) | extend timeBucketStartHr=toint(timeBucketStart12), timeBucketStartMin=toint((timeBucketStart12-floor(timeBucketStart12,1))*60), timeBucketEndHr=toint(timeBucketEnd12), timeBucketEndMin=toint((timeBucketEnd12-floor(timeBucketEnd12,1))*60) | extend timeBucketStartMinString=iff(timeBucketStartMin>9,tostring(timeBucketStartMin),iff(timeBucketStartMin>0,strcat(\"0\",timeBucketStartMin), \"00\")), timeBucketEndMinString=iff(timeBucketEndMin>9,tostring(timeBucketEndMin),iff(timeBucketEndMin>0,strcat(\"0\",timeBucketEndMin), \"00\")) | extend timeBucketString = strcat(tostring(timeBucketStartHr),\":\",timeBucketStartMinString,timeBucketStartMeridian, \"-\",tostring(timeBucketEndHr), \":\", timeBucketEndMinString,timeBucketEndMeridian) | sort by count_JobUniqueId_g desc; let Selection=JobsWithTimeBucket | search {selected item}; Selection | join( JobsWithTimeBucket) on timeBucketString | project TimeOfDay=timeBucketString, JobUniqueId_g, BackupItemUniqueId_s, ProtectedContainerUniqueId_s, JobStatus_s",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName == \"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists(\"BackupItemType_s\", \"\"), BackupItem_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Jobs = Events | where OperationName==\"Job\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") , JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), Job_TimeGenerated= columnifexists(\"TimeGenerated\",\"\"), ProtectedContainerUniqueId_s=columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\")| extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobUniqueId_g!=\"\" | where JobOperation_s in~(\"Restore\" ,\"Recovery\") | summarize arg_max(Job_TimeGenerated, *) by JobUniqueId_g; let JobsWithTimeBucket = Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | extend timeOfDay=datetime_part(\"Hour\",Job_TimeGenerated) | summarize count(JobUniqueId_g) by bin(timeOfDay,3), JobUniqueId_g, BackupItemUniqueId_s, ProtectedContainerUniqueId_s, JobStatus_s | extend timeBucketStart24 = iff(timeOfDay-1.5>0,timeOfDay-1.5,timeOfDay-1.5+24), timeBucketEnd24=iff(timeOfDay+1.5<24,timeOfDay+1.5,timeOfDay+1.5-24) | extend timeBucketStart12=iff(timeBucketStart24>12,timeBucketStart24-12, timeBucketStart24) , timeBucketStartMeridian = iff(timeBucketStart24<12,\"AM\", iff(timeBucketStart24<24,\"PM\",\"AM\")), timeBucketEnd12=iff(timeBucketEnd24>12,timeBucketEnd24-12, timeBucketEnd24) , timeBucketEndMeridian = iff(timeBucketEnd24<12,\"AM\", iff(timeBucketEnd24<24,\"PM\",\"AM\")) | extend timeBucketStartHr=toint(timeBucketStart12), timeBucketStartMin=toint((timeBucketStart12-floor(timeBucketStart12,1))*60), timeBucketEndHr=toint(timeBucketEnd12), timeBucketEndMin=toint((timeBucketEnd12-floor(timeBucketEnd12,1))*60) | extend timeBucketStartMinString=iff(timeBucketStartMin>9,tostring(timeBucketStartMin),iff(timeBucketStartMin>0,strcat(\"0\",timeBucketStartMin), \"00\")), timeBucketEndMinString=iff(timeBucketEndMin>9,tostring(timeBucketEndMin),iff(timeBucketEndMin>0,strcat(\"0\",timeBucketEndMin), \"00\")) | extend timeBucketString = strcat(tostring(timeBucketStartHr),\":\",timeBucketStartMinString,timeBucketStartMeridian, \"-\",tostring(timeBucketEndHr), \":\", timeBucketEndMinString,timeBucketEndMeridian) | sort by count_JobUniqueId_g desc; let Selection=JobsWithTimeBucket | search {selected item}; Selection | join( JobsWithTimeBucket) on timeBucketString | project TimeOfDay=timeBucketString, JobUniqueId_g, BackupItemUniqueId_s, ProtectedContainerUniqueId_s, JobStatus_s"
                               }
                            }
                         }
                      },
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Jobs by Job Duration",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Jobs by Job Duration",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "Donut":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItem_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project BackupItem_TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let Jobs = Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists (\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\") , Job_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobDurationInSecs_s = columnifexists(\"JobDurationInSecs_s\", \"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s in~(\"Restore\" , \"Recovery\") |summarize arg_max(Job_TimeGenerated,*) by JobUniqueId_g ; Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count(JobUniqueId_g) by bin(todouble(JobDurationInSecs_s), 600) | extend JobDurationInMin = todouble(JobDurationInSecs_s) / 60 | extend JobDurationLowerLimit=iff(JobDurationInMin>5,JobDurationInMin - 5,todouble(0)), JobDurationUpperLimit = JobDurationInMin + 5 | extend JobDurationString=strcat(tostring(JobDurationLowerLimit),\" to \",tostring(JobDurationUpperLimit), \" min\") | summarize noOfJobs= sum(count_JobUniqueId_g) by JobDurationString | sort by noOfJobs desc",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
 
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItem_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project BackupItem_TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let Jobs = Events | where OperationName == \"Job\" | extend BackupItemUniqueId_s = columnifexists (\"BackupItemUniqueId_s\",\"\"), JobOperation_s = columnifexists(\"JobOperation_s\",\"\") , Job_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobDurationInSecs_s = columnifexists(\"JobDurationInSecs_s\", \"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where JobOperation_s in~(\"Restore\" , \"Recovery\") |summarize arg_max(Job_TimeGenerated,*) by JobUniqueId_g ; Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count(JobUniqueId_g) by bin(todouble(JobDurationInSecs_s), 600) | extend JobDurationInMin = todouble(JobDurationInSecs_s) / 60 | extend JobDurationLowerLimit=iff(JobDurationInMin>5,JobDurationInMin - 5,todouble(0)), JobDurationUpperLimit = JobDurationInMin + 5 | extend JobDurationString=strcat(tostring(JobDurationLowerLimit),\" to \",tostring(JobDurationUpperLimit), \" min\") | summarize noOfJobs= sum(count_JobUniqueId_g) by JobDurationString | sort by noOfJobs desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Job Duration",
                                  "Value":"No of Jobs"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let Jobs = Events | where OperationName == \"Job\" | extend JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), Job_TimeGenerated = columnifexists(\"TimeGenerated\", \"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobDurationInSecs_s = columnifexists(\"JobDurationInSecs_s\",\"\"), ProtectedContainerUniqueId_s =columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), JobStatus_s=columnifexists(\"JobStatus_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | summarize arg_max(Job_TimeGenerated,*) by JobUniqueId_g; let BackupIdTypeMap = BackupItems |extend BackupItem_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project BackupItem_TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let JobsWithDurationString = Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | where JobOperation_s in~(\"Restore\" ,\"Recovery\") | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count(JobUniqueId_g) by bin(todouble(JobDurationInSecs_s), 600), JobUniqueId_g, BackupItemUniqueId_s, ProtectedContainerUniqueId_s, JobStatus_s | extend JobDurationInMin = todouble(JobDurationInSecs_s) / 60 | extend JobDurationLowerLimit=iff(JobDurationInMin>5,JobDurationInMin - 5,todouble(0)), JobDurationUpperLimit = JobDurationInMin + 5 | extend JobDurationString=strcat(tostring(JobDurationLowerLimit),\" to \",tostring(JobDurationUpperLimit), \" min\") | sort by count_JobUniqueId_g desc; let Selection = JobsWithDurationString | search {selected item}; Selection | join ( JobsWithDurationString ) on JobDurationString | project JobDurationString,JobUniqueId_g, JobStatus_s, BackupItemUniqueId_s, ProtectedContainerUniqueId_s ",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let Jobs = Events | where OperationName == \"Job\" | extend JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), Job_TimeGenerated = columnifexists(\"TimeGenerated\", \"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobDurationInSecs_s = columnifexists(\"JobDurationInSecs_s\",\"\"), ProtectedContainerUniqueId_s =columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), JobStatus_s=columnifexists(\"JobStatus_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | summarize arg_max(Job_TimeGenerated,*) by JobUniqueId_g; let BackupIdTypeMap = BackupItems |extend BackupItem_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project BackupItem_TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let JobsWithDurationString = Jobs | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | where JobOperation_s in~(\"Restore\" ,\"Recovery\") | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count(JobUniqueId_g) by bin(todouble(JobDurationInSecs_s), 600), JobUniqueId_g, BackupItemUniqueId_s, ProtectedContainerUniqueId_s, JobStatus_s | extend JobDurationInMin = todouble(JobDurationInSecs_s) / 60 | extend JobDurationLowerLimit=iff(JobDurationInMin>5,JobDurationInMin - 5,todouble(0)), JobDurationUpperLimit = JobDurationInMin + 5 | extend JobDurationString=strcat(tostring(JobDurationLowerLimit),\" to \",tostring(JobDurationUpperLimit), \" min\") | sort by count_JobUniqueId_g desc; let Selection = JobsWithDurationString | search {selected item}; Selection | join ( JobsWithDurationString ) on JobDurationString | project JobDurationString,JobUniqueId_g, JobStatus_s, BackupItemUniqueId_s, ProtectedContainerUniqueId_s "
                               }
                            }
                         }
                      }
                   ],
                   "Filters":[
                      {
                         "FieldName":"BackupItemType_s",
                         "QueryForValues":"AzureDiagnostics | where Category == \"AzureBackupReport\" |distinct BackupItemType_s",
                         "Title":"DatasourceType"
                      }
                   ],
                   "OverviewTile":{
                      "Id":"SingleQueryDonutBuilderTileV1",
                      "Type":"OverviewTile",
                      "Version":2,
                      "Configuration":{
                         "Donut":{
                            "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; Events | extend JobOperationSubType_s = columnifexists(\"JobOperationSubType_s\", \"\") | where OperationName == \"Job\" | extend JobOperation_s=columnifexists(\"JobOperation_s\",\"\"), JobUniqueId_g = columnifexists(\"JobUniqueId_g\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\") | where JobOperation_s in~(\"Restore\",\"Recovery\") | summarize dcount(JobUniqueId_g) by JobStatus_s ",
                            "CenterLegend":{
                               "Text":"Total",
                               "Operation":"Sum",
                               "ArcsToSelect":[
 
                               ]
                            },
                            "Options":{
                               "colors":[
                                  "#00188f",
                                  "#0072c6",
                                  "#00bcf2"
                               ],
                               "valueColorMapping":[
                                  {
                                     "value":"Completed",
                                     "color":"#55d455"
                                  },
                                  {
                                     "value":"Failed",
                                     "color":"#eb3c00"
                                  },
                                  {
                                     "value":"CompletedWithWarnings",
                                     "color":"#ffb900"
                                  }
                               ]
                            }
                         },
                         "Advanced":{
                            "DataFlowVerification":{
                               "Enabled":false,
                               "Query":"search * | limit 1 | project TimeGenerated",
                               "Message":""
                            }
                         }
                      }
                   }
                }
             },
             {
                "apiVersion":"2015-11-01-preview",
                "name": "[concat(parameters('workspaceName'), '/', 'Alerts from Azure Resources Backup')]",
                "type":"Microsoft.OperationalInsights/workspaces/views",
                "location":"[parameters('workspaceLocation')]",
                "properties":{
                   "Id":"Alerts from Azure Resources Backup",
                   "Name":"[variables('omsSolutions').customSolution.view4]",
                   "Author":"[variables('omsSolutions').customSolution.author]",
                   "Source":"Local",
                   "Version":2,
                   "Dashboard":[
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Alerts by Alert Type",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Alerts by Alert Type",
                               "Subtitle":"You can filter by Datasource Type by Clicking the (+) above"
                            },
                            "Donut":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertType_s=columnifexists(\"AlertType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| extend AlertUniqueId=columnifexists(\"AlertUniqueId_s\", \"AlertUniqueId_g\") | where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId; Alerts | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count() by AlertType_s | sort by count_ desc ",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
 
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertType_s=columnifexists(\"AlertType_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\")| extend AlertUniqueId=columnifexists(\"AlertUniqueId_s\", \"AlertUniqueId_g\") | where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId; Alerts | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count() by AlertType_s | sort by count_ desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "ColumnsTitle":{
                                  "Name":"Alert Type",
                                  "Value":"No of Alerts"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":" let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts = Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertType_s=columnifexists(\"AlertType_s\",\"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_s\",\"AlertUniqueId_g\") | where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId; let Selection = Alerts | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count() by AlertType_s | sort by count_ desc | search {selected item}; Alerts | join kind=leftsemi ( Selection ) on AlertType_s | project AlertUniqueId, AlertType_s, TimeGenerated, AlertStatus_s, BackupItemUniqueId_s ",
                               "NavigationSelect":{
                                  "NavigationQuery":" let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts = Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertType_s=columnifexists(\"AlertType_s\",\"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_s\",\"AlertUniqueId_g\") | where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId; let Selection = Alerts | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count() by AlertType_s | sort by count_ desc | search {selected item}; Alerts | join kind=leftsemi ( Selection ) on AlertType_s | project AlertUniqueId, AlertType_s, TimeGenerated, AlertStatus_s, BackupItemUniqueId_s "
                               }
                            }
                         }
                      },
                      {
                         "Id":"TwoTrendsAndListBuilderBlade",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Alerts Created vs Alerts Resolved",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Trend1":{
                               "Legend":"Alerts Created",
                               "LegendColor":"#00188f",
                               "ChartQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts = Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\", \"\" ), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_s\", \"AlertUniqueId_g\") | where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_min(TimeGenerated, *) by AlertUniqueId; Alerts | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count(AlertUniqueId) by bin(TimeGenerated,1h)",
                               "Calculation":{
                                  "Operation":"Sum"
                               }
                            },
                            "Trend2":{
                               "Legend":"Alerts Resolved",
                               "LegendColor":"#0072c6",
                               "ChartQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s= columnifexists(\"BackupItemType_s\",\"\") , BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\"| project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts = Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\") , AlertStatus_s=columnifexists(\"AlertStatus_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId = columnifexists(\"AlertUniqueId_s\",\"AlertUniqueId_g\") | where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId_s | where AlertStatus_s==\"Resolved\"; Alerts | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count(AlertUniqueId) by bin(TimeGenerated,1h)",
                               "Calculation":{
                                  "Operation":"Sum"
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts = Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\",\"\"), AlertType_s=columnifexists(\"AlertType_s\",\"\") | extend AlertUniqueId = columnifexists (\"AlertUniqueId_s\",\"AlertUniqueId_g\") | where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\"); Alerts | join kind=leftouter (BackupIdTypeMap) on BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by AlertUniqueId | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | extend CurrentStatus = AlertStatus_s | join kind=leftouter ( Alerts | summarize arg_max(TimeGenerated,*) by TimeGenerated, AlertUniqueId | summarize HitCount = count() by AlertUniqueId ) on AlertUniqueId | project AlertUniqueId , AlertStatus_s, AlertType_s, HitCount | sort by AlertStatus_s asc, HitCount desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Alert Unique ID",
                                  "Value":"Hit Count"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts = Events | where OperationName == \"Alert\"| extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertType_s=columnifexists(\"AlertType_s\",\"\"), AlertCode_s=columnifexists(\"AlertCode_s\",\"\") , AlertStatus_s=columnifexists(\"AlertStatus_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_s\",\"AlertUniqueId_g\") | where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") ; let Selection = Alerts | join kind=leftouter ( BackupIdTypeMap) on BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by AlertUniqueId | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | extend CurrentStatus = AlertStatus_s | join kind=leftouter ( Alerts | summarize arg_max(TimeGenerated,*) by TimeGenerated, AlertUniqueId | summarize HitCount = count() by AlertUniqueId ) on AlertUniqueId | project AlertUniqueId , AlertStatus_s, AlertCode_s, AlertType_s, HitCount | sort by AlertStatus_s asc, HitCount desc | search {selected item}; Alerts | join kind=inner(Selection) on AlertUniqueId | summarize arg_max(TimeGenerated, *) by AlertUniqueId |project TimeGenerated, AlertUniqueId, BackupItemUniqueId_s, AlertType_s, AlertCode_s, AlertStatus_s, HitCount",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts = Events | where OperationName == \"Alert\"| extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertType_s=columnifexists(\"AlertType_s\",\"\"), AlertCode_s=columnifexists(\"AlertCode_s\",\"\") , AlertStatus_s=columnifexists(\"AlertStatus_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_s\",\"AlertUniqueId_g\") | where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") ; let Selection = Alerts | join kind=leftouter ( BackupIdTypeMap) on BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by AlertUniqueId | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | extend CurrentStatus = AlertStatus_s | join kind=leftouter ( Alerts | summarize arg_max(TimeGenerated,*) by TimeGenerated, AlertUniqueId | summarize HitCount = count() by AlertUniqueId ) on AlertUniqueId | project AlertUniqueId , AlertStatus_s, AlertCode_s, AlertType_s, HitCount | sort by AlertStatus_s asc, HitCount desc | search {selected item}; Alerts | join kind=inner(Selection) on AlertUniqueId | summarize arg_max(TimeGenerated, *) by AlertUniqueId |project TimeGenerated, AlertUniqueId, BackupItemUniqueId_s, AlertType_s, AlertCode_s, AlertStatus_s, HitCount"
                               }
                            },
                            "Blade":{
                               "NavigationSelect":{
 
                               }
                            }
                         }
                      },
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Active Alerts by Severity",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Active Alerts by Severity",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "Donut":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\", \"\")|where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertSeverity_s=columnifexists(\"AlertSeverity_s\",\"\"), AlertStatus_s=columnifexists(\"AlertStatus_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_s\",\"AlertUniqueId_g\") | where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId_s; Alerts | join kind=leftouter (BackupIdTypeMap) on BackupItemUniqueId_s | where AlertUniqueId_s != \"\" | where AlertStatus_s==\"Active\" | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count() by AlertSeverity_s | sort by count_ desc",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
                                     {
                                        "value":"Critical",
                                        "color":"#eb3c00"
                                     },
                                     {
                                        "value":"Warning",
                                        "color":"#ff8c00"
                                     },
                                     {
                                        "value":"Information",
                                        "color":"#fff100"
                                     }
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\", \"\")|where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertSeverity_s=columnifexists(\"AlertSeverity_s\",\"\"), AlertStatus_s=columnifexists(\"AlertStatus_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_s\",\"AlertUniqueId_g\") | where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId_s; Alerts | join kind=leftouter (BackupIdTypeMap) on BackupItemUniqueId_s | where AlertUniqueId_s != \"\" | where AlertStatus_s==\"Active\" | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count() by AlertSeverity_s | sort by count_ desc ",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Alert Severity",
                                  "Value":"No of Alerts"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertSeverity_s=columnifexists(\"AlertSeverity_s\",\"\"), AlertCode_s=columnifexists(\"AlertCode_s\",\"\"), AlertStatus_s=columnifexists(\"AlertStatus_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_s\",\"AlertUniqueId_g\") | where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId; let Selection = Alerts | join kind=leftouter ( BackupIdTypeMap) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where AlertStatus_s==\"Active\" | summarize count() by AlertSeverity_s | sort by count_ desc | search {selected item}; Alerts | join kind=leftsemi(Selection) on AlertSeverity_s |where AlertStatus_s==\"Active\" | project AlertUniqueId, AlertSeverity_s, BackupItemUniqueId_s, AlertCode_s, AlertStatus_s, TimeGenerated ",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertSeverity_s=columnifexists(\"AlertSeverity_s\",\"\"), AlertCode_s=columnifexists(\"AlertCode_s\",\"\"), AlertStatus_s=columnifexists(\"AlertStatus_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_s\",\"AlertUniqueId_g\") | where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId; let Selection = Alerts | join kind=leftouter ( BackupIdTypeMap) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where AlertStatus_s==\"Active\" | summarize count() by AlertSeverity_s | sort by count_ desc | search {selected item}; Alerts | join kind=leftsemi(Selection) on AlertSeverity_s |where AlertStatus_s==\"Active\" | project AlertUniqueId, AlertSeverity_s, BackupItemUniqueId_s, AlertCode_s, AlertStatus_s, TimeGenerated "
                               }
                            }
                         }
                      },
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Resolved Alerts by Severity",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Resolved Alerts by Severity",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "Donut":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\", \"\")|where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertSeverity_s=columnifexists(\"AlertSeverity_s\",\"\"), AlertStatus_s=columnifexists(\"AlertStatus_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_s\",\"AlertUniqueId_g\") | where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId_s; Alerts | join kind=leftouter (BackupIdTypeMap) on BackupItemUniqueId_s | where AlertUniqueId_s != \"\" | where AlertStatus_s==\"Resolved\" | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count() by AlertSeverity_s | sort by count_ desc",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
                                     {
                                        "value":"Critical",
                                        "color":"#eb3c00"
                                     },
                                     {
                                        "value":"Warning",
                                        "color":"#ff8c00"
                                     },
                                     {
                                        "value":"Information",
                                        "color":"#fff100"
                                     }
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\", \"\")|where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertSeverity_s=columnifexists(\"AlertSeverity_s\",\"\"), AlertStatus_s=columnifexists(\"AlertStatus_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_s\",\"AlertUniqueId_g\") | where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId_s; Alerts | join kind=leftouter (BackupIdTypeMap) on BackupItemUniqueId_s | where AlertUniqueId_s != \"\" | where AlertStatus_s==\"Resolved\" | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count() by AlertSeverity_s | sort by count_ desc ",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Alert Severity",
                                  "Value":"Count"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertSeverity_s=columnifexists(\"AlertSeverity_s\",\"\"), AlertCode_s=columnifexists(\"AlertCode_s\",\"\"), AlertStatus_s=columnifexists(\"AlertStatus_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_s\",\"AlertUniqueId_g\") | where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId; let Selection = Alerts | join kind=leftouter ( BackupIdTypeMap) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where AlertStatus_s==\"Active\" | summarize count() by AlertSeverity_s | sort by count_ desc | search {selected item}; Alerts | join kind=leftsemi(Selection) on AlertSeverity_s |where AlertStatus_s==\"Resolved\" | project AlertUniqueId, AlertSeverity_s, BackupItemUniqueId_s, AlertCode_s, AlertStatus_s, TimeGenerated ",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertSeverity_s=columnifexists(\"AlertSeverity_s\",\"\"), AlertCode_s=columnifexists(\"AlertCode_s\",\"\"), AlertStatus_s=columnifexists(\"AlertStatus_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_s\",\"AlertUniqueId_g\") | where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId; let Selection = Alerts | join kind=leftouter ( BackupIdTypeMap) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where AlertStatus_s==\"Active\" | summarize count() by AlertSeverity_s | sort by count_ desc | search {selected item}; Alerts | join kind=leftsemi(Selection) on AlertSeverity_s |where AlertStatus_s==\"Resolved\" | project AlertUniqueId, AlertSeverity_s, BackupItemUniqueId_s, AlertCode_s, AlertStatus_s, TimeGenerated "
                               }
                            }
                         }
                      },
                      {
                         "Id":"LineChartBuilderBlade",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Avg Alert Resolution Time per week (hrs)",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Avg Alert Resolution Time per week (hrs)",
                               "Subtitle":"Stretch the time axis to see the trend (above time filter)"
                            },
                            "LineChart":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")|where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts = Events | where OperationName == \"Alert\" | extend BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_g = columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\",\"\"), Alert_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId = columnifexists(\"AlertUniqueId_s\",\"AlertUniqueId_g\") | where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\"); let AlertStarts= Alerts |summarize arg_min(TimeGenerated, *) by AlertUniqueId | extend startTime=Alert_TimeGenerated; let AlertEnds= Alerts | summarize arg_max(TimeGenerated, *) by AlertUniqueId | where AlertStatus_s==\"Resolved\" | extend endTime=Alert_TimeGenerated; let Table1 = AlertStarts | join kind=inner ( AlertEnds ) on AlertUniqueId | extend timeToResolveInHrs=datetime_diff(\"hour\",endTime,startTime); Table1 | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s2\",\"BackupItemType_s\") | where ${DatasourceType} | summarize avg(timeToResolveInHrs) by bin(Alert_TimeGenerated,7d)",
                               "yAxis":{
                                  "isLogarithmic":false,
                                  "units":{
                                     "baseUnitType":"",
                                     "baseUnit":"",
                                     "displayUnit":""
                                  },
                                  "customLabel":""
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")|where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts = Events | where OperationName == \"Alert\" | extend BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_g = columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\",\"\"), Alert_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId = columnifexists(\"AlertUniqueId_s\",\"AlertUniqueId_g\") | where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\"); let AlertStarts= Alerts |summarize arg_min(TimeGenerated, *) by AlertUniqueId | extend startTime=Alert_TimeGenerated; let AlertEnds= Alerts | summarize arg_max(TimeGenerated, *) by AlertUniqueId | where AlertStatus_s==\"Resolved\" | extend endTime=Alert_TimeGenerated; let Table1 = AlertStarts | join kind=inner ( AlertEnds ) on AlertUniqueId | extend timeToResolveInHrs=datetime_diff(\"hour\",endTime,startTime); Table1 | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s2\",\"BackupItemType_s\") | where ${DatasourceType} | summarize avg(timeToResolveInHrs) by bin(Alert_TimeGenerated,7d)",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Week Start",
                                  "Value":"Average resolution Time (hrs)"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend TimeGenerated=columnifexists(\"TimeGenerated\", \"\"), BackupItemType_s = columnifexists(\"BackupItemType_s\", \"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts = Events | where OperationName == \"Alert\" | extend BackupManagementType_s = columnifexists(\"BackupManagementType_s\", \"\"), AlertUniqueId_g = columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s = columnifexists(\"AlertUniqueId_s\",\"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\")| extend AlertUniqueId = columnifexists(\"AlertUniqueId_s\", \"AlertUniqueId_g\"), Alert_TimeGenerated = columnifexists(\"TimeGenerated\",\"\") | where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") ; let AlertStarts= Alerts | summarize arg_min(TimeGenerated, *) by AlertUniqueId | extend startTime=Alert_TimeGenerated; let AlertEnds=Alerts | summarize arg_max(TimeGenerated, *) by AlertUniqueId | where AlertStatus_s==\"Resolved\" | extend endTime=Alert_TimeGenerated; let Table1 = AlertStarts | join kind=inner ( AlertEnds ) on AlertUniqueId | extend timeToResolveInHrs=datetime_diff(\"hour\",endTime,startTime); Table1 | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s2\",\"BackupItemType_s\") | where ${DatasourceType} | extend weekStart=bin(TimeGenerated,7d) | summarize avg(timeToResolveInHrs) by weekStart",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend TimeGenerated=columnifexists(\"TimeGenerated\", \"\"), BackupItemType_s = columnifexists(\"BackupItemType_s\", \"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts = Events | where OperationName == \"Alert\" | extend BackupManagementType_s = columnifexists(\"BackupManagementType_s\", \"\"), AlertUniqueId_g = columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s = columnifexists(\"AlertUniqueId_s\",\"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\")| extend AlertUniqueId = columnifexists(\"AlertUniqueId_s\", \"AlertUniqueId_g\"), Alert_TimeGenerated = columnifexists(\"TimeGenerated\",\"\") | where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") ; let AlertStarts= Alerts | summarize arg_min(TimeGenerated, *) by AlertUniqueId | extend startTime=Alert_TimeGenerated; let AlertEnds=Alerts | summarize arg_max(TimeGenerated, *) by AlertUniqueId | where AlertStatus_s==\"Resolved\" | extend endTime=Alert_TimeGenerated; let Table1 = AlertStarts | join kind=inner ( AlertEnds ) on AlertUniqueId | extend timeToResolveInHrs=datetime_diff(\"hour\",endTime,startTime); Table1 | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s2\",\"BackupItemType_s\") | where ${DatasourceType} | extend weekStart=bin(TimeGenerated,7d) | summarize avg(timeToResolveInHrs) by weekStart"
                               }
                            }
                         }
                      },
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Top 3 backup Items by Avg Alert Resolution time",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Breakup by Avg Alert Resolution time (hrs)",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "Donut":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists (\"BackupItemFriendlyName_s\", \"\"), TimeGenerated = columnifexists(\"TimeGenerated\", \"\"), BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists (\"BackupItemUniqueId_s\", \"\") |where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s , BackupItemType_s, BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts= Events | where OperationName == \"Alert\" | extend BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_g = columnifexists (\"AlertUniqueId_g\", \"\"), AlertUniqueId_s = columnifexists (\"AlertUniqueId_s\",\"\"), Alert_TimeGenerated = columnifexists (\"TimeGenerated\", \"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\", \"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId = columnifexists (\"AlertUniqueId_s\", \"AlertUniqueId_g\")|where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") ; let AlertStarts=Alerts | summarize arg_min(TimeGenerated, *) by AlertUniqueId | extend startTime=Alert_TimeGenerated; let AlertEnds=Alerts | summarize arg_max(TimeGenerated, *) by AlertUniqueId | where AlertStatus_s==\"Resolved\" | extend endTime=Alert_TimeGenerated; let Table1 = AlertStarts | join kind=inner ( AlertEnds ) on AlertUniqueId | extend timeToResolveInHrs=datetime_diff(\"hour\",endTime,startTime); let Table2 = Table1 | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s2\",\"BackupItemType_s\") | where ${DatasourceType} ; Table2 | extend BackupItemFriendlyName=columnifexists(\"BackupItemFriendlyName_s2\",\"BackupItemFriendlyName_s\") | summarize avg(timeToResolveInHrs) by BackupItemFriendlyName | sort by avg_timeToResolveInHrs desc",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
 
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists (\"BackupItemFriendlyName_s\", \"\"), TimeGenerated = columnifexists(\"TimeGenerated\", \"\"), BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists (\"BackupItemUniqueId_s\", \"\") |where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s , BackupItemType_s, BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts= Events | where OperationName == \"Alert\" | extend BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_g = columnifexists (\"AlertUniqueId_g\", \"\"), AlertUniqueId_s = columnifexists (\"AlertUniqueId_s\",\"\"), Alert_TimeGenerated = columnifexists (\"TimeGenerated\", \"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\", \"\") , BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| extend AlertUniqueId = columnifexists (\"AlertUniqueId_s\", \"AlertUniqueId_g\")|where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") ; let AlertStarts=Alerts | summarize arg_min(TimeGenerated, *) by AlertUniqueId | extend startTime=Alert_TimeGenerated; let AlertEnds=Alerts | summarize arg_max(TimeGenerated, *) by AlertUniqueId | where AlertStatus_s==\"Resolved\" | extend endTime=Alert_TimeGenerated; let Table1 = AlertStarts | join kind=inner ( AlertEnds ) on AlertUniqueId | extend timeToResolveInHrs=datetime_diff(\"hour\",endTime,startTime); let Table2 = Table1 | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s2\",\"BackupItemType_s\") | where ${DatasourceType} ; Table2 | extend BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s2\",\"BackupItemFriendlyName_s\") | summarize avg(timeToResolveInHrs) by BackupItemUniqueId_s, BackupItemFriendlyName | sort by avg_timeToResolveInHrs desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Backup Item Id",
                                  "Value":"Avg Alerts Resolution Time"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists (\"BackupItemFriendlyName_s\", \"\"), TimeGenerated = columnifexists(\"TimeGenerated\", \"\"), BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists (\"BackupItemUniqueId_s\", \"\") |where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s , BackupItemType_s, BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts= Events | where OperationName == \"Alert\" | extend BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_g = columnifexists (\"AlertUniqueId_g\", \"\"), AlertUniqueId_s = columnifexists (\"AlertUniqueId_s\",\"\"), Alert_TimeGenerated = columnifexists (\"TimeGenerated\", \"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\", \"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId = columnifexists (\"AlertUniqueId_s\", \"AlertUniqueId_g\")|where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") ; let AlertStarts=Alerts | summarize arg_min(TimeGenerated, *) by AlertUniqueId | extend startTime=Alert_TimeGenerated; let AlertEnds=Alerts | summarize arg_max(TimeGenerated, *) by AlertUniqueId | where AlertStatus_s==\"Resolved\" | extend endTime=Alert_TimeGenerated; let Table1 = AlertStarts | join kind=inner ( AlertEnds ) on AlertUniqueId | extend timeToResolveInHrs=datetime_diff(\"hour\",endTime,startTime); let Table2 = Table1 | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s2\",\"BackupItemType_s\") | where ${DatasourceType} ; Table2 | extend BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s2\",\"BackupItemFriendlyName_s\") | summarize avg(timeToResolveInHrs) by BackupItemUniqueId_s, BackupItemFriendlyName | sort by avg_timeToResolveInHrs desc | search {selected item}",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists (\"BackupItemFriendlyName_s\", \"\"), TimeGenerated = columnifexists(\"TimeGenerated\", \"\"), BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists (\"BackupItemUniqueId_s\", \"\") |where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s , BackupItemType_s, BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts= Events | where OperationName == \"Alert\" | extend BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_g = columnifexists (\"AlertUniqueId_g\", \"\"), AlertUniqueId_s = columnifexists (\"AlertUniqueId_s\",\"\"), Alert_TimeGenerated = columnifexists (\"TimeGenerated\", \"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\", \"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId = columnifexists (\"AlertUniqueId_s\", \"AlertUniqueId_g\")|where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") ; let AlertStarts=Alerts | summarize arg_min(TimeGenerated, *) by AlertUniqueId | extend startTime=Alert_TimeGenerated; let AlertEnds=Alerts | summarize arg_max(TimeGenerated, *) by AlertUniqueId | where AlertStatus_s==\"Resolved\" | extend endTime=Alert_TimeGenerated; let Table1 = AlertStarts | join kind=inner ( AlertEnds ) on AlertUniqueId | extend timeToResolveInHrs=datetime_diff(\"hour\",endTime,startTime); let Table2 = Table1 | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s2\",\"BackupItemType_s\") | where ${DatasourceType} ; Table2 | extend BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s2\",\"BackupItemFriendlyName_s\") | summarize avg(timeToResolveInHrs) by BackupItemUniqueId_s, BackupItemFriendlyName | sort by avg_timeToResolveInHrs desc | search {selected item}"
                               }
                            }
                         }
                      }
                   ],
                   "Filters":[
                      {
                         "FieldName":"BackupItemType_s",
                         "QueryForValues":"AzureDiagnostics | where Category == \"AzureBackupReport\" |distinct BackupItemType_s",
                         "Title":"DatasourceType"
                      }
                   ],
                   "OverviewTile":{
                      "Id":"DoubleNumberBuilderTile",
                      "Type":"OverviewTile",
                      "Version":2,
                      "Configuration":{
                         "TileOne":{
                            "Legend":"Alerts Created in Period",
                            "Query":"AzureDiagnostics | where Category == \"AzureBackupReport\"| where SchemaVersion_s==\"V2\" | where OperationName == \"Alert\" | extend BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_s\",\"AlertUniqueId_g\") | where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId | count "
                         },
                         "TileTwo":{
                            "Legend":"Active Alerts Created in Period",
                            "Query":" AzureDiagnostics | where Category == \"AzureBackupReport\"| where SchemaVersion_s==\"V2\" | where OperationName == \"Alert\" | extend BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_s\",\"AlertUniqueId_g\") | where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId | where AlertStatus_s == \"Active\" |count "
                         },
                         "Advanced":{
                            "DataFlowVerification":{
                               "Enabled":false,
                               "Query":"search * | limit 1 | project TimeGenerated",
                               "Message":""
                            }
                         }
                      }
                   }
                }
             },
             {
                "apiVersion":"2015-11-01-preview",
				"name": "[concat(parameters('workspaceName'), '/', 'Alerts from On-Premises Resources Backup')]",
                "type":"Microsoft.OperationalInsights/workspaces/views",
                "location":"[parameters('workspaceLocation')]",
                "properties":{
                   "Id":"Alerts from On-Premises Resources Backup",
                   "Name":"[variables('omsSolutions').customSolution.view5]",
                   "Author":"[variables('omsSolutions').customSolution.author]",
                   "Source":"Local",
                   "Version":2,
                   "Dashboard":[
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Alerts by Alert Type",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Alerts by Alert Type",
                               "Subtitle":"Filter by Datasource Type by Clicking the (+) above"
                            },
                            "Donut":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertType_s=columnifexists(\"AlertType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_g\",\"AlertUniqueId_s\") | where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId; Alerts | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count() by AlertType_s | sort by count_ desc",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
 
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertType_s=columnifexists(\"AlertType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_g\",\"AlertUniqueId_s\") | where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId; Alerts | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count() by AlertType_s | sort by count_ desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "ColumnsTitle":{
                                  "Name":"Alert Type",
                                  "Value":"No of Alerts"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts = Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertType_s=columnifexists(\"AlertType_s\", \"\") , AlertStatus_s=columnifexists(\"AlertStatus_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId = columnifexists (\"AlertUniqueId_g\", \"AlertUniqueId_s\" ) | where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId; let Selection = Alerts | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count() by AlertType_s | sort by count_ desc | search {selected item}; Alerts | join kind=leftsemi ( Selection ) on AlertType_s | project AlertUniqueId, AlertType_s, TimeGenerated, AlertStatus_s, BackupItemUniqueId_s",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts = Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertType_s=columnifexists(\"AlertType_s\", \"\") , AlertStatus_s=columnifexists(\"AlertStatus_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId = columnifexists (\"AlertUniqueId_g\", \"AlertUniqueId_s\" ) | where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId; let Selection = Alerts | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count() by AlertType_s | sort by count_ desc | search {selected item}; Alerts | join kind=leftsemi ( Selection ) on AlertType_s | project AlertUniqueId, AlertType_s, TimeGenerated, AlertStatus_s, BackupItemUniqueId_s"
                               }
                            }
                         }
                      },
                      {
                         "Id":"TwoTrendsAndListBuilderBlade",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Alerts Created vs Alerts Resolved",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Trend1":{
                               "Legend":"Alerts Created",
                               "LegendColor":"#00188f",
                               "ChartQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\", \"\"), TimeGenerated = columnifexists(\"TimeGenerated\", \"\") , BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=Events | where OperationName == \"Alert\" | extend BackupManagementType_s = columnifexists (\"BackupManagementType_s\",\"\"), AlertUniqueId_g = columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s = columnifexists(\"AlertUniqueId_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_g\",\"AlertUniqueId_s\") |where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_min(TimeGenerated, *) by AlertUniqueId; Alerts | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count(AlertUniqueId) by bin(TimeGenerated,1h)",
                               "Calculation":{
                                  "Operation":"Sum"
                               }
                            },
                            "Trend2":{
                               "Legend":"Alerts Resolved",
                               "LegendColor":"#0072c6",
                               "ChartQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") |where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\") , AlertUniqueId_g = columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s = columnifexists(\"AlertUniqueId_s\",\"\"), AlertStatus_s=columnifexists(\"AlertStatus_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId = columnifexists (\"AlertUniqueId_g\",\"AlertUniqueId_s\")| where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId_g; Alerts | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | where AlertStatus_s==\"Resolved\" | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count(AlertUniqueId) by bin(TimeGenerated,1h)",
                               "Calculation":{
                                  "Operation":"Sum"
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\")|where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts = Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertStatus_s=columnifexists(\"AlertStatus_s\", \"\"), AlertType_s=columnifexists(\"AlertType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId = columnifexists(\"AlertUniqueId_g\",\"AlertUniqueId_s\") | where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\"); Alerts | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by AlertUniqueId | extend CurrentStatus = AlertStatus_s | join kind=leftouter ( Alerts | summarize arg_max(TimeGenerated, *) by TimeGenerated, AlertUniqueId | summarize HitCount = count() by AlertUniqueId ) on AlertUniqueId | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"\") | where ${DatasourceType} | project AlertUniqueId , AlertStatus_s, AlertType_s, HitCount | sort by AlertStatus_s asc, HitCount desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Alert Unique ID",
                                  "Value":"Hit Count"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") |where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts = Events | where OperationName == \"Alert\" | extend BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_g = columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\",\"\"), AlertCode_s=columnifexists(\"AlertCode_s\",\"\"), AlertType_s=columnifexists(\"AlertType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_g\",\"AlertUniqueId_s\")| where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\"); let Selection = Alerts | join kind=leftouter ( BackupIdTypeMap) on BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by AlertUniqueId | where AlertUniqueId != \"\" | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | extend CurrentStatus = AlertStatus_s | join kind=leftouter ( Alerts | summarize arg_max(TimeGenerated,*) by TimeGenerated, AlertUniqueId | summarize HitCount = count() by AlertUniqueId ) on AlertUniqueId | where AlertUniqueId !=\"\" | project AlertUniqueId , AlertStatus_s, AlertCode_s, AlertType_s, HitCount | sort by AlertStatus_s asc, HitCount desc | search {selected item}; Alerts | join kind=inner(Selection) on AlertUniqueId | summarize arg_max(TimeGenerated, *) by AlertUniqueId |project TimeGenerated, AlertUniqueId, BackupItemUniqueId_s, AlertType_s, AlertCode_s, AlertStatus_s, HitCount",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") |where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts = Events | where OperationName == \"Alert\" | extend BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_g = columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\",\"\"), AlertCode_s=columnifexists(\"AlertCode_s\",\"\"), AlertType_s=columnifexists(\"AlertType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_g\",\"AlertUniqueId_s\")| where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\"); let Selection = Alerts | join kind=leftouter ( BackupIdTypeMap) on BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by AlertUniqueId | where AlertUniqueId != \"\" | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | extend CurrentStatus = AlertStatus_s | join kind=leftouter ( Alerts | summarize arg_max(TimeGenerated,*) by TimeGenerated, AlertUniqueId | summarize HitCount = count() by AlertUniqueId ) on AlertUniqueId | where AlertUniqueId !=\"\" | project AlertUniqueId , AlertStatus_s, AlertCode_s, AlertType_s, HitCount | sort by AlertStatus_s asc, HitCount desc | search {selected item}; Alerts | join kind=inner(Selection) on AlertUniqueId | summarize arg_max(TimeGenerated, *) by AlertUniqueId |project TimeGenerated, AlertUniqueId, BackupItemUniqueId_s, AlertType_s, AlertCode_s, AlertStatus_s, HitCount"
                               }
                            },
                            "Blade":{
                               "NavigationSelect":{
 
                               }
                            }
                         }
                      },
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Active Alerts by Severity",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Active Alerts by Severity",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "Donut":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertSeverity_s=columnifexists(\"AlertSeverity_s\", \"\") , AlertStatus_s=columnifexists(\"AlertStatus_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId = columnifexists(\"AlertUniqueId_g\", \"AlertUniqueId_s\") | where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | extend AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId_g | where AlertUniqueId_g != \"\"; Alerts | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | where AlertStatus_s==\"Active\" | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count() by AlertSeverity_s | sort by count_ desc",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
                                     {
                                        "value":"Critical",
                                        "color":"#eb3c00"
                                     },
                                     {
                                        "value":"Warning",
                                        "color":"#ff8c00"
                                     },
                                     {
                                        "value":"Information",
                                        "color":"#fff100"
                                     }
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertSeverity_s=columnifexists(\"AlertSeverity_s\", \"\") , AlertStatus_s=columnifexists(\"AlertStatus_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId = columnifexists(\"AlertUniqueId_g\", \"AlertUniqueId_s\") | where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | extend AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId_g | where AlertUniqueId_g != \"\"; Alerts | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | where AlertStatus_s==\"Active\" | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count() by AlertSeverity_s | sort by count_ desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Alert Severity",
                                  "Value":"No of Alerts"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\", \"\"), TimeGenerated=columnifexists(\"TimeGenerated\", \"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\") , AlertUniqueId_g = columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s = columnifexists(\"AlertUniqueId_s\",\"\"), AlertSeverity_s=columnifexists(\"AlertSeverity_s\",\"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\",\"\"), AlertCode_s=columnifexists(\"AlertCode_s\",\"\"), Alert_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_g\", \"AlertUniqueId_s\") |where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(Alert_TimeGenerated, *) by AlertUniqueId; let Selection = Alerts | join kind=leftouter ( BackupIdTypeMap) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where AlertUniqueId_g != \"\" | where AlertStatus_s==\"Active\" | summarize count() by AlertSeverity_s | sort by count_ desc | search {selected item} ; Alerts | join kind=leftsemi(Selection) on AlertSeverity_s | where AlertStatus_s==\"Active\"| project AlertUniqueId, AlertSeverity_s, BackupItemUniqueId_s, AlertCode_s, AlertStatus_s, Alert_TimeGenerated ",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\", \"\"), TimeGenerated=columnifexists(\"TimeGenerated\", \"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\") , AlertUniqueId_g = columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s = columnifexists(\"AlertUniqueId_s\",\"\"), AlertSeverity_s=columnifexists(\"AlertSeverity_s\",\"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\",\"\"), AlertCode_s=columnifexists(\"AlertCode_s\",\"\"), Alert_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_g\", \"AlertUniqueId_s\") |where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(Alert_TimeGenerated, *) by AlertUniqueId; let Selection = Alerts | join kind=leftouter ( BackupIdTypeMap) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where AlertUniqueId_g != \"\" | where AlertStatus_s==\"Active\" | summarize count() by AlertSeverity_s | sort by count_ desc | search {selected item} ; Alerts | join kind=leftsemi(Selection) on AlertSeverity_s | where AlertStatus_s==\"Active\"| project AlertUniqueId, AlertSeverity_s, BackupItemUniqueId_s, AlertCode_s, AlertStatus_s, Alert_TimeGenerated "
                               }
                            }
                         }
                      },
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Resolved Alerts by Severity",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Resolved Alerts by Severity",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "Donut":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertSeverity_s=columnifexists(\"AlertSeverity_s\", \"\") , AlertStatus_s=columnifexists(\"AlertStatus_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId = columnifexists(\"AlertUniqueId_g\", \"AlertUniqueId_s\") | where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | extend AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId_g | where AlertUniqueId_g != \"\"; Alerts | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | where AlertStatus_s==\"Resolved\" | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count() by AlertSeverity_s | sort by count_ desc",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
 
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertSeverity_s=columnifexists(\"AlertSeverity_s\", \"\") , AlertStatus_s=columnifexists(\"AlertStatus_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId = columnifexists(\"AlertUniqueId_g\", \"AlertUniqueId_s\") | where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | extend AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId_g | where AlertUniqueId_g != \"\"; Alerts | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | where AlertStatus_s==\"Resolved\" | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count() by AlertSeverity_s | sort by count_ desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Alert Severity",
                                  "Value":"Count"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\", \"\"), TimeGenerated=columnifexists(\"TimeGenerated\", \"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\") , AlertUniqueId_g = columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s = columnifexists(\"AlertUniqueId_s\",\"\"), AlertSeverity_s=columnifexists(\"AlertSeverity_s\",\"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\",\"\"), AlertCode_s=columnifexists(\"AlertCode_s\",\"\"), Alert_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_g\", \"AlertUniqueId_s\") |where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(Alert_TimeGenerated, *) by AlertUniqueId; let Selection = Alerts | join kind=leftouter ( BackupIdTypeMap) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where AlertUniqueId_g != \"\" | where AlertStatus_s==\"Active\" | summarize count() by AlertSeverity_s | sort by count_ desc | search {selected item} ; Alerts | join kind=leftsemi(Selection) on AlertSeverity_s | where AlertStatus_s==\"Resolved\"| project AlertUniqueId, AlertSeverity_s, BackupItemUniqueId_s, AlertCode_s, AlertStatus_s, Alert_TimeGenerated ",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\", \"\"), TimeGenerated=columnifexists(\"TimeGenerated\", \"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=Events | where OperationName == \"Alert\" | extend BackupManagementType_s=columnifexists(\"BackupManagementType_s\",\"\") , AlertUniqueId_g = columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s = columnifexists(\"AlertUniqueId_s\",\"\"), AlertSeverity_s=columnifexists(\"AlertSeverity_s\",\"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\",\"\"), AlertCode_s=columnifexists(\"AlertCode_s\",\"\"), Alert_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_g\", \"AlertUniqueId_s\") |where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(Alert_TimeGenerated, *) by AlertUniqueId; let Selection = Alerts | join kind=leftouter ( BackupIdTypeMap) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | where AlertUniqueId_g != \"\" | where AlertStatus_s==\"Active\" | summarize count() by AlertSeverity_s | sort by count_ desc | search {selected item} ; Alerts | join kind=leftsemi(Selection) on AlertSeverity_s | where AlertStatus_s==\"Resolved\"| project AlertUniqueId, AlertSeverity_s, BackupItemUniqueId_s, AlertCode_s, AlertStatus_s, Alert_TimeGenerated "
                               }
                            }
                         }
                      },
                      {
                         "Id":"LineChartBuilderBlade",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Avg Alert Resolution Time per week (hrs)",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Avg Alert Resolution Time per week (hrs)",
                               "Subtitle":"Stretch the time axis to see the trend (above time filter)"
                            },
                            "LineChart":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")|where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts = Events | where OperationName == \"Alert\" | extend BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_g = columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\",\"\"), Alert_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId = columnifexists(\"AlertUniqueId_g\",\"AlertUniqueId_s\") | where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") ; let AlertStarts= Alerts |summarize arg_min(Alert_TimeGenerated, *) by AlertUniqueId | extend startTime=Alert_TimeGenerated; let AlertEnds= Alerts | summarize arg_max(Alert_TimeGenerated, *) by AlertUniqueId | where AlertStatus_s==\"Resolved\" | extend endTime=Alert_TimeGenerated; let Table1 = AlertStarts | join kind=inner ( AlertEnds ) on AlertUniqueId | extend timeToResolveInHrs=datetime_diff(\"hour\",endTime,startTime); Table1 | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s2\",\"BackupItemType_s\") | where ${DatasourceType} | summarize avg(timeToResolveInHrs) by bin(Alert_TimeGenerated,7d)",
                               "yAxis":{
                                  "isLogarithmic":false,
                                  "units":{
                                     "baseUnitType":"",
                                     "baseUnit":"",
                                     "displayUnit":""
                                  },
                                  "customLabel":""
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")|where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts = Events | where OperationName == \"Alert\" | extend BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_g = columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\",\"\"), Alert_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId = columnifexists(\"AlertUniqueId_g\",\"AlertUniqueId_s\") | where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") ; let AlertStarts= Alerts |summarize arg_min(Alert_TimeGenerated, *) by AlertUniqueId | extend startTime=Alert_TimeGenerated; let AlertEnds= Alerts | summarize arg_max(Alert_TimeGenerated, *) by AlertUniqueId | where AlertStatus_s==\"Resolved\" | extend endTime=Alert_TimeGenerated; let Table1 = AlertStarts | join kind=inner ( AlertEnds ) on AlertUniqueId | extend timeToResolveInHrs=datetime_diff(\"hour\",endTime,startTime); Table1 | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s2\",\"BackupItemType_s\") | where ${DatasourceType} | summarize avg(timeToResolveInHrs) by bin(Alert_TimeGenerated,7d)",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Week Start",
                                  "Value":"Average resolution Time (hrs)"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")|where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts = Events | where OperationName == \"Alert\" | extend BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_g = columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\",\"\"), Alert_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId = columnifexists(\"AlertUniqueId_g\",\"AlertUniqueId_s\") | where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") ; let AlertStarts= Alerts |summarize arg_min(Alert_TimeGenerated, *) by AlertUniqueId | extend startTime=Alert_TimeGenerated; let AlertEnds= Alerts | summarize arg_max(Alert_TimeGenerated, *) by AlertUniqueId | where AlertStatus_s==\"Resolved\" | extend endTime=Alert_TimeGenerated; let Table1 = AlertStarts | join kind=inner ( AlertEnds ) on AlertUniqueId | extend timeToResolveInHrs=datetime_diff(\"hour\",endTime,startTime); Table1 | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s2\",\"BackupItemType_s\") | where ${DatasourceType} | summarize avg(timeToResolveInHrs) by bin(Alert_TimeGenerated,7d)",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdTypeMap = BackupItems | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")|where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts = Events | where OperationName == \"Alert\" | extend BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_g = columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\",\"\"), Alert_TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId = columnifexists(\"AlertUniqueId_g\",\"AlertUniqueId_s\") | where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") ; let AlertStarts= Alerts |summarize arg_min(Alert_TimeGenerated, *) by AlertUniqueId | extend startTime=Alert_TimeGenerated; let AlertEnds= Alerts | summarize arg_max(Alert_TimeGenerated, *) by AlertUniqueId | where AlertStatus_s==\"Resolved\" | extend endTime=Alert_TimeGenerated; let Table1 = AlertStarts | join kind=inner ( AlertEnds ) on AlertUniqueId | extend timeToResolveInHrs=datetime_diff(\"hour\",endTime,startTime); Table1 | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s2\",\"BackupItemType_s\") | where ${DatasourceType} | summarize avg(timeToResolveInHrs) by bin(Alert_TimeGenerated,7d)"
                               }
                            }
                         }
                      },
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Top 3 backup Items by Avg Alert Resolution time",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Breakup by Avg Alert Resolution time (hrs)",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "Donut":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists (\"BackupItemFriendlyName_s\", \"\"), TimeGenerated = columnifexists(\"TimeGenerated\", \"\"), BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists (\"BackupItemUniqueId_s\", \"\") |where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s , BackupItemType_s, BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts= Events | where OperationName == \"Alert\" | extend BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_g = columnifexists (\"AlertUniqueId_g\", \"\"), AlertUniqueId_s = columnifexists (\"AlertUniqueId_s\",\"\"), Alert_TimeGenerated = columnifexists (\"TimeGenerated\", \"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\", \"\") , BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| extend AlertUniqueId = columnifexists (\"AlertUniqueId_g\", \"AlertUniqueId_s\")|where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") ; let AlertStarts=Alerts | summarize arg_min(Alert_TimeGenerated, *) by AlertUniqueId | extend startTime=Alert_TimeGenerated; let AlertEnds=Alerts | summarize arg_max(Alert_TimeGenerated, *) by AlertUniqueId | where AlertStatus_s==\"Resolved\" | extend endTime=Alert_TimeGenerated; let Table1 = AlertStarts | join kind=inner ( AlertEnds ) on AlertUniqueId | extend timeToResolveInHrs=datetime_diff(\"hour\",endTime,startTime); let Table2 = Table1 | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s2\",\"BackupItemType_s\") | where ${DatasourceType} ; Table2 | extend BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s2\",\"BackupItemFriendlyName_s\") | summarize avg(timeToResolveInHrs) by BackupItemFriendlyName | sort by avg_timeToResolveInHrs desc",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
 
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists (\"BackupItemFriendlyName_s\", \"\"), TimeGenerated = columnifexists(\"TimeGenerated\", \"\"), BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists (\"BackupItemUniqueId_s\", \"\") |where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s , BackupItemType_s, BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts= Events | where OperationName == \"Alert\" | extend BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_g = columnifexists (\"AlertUniqueId_g\", \"\"), AlertUniqueId_s = columnifexists (\"AlertUniqueId_s\",\"\"), Alert_TimeGenerated = columnifexists (\"TimeGenerated\", \"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\", \"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | extend AlertUniqueId = columnifexists (\"AlertUniqueId_g\", \"AlertUniqueId_s\")|where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") ; let AlertStarts=Alerts | summarize arg_min(Alert_TimeGenerated, *) by AlertUniqueId | extend startTime=Alert_TimeGenerated; let AlertEnds=Alerts | summarize arg_max(Alert_TimeGenerated, *) by AlertUniqueId | where AlertStatus_s==\"Resolved\" | extend endTime=Alert_TimeGenerated; let Table1 = AlertStarts | join kind=inner ( AlertEnds ) on AlertUniqueId | extend timeToResolveInHrs=datetime_diff(\"hour\",endTime,startTime); let Table2 = Table1 | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s2\",\"BackupItemType_s\") | where ${DatasourceType} ; Table2 | extend BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s2\",\"BackupItemFriendlyName_s\") | summarize avg(timeToResolveInHrs) by BackupItemUniqueId_s, BackupItemFriendlyName | sort by avg_timeToResolveInHrs desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Backup Item ID",
                                  "Value":"Avg Resolution Time (hrs)"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists (\"BackupItemFriendlyName_s\", \"\"), TimeGenerated = columnifexists(\"TimeGenerated\", \"\"), BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists (\"BackupItemUniqueId_s\", \"\") |where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s , BackupItemType_s, BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts= Events | where OperationName == \"Alert\" | extend BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_g = columnifexists (\"AlertUniqueId_g\", \"\"), AlertUniqueId_s = columnifexists (\"AlertUniqueId_s\",\"\"), Alert_TimeGenerated = columnifexists (\"TimeGenerated\", \"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\", \"\") , BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| extend AlertUniqueId = columnifexists (\"AlertUniqueId_g\", \"AlertUniqueId_s\")|where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") ; let AlertStarts=Alerts | summarize arg_min(Alert_TimeGenerated, *) by AlertUniqueId | extend startTime=Alert_TimeGenerated; let AlertEnds=Alerts | summarize arg_max(Alert_TimeGenerated, *) by AlertUniqueId | where AlertStatus_s==\"Resolved\" | extend endTime=Alert_TimeGenerated; let Table1 = AlertStarts | join kind=inner ( AlertEnds ) on AlertUniqueId | extend timeToResolveInHrs=datetime_diff(\"hour\",endTime,startTime); let Table2 = Table1 | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s2\",\"BackupItemType_s\") | where ${DatasourceType} ; Table2 | extend BackupItemFriendlyName = columnifexists (\"BackupItemFriendlyName_s2\", \"BackupItemFriendlyName_s\") | summarize avg(timeToResolveInHrs) by BackupItemUniqueId_s, BackupItemFriendlyName | sort by avg_timeToResolveInHrs desc | search {selected item}",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let BackupIdNameMap = BackupItems | extend BackupItemFriendlyName_s = columnifexists (\"BackupItemFriendlyName_s\", \"\"), TimeGenerated = columnifexists(\"TimeGenerated\", \"\"), BackupItemType_s = columnifexists (\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists (\"BackupItemUniqueId_s\", \"\") |where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s , BackupItemType_s, BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts= Events | where OperationName == \"Alert\" | extend BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_g = columnifexists (\"AlertUniqueId_g\", \"\"), AlertUniqueId_s = columnifexists (\"AlertUniqueId_s\",\"\"), Alert_TimeGenerated = columnifexists (\"TimeGenerated\", \"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\", \"\") , BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| extend AlertUniqueId = columnifexists (\"AlertUniqueId_g\", \"AlertUniqueId_s\")|where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") ; let AlertStarts=Alerts | summarize arg_min(Alert_TimeGenerated, *) by AlertUniqueId | extend startTime=Alert_TimeGenerated; let AlertEnds=Alerts | summarize arg_max(Alert_TimeGenerated, *) by AlertUniqueId | where AlertStatus_s==\"Resolved\" | extend endTime=Alert_TimeGenerated; let Table1 = AlertStarts | join kind=inner ( AlertEnds ) on AlertUniqueId | extend timeToResolveInHrs=datetime_diff(\"hour\",endTime,startTime); let Table2 = Table1 | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s2\",\"BackupItemType_s\") | where ${DatasourceType} ; Table2 | extend BackupItemFriendlyName = columnifexists (\"BackupItemFriendlyName_s2\", \"BackupItemFriendlyName_s\") | summarize avg(timeToResolveInHrs) by BackupItemUniqueId_s, BackupItemFriendlyName | sort by avg_timeToResolveInHrs desc | search {selected item}"
                               }
                            }
                         }
                      }
                   ],
                   "Filters":[
                      {
                         "FieldName":"BackupItemType_s",
                         "QueryForValues":"AzureDiagnostics | where Category == \"AzureBackupReport\" | distinct BackupItemType_s",
                         "Title":"DatasourceType"
                      }
                   ],
                   "OverviewTile":{
                      "Id":"DoubleNumberBuilderTile",
                      "Type":"OverviewTile",
                      "Version":2,
                      "Configuration":{
                         "TileOne":{
                            "Legend":"Alerts Created in Period",
                            "Query":"AzureDiagnostics | where Category == \"AzureBackupReport\"| where SchemaVersion_s==\"V2\" | where OperationName == \"Alert\" | extend BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_g\",\"AlertUniqueId_s\") | where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId |count "
                         },
                         "TileTwo":{
                            "Legend":"Active Alerts Created in Period",
                            "Query":" AzureDiagnostics | where Category == \"AzureBackupReport\"| where SchemaVersion_s==\"V2\" | where OperationName == \"Alert\" | extend BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), AlertStatus_s = columnifexists(\"AlertStatus_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_g\",\"AlertUniqueId_s\") | where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | summarize arg_max(TimeGenerated, *) by AlertUniqueId | where AlertStatus_s == \"Active\" |count "
                         },
                         "Advanced":{
                            "DataFlowVerification":{
                               "Enabled":false,
                               "Query":"search * | limit 1 | project TimeGenerated",
                               "Message":""
                            }
                         }
                      }
                   }
                }
             },
             {
                "apiVersion":"2015-11-01-preview",
				"name": "[concat(parameters('workspaceName'), '/', 'Backup Items')]",
                "type":"Microsoft.OperationalInsights/workspaces/views",
                "location":"[parameters('workspaceLocation')]",
                "properties":{
                   "Id":"Backup Items",
                   "Name":"[variables('omsSolutions').customSolution.view6]",
                   "Author":"[variables('omsSolutions').customSolution.author]",
                   "Source":"Local",
                   "Version":2,
                   "Dashboard":[
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Backup Items by Backup Item Type",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Backup Items by Backup Item Type",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "Donut":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName == \"BackupItem\"; BackupItems | extend TimeGenerated = columnifexists(\"TimeGenerated\",\"\") , BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemUniqueId_s != \"\" | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s | where ${DatasourceType} | summarize count(BackupItemUniqueId_s) by BackupItemType_s | sort by count_BackupItemUniqueId_s desc",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
 
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems=Events | where OperationName==\"BackupItem\"; BackupItems | extend BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") , BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\") , BackupManagementType_s = columnifexists(\"BackupManagementType_s\", \"\") , TimeGenerated = columnifexists(\"TimeGenerated\",\"\")| where BackupItemUniqueId_s != \"\" | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s | where ${DatasourceType} | summarize count(BackupItemUniqueId_s) by BackupItemType_s, BackupManagementType_s | sort by count_BackupItemUniqueId_s desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "ColumnsTitle":{
                                  "Name":"Datasource Type",
                                  "Value":"Count"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems=Events | where OperationName==\"BackupItem\"; BackupItems | extend BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), BackupItemProtectionState_s = columnifexists(\"BackupItemProtectionState_s\",\"\") | where BackupItemUniqueId_s != \"\" | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s | where ${DatasourceType} | summarize count(BackupItemUniqueId_s) by BackupItemUniqueId_s, BackupItemFriendlyName_s, BackupItemType_s, BackupManagementType_s, BackupItemProtectionState_s | project-away count_BackupItemUniqueId_s | where {selected item}",
                               "NavigationSelect":{
                                  "NavigationQuery":"let Events = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems=Events | where OperationName==\"BackupItem\"; BackupItems | extend BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), BackupItemProtectionState_s = columnifexists(\"BackupItemProtectionState_s\",\"\") | where BackupItemUniqueId_s != \"\" | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s | where ${DatasourceType} | summarize count(BackupItemUniqueId_s) by BackupItemUniqueId_s, BackupItemFriendlyName_s, BackupItemType_s, BackupManagementType_s, BackupItemProtectionState_s | project-away count_BackupItemUniqueId_s | where {selected item}"
                               }
                            }
                         }
                      },
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Backup Items by Protection status",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Last Known Protection Status",
                               "Subtitle":""
                            },
                            "Donut":{
                               "Query":"let BackupItems = AzureDiagnostics | where SchemaVersion_s==\"V2\" | where Category == \"AzureBackupReport\" | where OperationName==\"BackupItem\"; BackupItems | extend BackupItemProtectionState_s = columnifexists(\"BackupItemProtectionState_s\",\"\"), BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\") , TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s =columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemProtectionState_s != \"\" | where ${DatasourceType} | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s | summarize count(BackupItemUniqueId_s) by BackupItemProtectionState_s",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#ff8c00",
                                     "#55d455",
                                     "#6dc2e9"
                                  ],
                                  "valueColorMapping":[
 
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let BackupItems = AzureDiagnostics | where SchemaVersion_s==\"V2\" | where Category == \"AzureBackupReport\" | where OperationName==\"BackupItem\"; BackupItems | extend BackupItemProtectionState_s = columnifexists(\"BackupItemProtectionState_s\",\"\"), BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\") | where BackupItemProtectionState_s != \"\" | where ${DatasourceType} | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s | summarize count(BackupItemUniqueId_s) by BackupManagementType_s, BackupItemProtectionState_s",
                               "HideGraph":true,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Backup Management Type",
                                  "Value":"Count"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let BackupItems = AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName==\"BackupItem\" | where SchemaVersion_s==\"V2\" ; BackupItems | extend BackupItemProtectionState_s=columnifexists(\"BackupItemProtectionState_s\",\"\"), BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s= columnifexists(\"BackupItemFriendlyName_s\",\"\"), BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\") | where BackupItemProtectionState_s != \"\" and BackupItemType_s != \"\" | where ${DatasourceType} | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s | project BackupItemFriendlyName_s,BackupItemType_s, BackupManagementType_s, BackupItemProtectionState_s, BackupItemUniqueId_s | search {selected item}",
                               "NavigationSelect":{
                                  "NavigationQuery":"let BackupItems = AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName==\"BackupItem\" | where SchemaVersion_s==\"V2\" ; BackupItems | extend BackupItemProtectionState_s=columnifexists(\"BackupItemProtectionState_s\",\"\"), BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s= columnifexists(\"BackupItemFriendlyName_s\",\"\"), BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\") | where BackupItemProtectionState_s != \"\" and BackupItemType_s != \"\" | where ${DatasourceType} | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s | project BackupItemFriendlyName_s,BackupItemType_s, BackupManagementType_s, BackupItemProtectionState_s, BackupItemUniqueId_s | search {selected item}"
                               }
                            }
                         }
                      },
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Top 3 Backup Items by Alerts Generated",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Top 3 Backup Items by Alerts Generated",
                               "Subtitle":""
                            },
                            "Donut":{
                               "Query":"let BackupIdNameMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"),BackupItemFriendlyName_s = columnifexists (\"BackupItemFriendlyName_s\",\"\"), BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\") | where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s , BackupItemType_s, BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=(AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"Alert\" | extend TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") |where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | extend AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\")| extend AlertUniqueId=columnifexists(\"AlertUniqueId_s\",\"AlertUniqueId_g\") | summarize arg_min(TimeGenerated, *) by AlertUniqueId ) | union kind=outer (AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"Alert\" | extend TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | extend AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_g\",\"AlertUniqueId_s\") | summarize arg_min(TimeGenerated, *) by AlertUniqueId) |extend startTime=TimeGenerated ; Alerts | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | extend BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s1\",\"BackupItemFriendlyName_s\") | summarize count(AlertUniqueId) by BackupItemFriendlyName | sort by count_AlertUniqueId desc",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
 
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let BackupIdNameMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\")| where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s , BackupItemType_s, BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=(AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"Alert\" | extend TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") |where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | extend AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\")| extend AlertUniqueId=columnifexists(\"AlertUniqueId_s\",\"AlertUniqueId_g\") | summarize arg_min(TimeGenerated, *) by AlertUniqueId ) | union kind=outer (AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"Alert\" | extend TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | extend AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\") | extend AlertUniqueId=columnifexists(\"AlertUniqueId_g\",\"AlertUniqueId_s\") | summarize arg_min(TimeGenerated, *) by AlertUniqueId) |extend startTime=TimeGenerated ; Alerts | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\"), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s1\",\"BackupItemUniqueId_s\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s1\", \"BackupItemFriendlyName_s\")| where ${DatasourceType} | summarize count(AlertUniqueId) by BackupItemUniqueId, BackupItemFriendlyName | sort by count_AlertUniqueId desc ",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Backup Item ID",
                                  "Value":"Count"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":" let BackupIdNameMap = AzureDiagnostics | where Category == \"AzureBackupReport\" |where SchemaVersion_s==\"V2\" | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\") , BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=(AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"Alert\" | extend TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\") |where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | extend AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| extend AlertUniqueId=columnifexists(\"AlertUniqueId_s\",\"AlertUniqueId_g\") | summarize arg_min(TimeGenerated, *) by AlertUniqueId ) | union kind=outer (AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"Alert\" | extend TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\") | where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | extend AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\") , BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| extend AlertUniqueId=columnifexists(\"AlertUniqueId_g\",\"AlertUniqueId_s\") | summarize arg_min(TimeGenerated, *) by AlertUniqueId) |extend startTime=TimeGenerated ; Alerts | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s | where ${DatasourceType} | search {selected item}",
                               "NavigationSelect":{
                                  "NavigationQuery":" let BackupIdNameMap = AzureDiagnostics | where Category == \"AzureBackupReport\" |where SchemaVersion_s==\"V2\" | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\") , BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemFriendlyName_s != \"\" | project TimeGenerated, BackupItemFriendlyName_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Alerts=(AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"Alert\" | extend TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\") |where BackupManagementType_s !in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | extend AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\"), AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| extend AlertUniqueId=columnifexists(\"AlertUniqueId_s\",\"AlertUniqueId_g\") | summarize arg_min(TimeGenerated, *) by AlertUniqueId ) | union kind=outer (AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"Alert\" | extend TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupManagementType_s = columnifexists(\"BackupManagementType_s\",\"\") | where BackupManagementType_s in~(\"MAB\",\"DPM\",\"AzureBackupServer\") | extend AlertUniqueId_g=columnifexists(\"AlertUniqueId_g\",\"\"), AlertUniqueId_s=columnifexists(\"AlertUniqueId_s\",\"\") , BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| extend AlertUniqueId=columnifexists(\"AlertUniqueId_g\",\"AlertUniqueId_s\") | summarize arg_min(TimeGenerated, *) by AlertUniqueId) |extend startTime=TimeGenerated ; Alerts | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s | where ${DatasourceType} | search {selected item}"
                               }
                            }
                         }
                      },
                      {
                         "Id":"TwoNumberTileListBuilderBlade",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Backup Items by Last Successful Backup Time",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Tile":{
                               "Legend":"Backup Items",
                               "Query":"let BackupIdTypeMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"BackupItem\" | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; BackupIdTypeMap | summarize dcount(BackupItemUniqueId_s)"
                            },
                            "SecondTile":{
                               "Legend":"Backup Jobs",
                               "Query":"let Events= AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\"; let BackupItems = Events | where OperationName==\"BackupItem\"; let Jobs = Events | where OperationName==\"Job\" | extend JobOperation_s=columnifexists(\"JobOperation_s\",\"\"), JobUniqueId_g=columnifexists(\"JobUniqueId_g\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\")| where JobOperation_s==\"Backup\" | where JobUniqueId_g!=\"\" | summarize arg_max(TimeGenerated, *) by JobUniqueId_g ; let BackupIdTypeMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"BackupItem\" | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; Jobs | extend BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\") | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\",\"BackupItemType_s\") | where ${DatasourceType} | summarize count(JobUniqueId_g) "
                            },
                            "List":{
                               "Query":"let BackupIdNameMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName==\"BackupItem\" | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), BackupItem_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s= columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemFriendlyName_s != \"\" | project BackupItem_TimeGenerated, BackupItemFriendlyName_s ,BackupItemType_s, BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let LastSuccessfulBackupJobs = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"Job\" | extend JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), Job_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g=columnifexists(\"JobUniqueId_g\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") |where JobOperation_s == \"Backup\" | where JobStatus_s == \"Completed\" | summarize arg_max(Job_TimeGenerated, *) by JobUniqueId_g | project BackupItemUniqueId_s, Job_TimeGenerated; LastSuccessfulBackupJobs | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s | where ${DatasourceType} | project BackupItemUniqueId_s, BackupItemFriendlyName_s, Job_TimeGenerated | sort by Job_TimeGenerated desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Backup Item ID",
                                  "Value":"Last Successful Backup Time"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let BackupIdNameMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName==\"BackupItem\" | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), BackupItem_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s= columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemFriendlyName_s != \"\" | project BackupItem_TimeGenerated, BackupItemFriendlyName_s ,BackupItemType_s, BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let LastSuccessfulBackupJobs = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"Job\" | extend JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), Job_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g=columnifexists(\"JobUniqueId_g\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") |where JobOperation_s == \"Backup\" | where JobStatus_s == \"Completed\" | summarize arg_max(Job_TimeGenerated, *) by JobUniqueId_g | project BackupItemUniqueId_s, Job_TimeGenerated; LastSuccessfulBackupJobs | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s | where ${DatasourceType} | project-away BackupItem_TimeGenerated | search {selected item}",
                               "NavigationSelect":{
                                  "NavigationQuery":"let BackupIdNameMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName==\"BackupItem\" | extend BackupItemFriendlyName_s = columnifexists(\"BackupItemFriendlyName_s\",\"\"), BackupItem_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemType_s= columnifexists(\"BackupItemType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemFriendlyName_s != \"\" | project BackupItem_TimeGenerated, BackupItemFriendlyName_s ,BackupItemType_s, BackupItemUniqueId_s | summarize arg_max(BackupItem_TimeGenerated, *) by BackupItemUniqueId_s; let LastSuccessfulBackupJobs = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"Job\" | extend JobOperation_s = columnifexists(\"JobOperation_s\",\"\"), JobStatus_s = columnifexists(\"JobStatus_s\",\"\"), Job_TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), JobUniqueId_g=columnifexists(\"JobUniqueId_g\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") |where JobOperation_s == \"Backup\" | where JobStatus_s == \"Completed\" | summarize arg_max(Job_TimeGenerated, *) by JobUniqueId_g | project BackupItemUniqueId_s, Job_TimeGenerated; LastSuccessfulBackupJobs | join kind=leftouter ( BackupIdNameMap ) on BackupItemUniqueId_s | where ${DatasourceType} | project-away BackupItem_TimeGenerated | search {selected item}"
                               }
                            },
                            "Blade":{
                               "NavigationSelect":{
 
                               }
                            }
                         }
                      }
                   ],
                   "Filters":[
                      {
                         "FieldName":"BackupItemType_s",
                         "QueryForValues":"AzureDiagnostics | where Category == \"AzureBackupReport\"|distinct BackupItemType_s",
                         "Title":"DatasourceType"
                      }
                   ],
                   "OverviewTile":{
                      "Id":"SingleNumberBuilderTile",
                      "Type":"OverviewTile",
                      "Version":2,
                      "Configuration":{
                         "Tile":{
                            "Legend":"Backup Items",
                            "Query":"AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"BackupItem\" | extend BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | distinct BackupItemUniqueId_s | count"
                         },
                         "Advanced":{
                            "DataFlowVerification":{
                               "Enabled":false,
                               "Query":"search * | limit 1 | project TimeGenerated",
                               "Message":""
                            }
                         }
                      }
                   }
                }
             },
             {
                "apiVersion":"2015-11-01-preview",
				"name": "[concat(parameters('workspaceName'), '/', 'Cloud Storage')]",
                "type":"Microsoft.OperationalInsights/workspaces/views",
                "location":"[parameters('workspaceLocation')]",
                "properties":{
                   "Id":"Cloud Storage",
                   "Name":"[variables('omsSolutions').customSolution.view7]",
                   "Author":"[variables('omsSolutions').customSolution.author]",
                   "Source":"Local",
                   "Version":2,
                   "Dashboard":[
                      {
                         "Id":"TwoTrendsAndListBuilderBlade",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Total Cloud Storage Consumed (GB)",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Trend1":{
                               "Legend":"GRS (avg)",
                               "LegendColor":"#00188f",
                               "ChartQuery":"let VaultIdRepMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"Vault\" | extend StorageReplicationType_s = columnifexists(\"StorageReplicationType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), VaultUniqueId_s=columnifexists(\"VaultUniqueId_s\",\"\") | summarize arg_max(TimeGenerated, *) by VaultUniqueId_s | where StorageReplicationType_s == \"GeoRedundant\" ; let BackupIdTypeMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"BackupItem\" | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Storages= AzureDiagnostics | where Category == \"AzureBackupReport\" |where OperationName == \"Storage\" |extend TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), StorageUniqueId_s=columnifexists(\"StorageUniqueId_s\",\"\"), StorageType_s=columnifexists(\"StorageType_s\", \"\") |summarize arg_max(TimeGenerated, *) by StorageUniqueId_s | project StorageUniqueId_s, StorageType_s | extend storage_type=StorageType_s; let StorageAssociations = AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"StorageAssociation\" | extend StorageConsumedInMBs_s=columnifexists(\"StorageConsumedInMBs_s\",\"\"), StorageUniqueId_s=columnifexists(\"StorageUniqueId_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), VaultUniqueId_s=columnifexists(\"VaultUniqueId_s\",\"\") | extend StorageInGB = todouble(StorageConsumedInMBs_s) / 1024 | project StorageInGB, BackupItemUniqueId_s, VaultUniqueId_s, StorageUniqueId_s, TimeGenerated; StorageAssociations | join kind=inner ( BackupIdTypeMap ) on BackupItemUniqueId_s | where ${DatasourceType} | join kind=inner( VaultIdRepMap ) on VaultUniqueId_s | join kind=inner ( Storages ) on StorageUniqueId_s | where storage_type==\"Cloud\" | summarize arg_max(TimeGenerated,dayCharge=StorageInGB) by BackupItemUniqueId_s, bin(TimeGenerated, 1d) | summarize TotalCharge = sum(dayCharge) by TimeGenerated",
                               "Calculation":{
                                  "Operation":"Average"
                               }
                            },
                            "Trend2":{
                               "Legend":"LRS (avg)",
                               "LegendColor":"#0072c6",
                               "ChartQuery":"let VaultIdRepMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"Vault\" | extend StorageReplicationType_s = columnifexists(\"StorageReplicationType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), VaultUniqueId_s=columnifexists(\"VaultUniqueId_s\",\"\") |where StorageReplicationType_s != \"\" | summarize arg_max(TimeGenerated, *) by VaultUniqueId_s | where StorageReplicationType_s == \"LocallyRedundant\" ; let BackupIdTypeMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"BackupItem\" | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let Storages= AzureDiagnostics | where Category == \"AzureBackupReport\" |where OperationName == \"Storage\" |extend TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), StorageUniqueId_s=columnifexists(\"StorageUniqueId_s\",\"\"), StorageType_s=columnifexists(\"StorageType_s\", \"\") |summarize arg_max(TimeGenerated, *) by StorageUniqueId_s | project StorageUniqueId_s, StorageType_s | extend storage_type=StorageType_s; let StorageAssociations = AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"StorageAssociation\" | extend StorageConsumedInMBs_s=columnifexists(\"StorageConsumedInMBs_s\",\"\"), StorageUniqueId_s=columnifexists(\"StorageUniqueId_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), VaultUniqueId_s=columnifexists(\"VaultUniqueId_s\",\"\") | extend StorageInGB = todouble(StorageConsumedInMBs_s) / 1024 | project StorageInGB, BackupItemUniqueId_s, VaultUniqueId_s, StorageUniqueId_s, TimeGenerated; StorageAssociations | join kind=inner ( BackupIdTypeMap ) on BackupItemUniqueId_s | where ${DatasourceType} | join ( VaultIdRepMap ) on VaultUniqueId_s | join kind=inner ( Storages ) on StorageUniqueId_s | where storage_type==\"Cloud\" | summarize arg_max(TimeGenerated,dayCharge=StorageInGB) by BackupItemUniqueId_s, bin(TimeGenerated, 1d) | summarize TotalCharge = sum(dayCharge) by TimeGenerated",
                               "Calculation":{
                                  "Operation":"Average"
                               }
                            },
                            "List":{
                               "Query":"let BackupIdTypeMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"BackupItem\" | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s=columnifexists(\"BackupItemFriendlyName_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s, item_name=BackupItemFriendlyName_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let StorageAssociations = AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"StorageAssociation\" | extend TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), StorageUniqueId_s=columnifexists(\"StorageUniqueId_s\",\"\"), StorageName_s=columnifexists(\"StorageName_s\",\"\") | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s, StorageUniqueId_s; let Storages=AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"Storage\" | extend StorageUniqueId_s=columnifexists(\"StorageUniqueId_s\",\"\"), StorageType_s=columnifexists(\"StorageType_s\",\"\"), StorageName_s=columnifexists(\"StorageName_s\",\"\")| distinct StorageUniqueId_s, StorageType_s, StorageName_s; StorageAssociations | join kind=inner ( BackupIdTypeMap ) on BackupItemUniqueId_s | extend BackupItemType_s=columnifexists(\"BackupItemType_s1\", \"BackupItemType_s\") | extend StorageConsumedInMBs_s=columnifexists(\"StorageConsumedInMBs_s\",\"\") | where ${DatasourceType} | extend StorageInGB = todouble(StorageConsumedInMBs_s) / 1024 | project StorageInGB, BackupItemUniqueId_s, StorageUniqueId_s, StorageName_s, item_name | join kind=inner ( Storages ) on StorageUniqueId_s | project StorageUniqueId_s, StorageName_s, StorageInGB, BackupItemUniqueId_s, StorageType_s, item_name | where StorageType_s==\"Cloud\" | project BackupItemUniqueId_s, BackupItemFriendlyName=item_name , StorageInGB| order by StorageInGB desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "ColumnsTitle":{
                                  "Name":"Backup Item ID",
                                  "Value":"Storage (GB)"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":" let BackupIdTypeMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"BackupItem\" | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s=columnifexists(\"BackupItemFriendlyName_s\",\"\")| where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s, item_name=BackupItemFriendlyName_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let StorageAssociations = AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"StorageAssociation\" | extend TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), StorageUniqueId_s=columnifexists(\"StorageUniqueId_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), StorageConsumedInMBs_s = columnifexists (\"StorageConsumedInMBs_s\",\"\") |summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s, StorageUniqueId_s; let Storages=AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"Storage\" | extend StorageUniqueId_s=columnifexists(\"StorageUniqueId_s\",\"\"), StorageType_s=columnifexists(\"StorageType_s\",\"\") |distinct StorageUniqueId_s, StorageType_s; StorageAssociations | join kind=inner ( BackupIdTypeMap ) on BackupItemUniqueId_s | where ${DatasourceType} | extend StorageInGB = todouble(StorageConsumedInMBs_s) / 1024 | project StorageInGB, BackupItemUniqueId_s, StorageUniqueId_s, item_name | join kind= inner( Storages ) on StorageUniqueId_s | project StorageInGB, BackupItemUniqueId_s, StorageType_s, item_name, StorageUniqueId_s | where StorageType_s==\"Cloud\" | project StorageInGB, BackupItemFriendlyName=item_name, BackupItemUniqueId_s, StorageUniqueId_s | order by StorageInGB desc | search {selected item}",
                               "NavigationSelect":{
                                  "NavigationQuery":" let BackupIdTypeMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"BackupItem\" | extend BackupItemType_s=columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupItemFriendlyName_s=columnifexists(\"BackupItemFriendlyName_s\",\"\")| where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s, item_name=BackupItemFriendlyName_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let StorageAssociations = AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"StorageAssociation\" | extend TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), StorageUniqueId_s=columnifexists(\"StorageUniqueId_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), StorageConsumedInMBs_s = columnifexists (\"StorageConsumedInMBs_s\",\"\") |summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s, StorageUniqueId_s; let Storages=AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"Storage\" | extend StorageUniqueId_s=columnifexists(\"StorageUniqueId_s\",\"\"), StorageType_s=columnifexists(\"StorageType_s\",\"\") |distinct StorageUniqueId_s, StorageType_s; StorageAssociations | join kind=inner ( BackupIdTypeMap ) on BackupItemUniqueId_s | where ${DatasourceType} | extend StorageInGB = todouble(StorageConsumedInMBs_s) / 1024 | project StorageInGB, BackupItemUniqueId_s, StorageUniqueId_s, item_name | join kind= inner( Storages ) on StorageUniqueId_s | project StorageInGB, BackupItemUniqueId_s, StorageType_s, item_name, StorageUniqueId_s | where StorageType_s==\"Cloud\" | project StorageInGB, BackupItemFriendlyName=item_name, BackupItemUniqueId_s, StorageUniqueId_s | order by StorageInGB desc | search {selected item}"
                               }
                            },
                            "Blade":{
                               "NavigationSelect":{
 
                               }
                            }
                         }
                      },
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Top 3 Vaults by Storage Consumed (GB)",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Top 3 Vaults by Storage Consumed (GB)",
                               "Subtitle":"Filter by Datasource Type by clicking the (+) above"
                            },
                            "Donut":{
                               "Query":"let BackupIdTypeMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"BackupItem\" | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"StorageAssociation\" |extend StorageConsumedInMBs_s = columnifexists(\"StorageConsumedInMBs_s\",\"\") , BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), StorageUniqueId_s = columnifexists(\"StorageUniqueId_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\") | extend StorageInGB = todouble(StorageConsumedInMBs_s) / 1024 | project StorageInGB, BackupItemUniqueId_s, StorageUniqueId_s, TimeGenerated | summarize arg_max(TimeGenerated,*) by StorageUniqueId_s, BackupItemUniqueId_s | join kind=leftouter ( AzureDiagnostics | where Category == \"AzureBackupReport\" \t| where SchemaVersion_s==\"V2\" | where OperationName == \"Storage\" | extend TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), StorageUniqueId_s = columnifexists(\"StorageUniqueId_s\",\"\"), StorageName_s=columnifexists(\"StorageName_s\",\"\") , StorageType_s = columnifexists(\"StorageType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | summarize arg_max(TimeGenerated,*) by StorageUniqueId_s | project StorageUniqueId_s, StorageName_s ,BackupItemUniqueId_s, StorageType_s ) on StorageUniqueId_s | where StorageType_s==\"Cloud\" | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | where ${DatasourceType} | summarize totalStorage=sum(StorageInGB) by StorageUniqueId_s, StorageName_s | project StorageName_s, totalStorage | sort by totalStorage desc",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
 
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let BackupIdTypeMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"BackupItem\" | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated=columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"StorageAssociation\" |extend StorageConsumedInMBs_s = columnifexists(\"StorageConsumedInMBs_s\",\"\") , BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), StorageUniqueId_s = columnifexists(\"StorageUniqueId_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\") | extend StorageInGB = todouble(StorageConsumedInMBs_s) / 1024 | project StorageInGB, BackupItemUniqueId_s, StorageUniqueId_s, TimeGenerated | summarize arg_max(TimeGenerated,*) by StorageUniqueId_s, BackupItemUniqueId_s | join kind=leftouter ( AzureDiagnostics | where Category == \"AzureBackupReport\" \t| where SchemaVersion_s==\"V2\" | where OperationName == \"Storage\" | extend TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), StorageUniqueId_s = columnifexists(\"StorageUniqueId_s\",\"\"), StorageName_s=columnifexists(\"StorageName_s\",\"\") , StorageType_s = columnifexists(\"StorageType_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | summarize arg_max(TimeGenerated,*) by StorageUniqueId_s | project StorageUniqueId_s, StorageName_s ,BackupItemUniqueId_s, StorageType_s ) on StorageUniqueId_s | where StorageType_s==\"Cloud\" | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | where ${DatasourceType} | summarize totalStorage=sum(StorageInGB) by StorageUniqueId_s, StorageName_s | project StorageName_s, totalStorage | sort by totalStorage desc",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Vault",
                                  "Value":"Storage In GB"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let BackupIdTypeMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"BackupItem\" | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"StorageAssociation\" | extend StorageConsumedInMBs_s = columnifexists(\"StorageConsumedInMBs_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), StorageUniqueId_s = columnifexists(\"StorageUniqueId_s\",\"\") | extend StorageInGB = todouble(StorageConsumedInMBs_s) / 1024 | project StorageInGB, BackupItemUniqueId_s, StorageUniqueId_s, TimeGenerated | summarize arg_max(TimeGenerated,*) by StorageUniqueId_s | join kind=leftouter ( AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"Storage\" | extend TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), StorageUniqueId_s = columnifexists(\"StorageUniqueId_s\",\"\"), StorageName_s = columnifexists(\"StorageName_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), StorageType_s = columnifexists(\"StorageType_s\",\"\") | summarize arg_max(TimeGenerated,*) by StorageUniqueId_s | project StorageUniqueId_s, StorageName_s ,BackupItemUniqueId_s, StorageType_s ) on StorageUniqueId_s | where StorageType_s==\"Cloud\" | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | where ${DatasourceType} | search {selected item}",
                               "NavigationSelect":{
                                  "NavigationQuery":"let BackupIdTypeMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"BackupItem\" | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\")| where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"StorageAssociation\" | extend StorageConsumedInMBs_s = columnifexists(\"StorageConsumedInMBs_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), StorageUniqueId_s = columnifexists(\"StorageUniqueId_s\",\"\") | extend StorageInGB = todouble(StorageConsumedInMBs_s) / 1024 | project StorageInGB, BackupItemUniqueId_s, StorageUniqueId_s, TimeGenerated | summarize arg_max(TimeGenerated,*) by StorageUniqueId_s | join kind=leftouter ( AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"Storage\" | extend TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), StorageUniqueId_s = columnifexists(\"StorageUniqueId_s\",\"\"), StorageName_s = columnifexists(\"StorageName_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), StorageType_s = columnifexists(\"StorageType_s\",\"\") | summarize arg_max(TimeGenerated,*) by StorageUniqueId_s | project StorageUniqueId_s, StorageName_s ,BackupItemUniqueId_s, StorageType_s ) on StorageUniqueId_s | where StorageType_s==\"Cloud\" | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | where ${DatasourceType} | search {selected item}"
                               }
                            }
                         }
                      },
                      {
                         "Id":"SingleQueryDonutBuilderBladeV1",
                         "Type":"Blade",
                         "Version":0,
                         "Configuration":{
                            "General":{
                               "title":"Storage by Storage Replication type (GB)",
                               "newGroup":false,
                               "icon":"",
                               "useIcon":false
                            },
                            "Header":{
                               "Title":"Storage by Storage Replication type (GB)",
                               "Subtitle":""
                            },
                            "Donut":{
                               "Query":"let VaultIdRepMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"Vault\" |extend StorageReplicationType_s = columnifexists(\"StorageReplicationType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), VaultUniqueId_s = columnifexists(\"VaultUniqueId_s\",\"\") |where StorageReplicationType_s != \"\" | summarize arg_max(TimeGenerated, *) by VaultUniqueId_s; let BackupIdTypeMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"BackupItem\" | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let StorageAssociations=AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"StorageAssociation\" | extend StorageConsumedInMBs_s = columnifexists(\"StorageConsumedInMBs_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), VaultUniqueId_s = columnifexists(\"VaultUniqueId_s\",\"\"), StorageUniqueId_s = columnifexists(\"StorageUniqueId_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\")| extend StorageInGB = todouble(StorageConsumedInMBs_s) / 1024 | project StorageInGB, BackupItemUniqueId_s, VaultUniqueId_s, StorageUniqueId_s, TimeGenerated | summarize arg_max(TimeGenerated,*) by StorageUniqueId_s, BackupItemUniqueId_s ; let Storages=AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"Storage\" | extend TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), StorageUniqueId_s = columnifexists(\"StorageUniqueId_s\",\"\"), StorageType_s = columnifexists(\"StorageType_s\",\"\")| summarize arg_max(TimeGenerated, *) by StorageUniqueId_s | project StorageUniqueId_s, StorageType_s | extend storage_type=StorageType_s ; StorageAssociations | join kind=inner( BackupIdTypeMap ) on BackupItemUniqueId_s | where ${DatasourceType} | join kind= inner ( VaultIdRepMap ) on VaultUniqueId_s | join kind=leftouter ( Storages ) on StorageUniqueId_s | where storage_type==\"Cloud\" | summarize TotalCharge = sum(StorageInGB) by StorageReplicationType_s",
                               "CenterLegend":{
                                  "Text":"Total",
                                  "Operation":"Sum",
                                  "ArcsToSelect":[
 
                                  ]
                               },
                               "Options":{
                                  "colors":[
                                     "#00188f",
                                     "#0072c6",
                                     "#00bcf2"
                                  ],
                                  "valueColorMapping":[
 
                                  ]
                               },
                               "NavigationSelect":{
 
                               }
                            },
                            "List":{
                               "Query":"let VaultIdRepMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"Vault\" |extend StorageReplicationType_s = columnifexists(\"StorageReplicationType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), VaultUniqueId_s = columnifexists(\"VaultUniqueId_s\",\"\") |where StorageReplicationType_s != \"\" | summarize arg_max(TimeGenerated, *) by VaultUniqueId_s; let BackupIdTypeMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"BackupItem\" | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let StorageAssociations=AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"StorageAssociation\" | extend StorageConsumedInMBs_s = columnifexists(\"StorageConsumedInMBs_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), VaultUniqueId_s = columnifexists(\"VaultUniqueId_s\",\"\"), StorageUniqueId_s = columnifexists(\"StorageUniqueId_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\")| extend StorageInGB = todouble(StorageConsumedInMBs_s) / 1024 | project StorageInGB, BackupItemUniqueId_s, VaultUniqueId_s, StorageUniqueId_s, TimeGenerated | summarize arg_max(TimeGenerated,*) by StorageUniqueId_s, BackupItemUniqueId_s ; let Storages=AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"Storage\" | extend TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), StorageUniqueId_s = columnifexists(\"StorageUniqueId_s\",\"\"), StorageType_s = columnifexists(\"StorageType_s\",\"\")| summarize arg_max(TimeGenerated, *) by StorageUniqueId_s | project StorageUniqueId_s, StorageType_s | extend storage_type=StorageType_s ; StorageAssociations | join kind=inner( BackupIdTypeMap ) on BackupItemUniqueId_s | where ${DatasourceType} | join kind= inner ( VaultIdRepMap ) on VaultUniqueId_s | join kind=leftouter ( Storages ) on StorageUniqueId_s | where storage_type==\"Cloud\" | summarize TotalCharge = sum(StorageInGB) by StorageReplicationType_s",
                               "HideGraph":false,
                               "enableSparklines":false,
                               "operation":"Summary",
                               "ColumnsTitle":{
                                  "Name":"Replication Type",
                                  "Value":"Storage (GB)"
                               },
                               "Color":"#0072c6",
                               "thresholds":{
                                  "isEnabled":false,
                                  "values":[
                                     {
                                        "name":"Normal",
                                        "threshold":"Default",
                                        "color":"#009e49",
                                        "isDefault":true
                                     },
                                     {
                                        "name":"Warning",
                                        "threshold":"60",
                                        "color":"#fcd116",
                                        "isDefault":false
                                     },
                                     {
                                        "name":"Error",
                                        "threshold":"90",
                                        "color":"#ba141a",
                                        "isDefault":false
                                     }
                                  ]
                               },
                               "NameDSVSeparator":"",
                               "NavigationQuery":"let VaultIdRepMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"Vault\" | extend StorageReplicationType_s = columnifexists(\"StorageReplicationType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), VaultUniqueId_s = columnifexists(\"VaultUniqueId_s\",\"\") | where StorageReplicationType_s != \"\" | summarize arg_max(TimeGenerated, *) by VaultUniqueId_s; let BackupIdTypeMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"BackupItem\" | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let StorageAssociations=AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"StorageAssociation\" | extend StorageConsumedInMBs_s = columnifexists(\"StorageConsumedInMBs_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), VaultUniqueId_s = columnifexists(\"VaultUniqueId_s\",\"\"), StorageUniqueId_s = columnifexists(\"StorageUniqueId_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\") | extend StorageInGB = todouble(StorageConsumedInMBs_s) / 1024 | project StorageInGB, BackupItemUniqueId_s, VaultUniqueId_s, StorageUniqueId_s, TimeGenerated ; let Storages=AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"Storage\" |extend TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), StorageUniqueId_s = columnifexists(\"StorageUniqueId_s\",\"\"), StorageType_s = columnifexists(\"StorageType_s\",\"\"), StorageReplicationType_s = columnifexists(\"StorageReplicationType_s\",\"\") | summarize arg_max(TimeGenerated, *) by StorageUniqueId_s | project StorageUniqueId_s, StorageType_s, StorageReplicationType_s | extend storage_type=StorageType_s; let Table1 = StorageAssociations | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | where ${DatasourceType} | join kind=leftouter ( VaultIdRepMap ) on VaultUniqueId_s | join kind=leftouter ( Storages ) on StorageUniqueId_s | where storage_type==\"Cloud\" | summarize arg_max(TimeGenerated,*) by BackupItemUniqueId_s, StorageReplicationType_s, bin(TimeGenerated, 1d); let Selection = Table1 | summarize TotalCharge = sum(StorageInGB) by StorageReplicationType_s | search {selected item}; Selection | join(Table1) on StorageReplicationType_s | project StorageReplicationType_s, VaultUniqueId_s, StorageInGB, BackupItemUniqueId_s",
                               "NavigationSelect":{
                                  "NavigationQuery":"let VaultIdRepMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"Vault\" | extend StorageReplicationType_s = columnifexists(\"StorageReplicationType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), VaultUniqueId_s = columnifexists(\"VaultUniqueId_s\",\"\") | where StorageReplicationType_s != \"\" | summarize arg_max(TimeGenerated, *) by VaultUniqueId_s; let BackupIdTypeMap = AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"BackupItem\" | extend BackupItemType_s = columnifexists(\"BackupItemType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\") | where BackupItemType_s != \"\" | project TimeGenerated, BackupItemType_s , BackupItemUniqueId_s | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId_s; let StorageAssociations=AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"StorageAssociation\" | extend StorageConsumedInMBs_s = columnifexists(\"StorageConsumedInMBs_s\",\"\"), BackupItemUniqueId_s = columnifexists(\"BackupItemUniqueId_s\",\"\"), VaultUniqueId_s = columnifexists(\"VaultUniqueId_s\",\"\"), StorageUniqueId_s = columnifexists(\"StorageUniqueId_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\") | extend StorageInGB = todouble(StorageConsumedInMBs_s) / 1024 | project StorageInGB, BackupItemUniqueId_s, VaultUniqueId_s, StorageUniqueId_s, TimeGenerated ; let Storages=AzureDiagnostics | where Category == \"AzureBackupReport\" | where OperationName == \"Storage\" |extend TimeGenerated = columnifexists(\"TimeGenerated\",\"\"), StorageUniqueId_s = columnifexists(\"StorageUniqueId_s\",\"\"), StorageType_s = columnifexists(\"StorageType_s\",\"\"), StorageReplicationType_s = columnifexists(\"StorageReplicationType_s\",\"\") | summarize arg_max(TimeGenerated, *) by StorageUniqueId_s | project StorageUniqueId_s, StorageType_s, StorageReplicationType_s | extend storage_type=StorageType_s; let Table1 = StorageAssociations | join kind=leftouter ( BackupIdTypeMap ) on BackupItemUniqueId_s | where ${DatasourceType} | join kind=leftouter ( VaultIdRepMap ) on VaultUniqueId_s | join kind=leftouter ( Storages ) on StorageUniqueId_s | where storage_type==\"Cloud\" | summarize arg_max(TimeGenerated,*) by BackupItemUniqueId_s, StorageReplicationType_s, bin(TimeGenerated, 1d); let Selection = Table1 | summarize TotalCharge = sum(StorageInGB) by StorageReplicationType_s | search {selected item}; Selection | join(Table1) on StorageReplicationType_s | project StorageReplicationType_s, VaultUniqueId_s, StorageInGB, BackupItemUniqueId_s"
                               }
                            }
                         }
                      }
                   ],
                   "Filters":[
                      {
                         "FieldName":"BackupItemType_s",
                         "QueryForValues":"AzureDiagnostics | where Category == \"AzureBackupReport\"|distinct BackupItemType_s",
                         "Title":"DatasourceType"
                      }
                   ],
                   "OverviewTile":{
                      "Id":"SingleNumberBuilderTile",
                      "Type":"OverviewTile",
                      "Version":2,
                      "Configuration":{
                         "Tile":{
                            "Legend":"Total Cloud Storage Consumed (GB)",
                            "Query":" AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"StorageAssociation\" | extend StorageConsumedInMBs_s = columnifexists(\"StorageConsumedInMBs_s\",\"\"), BackupItemUniqueId_s=columnifexists(\"BackupItemUniqueId_s\",\"\"), StorageUniqueId_s = columnifexists(\"StorageUniqueId_s\",\"\"), StorageType_s=columnifexists(\"StorageType_s\",\"\"), TimeGenerated = columnifexists(\"TimeGenerated\",\"\")| extend CloudStorageInGB = todouble(StorageConsumedInMBs_s) / 1024 | project CloudStorageInGB, BackupItemUniqueId_s, StorageUniqueId_s, TimeGenerated | join kind=inner ( AzureDiagnostics | where Category == \"AzureBackupReport\" | where SchemaVersion_s==\"V2\" | where OperationName == \"Storage\" | extend StorageUniqueId_s = columnifexists(\"StorageUniqueId_s\",\"\"), StorageType_s=columnifexists(\"StorageType_s\",\"\")|distinct StorageUniqueId_s, StorageType_s | project StorageUniqueId_s, StorageType_s ) on StorageUniqueId_s | where StorageType_s == \"Cloud\" | summarize arg_max(TimeGenerated, *) by StorageUniqueId_s,BackupItemUniqueId_s | summarize sum(CloudStorageInGB)"
                         },
                         "Advanced":{
                            "DataFlowVerification":{
                               "Enabled":false,
                               "Query":"search * | limit 1 | project TimeGenerated",
                               "Message":""
                            }
                         }
                      }
                   }
                }
             },
             {
                "name":"[variables('omsSolutions').customSolution.solutionName]",
                "type":"Microsoft.OperationsManagement/solutions",
                "apiVersion":"2015-11-01-preview",
                "location":"[parameters('workspaceLocation')]",
                "dependsOn":[
                   "[concat('Microsoft.OperationalInsights/workspaces/', parameters('workspaceName'), '/views/', variables('omsSolutions').customSolution.view1)]",
                   "[concat('Microsoft.OperationalInsights/workspaces/', parameters('workspaceName'), '/views/', variables('omsSolutions').customSolution.view2)]",
                   "[concat('Microsoft.OperationalInsights/workspaces/', parameters('workspaceName'), '/views/', variables('omsSolutions').customSolution.view3)]",
                   "[concat('Microsoft.OperationalInsights/workspaces/', parameters('workspaceName'), '/views/', variables('omsSolutions').customSolution.view4)]",
                   "[concat('Microsoft.OperationalInsights/workspaces/', parameters('workspaceName'), '/views/', variables('omsSolutions').customSolution.view5)]",
                   "[concat('Microsoft.OperationalInsights/workspaces/', parameters('workspaceName'), '/views/', variables('omsSolutions').customSolution.view6)]",
                   "[concat('Microsoft.OperationalInsights/workspaces/', parameters('workspaceName'), '/views/', variables('omsSolutions').customSolution.view7)]"
                ],
                "plan":{
                   "name":"[variables('omsSolutions').customSolution.solutionName]",
                   "product":"[variables('omsSolutions').customSolution.name]",
                   "publisher":"[variables('omsSolutions').customSolution.publisher]",
                   "promotionCode":""
                },
                "properties":{
                   "workspaceResourceId":"[resourceId('Microsoft.OperationalInsights/workspaces/', parameters('workspaceName'))]",
                   "referencedResources":[
 
                   ],
                   "containedResources":[
                      "[resourceId('Microsoft.OperationalInsights/workspaces/views/', parameters('workspaceName'), variables('omsSolutions').customSolution.view1)]",
                      "[resourceId('Microsoft.OperationalInsights/workspaces/views/', parameters('workspaceName'), variables('omsSolutions').customSolution.view2)]",
                      "[resourceId('Microsoft.OperationalInsights/workspaces/views/', parameters('workspaceName'), variables('omsSolutions').customSolution.view3)]",
                      "[resourceId('Microsoft.OperationalInsights/workspaces/views/', parameters('workspaceName'), variables('omsSolutions').customSolution.view4)]",
                      "[resourceId('Microsoft.OperationalInsights/workspaces/views/', parameters('workspaceName'), variables('omsSolutions').customSolution.view5)]",
                      "[resourceId('Microsoft.OperationalInsights/workspaces/views/', parameters('workspaceName'), variables('omsSolutions').customSolution.view6)]",
                      "[resourceId('Microsoft.OperationalInsights/workspaces/views/', parameters('workspaceName'), variables('omsSolutions').customSolution.view7)]"
                   ]
                }
             }
          ]
 }