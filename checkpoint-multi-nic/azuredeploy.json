{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "adminPassword": {
            "metadata": {
                "description": "Administrator password"
            },
            "type": "securestring"
        },
        "authenticationType": {
            "allowedValues": [
                "password",
                "sshPublicKey"
            ],
            "defaultValue": "password",
            "metadata": {
                "description": "Authentication type"
            },
            "type": "string"
        },
        "newStorageAccountName": {
            "metadata": {
                "description": "Name of storage account"
            },
            "type": "string"
        },
        "offer": {
            "allowedValues": [
                "R7710BYOL",
                "R7710PAYG"
            ],
            "defaultValue": "R7710BYOL",
            "metadata": {
                "description": "Offer version and type"
            },
            "type": "string"
        },
        "sshPublicKey": {
            "defaultValue": "",
            "metadata": {
                "description": "Administrator SSH public key"
            },
            "type": "string"
        },
        "vmName": {
            "metadata": {
                "description": "Name of the Security Gateway"
            },
            "type": "string"
        },
        "vmSize": {
            "defaultValue": "Standard_D3",
            "metadata": {
                "description": "Size of the VM"
            },
            "type": "string"
        }
    },
    "variables": {
        "apiVersion": "2015-06-15",
        "customData": "#!/bin/bash",
        "addressPrefix": "10.0.0.0/16",
        "externalPrivateAddress": "10.0.1.10",
        "frontEndIPConfigId": "[concat(variables('lbId'),'/frontendIPConfigurations/LoadBalancerFrontEnd')]",
        "imageOffer": "check-point-r77-10",
        "imagePublisher": "checkpoint",
        "imageReference": "[variables(concat('imageReference',parameters('offer')))]",
        "imageReferenceR7710BYOL": {
            "offer": "[variables('imageOffer')]",
            "publisher": "[variables('imagePublisher')]",
            "sku": "r7710-byol",
            "version": "latest"
        },
        "imageReferenceR7710PAYG": {
            "offer": "[variables('imageOffer')]",
            "publisher": "[variables('imagePublisher')]",
            "sku": "r7710-ngtp-payg",
            "version": "latest"
        },
        "internalPrivateAddress": "10.0.2.10",
        "lbId": "[resourceId('Microsoft.Network/loadBalancers',variables('lbName'))]",
        "lbName": "frontend-lb",
        "nic1Name": "external-nic",
        "nic2Name": "internal-nic",
        "osProfile": "[variables(concat('osprofile',parameters('authenticationType')))]",
        "osProfilepassword": {
            "adminPassword": "[parameters('adminPassword')]",
            "adminUsername": "notused",
            "computerName": "[parameters('vmName')]",
            "customData": "[base64(variables('customData'))]"
        },
        "osProfilesshPublicKey": {
            "adminUsername": "notused",
            "computerName": "[parameters('vmName')]",
            "customData": "[base64(variables('customData'))]",
            "linuxConfiguration": {
                "disablePasswordAuthentication": "true",
                "ssh": {
                    "publicKeys": [
                        {
                            "keyData": "[parameters('sshPublicKey')]",
                            "path": "/home/notused/.ssh/authorized_keys"
                        }
                    ]
                }
            }
        },
        "plan": "[variables(concat('plan',parameters('offer')))]",
        "planR7710BYOL": {
            "name": "r7710-byol",
            "product": "[variables('imageOffer')]",
            "publisher": "[variables('imagePublisher')]"
        },
        "planR7710PAYG": {
            "name": "r7710-ngtp-payg",
            "product": "[variables('imageOffer')]",
            "publisher": "[variables('imagePublisher')]"
        },
        "publicIPAddressId": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]",
        "publicIPAddressName": "security-gateway",
        "storageAccountType": "Standard_LRS",
        "subnet1Name": "external-subnet",
        "subnet1Prefix": "10.0.1.0/24",
        "subnet1Id": "[concat(variables('vnetId'),'/subnets/',variables('subnet1Name'))]",
        "subnet2Name": "internal-subnet",
        "subnet2Prefix": "10.0.2.0/24",
        "subnet2Id": "[concat(variables('vnetId'),'/subnets/',variables('subnet2Name'))]",
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks',variables('vnetName'))]",
        "vnetName": "vnet",

        "externalRouteTableName": "ExternalRouteTable",
        "externalRouteTableId": "[resourceId('Microsoft.Network/routeTables', variables('externalRouteTableName'))]",
        "internalRouteTableName": "InternalRouteTable",
        "internalRouteTableId": "[resourceId('Microsoft.Network/routeTables', variables('internalRouteTableName'))]"
    },
    "resources": [
        {
            "apiVersion": "[variables('apiVersion')]",
            "location": "[resourceGroup().location]",
            "name": "[variables('externalRouteTableName')]",
            "properties": {
                "routes": [
                    {
                        "name": "ToInernal",
                        "properties": {
                            "addressPrefix": "[variables('subnet2Prefix')]",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[variables('externalPrivateAddress')]"
                        }
                    }
                ]
            },
            "type": "Microsoft.Network/routeTables"
        },
        {
            "apiVersion": "[variables('apiVersion')]",
            "location": "[resourceGroup().location]",
            "name": "[variables('internalRouteTableName')]",
            "properties": {
                "routes": [
                    {
                        "name": "ToInternet",
                        "properties": {
                            "addressPrefix": "0.0.0.0/0",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[variables('internalPrivateAddress')]"
                        }
                    },
                    {
                        "name": "ToExternal",
                        "properties": {
                            "addressPrefix": "[variables('subnet1Prefix')]",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[variables('internalPrivateAddress')]"
                        }
                    }
                ]
            },
            "type": "Microsoft.Network/routeTables"
        },
        {
            "apiVersion": "[variables('apiVersion')]",
            "location": "[resourceGroup().location]",
            "name": "[parameters('newStorageAccountName')]",
            "properties": {
                "accountType": "[variables('storageAccountType')]"
            },
            "type": "Microsoft.Storage/storageAccounts"
        },
        {
            "apiVersion": "[variables('apiVersion')]",
            "location": "[resourceGroup().location]",
            "name": "[variables('vnetName')]",
            "dependsOn": [
                "[variables('externalRouteTableId')]",
                "[variables('internalRouteTableId')]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnet1Name')]",
                        "properties": {
                            "addressPrefix": "[variables('subnet1Prefix')]",
                            "routeTable": {
                                "id": "[variables('externalRouteTableId')]"
                            }
                        }
                    },
                    {
                        "name": "[variables('subnet2Name')]",
                        "properties": {
                            "addressPrefix": "[variables('subnet2Prefix')]",
                            "routeTable": {
                                "id": "[variables('internalRouteTableId')]"
                            }
                        }
                    }
                ]
            },
            "type": "Microsoft.Network/virtualNetworks"
        },
        {
            "apiVersion": "[variables('apiVersion')]",
            "location": "[resourceGroup().location]",
            "name": "[variables('publicIPAddressName')]",
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[parameters('vmName')]"
                },
                "idleTimeoutInMinutes": 30,
                "publicIPAllocationMethod": "Static"
            },
            "type": "Microsoft.Network/publicIPAddresses"
        },
        {
            "apiVersion": "[variables('apiVersion')]",
            "dependsOn": [
                "[variables('publicIPAddressId')]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[variables('lbName')]",
            "properties": {
                "backendAddressPools": [
                    {
                        "name": "BackendPool1"
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontEnd",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[variables('publicIPAddressId')]"
                            }
                        }
                    }
                ],
                "inboundNatRules": [
                    {
                        "name": "SSH",
                        "properties": {
                            "backendPort": 22,
                            "frontendIPConfiguration": {
                                "id": "[variables('frontEndIPConfigId')]"
                            },
                            "frontendPort": 22,
                            "protocol": "tcp"
                        }
                    },
                    {
                        "name": "FWD",
                        "properties": {
                            "backendPort": 256,
                            "frontendIPConfiguration": {
                                "id": "[variables('frontEndIPConfigId')]"
                            },
                            "frontendPort": 256,
                            "protocol": "tcp"
                        }
                    },
                    {
                        "name": "IKE",
                        "properties": {
                            "backendPort": 500,
                            "frontendIPConfiguration": {
                                "id": "[variables('frontEndIPConfigId')]"
                            },
                            "frontendPort": 500,
                            "protocol": "udp"
                        }
                    },
                    {
                        "name": "NAT-T",
                        "properties": {
                            "backendPort": 4500,
                            "frontendIPConfiguration": {
                                "id": "[variables('frontEndIPConfigId')]"
                            },
                            "frontendPort": 4500,
                            "protocol": "udp"
                        }
                    },
                    {
                        "name": "HTTPS",
                        "properties": {
                            "backendPort": 443,
                            "frontendIPConfiguration": {
                                "id": "[variables('frontEndIPConfigId')]"
                            },
                            "frontendPort": 443,
                            "protocol": "tcp"
                        }
                    },
                    {
                        "name": "SmartDashboard",
                        "properties": {
                            "backendPort": 18190,
                            "frontendIPConfiguration": {
                                "id": "[variables('frontEndIPConfigId')]"
                            },
                            "frontendPort": 18190,
                            "protocol": "tcp"
                        }
                    },
                    {
                        "name": "PolicyPush",
                        "properties": {
                            "backendPort": 18191,
                            "frontendIPConfiguration": {
                                "id": "[variables('frontEndIPConfigId')]"
                            },
                            "frontendPort": 18191,
                            "protocol": "tcp"
                        }
                    },
                    {
                        "name": "Amon",
                        "properties": {
                            "backendPort": 18192,
                            "frontendIPConfiguration": {
                                "id": "[variables('frontEndIPConfigId')]"
                            },
                            "frontendPort": 18192,
                            "protocol": "tcp"
                        }
                    },
                    {
                        "name": "ICAPush",
                        "properties": {
                            "backendPort": 18211,
                            "frontendIPConfiguration": {
                                "id": "[variables('frontEndIPConfigId')]"
                            },
                            "frontendPort": 18211,
                            "protocol": "tcp"
                        }
                    }
                ]
            },
            "type": "Microsoft.Network/loadBalancers"
        },
        {
            "apiVersion": "[variables('apiVersion')]",
            "dependsOn": [
                "[variables('vnetId')]",
                "[variables('lbId')]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[variables('nic1Name')]",
            "properties": {
                "enableIPForwarding": true,
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(variables('lbId'), '/backendAddressPools/BackendPool1')]"
                                }
                            ],
                            "loadBalancerInboundNatRules": [
                                {
                                    "id": "[concat(variables('lbId'),'/inboundNatRules/SSH')]"
                                },
                                {
                                    "id": "[concat(variables('lbId'),'/inboundNatRules/FWD')]"
                                },
                                {
                                    "id": "[concat(variables('lbId'),'/inboundNatRules/IKE')]"
                                },
                                {
                                    "id": "[concat(variables('lbId'),'/inboundNatRules/NAT-T')]"
                                },
                                {
                                    "id": "[concat(variables('lbId'),'/inboundNatRules/HTTPS')]"
                                },
                                {
                                    "id": "[concat(variables('lbId'),'/inboundNatRules/SmartDashboard')]"
                                },
                                {
                                    "id": "[concat(variables('lbId'),'/inboundNatRules/PolicyPush')]"
                                },
                                {
                                    "id": "[concat(variables('lbId'),'/inboundNatRules/Amon')]"
                                },
                                {
                                    "id": "[concat(variables('lbId'),'/inboundNatRules/ICAPush')]"
                                }
                            ],
                            "privateIPAddress": "[variables('externalPrivateAddress')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('subnet1Id')]"
                            }
                        }
                    }
                ]
            },
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('apiVersion')]",
            "dependsOn": [
                "[variables('vnetId')]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[variables('nic2Name')]",
            "properties": {
                "enableIPForwarding": true,
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAddress": "[variables('internalPrivateAddress')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('subnet2Id')]"
                            }
                        }
                    }
                ]
            },
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('apiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', parameters('newStorageAccountName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('nic1Name'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('nic2Name'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[parameters('vmName')]",
            "plan": "[variables('plan')]",
            "properties": {
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[concat('http://',parameters('newStorageAccountName'),'.blob.core.windows.net')]"
                    }
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nic1Name'))]",
                            "properties": {
                                "primary": true
                            }
                        },
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nic2Name'))]",
                            "properties": {
                                "primary": false
                            }
                        }
                    ]
                },
                "osProfile": "[variables('osProfile')]",
                "storageProfile": {
                    "imageReference": "[variables('imageReference')]",
                    "osDisk": {
                        "caching": "ReadWrite",
                        "createOption": "FromImage",
                        "name": "osDisk",
                        "vhd": {
                            "uri": "[concat('http://',parameters('newStorageAccountName'),'.blob.core.windows.net/vhds/',parameters('vmName'),'.vhd')]"
                        }
                    }
                }
            },
            "type": "Microsoft.Compute/virtualMachines"
        }
    ],
    "outputs": {
        "PublicIPAddress": {
            "type": "string",
            "value": "[reference(variables('publicIPAddressId')).IpAddress]"
        }
    }
}
