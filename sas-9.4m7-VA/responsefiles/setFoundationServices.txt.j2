/*************************************************************/
/* Update the Configuration Initialization settings for
/* the InformationService for these services:
/*
/*    Platform Local Services
/*    Remote Services
/*    SASStudioMidTier3.81 Local Services
/*    SASStoredProcess9.4 Local Services
/*
/* This script will change the protcol, url and port for the
/* WebDav configuration to use the values for the loadbalancer
/*************************************************************/
options metaserver="{{ metadata_server_host }}"
        metaport={{ metadata_server_port }}
        metauser="{{ metadata_username }}"
        metapass="{{ metadata_password }}";
options  symbolgen;

%Macro SetFoundationServices(mode=dryrun,IntHost=,IntPort=,ExtHost=,ExtPort=);
%***  dryrun only reports on findings. no changes made **;
%***  alternative is update ***;

data _null_;
   %*Declare text vars:;
   length component tree member name property propertyvalue configuration textstore $256;
   length storedtext $5000;
   %*declare Numeric variables;
   length n NumComponents treeindex memberindex configurationindex rc 8.;

   NumComponents = 0;
   n = 0;
   treeindex = 0;
   memberindex = 0;
   configurationindex = 0;

   component = "";
   tree = "";
   member = "";
   textstore = "";

   n = 0;
   do while (NumComponents >= 0);
      %* this loop works because NumComponents becomes (-4) when I have found all the things I was looking for. (n becomes too high) *;

      /* Get the Foundation Services to process */

      n++1;
      NumComponents = metadata_getnobj("omsobj:SoftwareComponent?@Name='Platform Local Services' or @Name='Remote Services' or @Name='SASStudioMidTier3.81 Local Services' or @Name='SASStoredProcess9.4 Local Services'", n, component);
      put n= NumComponents=;
      if (NumComponents ne -4  ) then do;
         put component=;

         /* Iterate through the SoftwareTrees association for the service, and find the Tree named "Core". */
         tree = "";
         rc = 0;
         treeindex = 0;
         name = "";
         do while (rc ge 0 and tree eq "");
            treeindex++1;
            rc = metadata_getnasn(component, "SoftwareTrees", treeindex, tree);
            if (tree ne "") then do;
               rc = metadata_getattr(tree, "Name", name);
               if (name ne "Core") then tree = "";
            end;
         end;
         if (tree eq "") then continue; /* If Tree is not found, then bail */

         /* Get the Members association for the Tree, and find the ServiceComponent named "Information Service". */

         member = "";
         memberindex = 0;
         rc = 0;
         name = "";
         do while (rc ge 0 and member eq "");
            memberindex++1;
            rc = metadata_getnasn(tree, "Members", memberindex, member);
            if (member ne "") then do;
               /* This is not the droid you're looking for */
               rc = metadata_getattr(member, "Name", name);
               if (name ne "Information Service") then member = "";
            end;
         end;
         if ( member eq "") then continue; /* If Member is not found, then bail */

         /* Get the Properties for the ServiceComponent, and find the Property named "Initialization Data" or "Foundation Service Initialization Data" */

         property = "";
         propertyvalue = "";
         rc = 0;
         rc = metadata_getprop(member, "Initialization Data", propertyvalue, property);
         if (property eq "") then rc = metadata_getprop(member, "Foundation Service Initialization Data", propertyvalue, property);
         if (property eq "") then continue; /* If Property is not found, then bail */

         /* Get the StoredConfiguration association for the Property, and find the TextStore named "Initialization Data" */

         configuration = "";
         configurationindex = 0;
         rc = 0;
         name = "";
         do while ( rc eq 0 and configuration eq "");
            configurationindex++1;
            rc = metadata_getnasn(property, "StoredConfiguration", configurationindex, configuration);
            if (configuration ne "") then do;
               /* This is also not the droid you're looking for. */
               rc = metadata_getattr(configuration, "Name", name);
               if (name ne "Initialization Data") then configuration = "";
            end;
         end;
         if (configuration eq "") then continue;

         /* Retrieve the StoredText attribute of the TextStore */

         rc = metadata_getattr(configuration, "StoredText", storedtext);
         if (rc < 0) then continue;

         /* In storedtext, we must change these values:

            host="<internal host name>" to host="&ExtHost"
            port="<internal port name>" to port="&ExtPort"
            issecure="false" to issecure="true" */

         put 'Original stored text value';
         put @3 storedtext;

         storedtext = tranwrd(storedtext, cats('host="', "&IntHost", '"'), cats('host="', "&ExtHost", '"'));
         storedtext = tranwrd(storedtext, cats('port="', "&IntPort", '"'), cats('port="', "&ExtPort", '"'));
         storedtext = tranwrd(storedtext, 'issecure="false"', 'issecure="true"');
         put 'Modified stored text value:';
         put @3 storedtext;

         %if "&mode"="update" %then %do;
            put 'Updating storedtext value in metadata';
            rc = metadata_setattr(configuration, "StoredText", storedtext);
            put rc=;
         %end;
      end;
   end;
run;

%mend;

%SetFoundationServices(mode=update,IntHost={{ internal_host }}, IntPort={{ internal_port }}, ExtHost={{ external_host_name }},ExtPort={{ external_port }});
