{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "The location in Microsoft Azure where these resources should be created."
            }
        },
        "SAS Depot Location": {
            "type": "String",
            "metadata": {
                "description": "The uri to download the depot from as currently stored in Azure Blob Store"
            }
        },
        "Use a New or Existing Virtual Network?": {
            "type": "string",
            "defaultValue": "New",
            "allowedValues": [
                "New",
                "Existing"
            ],
            "metadata": {
                "description": "Specify whether to create a new or existing virtual network for the VMs.  If using an existing virtual network it must have subnets: GatewaySubnet, AzureBastionSubnet, computeSubnet, midtierSubnet, metadataSubnet, and jumpSubnet."
            }
        },
        "Existing Virtual Network Resource Group": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Name of the resource group if using an existing Virtual Network, leave blank if creating a new Virtual Network."
            }
        },
        "Virtual Network Name": {
            "defaultValue": "multitiervnet",
            "type": "String"
        },
        "Operating System Image": {
            "type":"string",
            "defaultValue": "SUSE Enterprise Linux 12 SP5 +Patching",
            "allowedValues": [
                "Red Hat Enterprise Linux 7 (latest, LVM)",
                "SUSE Enterprise Linux 12 SP5 +Patching"
            ]
        },
        "Mid-Tier VM Name Base": {
            "defaultValue": "midtier",
            "type": "String"
        },
        "Mid-Tier VM Count": {
            "defaultValue": 1,
            "type": "Int",
            "allowedValues": [
                0,
                1,
                2,
                3
            ]
        },
        "Mid-tier VM Size": {
            "defaultValue": "Standard_D8s_v3",
            "type": "String",
            "allowedValues": [
                "Standard_B1ms",
                "Standard_D2s_v3",
                "Standard_D8s_v3",
                "Standard_D16s_v3",
                "Standard_D32s_v3"
            ]
        },
        "Metadata VM Name Base": {
            "defaultValue": "metadata",
            "type": "String"
        },
        "Metadata VM Count": {
            "defaultValue": 1,
            "type": "Int",
            "allowedValues": [
                0,
                1,
                3
            ]
        },
        "Metadata VM Size": {
            "defaultValue": "Standard_D8s_v3",
            "type": "String",
            "allowedValues": [
                "Standard_B1ms",
                "Standard_D2s_v3",
                "Standard_D8s_v3",
                "Standard_D16s_v3",
                "Standard_D32s_v3"
            ]
        },
        "Visual Analytics VM Name Base": {
            "defaultValue": "visual-analytics",
            "type": "String"
        },
        "Visual Analytics Worker Count": {
            "defaultValue": 2,
            "type": "Int",
            "allowedValues": [
                1,
                2,
                3,
                4,
                5
            ]
        },
        "Visual Analytics Controller Size": {
            "defaultValue": "Standard_D8s_v3",
            "type": "String",
            "allowedValues": [
                "Standard_B1ms",
                "Standard_D2s_v3",
                "Standard_D8s_v3",
                "Standard_D16s_v3",
                "Standard_D32s_v3"
            ]
        },
        "Visual Analytics Worker Size": {
            "defaultValue": "Standard_D8s_v3",
            "type": "String",
            "allowedValues": [
                "Standard_B1ms",
                "Standard_D2s_v3",
                "Standard_D8s_v3",
                "Standard_D16s_v3",
                "Standard_D32s_v3"
            ]
        },
        "Mid-tier Network Security Group Name": {
            "defaultValue": "midtierNSG",
            "type": "String"
        },
        "Metadata Network Security Group Name": {
            "defaultValue": "metadataNSG",
            "type": "String"
        },
        "Visual Analytics Network Security Group Name": {
            "defaultValue": "vaNSG",
            "type": "String"
        },
        "Proximity PlacementGroup Name": {
            "defaultValue": "prox1",
            "type": "String"
        },
        "ssh Key for VM Access": {
            "defaultValue": "",
            "type": "String"
        },
        "Allow management from IP or CIDR block": {
            "defaultValue": "0.0.0.0/0",
            "type": "string",
            "metadata": {
                "description": "Default value of 0.0.0.0/0 allows management from the entire Internet"
            }
        },
        "Deploy Azure Bastion": {
            "defaultValue": "No",
            "type": "String",
            "allowedValues": [
                "No",
                "Yes"
            ]
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "For a standard deployment, leave empty. If you are running from a blob template, then provide the Shared Access Signature token (starting with a ?) that grants authorization to the private template. "
            }
        },
        "_artifactsLocation": {
            "type": "string",
            "defaultValue": "[deployment().properties.templateLink.uri]",
            "metadata": {
                "description": "For a standard deployment, keep the default.  The https URL to the base of the deployment files in Microsoft Azure. If a SAS key is needed, please do not include the SAS key in the URL. Instead, add the part after and include the question mark to the _artifactsLocationSasToken variable. ex. https://(STORAGE_ACCOUNT).file.core.windows.net/(SHARE_NAME)/(SUBDIRECTORY_NAME)/"
            }
        }
    },
    "variables": {
        "vnet_resource_group_name": "[if(equals(parameters('Use a New or Existing Virtual Network?'),'New'),resourceGroup().name,parameters('Existing Virtual Network Resource Group'))]",
        "storageProfile": {
            "Standard_B1ms": 2,
            "Standard_D2s_v3": 2,
            "Standard_D8s_v3": 2,
            "Standard_D16s_v3": 4,
            "Standard_D32s_v3": 8
        },
        "storageProfileAdvanced": {
            "Standard_B1ms": {
                "disksize": 16,
                "vmsize": "Standard_B1ms",
                "diskcount": 2
            },
            "Standard_D2s_v3": {
                "disksize": 16,
                "vmsize": "Standard_D2s_v3",
                "diskcount": 2
            },
            "Standard_D8s_v3 2xP10 (256MB/node)": {
                "disksize": 128,
                "vmsize": "Standard_D8s_v3",
                "diskcount": 2
            },
            "Standard_D8s_v3 1xP30 (1024MB/node)": {
                "disksize": 1024,
                "vmsize": "Standard_D8s_v3",
                "diskcount": 1
            },
            "Standard_D16s_v3 4xP10 (512MB/node)": {
                "disksize": 128,
                "vmsize": "Standard_D16s_v3",
                "diskcount": 4
            },
            "Standard_D16s_v3 2xP30 (2048MB/node)": {
                "disksize": 1024,
                "vmsize": "Standard_D16s_v3",
                "diskcount": 2
            },
            "Standard_D32s_v3 8xP10 (1024MB/node)": {
                "disksize": 128,
                "vmsize": "Standard_D32s_v3",
                "diskcount": 8
            },
            "Standard_D32s_v3 4xP30 (4096MB/node)": {
                "disksize": 1024,
                "vmsize": "Standard_D32s_v3",
                "diskcount": 4
            },
            "Standard_D48s_v3 12xP10 (1536MB/node)": {
                "disksize": 128,
                "vmsize": "Standard_D48s_v3",
                "diskcount": 12
            },
            "Standard_D48s_v3 6xP30 (6144MB/node)": {
                "disksize": 1024,
                "vmsize": "Standard_D48s_v3",
                "diskcount": 6
            },
            "Standard_D64s_v3 12xP10 (1536MB/node)": {
                "disksize": 128,
                "vmsize": "Standard_D64s_v3",
                "diskcount": 12
            },
            "Standard_D64s_v3 6xP30 (6144MB/node)": {
                "disksize": 1024,
                "vmsize": "Standard_D64s_v3",
                "diskcount": 6
            }
        },
        "ostag":"[if(equals(parameters('Operating System Image'),'Red Hat Enterprise Linux 7 (latest, LVM)'),'RH7x','SL12')]",
        "osProfile": {
            "RH7x": {
                "image": {
                    "publisher": "RedHat",
                    "offer": "RHEL",
                    "sku": "7-LVM",
                    "version": "latest"
                },
                "diskscript": "scripts/RHEL_raid_azure_data.sh"
            },
            "SL12": {
                "image": {
                    "publisher": "suse",
                    "offer": "sles-12-sp5-basic",
                    "sku": "gen1",
                    "version": "latest"
                },
                "diskscript": "scripts/SLES_raid_azure_data.sh"
            }
        },
        "Visual Analytics VM Name Base - Controller": "[concat(parameters('Visual Analytics VM Name Base'),'-controller')]",
        "Visual Analytics VM Name Base - Worker": "[concat(parameters('Visual Analytics VM Name Base'),'-worker')]",
        "resourceGroupUniqueString": "[uniqueString(resourceGroup().id)]",
        "StorageGroupName": "[toLower(concat('storage0group0', substring(variables('resourceGroupUniqueString'),0,10)))]",
        "AzureFilesViyaShare": "sasshare",
        "PrimaryUserName": "AzureUser"
    },
    "resources": [
        {
            "apiVersion": "2019-07-01",
            "type": "Microsoft.Compute/proximityPlacementGroups",
            "name": "[parameters('Proximity PlacementGroup Name')]",
            "properties": {
            },
            "location": "[parameters('location')]"
        },
        {
            "comments": "Diagnostic storage group for the SAS Viya stack",
            "type": "Microsoft.Storage/storageAccounts",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "name": "[variables('StorageGroupName')]",
            "apiVersion": "2019-04-01",
            "location": "[parameters('location')]",
            "properties": {
                "networkAcls": {
                "bypass": "AzureServices",
                "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": false,
                "encryption": {
                "services": {
                    "file": {
                    "enabled": true
                    },
                    "blob": {
                    "enabled": true
                    }
                },
                "keySource": "Microsoft.Storage"
                }
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "condition": "[equals(parameters('Use a New or Existing Virtual Network?'), 'New')]",
            "apiVersion": "2019-12-01",
            "name": "[parameters('Metadata Network Security Group Name')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('Proximity PlacementGroup Name'))]"
            ],
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-12-01",
            "name": "[parameters('Mid-tier Network Security Group Name')]",
            "condition": "[equals(parameters('Use a New or Existing Virtual Network?'), 'New')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('Proximity PlacementGroup Name'))]"
            ],
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-12-01",
            "name": "[parameters('Visual Analytics Network Security Group Name')]",
            "condition": "[equals(parameters('Use a New or Existing Virtual Network?'), 'New')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('Proximity PlacementGroup Name'))]"
            ],
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-12-01",
            "name": "jumpNSG",
            "condition": "[equals(parameters('Use a New or Existing Virtual Network?'), 'New')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('Proximity PlacementGroup Name'))]"
            ],
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "allow_ssh_from_ip_or_range",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "[parameters('Allow management from IP or CIDR block')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 500,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-12-01",
            "name": "appgatewayNSG",
            "condition": "[equals(parameters('Use a New or Existing Virtual Network?'), 'New')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('Proximity PlacementGroup Name'))]"
            ],
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "allow_http_from_ip_or_range",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "[parameters('Allow management from IP or CIDR block')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allow_management_from_gateway_manager",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "65200-65535",
                            "sourceAddressPrefix": "GatewayManager",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 501,
                            "direction": "Inbound"
                        }
                    }

                ]
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-12-01",
            "name": "bastionNSG",
            "condition": "[equals(parameters('Use a New or Existing Virtual Network?'), 'New')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('Proximity PlacementGroup Name'))]"
            ],
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "allow_https_from_ip_or_range",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "[parameters('Allow management from IP or CIDR block')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allow_https_from_gateway_manager",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "GatewayManager",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 501,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allow_ssh_to_vnet",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 500,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "allow_rdp_to_vnet",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "3389",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 501,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "allow_https_to_azurecloud",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "AzureCloud",
                            "access": "Allow",
                            "priority": 503,
                            "direction": "Outbound"
                        }
                    }

                ]
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "ParameterizedAppGateway",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('Virtual Network Name'),'-ip-loadbalancer'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('Virtual Network Name'))]",
                "[resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('Proximity PlacementGroup Name'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(uri(parameters('_artifactsLocation'), 'subtemplates/paramlb.json'), parameters('_artifactsLocationSasToken'))]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "lb_name": {
                        "value": "[concat(parameters('Mid-Tier VM Name Base'),'-loadbalancer')]"
                    },
                    "public_ip": {
                        "value": "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('Virtual Network Name'),'-ip-loadbalancer'))]"
                    },
                    "vnet_name": {
                        "value": "[parameters('Virtual Network Name')]"
                    },
                    "vnet_resource_group": {
                        "value": "[variables('vnet_resource_group_name')]"
                    },
                    "vnet_subnet_name": {
                        "value": "AppGatewaySubnet"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[concat('ParameterizedMetadataVM-', copyIndex())]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('Virtual Network Name'))]",
                "[resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('Proximity PlacementGroup Name'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(uri(parameters('_artifactsLocation'), 'subtemplates/paramvm.json'), parameters('_artifactsLocationSasToken'))]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vm_name": {
                        "value": "[concat(parameters('Metadata VM Name Base'),'-', copyIndex())]"
                    },
                    "vm_size": {
                        "value": "[parameters('Metadata VM Size')]"
                    },
                    "datadisk_size": {
                        "value": 128
                    },
                    "datadisk_count": {
                        "value": "[variables('storageProfile')[parameters('Metadata VM Size')]]"
                    },
                    "proximity_group_name": {
                        "value": "[parameters('Proximity PlacementGroup Name')]"
                    },
                    "ssh_pub_key": {
                        "value": "[parameters('ssh Key for VM Access')]"
                    },
                    "vnet_name": {
                        "value": "[parameters('Virtual Network Name')]"
                    },
                    "vnet_resource_group": {
                        "value": "[variables('vnet_resource_group_name')]"
                    },
                    "vnet_subnet_name": {
                        "value": "metadataSubnet"
                    },
                    "os_image": {
                        "value": "[variables('osProfile')[variables('ostag')]['image']]"
                    },
                    "post_install_actions": {
                        "value":  {
                            "commandToExecute": "[ concat('set -o pipefail; ./SetupNonJump.sh \"', variables('PrimaryUserName'), '\" \"', variables('StorageGroupName'), '\" \"', variables('AzureFilesViyaShare'), '\" \"', listKeys(variables('StorageGroupName'),'2019-06-01').keys[0].value, '\"  2>&1 | tee /tmp/prerequisites.log')]",
                            "fileUris": [
                                "[concat(uri(parameters('_artifactsLocation'), 'scripts/SetupNonJump.sh'), parameters('_artifactsLocationSasToken'))]"
                            ]
                        }
                    },
                    "enable_enhanced_networking": {
                        "value": true
                    },
                    "public_ip_or_empty": {
                        "value": ""
                    },
                    "loadbalancer_id_or_empty": {
                        "value": ""
                    }
                }
            },
            "copy": {
                "name": "ParameterizedMetadataVM-Copy",
                "count": "[parameters('Metadata VM Count')]"
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "ParameterizedVaControllerVM",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('Virtual Network Name'))]",
                "[resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('Proximity PlacementGroup Name'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('StorageGroupName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(uri(parameters('_artifactsLocation'), 'subtemplates/paramvm.json'), parameters('_artifactsLocationSasToken'))]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vm_name": {
                        "value": "[variables('Visual Analytics VM Name Base - Controller')]"
                    },
                    "vm_size": {
                        "value": "[parameters('Visual Analytics Controller Size')]"
                    },
                    "datadisk_size": {
                        "value": 128
                    },
                    "datadisk_count": {
                        "value": "[variables('storageProfile')[parameters('Visual Analytics Controller Size')]]"
                    },
                    "proximity_group_name": {
                        "value": "[parameters('Proximity PlacementGroup Name')]"
                    },
                    "ssh_pub_key": {
                        "value": "[parameters('ssh Key for VM Access')]"
                    },
                    "vnet_name": {
                        "value": "[parameters('Virtual Network Name')]"
                    },
                    "vnet_resource_group": {
                        "value": "[variables('vnet_resource_group_name')]"
                    },
                    "vnet_subnet_name": {
                        "value": "vaSubnet"
                    },
                    "os_image": {
                        "value": "[variables('osProfile')[variables('ostag')]['image']]"
                    },
                    "post_install_actions": {
                        "value":  {
                            "commandToExecute": "[ concat('set -o pipefail; ./SetupNonJump.sh \"', variables('PrimaryUserName'), '\" \"', variables('StorageGroupName'), '\" \"', variables('AzureFilesViyaShare'), '\" \"', listKeys(variables('StorageGroupName'),'2019-06-01').keys[0].value, '\"  2>&1 | tee /tmp/prerequisites.log')]",
                            "fileUris": [
                                "[concat(uri(parameters('_artifactsLocation'), 'scripts/SetupNonJump.sh'), parameters('_artifactsLocationSasToken'))]"
                            ]
                        }
                    },
                    "enable_enhanced_networking": {
                        "value": true
                    },
                    "public_ip_or_empty": {
                        "value": ""
                    },
                    "loadbalancer_id_or_empty": {
                        "value": ""
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[concat('ParameterizedVaWorkerVM-', copyIndex())]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('Virtual Network Name'))]",
                "[resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('Proximity PlacementGroup Name'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('StorageGroupName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(uri(parameters('_artifactsLocation'), 'subtemplates/paramvm.json'), parameters('_artifactsLocationSasToken'))]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vm_name": {
                        "value": "[concat(variables('Visual Analytics VM Name Base - Worker'),'-', copyIndex())]"
                    },
                    "vm_size": {
                        "value": "[parameters('Visual Analytics Worker Size')]"
                    },
                    "datadisk_size": {
                        "value": 128
                    },
                    "datadisk_count": {
                        "value": "[variables('storageProfile')[parameters('Visual Analytics Worker Size')]]"
                    },
                    "proximity_group_name": {
                        "value": "[parameters('Proximity PlacementGroup Name')]"
                    },
                    "ssh_pub_key": {
                        "value": "[parameters('ssh Key for VM Access')]"
                    },
                    "vnet_name": {
                        "value": "[parameters('Virtual Network Name')]"
                    },
                    "vnet_resource_group": {
                        "value": "[variables('vnet_resource_group_name')]"
                    },
                    "vnet_subnet_name": {
                        "value": "vaSubnet"
                    },
                    "os_image": {
                        "value": "[variables('osProfile')[variables('ostag')]['image']]"
                    },
                    "post_install_actions": {
                        "value":  {
                            "commandToExecute": "[ concat('set -o pipefail; ./SetupNonJump.sh \"', variables('PrimaryUserName'), '\" \"', variables('StorageGroupName'), '\" \"', variables('AzureFilesViyaShare'), '\" \"', listKeys(variables('StorageGroupName'),'2019-06-01').keys[0].value, '\"  2>&1 | tee /tmp/prerequisites.log')]",
                            "fileUris": [
                                "[concat(uri(parameters('_artifactsLocation'), 'scripts/SetupNonJump.sh'), parameters('_artifactsLocationSasToken'))]"
                            ]
                        }
                    },
                    "enable_enhanced_networking": {
                        "value": true
                    },
                    "public_ip_or_empty": {
                        "value": ""
                    },
                    "loadbalancer_id_or_empty": {
                        "value": ""
                    }
                }
            },
            "copy": {
                "name": "ParameterizedVAWorkerVM-Copy",
                "count": "[parameters('Visual Analytics Worker Count')]"
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[concat('ParameterizedMidtierVM-', copyIndex())]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('Virtual Network Name'))]",
                "[resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('Proximity PlacementGroup Name'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('StorageGroupName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(uri(parameters('_artifactsLocation'), 'subtemplates/paramvm.json'), parameters('_artifactsLocationSasToken'))]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vm_name": {
                        "value": "[concat(parameters('Mid-Tier VM Name Base'),'-', copyIndex())]"
                    },
                    "vm_size": {
                        "value": "[parameters('Mid-tier VM Size')]"
                    },
                    "datadisk_size": {
                        "value": 128
                    },
                    "datadisk_count": {
                        "value": "[variables('storageProfile')[parameters('Mid-tier VM Size')]]"
                    },
                    "proximity_group_name": {
                        "value": "[parameters('Proximity PlacementGroup Name')]"
                    },
                    "ssh_pub_key": {
                        "value": "[parameters('ssh Key for VM Access')]"
                    },
                    "vnet_name": {
                        "value": "[parameters('Virtual Network Name')]"
                    },
                    "vnet_resource_group": {
                        "value": "[variables('vnet_resource_group_name')]"
                    },
                    "vnet_subnet_name": {
                        "value": "midtierSubnet"
                    },
                    "os_image": {
                        "value": "[variables('osProfile')[variables('ostag')]['image']]"
                    },
                    "post_install_actions": {
                        "value":  {
                            "commandToExecute": "[ concat('set -o pipefail; ./SetupNonJump.sh \"', variables('PrimaryUserName'), '\" \"', variables('StorageGroupName'), '\" \"', variables('AzureFilesViyaShare'), '\" \"', listKeys(variables('StorageGroupName'),'2019-06-01').keys[0].value, '\"  2>&1 | tee /tmp/prerequisites.log')]",
                            "fileUris": [
                                "[concat(uri(parameters('_artifactsLocation'), 'scripts/SetupNonJump.sh'), parameters('_artifactsLocationSasToken'))]"
                            ]
                        }
                    },
                    "enable_enhanced_networking": {
                        "value": true
                    },
                    "public_ip_or_empty": {
                        "value": ""
                    },
                    "loadbalancer_id_or_empty": {
                        "value": "[concat(resourceId('Microsoft.Network/applicationGateways',concat(parameters('Mid-Tier VM Name Base'),'-loadbalancer')),'/backendAddressPools/default-backend')]"
                    }
                }
            },
            "copy": {
                "name": "ParameterizedMidtierVM-Copy",
                "count": "[parameters('Mid-Tier VM Count')]"
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "ParameterizedJumpVM",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('Virtual Network Name'))]",
                "[resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('Proximity PlacementGroup Name'))]",
                "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('Virtual Network Name'),'-ip-jump'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('StorageGroupName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(uri(parameters('_artifactsLocation'), 'subtemplates/paramvm.json'), parameters('_artifactsLocationSasToken'))]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vm_name": {
                        "value": "jumpvm"
                    },
                    "vm_size": {
                        "value": "Standard_B2ms"
                    },
                    "datadisk_size": {
                        "value": 128
                    },
                    "datadisk_count": {
                        "value": 1
                    },
                    "proximity_group_name": {
                        "value": "[parameters('Proximity PlacementGroup Name')]"
                    },
                    "ssh_pub_key": {
                        "value": "[parameters('ssh Key for VM Access')]"
                    },
                    "vnet_name": {
                        "value": "[parameters('Virtual Network Name')]"
                    },
                    "vnet_resource_group": {
                        "value": "[variables('vnet_resource_group_name')]"
                    },
                    "vnet_subnet_name": {
                        "value": "jumpSubnet"
                    },
                    "os_image": {
                        "value": "[variables('osProfile')[variables('ostag')]['image']]"
                    },
                    "post_install_actions": {
                        "value":  {
                            "commandToExecute": "[ concat('set -o pipefail; ./SetupJump.sh \"', variables('PrimaryUserName'), '\" \"', variables('StorageGroupName'), '\" \"', variables('AzureFilesViyaShare'), '\" \"', listKeys(variables('StorageGroupName'),'2019-06-01').keys[0].value, '\" \"', parameters('_artifactsLocation'), '\" \"', parameters('_artifactsLocationSasToken'), '\" \"', parameters('SAS Depot Location'), '\" \"', parameters('Mid-Tier VM Count'), '\" \"', parameters('Metadata VM Count'), '\" \"', parameters('Visual Analytics Worker Count'), '\"  2>&1 | tee /tmp/prerequisites.log')]",
                            "fileUris": [
                                "[concat(uri(parameters('_artifactsLocation'), 'scripts/SetupJump.sh'), parameters('_artifactsLocationSasToken'))]"
                            ]
                        }
                    },
                    "enable_enhanced_networking": {
                        "value": false
                    },
                    "public_ip_or_empty": {
                        "value": "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('Virtual Network Name'),'-ip-jump'))]"
                    },
                    "loadbalancer_id_or_empty": {
                        "value": ""
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "SASInstallPhase01of04",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'ParameterizedJumpVM')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(uri(parameters('_artifactsLocation'), 'subtemplates/installextension.json'), parameters('_artifactsLocationSasToken'))]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vm_name": {
                        "value": "jumpvm"
                    },
                    "commandToExecute": {
                        "value": "[ concat('set -o pipefail; /sas/install/scripts/SetupJumpInstallSAS.sh  2>&1 | tee /tmp/SASInstallPhase01of04.log')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "SASInstallPhase02of04",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'SASInstallPhase01of04')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(uri(parameters('_artifactsLocation'), 'subtemplates/installextension.json'), parameters('_artifactsLocationSasToken'))]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vm_name": {
                        "value": "jumpvm"
                    },
                    "commandToExecute": {
                        "value": "[ concat('set -o pipefail; /sas/install/scripts/SetupJumpInstallSAS.sh  2>&1 | tee /tmp/SASInstallPhase02of04.log')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "SASInstallPhase03of04",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'SASInstallPhase02of04')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(uri(parameters('_artifactsLocation'), 'subtemplates/installextension.json'), parameters('_artifactsLocationSasToken'))]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vm_name": {
                        "value": "jumpvm"
                    },
                    "commandToExecute": {
                        "value": "[ concat('set -o pipefail; /sas/install/scripts/SetupJumpInstallSAS.sh  2>&1 | tee /tmp/SASInstallPhase03of04.log')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "SASInstallPhase04of04",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'SASInstallPhase03of04')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(uri(parameters('_artifactsLocation'), 'subtemplates/installextension.json'), parameters('_artifactsLocationSasToken'))]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vm_name": {
                        "value": "jumpvm"
                    },
                    "commandToExecute": {
                        "value": "[ concat('set -o pipefail; /sas/install/scripts/SetupJumpInstallSAS.sh  2>&1 | tee /tmp/SASInstallPhase04of04.log')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "condition": "[equals(parameters('Use a New or Existing Virtual Network?'), 'New')]",
            "apiVersion": "2019-12-01",
            "name": "[parameters('Virtual Network Name')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('Mid-tier Network Security Group Name'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('Metadata Network Security Group Name'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('Visual Analytics Network Security Group Name'))]",
                "[resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('Proximity PlacementGroup Name'))]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.2.0.0/16"
                    ]
                },
                "subnets": [
                    {
                        "name": "GatewaySubnet",
                        "properties": {
                            "addressPrefix": "10.2.0.224/27"
                        }
                    },
                    {
                        "name": "AzureBastionSubnet",
                        "properties": {
                            "addressPrefix": "10.2.0.192/27",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'bastionNSG')]"
                            }
                        }
                    },
                    {
                        "name": "jumpSubnet",
                        "properties": {
                            "addressPrefix": "10.2.0.160/27",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'jumpNSG')]"
                            }
                        }
                    },
                    {
                        "name": "AppGatewaySubnet",
                        "properties": {
                            "addressPrefix": "10.2.0.128/27",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'appgatewayNSG')]"
                            }
                        }
                    },
                    {
                        "name": "metadataSubnet",
                        "properties": {
                            "addressPrefix": "10.2.0.16/28",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('Metadata Network Security Group Name'))]"
                            }
                        }
                    },
                    {
                        "name": "midtierSubnet",
                        "properties": {
                            "addressPrefix": "10.2.0.0/28",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('Mid-tier Network Security Group Name'))]"
                            }
                        }
                    },
                    {
                        "name": "vaSubnet",
                        "properties": {
                            "addressPrefix": "10.2.2.0/24",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('Visual Analytics Network Security Group Name'))]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2019-12-01",
            "name": "[concat(parameters('Virtual Network Name'),'-ip-bastion')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('Proximity PlacementGroup Name'))]"
            ],
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2019-12-01",
            "name": "[concat(parameters('Virtual Network Name'),'-ip-jump')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('Proximity PlacementGroup Name'))]"
            ],
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2019-12-01",
            "name": "[concat(parameters('Virtual Network Name'),'-ip-loadbalancer')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('Proximity PlacementGroup Name'))]"
            ],
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            }
        },
        {
            "type": "Microsoft.Network/bastionHosts",
            "apiVersion": "2019-12-01",
            "name": "bastion",
            "condition": "[equals(parameters('Deploy Azure Bastion'), 'Yes')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('Virtual Network Name'))]",
                "[resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('Proximity PlacementGroup Name'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "IpConf",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('Virtual Network Name'),'-ip-bastion'))]"
                            },
                            "subnet": {
                                "id": "[resourceId(variables('vnet_resource_group_name'), 'Microsoft.Network/virtualNetworks/subnets', parameters('Virtual Network Name'), 'AzureBastionSubnet')]"
                            }
                        }
                    }
                ]
            }
        },
	{
	    "apiVersion": "2019-10-01",
	    "name": "pid-a04b9960-695b-556c-9e3d-2c5752ffbdd7",
	    "type": "Microsoft.Resources/deployments",
	    "properties": {
		"mode": "Incremental",
		"template": {
		    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
		    "contentVersion": "1.0.0.0",
		    "resources": []
		}
	    }
	}
     ]
}
