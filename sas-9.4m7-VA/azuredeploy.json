{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
      "location": {
          "type": "string",
          "defaultValue": "[resourceGroup().location]",
          "metadata": {
              "description": "The location in Microsoft Azure where these resources should be created."
          }
      },
      "SAS Depot Location": {
          "type": "String",
          "defaultValue": "https://azureviya.blob.core.windows.net/94-deployment-data/vavs97/nondist/depot?sp=rl&st=2020-07-28T13:17:43Z&se=2025-07-28T13:17:00Z&sv=2019-12-12&sr=c&sig=01%2B%2BoiLLo4RYhNRlj9kozsS5oVkT9LiUyeCkCIiP%2FwE%3D",
          "metadata": {
              "description": "The uri to download the depot from as currently stored in Azure Blob Store"
          }
      },
      "Use a New or Existing Virtual Network?": {
          "type": "string",
          "defaultValue": "New",
          "allowedValues": [
              "New",
              "Existing"
          ],
          "metadata": {
              "description": "Specify whether to create a new or existing virtual network for the VMs.  If using an existing virtual network it must have subnets: GatewaySubnet, AzureBastionSubnet, computeSubnet, midtierSubnet, metadataSubnet, and jumpSubnet."
          }
      },
      "Existing Virtual Network Resource Group": {
          "type": "string",
          "defaultValue": "",
          "metadata": {
              "description": "Name of the resource group if using an existing Virtual Network, leave blank if creating a new Virtual Network."
          }
      },
      "Virtual Network Name": {
          "defaultValue": "multitiervnet",
          "type": "String"
      },
      "Operating System Image": {
          "type":"string",
          "defaultValue": "SUSE Enterprise Linux 12 SP5 +Patching",
          "allowedValues": [
              "Red Hat Enterprise Linux 7 (latest, LVM)",
              "SUSE Enterprise Linux 12 SP5 +Patching"
          ]
      },
      "Mid-Tier VM Count": {
          "defaultValue": 1,
          "type": "Int",
          "allowedValues": [
              0,
              1,
              2,
              3
          ]
      },
      "Mid-tier VM Size": {
          "defaultValue": "Standard_D8s_v3",
          "type": "String",
          "allowedValues": [
              "Standard_B1ms",
              "Standard_D2s_v3",
              "Standard_D8s_v3",
              "Standard_D16s_v3",
              "Standard_D32s_v3"
          ]
      },
      "Metadata VM Count": {
          "defaultValue": 1,
          "type": "Int",
          "allowedValues": [
              0,
              1,
              3
          ]
      },
      "Metadata VM Size": {
          "defaultValue": "Standard_D8s_v3",
          "type": "String",
          "allowedValues": [
              "Standard_B1ms",
              "Standard_D2s_v3",
              "Standard_D8s_v3",
              "Standard_D16s_v3",
              "Standard_D32s_v3"
          ]
      },
      "Visual Analytics Worker Count": {
          "defaultValue": 2,
          "type": "Int",
          "allowedValues": [
              1,
              2,
              3,
              4,
              5
          ]
      },
      "Visual Analytics Controller Size": {
          "defaultValue": "Standard_D8s_v3",
          "type": "String",
          "allowedValues": [
              "Standard_B1ms",
              "Standard_D2s_v3",
              "Standard_D8s_v3",
              "Standard_D16s_v3",
              "Standard_D32s_v3"
          ]
      },
      "Visual Analytics Worker Size": {
          "defaultValue": "Standard_D8s_v3",
          "type": "String",
          "allowedValues": [
              "Standard_B1ms",
              "Standard_D2s_v3",
              "Standard_D8s_v3",
              "Standard_D16s_v3",
              "Standard_D32s_v3"
          ]
      },
      "Mid-tier Network Security Group Name": {
          "defaultValue": "midtier_sg",
          "type": "String"
      },
      "Metadata Network Security Group Name": {
          "defaultValue": "metadata_sg",
          "type": "String"
      },
      "Visual Analytics Network Security Group Name": {
          "defaultValue": "va_sg",
          "type": "String"
      },
      "Proximity PlacementGroup Name": {
          "defaultValue": "prox1",
          "type": "String"
      },
      "ssh Key for VM Access": {
          "defaultValue": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDmj4OjEV/fQQRB4w1X/CbJz55FVHWtWJJ8mrOTM9xCEevza4xhB0YXKn64IZtVLvTK+pN+p2LWlIN4BIEjG6gB1q3Kr2xoZQ5kFlR2bZwirYDxYwM0UyQWBodHVDjJHZZREKj/c9zM+KMePpPAb5P6/KQE13Y74ZN4FkQXUSX5GQM6hb778TuSaIKb4k7cSQ1MJoOcF3ED+QVSraqip8d4ZDpJV9r1/UVwTvKRAP9WH8ByVeHW15RVJASdU+vLX9zODksxCrGNMATqOow8/n8p9auoYPuRfZn7T5DZATx3q9Rh4yOD/MRNnQ+8cVRGw9fDDsQoic59dOY204Cro2wj a3scas",
          "type": "String"
      },
      "SAS Administration Password": {
          "type": "securestring"
      },
      "Azure Administration Password": {
          "type": "securestring"
      },
      "Admin Ingress Location": {
          "defaultValue": "136.56.6.201/32",
          "type": "string",
          "metadata": {
              "description": "Allow administrative access from this IP or CIDR block. Default value of 0.0.0.0/0 allows management from the entire Internet"
          }
      },
      "Web Ingress Location": {
          "defaultValue": "136.56.6.201/32",
          "type": "string",
          "metadata": {
              "description": "Allow http/https access from this IP or CIDR block. Default value of 0.0.0.0/0 allows access from the entire Internet"
          }
      },
      "Deploy Azure Bastion": {
          "defaultValue": "No",
          "type": "String",
          "allowedValues": [
              "No",
              "Yes"
          ]
      },
      "_artifactsLocationSasToken": {
          "type": "securestring",
          "defaultValue": "",
          "metadata": {
              "description": "For a standard deployment, leave empty. If you are running from a blob template, then provide the Shared Access Signature token (starting with a ?) that grants authorization to the private template. "
          }
      },
      "_artifactsLocation": {
          "type": "string",
          "defaultValue": "https://raw.githubusercontent.com/sassoftware/azure-quickstart-templates/develop-sas94m7-refactor/sas-9.4m7-VA/",
          "metadata": {
              "description": "For a standard deployment, keep the default.  The https URL to the base of the deployment files in Microsoft Azure. If a SAS key is needed, please do not include the SAS key in the URL. Instead, add the part after and include the question mark to the _artifactsLocationSasToken variable. ex. https://(STORAGE_ACCOUNT).file.core.windows.net/(SHARE_NAME)/(SUBDIRECTORY_NAME)/"
          }
      }
  },
  "variables": {
      "vnetResourceGroup": "[if(equals(parameters('Use a New or Existing Virtual Network?'),'New'),resourceGroup().name,parameters('Existing Virtual Network Resource Group'))]",
      "storageProfile": {
          "Standard_B1ms": 2,
          "Standard_D2s_v3": 2,
          "Standard_D8s_v3": 2,
          "Standard_D16s_v3": 4,
          "Standard_D32s_v3": 8
      },
      "storageProfileAdvanced": {
          "Standard_B1ms": {
              "disksize": 16,
              "vmsize": "Standard_B1ms",
              "diskcount": 2
          },
          "Standard_D2s_v3": {
              "disksize": 16,
              "vmsize": "Standard_D2s_v3",
              "diskcount": 2
          },
          "Standard_D8s_v3 2xP10 (256MB/node)": {
              "disksize": 128,
              "vmsize": "Standard_D8s_v3",
              "diskcount": 2
          },
          "Standard_D8s_v3 1xP30 (1024MB/node)": {
              "disksize": 1024,
              "vmsize": "Standard_D8s_v3",
              "diskcount": 1
          },
          "Standard_D16s_v3 4xP10 (512MB/node)": {
              "disksize": 128,
              "vmsize": "Standard_D16s_v3",
              "diskcount": 4
          },
          "Standard_D16s_v3 2xP30 (2048MB/node)": {
              "disksize": 1024,
              "vmsize": "Standard_D16s_v3",
              "diskcount": 2
          },
          "Standard_D32s_v3 8xP10 (1024MB/node)": {
              "disksize": 128,
              "vmsize": "Standard_D32s_v3",
              "diskcount": 8
          },
          "Standard_D32s_v3 4xP30 (4096MB/node)": {
              "disksize": 1024,
              "vmsize": "Standard_D32s_v3",
              "diskcount": 4
          },
          "Standard_D48s_v3 12xP10 (1536MB/node)": {
              "disksize": 128,
              "vmsize": "Standard_D48s_v3",
              "diskcount": 12
          },
          "Standard_D48s_v3 6xP30 (6144MB/node)": {
              "disksize": 1024,
              "vmsize": "Standard_D48s_v3",
              "diskcount": 6
          },
          "Standard_D64s_v3 12xP10 (1536MB/node)": {
              "disksize": 128,
              "vmsize": "Standard_D64s_v3",
              "diskcount": 12
          },
          "Standard_D64s_v3 6xP30 (6144MB/node)": {
              "disksize": 1024,
              "vmsize": "Standard_D64s_v3",
              "diskcount": 6
          }
      },
      "ostag":"[if(equals(parameters('Operating System Image'),'Red Hat Enterprise Linux 7 (latest, LVM)'),'RH7x','SL12')]",
      "osProfile": {
          "RH7x": {
              "image": {
                  "publisher": "RedHat",
                  "offer": "RHEL",
                  "sku": "7-LVM",
                  "version": "latest"
              },
              "diskscript": "scripts/RHEL_raid_azure_data.sh"
          },
          "SL12": {
              "image": {
                  "publisher": "suse",
                  "offer": "sles-12-sp5-basic",
                  "sku": "gen1",
                  "version": "latest"
              },
              "diskscript": "scripts/SLES_raid_azure_data.sh"
          }
      },
      "resourceGroupUniqueString": "[uniqueString(resourceGroup().id)]",
      "storageGroup": "[toLower(concat('storage0group0', substring(variables('resourceGroupUniqueString'),0,10)))]",
      "azureFilesViyaShare": "sasshare",
      "primaryUserName": "AzureUser",
      "location": "[parameters('location')]",
      "proximity": "[parameters('Proximity PlacementGroup Name')]",
      "useNewNetwork": "[equals(parameters('Use a New or Existing Virtual Network?'), 'New')]",
      "metadata_sg": "[parameters('Metadata Network Security Group Name')]",
      "midtier_sg": "[parameters('Mid-tier Network Security Group Name')]",
      "va_sg": "[parameters('Visual Analytics Network Security Group Name')]",
      "adminIngressLocation": "[parameters('Admin Ingress Location')]",
      "webIngressLocation": "[parameters('Web Ingress Location')]",
      "vnetName": "[parameters('Virtual Network Name')]",
      "artifactsLocation": "[parameters('_artifactsLocation')]",
      "sasToken": "[parameters('_artifactsLocationSasToken')]",
      "metadataSize": "[parameters('Metadata VM Size')]",
      "metadataCount": "[parameters('Metadata VM Count')]",
      "sshKey": "[parameters('ssh Key for VM Access')]",
      "vaControllerSize": "[parameters('Visual Analytics Controller Size')]",
      "vaWorkerSize": "[parameters('Visual Analytics Worker Size')]",
      "vaWorkerCount": "[parameters('Visual Analytics Worker Count')]",
      "midtierSize": "[parameters('Mid-tier VM Size')]",
      "midtierCount": "[parameters('Mid-Tier VM Count')]",
      "sasDepot": "[parameters('SAS Depot Location')]",
      "hasBastion": "[equals(parameters('Deploy Azure Bastion'), 'Yes')]",
      "sasPassword": "[base64(parameters('SAS Administration Password'))]",
      "azurePassword": "[base64(parameters('Azure Administration Password'))]"
  },
  "resources": [
      {
          "apiVersion": "2019-07-01",
          "type": "Microsoft.Compute/proximityPlacementGroups",
          "name": "[variables('proximity')]",
          "properties": {
          },
          "location": "[variables('location')]"
      },
      {
          "comments": "Diagnostic storage group for the SAS Viya stack",
          "type": "Microsoft.Storage/storageAccounts",
          "sku": {
              "name": "Standard_LRS",
              "tier": "Standard"
          },
          "kind": "StorageV2",
          "name": "[variables('storageGroup')]",
          "apiVersion": "2019-04-01",
          "location": "[variables('location')]",
          "properties": {
              "networkAcls": {
              "bypass": "AzureServices",
              "defaultAction": "Allow"
              },
              "supportsHttpsTrafficOnly": false,
              "encryption": {
              "services": {
                  "file": {
                  "enabled": true
                  },
                  "blob": {
                  "enabled": true
                  }
              },
              "keySource": "Microsoft.Storage"
              }
          }
      },
      {
          "type": "Microsoft.Network/publicIPAddresses",
          "apiVersion": "2019-12-01",
          "name": "[concat(variables('vnetName'),'-ip-bastion')]",
          "location": "[variables('location')]",
          "dependsOn": [
              "[resourceId('Microsoft.Compute/proximityPlacementGroups', variables('proximity'))]"
          ],
          "sku": {
              "name": "Standard"
          },
          "properties": {
              "publicIPAllocationMethod": "Static"
          }
      },
      {
          "type": "Microsoft.Network/publicIPAddresses",
          "apiVersion": "2019-12-01",
          "name": "[concat(variables('vnetName'),'-ip-jump')]",
          "location": "[variables('location')]",
          "dependsOn": [
              "[resourceId('Microsoft.Compute/proximityPlacementGroups', variables('proximity'))]"
          ],
          "sku": {
              "name": "Standard"
          },
          "properties": {
              "publicIPAllocationMethod": "Static"
          }
      },
      {
          "type": "Microsoft.Network/publicIPAddresses",
          "apiVersion": "2019-12-01",
          "name": "[concat(variables('vnetName'),'-ip-loadbalancer')]",
          "location": "[variables('location')]",
          "dependsOn": [
              "[resourceId('Microsoft.Compute/proximityPlacementGroups', variables('proximity'))]"
          ],
          "sku": {
              "name": "Standard"
          },
          "properties": {
              "publicIPAllocationMethod": "Static"
          }
      },
      {
          "type": "Microsoft.Network/networkSecurityGroups",
          "condition": "[variables('useNewNetwork')]",
          "apiVersion": "2019-12-01",
          "name": "[variables('metadata_sg')]",
          "dependsOn": [
              "[resourceId('Microsoft.Compute/proximityPlacementGroups', variables('proximity'))]"
          ],
          "location": "[variables('location')]",
          "properties": {
              "securityRules": [
              ]
          }
      },
      {
          "type": "Microsoft.Network/networkSecurityGroups",
          "apiVersion": "2019-12-01",
          "name": "[variables('midtier_sg')]",
          "condition": "[variables('useNewNetwork')]",
          "dependsOn": [
              "[resourceId('Microsoft.Compute/proximityPlacementGroups', variables('proximity'))]"
          ],
          "location": "[variables('location')]",
          "properties": {
              "securityRules": [
              ]
          }
      },
      {
          "type": "Microsoft.Network/networkSecurityGroups",
          "apiVersion": "2019-12-01",
          "name": "[variables('va_sg')]",
          "condition": "[variables('useNewNetwork')]",
          "dependsOn": [
              "[resourceId('Microsoft.Compute/proximityPlacementGroups', variables('proximity'))]"
          ],
          "location": "[variables('location')]",
          "properties": {
              "securityRules": [
              ]
          }
      },
      {
          "type": "Microsoft.Network/networkSecurityGroups",
          "apiVersion": "2019-12-01",
          "name": "jump_sg",
          "condition": "[variables('useNewNetwork')]",
          "dependsOn": [
              "[resourceId('Microsoft.Compute/proximityPlacementGroups', variables('proximity'))]"
          ],
          "location": "[variables('location')]",
          "properties": {
              "securityRules": [
                  {
                      "name": "allow_ssh_from_ip_or_range",
                      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                      "properties": {
                          "protocol": "*",
                          "sourcePortRange": "*",
                          "destinationPortRange": "22",
                          "sourceAddressPrefix": "[variables('adminIngressLocation')]",
                          "destinationAddressPrefix": "*",
                          "access": "Allow",
                          "priority": 500,
                          "direction": "Inbound"
                      }
                  }
              ]
          }
      },
      {
          "type": "Microsoft.Network/networkSecurityGroups",
          "apiVersion": "2019-12-01",
          "name": "appgateway_sg",
          "condition": "[variables('useNewNetwork')]",
          "dependsOn": [
              "[resourceId('Microsoft.Compute/proximityPlacementGroups', variables('proximity'))]"
          ],
          "location": "[variables('location')]",
          "properties": {
              "securityRules": [
                  {
                      "name": "allow_http_port_80",
                      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                      "properties": {
                          "protocol": "*",
                          "sourcePortRange": "*",
                          "destinationPortRange": "80",
                          "sourceAddressPrefix": "[variables('webIngressLocation')]",
                          "destinationAddressPrefix": "*",
                          "access": "Allow",
                          "priority": 500,
                          "direction": "Inbound"
                      }
                  },
                  {
                      "name": "allow_http_port_7980",
                      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                      "properties": {
                          "protocol": "*",
                          "sourcePortRange": "*",
                          "destinationPortRange": "7980",
                          "sourceAddressPrefix": "[variables('webIngressLocation')]",
                          "destinationAddressPrefix": "*",
                          "access": "Allow",
                          "priority": 501,
                          "direction": "Inbound"
                      }
                  },
                  {
                      "name": "allow_management_from_gateway_manager",
                      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                      "properties": {
                          "protocol": "*",
                          "sourcePortRange": "*",
                          "destinationPortRange": "65200-65535",
                          "sourceAddressPrefix": "GatewayManager",
                          "destinationAddressPrefix": "*",
                          "access": "Allow",
                          "priority": 505,
                          "direction": "Inbound"
                      }
                  }

              ]
          }
      },
      {
          "type": "Microsoft.Network/networkSecurityGroups",
          "apiVersion": "2019-12-01",
          "name": "bastion_sg",
          "condition": "[variables('useNewNetwork')]",
          "dependsOn": [
              "[resourceId('Microsoft.Compute/proximityPlacementGroups', variables('proximity'))]"
          ],
          "location": "[variables('location')]",
          "properties": {
              "securityRules": [
                  {
                      "name": "allow_https_from_ip_or_range",
                      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                      "properties": {
                          "protocol": "*",
                          "sourcePortRange": "*",
                          "destinationPortRange": "443",
                          "sourceAddressPrefix": "[variables('webIngressLocation')]",
                          "destinationAddressPrefix": "*",
                          "access": "Allow",
                          "priority": 500,
                          "direction": "Inbound"
                      }
                  },
                  {
                      "name": "allow_https_from_gateway_manager",
                      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                      "properties": {
                          "protocol": "*",
                          "sourcePortRange": "*",
                          "destinationPortRange": "443",
                          "sourceAddressPrefix": "GatewayManager",
                          "destinationAddressPrefix": "*",
                          "access": "Allow",
                          "priority": 501,
                          "direction": "Inbound"
                      }
                  },
                  {
                      "name": "allow_ssh_to_vnet",
                      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                      "properties": {
                          "protocol": "*",
                          "sourcePortRange": "*",
                          "destinationPortRange": "22",
                          "sourceAddressPrefix": "*",
                          "destinationAddressPrefix": "VirtualNetwork",
                          "access": "Allow",
                          "priority": 500,
                          "direction": "Outbound"
                      }
                  },
                  {
                      "name": "allow_rdp_to_vnet",
                      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                      "properties": {
                          "protocol": "*",
                          "sourcePortRange": "*",
                          "destinationPortRange": "3389",
                          "sourceAddressPrefix": "*",
                          "destinationAddressPrefix": "VirtualNetwork",
                          "access": "Allow",
                          "priority": 501,
                          "direction": "Outbound"
                      }
                  },
                  {
                      "name": "allow_https_to_azurecloud",
                      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                      "properties": {
                          "protocol": "*",
                          "sourcePortRange": "*",
                          "destinationPortRange": "443",
                          "sourceAddressPrefix": "*",
                          "destinationAddressPrefix": "AzureCloud",
                          "access": "Allow",
                          "priority": 503,
                          "direction": "Outbound"
                      }
                  }

              ]
          }
      },
      {
          "type": "Microsoft.Network/virtualNetworks",
          "condition": "[variables('useNewNetwork')]",
          "apiVersion": "2019-12-01",
          "name": "[variables('vnetName')]",
          "location": "[variables('location')]",
          "dependsOn": [
              "[resourceId('Microsoft.Network/networkSecurityGroups', variables('midtier_sg'))]",
              "[resourceId('Microsoft.Network/networkSecurityGroups', variables('metadata_sg'))]",
              "[resourceId('Microsoft.Network/networkSecurityGroups', variables('va_sg'))]",
              "[resourceId('Microsoft.Compute/proximityPlacementGroups', variables('proximity'))]"
          ],
          "properties": {
              "addressSpace": {
                  "addressPrefixes": [
                      "10.2.0.0/16"
                  ]
              },
              "subnets": [
                  {
                      "name": "GatewaySubnet",
                      "properties": {
                          "addressPrefix": "10.2.0.224/27"
                      }
                  },
                  {
                      "name": "AzureBastionSubnet",
                      "properties": {
                          "addressPrefix": "10.2.0.192/27",
                          "networkSecurityGroup": {
                              "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'bastion_sg')]"
                          }
                      }
                  },
                  {
                      "name": "jumpSubnet",
                      "properties": {
                          "addressPrefix": "10.2.0.160/27",
                          "networkSecurityGroup": {
                              "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'jump_sg')]"
                          }
                      }
                  },
                  {
                      "name": "AppGatewaySubnet",
                      "properties": {
                          "addressPrefix": "10.2.0.128/27",
                          "networkSecurityGroup": {
                              "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'appgateway_sg')]"
                          }
                      }
                  },
                  {
                      "name": "metadataSubnet",
                      "properties": {
                          "addressPrefix": "10.2.0.16/28",
                          "networkSecurityGroup": {
                              "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('metadata_sg'))]"
                          }
                      }
                  },
                  {
                      "name": "midtierSubnet",
                      "properties": {
                          "addressPrefix": "10.2.0.0/28",
                          "networkSecurityGroup": {
                              "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('midtier_sg'))]"
                          }
                      }
                  },
                  {
                      "name": "vaSubnet",
                      "properties": {
                          "addressPrefix": "10.2.2.0/24",
                          "networkSecurityGroup": {
                              "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('va_sg'))]"
                          }
                      }
                  }
              ]
          }
      },
      {
          "type": "Microsoft.Network/applicationGateways",
          "apiVersion": "2019-12-01",
          "name": "midtier-loadbalancer",
          "dependsOn": [
              "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('vnetName'),'-ip-loadbalancer'))]",
              "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
              "[resourceId('Microsoft.Compute/proximityPlacementGroups', variables('proximity'))]"
          ],
          "location": "[variables('location')]",
          "properties": {
              "sku": {
                  "name": "Standard_v2",
                  "tier": "Standard_v2"
              },
              "gatewayIPConfigurations": [
                  {
                      "name": "appGatewayIpConfig",
                      "properties": {
                          "subnet": {
                              "id": "[resourceId(variables('vnetResourceGroup'), 'Microsoft.Network/virtualNetwork/subnets', variables('vnetName'), 'AppGatewaySubnet')]"
                          }
                      }
                  }
              ],
              "frontEndIPConfigurations": [
                  {
                      "name": "appGwPublicFrontendIp",
                      "properties": {
                          "privateIPAllocationMethod": "Dynamic",
                          "publicIPAddress": {
                              "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('vnetName'),'-ip-loadbalancer'))]"
                          }
                      }
                  }
              ],
              "frontendPorts": [
                  {
                      "name": "port_80",
                      "properties": {
                          "port": 80
                      }
                  },
                  {
                      "name": "port_7980",
                      "properties": {
                          "port": 7980
                      }
                  }
              ],
              "backendAddressPools": [
                  {
                      "name": "midtierAddressPool",
                      "properties": {
                      }
                  }
              ],
              "backendHttpSettingsCollection": [
                  {
                      "name": "http-setting",
                      "properties": {
                          "port": 7980,
                          "protocol": "Http",
                          "cookieBasedAffinity": "Disabled",
                          "pickHostNameFromBackendAddress": false,
                          "requestTimeout": 60
                      }
                  }
              ],
              "httpListeners": [
                  {
                      "name": "http-listener-80",
                      "properties": {
                          "frontendIPConfiguration": {
                              "id": "[concat(resourceId('Microsoft.Network/applicationGateways', 'midtier-loadbalancer'), '/frontendIPConfigurations/appGwPublicFrontendIp')]"
                          },
                          "frontendPort": {
                              "id": "[concat(resourceid('Microsoft.Network/applicationGateways', 'midtier-loadbalancer'), '/frontendPorts/port_80')]"
                          },
                          "protocol": "Http",
                          "hostNames": [
                          ],
                          "requireServerNameIndication": false
                      }
                  },
                  {
                      "name": "http-listener-7980",
                      "properties": {
                          "frontendIPConfiguration": {
                              "id": "[concat(resourceId('Microsoft.Network/applicationGateways', 'midtier-loadbalancer'), '/frontendIPConfigurations/appGwPublicFrontendIp')]"
                          },
                          "frontendPort": {
                              "id": "[concat(resourceid('Microsoft.Network/applicationGateways', 'midtier-loadbalancer'), '/frontendPorts/port_7980')]"
                          },
                          "protocol": "Http",
                          "hostNames": [
                          ],
                          "requireServerNameIndication": false
                      }
                  }
              ],
              "requestRoutingRules": [
                  {
                      "name": "http-rule-80",
                      "properties": {
                          "ruleType": "Basic",
                          "httpListener": {
                              "id": "[concat(resourceId('Microsoft.Network/applicationGateways', 'midtier-loadbalancer'), '/httpListeners/http-listener-80')]"
                          },
                          "backendAddressPool": {
                              "id": "[concat(resourceId('Microsoft.Network/applicationGateways', 'midtier-loadbalancer'), '/backendAddressPools/midtierAddressPool')]"
                          },
                          "backendHttpSettings": {
                              "id": "[concat(resourceId('Microsoft.Network/applicationGateways', 'midtier-loadbalancer'), '/backendHttpSettingsCollection/http-setting')]"
                          }
                      }
                  },
                  {
                      "name": "http-rule-7980",
                      "properties": {
                          "ruleType": "Basic",
                          "httpListener": {
                              "id": "[concat(resourceId('Microsoft.Network/applicationGateways', 'midtier-loadbalancer'), '/httpListeners/http-listener-7980')]"
                          },
                          "backendAddressPool": {
                              "id": "[concat(resourceId('Microsoft.Network/applicationGateways', 'midtier-loadbalancer'), '/backendAddressPools/midtierAddressPool')]"
                          },
                          "backendHttpSettings": {
                              "id": "[concat(resourceId('Microsoft.Network/applicationGateways', 'midtier-loadbalancer'), '/backendHttpSettingsCollection/http-setting')]"
                          }
                      }
                  }
              ],
              "enableHttp2": false,
              "autoscaleConfigurations": {
                  "minCapacity": 0,
                  "maxCapacity": 5
              }
          }
      },
      {
          "type": "Microsoft.Network/bastionHosts",
          "apiVersion": "2019-12-01",
          "name": "bastion",
          "condition": "[variables('hasBastion')]",
          "location": "[variables('location')]",
          "dependsOn": [
              "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
              "[resourceId('Microsoft.Compute/proximityPlacementGroups', variables('proximity'))]"
          ],
          "properties": {
              "ipConfigurations": [
                  {
                      "name": "IpConf",
                      "properties": {
                          "privateIPAllocationMethod": "Dynamic",
                          "publicIPAddress": {
                              "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('vnetName'),'-ip-bastion'))]"
                          },
                          "subnet": {
                              "id": "[resourceId(variables('vnetResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), 'AzureBastionSubnet')]"
                          }
                      }
                  }
              ]
          }
      },
      {
          "type": "Microsoft.Resources/deployments",
          "apiVersion": "2019-10-01",
          "name": "[concat('ParameterizedMetadataVM-', copyIndex())]",
          "dependsOn": [
              "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
              "[resourceId('Microsoft.Compute/proximityPlacementGroups', variables('proximity'))]"
          ],
          "properties": {
              "mode": "Incremental",
              "templateLink": {
                  "uri": "[concat(uri(variables('artifactsLocation'), 'subtemplates/paramvm.json'), variables('sasToken'))]"
              },
              "parameters": {
                  "location": {
                      "value": "[variables('location')]"
                  },
                  "vm_name": {
                      "value": "[concat('metadata-', copyIndex())]"
                  },
                  "vm_size": {
                      "value": "[variables('metadataSize')]"
                  },
                  "datadisk_size": {
                      "value": 128
                  },
                  "datadisk_count": {
                      "value": "[variables('storageProfile')[variables('metadataSize')]]"
                  },
                  "proximity_group_name": {
                      "value": "[variables('proximity')]"
                  },
                  "ssh_pub_key": {
                      "value": "[variables('sshKey')]"
                  },
                  "vnet_name": {
                      "value": "[variables('vnetName')]"
                  },
                  "vnet_resource_group": {
                      "value": "[variables('vnetResourceGroup')]"
                  },
                  "vnet_subnet_name": {
                      "value": "metadataSubnet"
                  },
                  "os_image": {
                      "value": "[variables('osProfile')[variables('ostag')]['image']]"
                  },
                  "post_install_actions": {
                      "value":  {
                          "commandToExecute": "[ concat('set -o pipefail; ./SetupNonJump.sh \"', variables('primaryUserName'), '\" \"', variables('storageGroup'), '\" \"', variables('azureFilesViyaShare'), '\" \"', listKeys(variables('storageGroup'),'2019-06-01').keys[0].value, '\"  2>&1 | tee /tmp/prerequisites.log')]",
                          "fileUris": [
                              "[concat(uri(variables('artifactsLocation'), 'scripts/SetupNonJump.sh'), variables('sasToken'))]"
                          ]
                      }
                  },
                  "enable_enhanced_networking": {
                      "value": true
                  },
                  "public_ip_or_empty": {
                      "value": ""
                  },
                  "loadbalancer_id_or_empty": {
                      "value": ""
                  }
              }
          },
          "copy": {
              "name": "ParameterizedMetadataVM-Copy",
              "count": "[variables('metadataCount')]"
          }
      },
      {
          "type": "Microsoft.Resources/deployments",
          "apiVersion": "2019-10-01",
          "name": "ParameterizedVaControllerVM",
          "dependsOn": [
              "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
              "[resourceId('Microsoft.Compute/proximityPlacementGroups', variables('proximity'))]",
              "[resourceId('Microsoft.Storage/storageAccounts', variables('storageGroup'))]"
          ],
          "properties": {
              "mode": "Incremental",
              "templateLink": {
                  "uri": "[concat(uri(variables('artifactsLocation'), 'subtemplates/paramvm.json'), variables('sasToken'))]"
              },
              "parameters": {
                  "location": {
                      "value": "[variables('location')]"
                  },
                  "vm_name": {
                      "value": "visual-analytics-controller"
                  },
                  "vm_size": {
                      "value": "[variables('vaControllerSize')]"
                  },
                  "datadisk_size": {
                      "value": 128
                  },
                  "datadisk_count": {
                      "value": "[variables('storageProfile')[variables('vaControllerSize')]]"
                  },
                  "proximity_group_name": {
                      "value": "[variables('proximity')]"
                  },
                  "ssh_pub_key": {
                      "value": "[variables('sshKey')]"
                  },
                  "vnet_name": {
                      "value": "[variables('vnetName')]"
                  },
                  "vnet_resource_group": {
                      "value": "[variables('vnetResourceGroup')]"
                  },
                  "vnet_subnet_name": {
                      "value": "vaSubnet"
                  },
                  "os_image": {
                      "value": "[variables('osProfile')[variables('ostag')]['image']]"
                  },
                  "post_install_actions": {
                      "value":  {
                          "commandToExecute": "[ concat('set -o pipefail; ./SetupNonJump.sh \"', variables('primaryUserName'), '\" \"', variables('storageGroup'), '\" \"', variables('azureFilesViyaShare'), '\" \"', listKeys(variables('storageGroup'),'2019-06-01').keys[0].value, '\"  2>&1 | tee /tmp/prerequisites.log')]",
                          "fileUris": [
                              "[concat(uri(variables('artifactsLocation'), 'scripts/SetupNonJump.sh'), variables('sasToken'))]"
                          ]
                      }
                  },
                  "enable_enhanced_networking": {
                      "value": true
                  },
                  "public_ip_or_empty": {
                      "value": ""
                  },
                  "loadbalancer_id_or_empty": {
                      "value": ""
                  }
              }
          }
      },
      {
          "type": "Microsoft.Resources/deployments",
          "apiVersion": "2019-10-01",
          "name": "[concat('ParameterizedVaWorkerVM-', copyIndex())]",
          "dependsOn": [
              "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
              "[resourceId('Microsoft.Compute/proximityPlacementGroups', variables('proximity'))]",
              "[resourceId('Microsoft.Storage/storageAccounts', variables('storageGroup'))]"
          ],
          "properties": {
              "mode": "Incremental",
              "templateLink": {
                  "uri": "[concat(uri(variables('artifactsLocation'), 'subtemplates/paramvm.json'), variables('sasToken'))]"
              },
              "parameters": {
                  "location": {
                      "value": "[variables('location')]"
                  },
                  "vm_name": {
                      "value": "[concat('visual-analytics-worker-', copyIndex())]"
                  },
                  "vm_size": {
                      "value": "[variables('vaWorkerSize')]"
                  },
                  "datadisk_size": {
                      "value": 128
                  },
                  "datadisk_count": {
                      "value": "[variables('storageProfile')[variables('vaWorkerSize')]]"
                  },
                  "proximity_group_name": {
                      "value": "[variables('proximity')]"
                  },
                  "ssh_pub_key": {
                      "value": "[variables('sshKey')]"
                  },
                  "vnet_name": {
                      "value": "[variables('vnetName')]"
                  },
                  "vnet_resource_group": {
                      "value": "[variables('vnetResourceGroup')]"
                  },
                  "vnet_subnet_name": {
                      "value": "vaSubnet"
                  },
                  "os_image": {
                      "value": "[variables('osProfile')[variables('ostag')]['image']]"
                  },
                  "post_install_actions": {
                      "value":  {
                          "commandToExecute": "[ concat('set -o pipefail; ./SetupNonJump.sh \"', variables('primaryUserName'), '\" \"', variables('storageGroup'), '\" \"', variables('azureFilesViyaShare'), '\" \"', listKeys(variables('storageGroup'),'2019-06-01').keys[0].value, '\"  2>&1 | tee /tmp/prerequisites.log')]",
                          "fileUris": [
                              "[concat(uri(variables('artifactsLocation'), 'scripts/SetupNonJump.sh'), variables('sasToken'))]"
                          ]
                      }
                  },
                  "enable_enhanced_networking": {
                      "value": true
                  },
                  "public_ip_or_empty": {
                      "value": ""
                  },
                  "loadbalancer_id_or_empty": {
                      "value": ""
                  }
              }
          },
          "copy": {
              "name": "ParameterizedVAWorkerVM-Copy",
              "count": "[variables('vaWorkerCount')]"
          }
      },
      {
          "type": "Microsoft.Resources/deployments",
          "apiVersion": "2019-10-01",
          "name": "[concat('ParameterizedMidtierVM-', copyIndex())]",
          "dependsOn": [
              "[resourceId('Microsoft/applicationGateways'), 'midtier-loadbalancer']",
              "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
              "[resourceId('Microsoft.Compute/proximityPlacementGroups', variables('proximity'))]",
              "[resourceId('Microsoft.Storage/storageAccounts', variables('storageGroup'))]"
          ],
          "properties": {
              "mode": "Incremental",
              "templateLink": {
                  "uri": "[concat(uri(variables('artifactsLocation'), 'subtemplates/paramvm.json'), variables('sasToken'))]"
              },
              "parameters": {
                  "location": {
                      "value": "[variables('location')]"
                  },
                  "vm_name": {
                      "value": "[concat('midtier-', copyIndex())]"
                  },
                  "vm_size": {
                      "value": "[variables('midtierSize')]"
                  },
                  "datadisk_size": {
                      "value": 128
                  },
                  "datadisk_count": {
                      "value": "[variables('storageProfile')[variables('midtierSize')]]"
                  },
                  "proximity_group_name": {
                      "value": "[variables('proximity')]"
                  },
                  "ssh_pub_key": {
                      "value": "[variables('sshKey')]"
                  },
                  "vnet_name": {
                      "value": "[variables('vnetName')]"
                  },
                  "vnet_resource_group": {
                      "value": "[variables('vnetResourceGroup')]"
                  },
                  "vnet_subnet_name": {
                      "value": "midtierSubnet"
                  },
                  "os_image": {
                      "value": "[variables('osProfile')[variables('ostag')]['image']]"
                  },
                  "post_install_actions": {
                      "value":  {
                          "commandToExecute": "[ concat('set -o pipefail; ./SetupNonJump.sh \"', variables('primaryUserName'), '\" \"', variables('storageGroup'), '\" \"', variables('azureFilesViyaShare'), '\" \"', listKeys(variables('storageGroup'),'2019-06-01').keys[0].value, '\"  2>&1 | tee /tmp/prerequisites.log')]",
                          "fileUris": [
                              "[concat(uri(variables('artifactsLocation'), 'scripts/SetupNonJump.sh'), variables('sasToken'))]"
                          ]
                      }
                  },
                  "enable_enhanced_networking": {
                      "value": true
                  },
                  "public_ip_or_empty": {
                      "value": ""
                  },
                  "loadbalancer_id_or_empty": {
                      "value": "[concat(resourceId('Microsoft.Network/applicationGateways', 'midtier-loadbalancer', '/backendAddressPools/midtierAddressPool')]"
                  }
              }
          },
          "copy": {
              "name": "ParameterizedMidtierVM-Copy",
              "count": "[variables('midtierCount')]"
          }
      },
      {
          "type": "Microsoft.Resources/deployments",
          "apiVersion": "2019-10-01",
          "name": "ParameterizedJumpVM",
          "dependsOn": [
              "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
              "[resourceId('Microsoft.Compute/proximityPlacementGroups', variables('proximity'))]",
              "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('vnetName'),'-ip-jump'))]",
              "[resourceId('Microsoft.Storage/storageAccounts', variables('storageGroup'))]"
          ],
          "properties": {
              "mode": "Incremental",
              "templateLink": {
                  "uri": "[concat(uri(variables('artifactsLocation'), 'subtemplates/paramvm.json'), variables('sasToken'))]"
              },
              "parameters": {
                  "location": {
                      "value": "[variables('location')]"
                  },
                  "vm_name": {
                      "value": "jumpvm"
                  },
                  "vm_size": {
                      "value": "Standard_B2ms"
                  },
                  "datadisk_size": {
                      "value": 128
                  },
                  "datadisk_count": {
                      "value": 1
                  },
                  "proximity_group_name": {
                      "value": "[variables('proximity')]"
                  },
                  "ssh_pub_key": {
                      "value": "[variables('sshKey')]"
                  },
                  "vnet_name": {
                      "value": "[variables('vnetName')]"
                  },
                  "vnet_resource_group": {
                      "value": "[variables('vnetResourceGroup')]"
                  },
                  "vnet_subnet_name": {
                      "value": "jumpSubnet"
                  },
                  "os_image": {
                      "value": "[variables('osProfile')[variables('ostag')]['image']]"
                  },
                  "post_install_actions": {
                      "value":  {
                          "commandToExecute": "[ concat('set -o pipefail; ./SetupJump.sh \"', variables('primaryUserName'), '\" \"', variables('storageGroup'), '\" \"', variables('azureFilesViyaShare'), '\" \"', listKeys(variables('storageGroup'),'2019-06-01').keys[0].value, '\" \"', variables('artifactsLocation'), '\" \"', variables('sasToken'), '\" \"', variables('sasDepot'), '\" \"', variables('midtierCount'), '\" \"', variables('metadataCount'), '\" \"', variables('vaWorkerCount'), '\" \"', variables('sasPassword'), '\" \"', variables('azurePassword'), '\"  2>&1 | tee /tmp/prerequisites.log')]",
                          "fileUris": [
                              "[concat(uri(variables('artifactsLocation'), 'scripts/SetupJump.sh'), variables('sasToken'))]"
                          ]
                      }
                  },
                  "enable_enhanced_networking": {
                      "value": false
                  },
                  "public_ip_or_empty": {
                      "value": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('vnetName'),'-ip-jump'))]"
                  },
                  "loadbalancer_id_or_empty": {
                      "value": ""
                  }
              }
          }
      },
      {
          "type": "Microsoft.Resources/deployments",
          "apiVersion": "2019-10-01",
          "name": "SASInstallPhase01of04",
          "dependsOn": [
              "[resourceId('Microsoft.Resources/deployments', 'ParameterizedJumpVM')]"
          ],
          "properties": {
              "mode": "Incremental",
              "templateLink": {
                  "uri": "[concat(uri(variables('artifactsLocation'), 'subtemplates/installextension.json'), variables('sasToken'))]"
              },
              "parameters": {
                  "location": {
                      "value": "[variables('location')]"
                  },
                  "vm_name": {
                      "value": "jumpvm"
                  },
                  "commandToExecute": {
                      "value": "[ concat('set -o pipefail; /sas/install/scripts/SetupJumpInstallSAS.sh  2>&1 | tee /tmp/SASInstallPhase01of04.log')]"
                  }
              }
          }
      },
      {
          "type": "Microsoft.Resources/deployments",
          "apiVersion": "2019-10-01",
          "name": "SASInstallPhase02of04",
          "dependsOn": [
              "[resourceId('Microsoft.Resources/deployments', 'SASInstallPhase01of04')]"
          ],
          "properties": {
              "mode": "Incremental",
              "templateLink": {
                  "uri": "[concat(uri(variables('artifactsLocation'), 'subtemplates/installextension.json'), variables('sasToken'))]"
              },
              "parameters": {
                  "location": {
                      "value": "[variables('location')]"
                  },
                  "vm_name": {
                      "value": "jumpvm"
                  },
                  "commandToExecute": {
                      "value": "[ concat('set -o pipefail; /sas/install/scripts/SetupJumpInstallSAS.sh  2>&1 | tee /tmp/SASInstallPhase02of04.log')]"
                  }
              }
          }
      },
      {
          "type": "Microsoft.Resources/deployments",
          "apiVersion": "2019-10-01",
          "name": "SASInstallPhase03of04",
          "dependsOn": [
              "[resourceId('Microsoft.Resources/deployments', 'SASInstallPhase02of04')]"
          ],
          "properties": {
              "mode": "Incremental",
              "templateLink": {
                  "uri": "[concat(uri(variables('artifactsLocation'), 'subtemplates/installextension.json'), variables('sasToken'))]"
              },
              "parameters": {
                  "location": {
                      "value": "[variables('location')]"
                  },
                  "vm_name": {
                      "value": "jumpvm"
                  },
                  "commandToExecute": {
                      "value": "[ concat('set -o pipefail; /sas/install/scripts/SetupJumpInstallSAS.sh  2>&1 | tee /tmp/SASInstallPhase03of04.log')]"
                  }
              }
          }
      },
      {
          "type": "Microsoft.Resources/deployments",
          "apiVersion": "2019-10-01",
          "name": "SASInstallPhase04of04",
          "dependsOn": [
              "[resourceId('Microsoft.Resources/deployments', 'SASInstallPhase03of04')]"
          ],
          "properties": {
              "mode": "Incremental",
              "templateLink": {
                  "uri": "[concat(uri(variables('artifactsLocation'), 'subtemplates/installextension.json'), variables('sasToken'))]"
              },
              "parameters": {
                  "location": {
                      "value": "[variables('location')]"
                  },
                  "vm_name": {
                      "value": "jumpvm"
                  },
                  "commandToExecute": {
                      "value": "[ concat('set -o pipefail; /sas/install/scripts/SetupJumpInstallSAS.sh  2>&1 | tee /tmp/SASInstallPhase04of04.log')]"
                  }
              }
          }
      },
      {
          "apiVersion": "2019-10-01",
          "name": "pid-a04b9960-695b-556c-9e3d-2c5752ffbdd7",
          "type": "Microsoft.Resources/deployments",
          "properties": {
              "mode": "Incremental",
              "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
              }
          }
      }
  ]
}
