{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "region1-Location-Name": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Azure Region valid name"
      }
    },
    "region2-Location-Name": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Azure Region valid name"
      }
    },
    "trafficManagerProfile_name": {
      "defaultValue": "gentm",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Traffice Manager profile name"
      }
    },
    "adminuser": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Admin username"
      }
    },
    "adminuserPassword": {
      "type": "securestring",
      "minLength": 1,
      "metadata": {
        "description": "Admin Password"
      }
    },
    "app-prefix": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Application prefix name, should be <= 10 characters"
      }
    },
    "imageSKU": {
      "type": "string",
      "defaultValue": "2019-Datacenter",
      "allowedValues": [
        "2019-Datacenter",
        "2016-Datacenter",
        "2008-R2-SP1",
        "2012-Datacenter",
        "2012-R2-Datacenter"
      ],
      "metadata": {
        "description": "The Windows version for the VM"
      }
    },
    "vmSize": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "Standard_D2s_v3",
      "metadata": {
        "description": "Size of the virtual machine, must be available in the virtual machine's location"
      }
    },
    "numberOfVMInstances": {
      "type": "int",
      "minValue": 1,
      "maxValue": 10,
      "defaultValue": 2,
      "metadata": {
        "description": "Number of VM instances to be created behind internal load balancer control"
      }
    },
    "loadbalancer-dns-prefix": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Loadbalancer dns name should be lowercase letters"
      }
    },
    "appGW-skuName": {
      "type": "string",
      "allowedValues": [
        "Standard_Small",
        "Standard_Medium",
        "Standard_Large"
      ],
      "defaultValue": "Standard_Medium",
      "metadata": {
        "description": "Choose Application gateway SKU!"
      }
    },
    "appGW-capacity": {
      "type": "int",
      "minValue": 1,
      "maxValue": 10,
      "defaultValue": 4,
      "metadata": {
        "description": "Number of Application Gateway instances"
      }
    },
    "appGW-pathMatch1": {
      "type": "string",
      "metadata": {
        "description": "Path match string for Path Rule 1"
      }
    },
    "appGW-pathMatch2": {
      "type": "string",
      "metadata": {
        "description": "Path match string for Path Rule 2"
      }
    }
  },
  "variables": {
    "app-prefix": "[toLower(replace(replace(substring(parameters('app-prefix'),0,4),' ',''),'-',''))]",
    "imageOffer": "WindowsServer",
    "imagePublisher": "MicrosoftWindowsServer",
    "region": [
      "[parameters('region1-Location-Name')]",
      "[parameters('region2-Location-Name')]"
    ],
    "region1-web-vm-nic": "[concat(variables('app-prefix'), '-web-vm-nic-rg1-')]",
    "region1-web-vm-pip": "[concat(variables('app-prefix'), '-web-vm-pip-rg1-')]",
    "region1-web-vmsprefix": "[concat(variables('app-prefix'),'webvmrg1')]",
    "region2-web-vm-nic": "[concat(variables('app-prefix'), '-web-vm-nic-rg2-')]",
    "region2-web-vm-pip": "[concat(variables('app-prefix'), '-web-vm-pip-rg2-')]",
    "region2-web-vmsprefix": "[concat(variables('app-prefix'),'webvmrg2')]",
    "region-appgw-name": "region-appgw-",
    "region-appgw-pip": "region-appgw-pip-",
    "region-availabilitySet": "region_AvSet",
    "region-storage-account": "[concat('rg', uniqueString(resourceGroup().id))]",
    "region-tm-test-vm": "[concat(variables('app-prefix'),'-tm-vm-rg')]",
    "region-tm-vm-nic": "[concat(variables('region-tm-test-vm'),'-nic')]",
    "region-tm-vm-pip": "[concat(variables('region-tm-test-vm'),'-pip')]",
    "region-vnet-name": "region-multitierlb-vnet",
    "region-web-ilb-pip": "[concat(parameters('loadbalancer-dns-prefix'),'rg')]",
    "region-web-lb": "[concat(parameters('loadbalancer-dns-prefix'),'rg')]",
    "vnet-appGW-subnet": "appGatewaySubnet",
    "vnet-front-end-subnet": "front-end-subnet",
    "vnet-lb-subnet": "lb-subnet",
    "networkSecurityGroupAllowRdpRule": [
      {
        "name": "Allow-RDP",
        "properties": {
          "priority": 1000,
          "access": "Allow",
          "direction": "Inbound",
          "destinationPortRange": "3389",
          "protocol": "Tcp",
          "sourceAddressPrefix": "*",
          "sourcePortRange": "*",
          "destinationAddressPrefix": "*"
        }
      }
    ]
  },
  "resources": [
    {
      "apiVersion": "2021-04-01",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat(variables('region-storage-account'),copyIndex())]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "Storage",
      "location": "[variables('region')[copyIndex()]]",
      "tags": {
        "displayName": "storage-accounts"
      },
      "properties": {},
      "copy": {
        "name": "storage-accounts-loop",
        "count": 2
      }
    },
    {
      "comments": "Simple Network Security Group for default subnets",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-07-01",
      "name": "[concat(variables('region-vnet-name'), copyIndex(), '-default-nsg')]",
      "location": "[variables('region')[copyIndex()]]",
      "properties": {
        "securityRules": "[variables('networkSecurityGroupAllowRdpRule')]"
      },
      "copy": {
        "name": "default-nsg-loop",
        "count": 2
      }
    },
    {
      "comments": "Simple Network Security Group for front end subnets",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-07-01",
      "name": "[concat(variables('region-vnet-name'), copyIndex(), '-', variables('vnet-front-end-subnet'), '-nsg')]",
      "location": "[variables('region')[copyIndex()]]",
      "properties": {
        "securityRules": "[variables('networkSecurityGroupAllowRdpRule')]"
      },
      "copy": {
        "name": "front-end-nsg-loop",
        "count": 2
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[concat(variables('region-vnet-name'),copyIndex())]",
      "apiVersion": "2020-07-01",
      "location": "[variables('region')[copyIndex()]]",
      "tags": {
        "displayName": "vnetloop"
      },
      "dependsOn": [
        "default-nsg-loop",
        "front-end-nsg-loop"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "default",
            "properties": {
              "addressPrefix": "10.0.4.0/24",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('region-vnet-name'), copyIndex(), '-default-nsg'))]"
              }
            }
          },
          {
            "name": "[variables('vnet-front-end-subnet')]",
            "properties": {
              "addressPrefix": "10.0.2.0/24",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('region-vnet-name'), copyIndex(), '-', variables('vnet-front-end-subnet'), '-nsg'))]"
              }
            }
          },
          {
            "name": "[variables('vnet-lb-subnet')]",
            "properties": {
              "addressPrefix": "10.0.1.0/24"
            }
          },
          {
            "name": "[variables('vnet-appGW-subnet')]",
            "properties": {
              "addressPrefix": "10.0.3.0/28"
            }
          }
        ]
      },
      "copy": {
        "name": "vnetloop",
        "count": 2
      }
    },
    {
      "apiVersion": "2020-07-01",
      "name": "[concat(variables('region-web-ilb-pip'),copyIndex())]",
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[variables('region')[copyIndex()]]",
      "tags": {
        "displayName": "region-web-ilb-pips"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[toLower(concat(variables('region-web-lb'),copyIndex()))]"
        }
      },
      "copy": {
        "name": "region-web-ilb-pip-loop",
        "count": 2
      }
    },
    {
      "apiVersion": "2020-07-01",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[concat(variables('region-web-lb'),copyIndex())]",
      "location": "[variables('region')[copyIndex()]]",
      "tags": {
        "displayName": "region-web-lbs"
      },
      "dependsOn": [
        "region-web-ilb-pip-loop"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontend",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('region-web-ilb-pip'),copyIndex()))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "BackendPool1"
          }
        ],
        "probes": [
          {
            "name": "lbprobe",
            "properties": {
              "protocol": "Tcp",
              "port": 80,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "lbrule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', concat(variables('region-web-lb'),copyIndex()), 'LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', concat(variables('region-web-lb'),copyIndex()), 'BackendPool1')]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', concat(variables('region-web-lb'),copyIndex()), 'lbprobe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "idleTimeoutInMinutes": 15
            }
          }
        ]
      },
      "copy": {
        "name": "region-web-lb-loop",
        "count": 2
      }
    },
    {
      "apiVersion": "2020-07-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(variables('region-tm-vm-pip'),copyIndex())]",
      "location": "[variables('region')[copyIndex()]]",
      "tags": {
        "displayName": "region-tm-vm-pips"
      },
      "comments": "Test VMs to test traffic manager scenario from each region!",
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[toLower(concat(variables('region-tm-test-vm'),copyIndex()))]"
        },
        "idleTimeoutInMinutes": 4
      },
      "copy": {
        "name": "region-tm-vm-pips-loop",
        "count": 2
      }
    },
    {
      "apiVersion": "2020-07-01",
      "name": "[concat(variables('region-tm-vm-nic'),copyIndex())]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[variables('region')[copyIndex()]]",
      "tags": {
        "displayName": "region-tm-vm-nics"
      },
      "comments": "Test VMs to test traffic manager scenario from each region!",
      "dependsOn": [
        "vnetloop",
        "region-tm-vm-pips-loop"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "10.0.4.4",
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('region-tm-vm-pip'),copyIndex()))]"
              },
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', concat(variables('region-vnet-name'),copyIndex()), 'default')]"
              }
            }
          }
        ],
        "enableIPForwarding": false
      },
      "copy": {
        "name": "region-tm-vm-nics-loop",
        "count": 2
      }
    },
    {
      "apiVersion": "2020-12-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('region-tm-test-vm'),copyIndex())]",
      "location": "[variables('region')[copyIndex()]]",
      "tags": {
        "displayName": "regions-test-vms"
      },
      "comments": "Test VMs to test traffic manager scenario from each region!",
      "dependsOn": [
        "region-tm-vm-pips-loop",
        "region-tm-vm-nics-loop"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2012-R2-Datacenter",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage",
            "caching": "ReadWrite"
          }
        },
        "osProfile": {
          "computerName": "[replace(replace(concat(variables('region-tm-test-vm'),copyIndex()),'_',''),'-','')]",
          "adminUsername": "[parameters('adminuser')]",
          "windowsConfiguration": {
            "provisionVMAgent": true,
            "enableAutomaticUpdates": true
          },
          "adminPassword": "[parameters('adminuserPassword')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('region-tm-vm-nic'), copyindex()))]"
            }
          ]
        }
      },
      "copy": {
        "name": "test-vms-Loop",
        "count": 2
      }
    },
    {
      "apiVersion": "2020-12-01",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[concat(variables('region-availabilitySet'),copyIndex())]",
      "location": "[variables('region')[copyIndex()]]",
      "tags": {
        "displayName": "Region-availabilitySets"
      },
      "sku": {
        "name": "Aligned"
      },
      "properties": {
        "platformFaultDomainCount": 2,
        "platformUpdateDomainCount": 2
      },
      "copy": {
        "name": "web-vms-availabilitysets-Loop",
        "count": 2
      }
    },
    {
      "apiVersion": "2020-07-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('region1-web-vm-nic'), copyindex())]",
      "location": "[variables('region')[0]]",
      "tags": {
        "displayName": "region1-web-vm-nics"
      },
      "copy": {
        "name": "region1-vm-nic-loop",
        "count": "[parameters('numberOfVMInstances')]"
      },
      "dependsOn": [
        "vnetloop",
        "region-web-lb-loop",
        "region1-web-vm-pip-Loop"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', concat(variables('region-vnet-name'),'0'), variables('vnet-front-end-subnet'))]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', concat(variables('region-web-lb'),'0'),'BackendPool1')]"
                }
              ],
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('region1-web-vm-pip'), copyindex()))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2020-12-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('region1-web-vmsprefix'), copyindex())]",
      "location": "[variables('region')[0]]",
      "tags": {
        "displayName": "Region1-web-vms"
      },
      "dependsOn": [
        "storage-accounts-loop",
        "region1-vm-nic-loop",
        "region1-web-vm-pip-Loop",
        "web-vms-availabilitysets-Loop"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',concat(variables('region-availabilitySet'),'0'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[replace(concat(variables('region1-web-vmsprefix'), copyIndex()),'-','')]",
          "adminUsername": "[parameters('adminuser')]",
          "adminPassword": "[parameters('adminuserPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('imageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('region1-web-vm-nic'), copyindex()))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('region-storage-account'),'0')), '2021-02-01').primaryEndpoints.blob)]"
          }
        }
      },
      "copy": {
        "name": "virtualMachineLoop1",
        "count": "[parameters('numberOfVMInstances')]"
      }
    },
    {
      "apiVersion": "2020-07-01",
      "name": "[concat(variables('region1-web-vm-pip'), copyindex())]",
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[variables('region')[0]]",
      "tags": {
        "displayName": "region1-web-vm-pip"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(variables('region1-web-vmsprefix'), copyindex())]"
        }
      },
      "copy": {
        "name": "region1-web-vm-pip-Loop",
        "count": "[parameters('numberOfVMInstances')]"
      }
    },
    {
      "apiVersion": "2020-07-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('region2-web-vm-nic'), copyindex())]",
      "location": "[variables('region')[1]]",
      "tags": {
        "displayName": "region2-web-vm-nics"
      },
      "copy": {
        "name": "region2-vm-nic-loop",
        "count": "[parameters('numberOfVMInstances')]"
      },
      "dependsOn": [
        "vnetloop",
        "region-web-lb-loop",
        "region2-web-vm-pip-loop"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', concat(variables('region-vnet-name'),'1'), 'front-end-subnet')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', concat(variables('region-web-lb'),'1'),'BackendPool1')]"
                }
              ],
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('region2-web-vm-pip'), copyindex()))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2020-12-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('region2-web-vmsprefix'), copyindex())]",
      "location": "[variables('region')[1]]",
      "tags": {
        "displayName": "region2-web-vms"
      },
      "dependsOn": [
        "storage-accounts-loop",
        "region2-vm-nic-loop",
        "region2-web-vm-pip-Loop",
        "web-vms-availabilitysets-Loop"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',concat(variables('region-availabilitySet'),'1'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[replace(concat(variables('region2-web-vmsprefix'), copyIndex()),'-','')]",
          "adminUsername": "[parameters('adminuser')]",
          "adminPassword": "[parameters('adminuserPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('imageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('region2-web-vm-nic'), copyindex()))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts/', concat(variables('region-storage-account'),'1')), '2021-02-01').primaryEndpoints.blob)]"
          }
        }
      },
      "copy": {
        "name": "virtualMachineLoop2",
        "count": "[parameters('numberOfVMInstances')]"
      }
    },
    {
      "apiVersion": "2020-07-01",
      "name": "[concat(variables('region2-web-vm-pip'), copyindex())]",
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[variables('region')[1]]",
      "tags": {
        "displayName": "region2-web-vm-pip"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(variables('region2-web-vmsprefix'), copyindex())]"
        }
      },
      "copy": {
        "name": "region2-web-vm-pip-loop",
        "count": "[parameters('numberOfVMInstances')]"
      }
    },
    {
      "apiVersion": "2020-07-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(variables('region-appgw-pip'),copyIndex())]",
      "location": "[variables('region')[copyIndex()]]",
      "tags": {
        "displayName": "region-appgw-pips"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      },
      "copy": {
        "name": "region-appgw-pips-loop",
        "count": 2
      }
    },
    {
      "apiVersion": "2020-07-01",
      "type": "Microsoft.Network/applicationGateways",
      "name": "[concat(variables('region-appgw-name'),copyIndex())]",
      "location": "[variables('region')[copyIndex()]]",
      "tags": {
        "displayName": "region-appgws"
      },
      "dependsOn": [
        "vnetloop",
        "region-appgw-pips-loop",
        "region-web-lb-loop"
      ],
      "properties": {
        "sku": {
          "name": "[parameters('appGW-skuName')]",
          "tier": "Standard",
          "capacity": "[parameters('appGW-capacity')]"
        },
        "gatewayIPConfigurations": [
          {
            "name": "appGatewayIpConfig",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', Concat(variables('region-vnet-name'),copyIndex()), variables('vnet-appGW-subnet'))]"
              }
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "appGateway-Frontend-PIP",
            "properties": {
              "PublicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('region-appgw-pip'),copyIndex()))]"
              }
            }
          }
        ],
        "frontendPorts": [
          {
            "name": "appGatewayFrontendPort80",
            "properties": {
              "Port": 80
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "appGatewayBackendPoolDefault",
            "properties": {
              "backendAddresses": [
                {
                  "fqdn": "[reference(resourceId('Microsoft.Network/publicIPAddresses/',concat(variables('region-web-ilb-pip'),copyIndex()))).dnsSettings.fqdn]"
                }
              ],
              "requestRoutingRules": [
                {
                  "Id": "[resourceId('Microsoft.Network/applicationGateways/requestRoutingRules',concat(variables('region-appgw-name'),copyIndex()), 'rule1')]"
                }
              ]
            }
          },
          {
            "name": "appGatewayBackendPool1",
            "properties": {
              "backendAddresses": [
                {
                  "fqdn": "[reference(resourceId('Microsoft.Network/publicIPAddresses/',concat(variables('region1-web-vm-pip'), '0'))).dnsSettings.fqdn]"
                }
              ],
              "requestRoutingRules": [
                {
                  "Id": "[resourceId('Microsoft.Network/applicationGateways/requestRoutingRules',concat(variables('region-appgw-name'),copyIndex()), 'rule1')]"
                }
              ]
            }
          },
          {
            "name": "appGatewayBackendPool2",
            "properties": {
              "requestRoutingRules": [
                {
                  "Id": "[resourceId('Microsoft.Network/applicationGateways/requestRoutingRules',concat(variables('region-appgw-name'),copyIndex()), 'rule1')]"
                }
              ]
            }
          }
        ],
        "backendHttpSettingsCollection": [
          {
            "name": "appGatewayBackendHttpSettings",
            "properties": {
              "Port": 80,
              "Protocol": "Http",
              "CookieBasedAffinity": "Disabled"
            }
          }
        ],
        "httpListeners": [
          {
            "name": "appGatewayHttpListener",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations',concat(variables('region-appgw-name'),copyIndex()), 'appGateway-Frontend-PIP')]"
              },
              "FrontendPort": {
                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts',concat(variables('region-appgw-name'),copyIndex()), 'appGatewayFrontendPort80')]"
              },
              "Protocol": "Http",
              "requireServerNameIndication": false
            }
          }
        ],
        "urlPathMaps": [
          {
            "name": "urlPathMap1",
            "properties": {
              "defaultBackendAddressPool": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools',concat(variables('region-appgw-name'),copyIndex()),'appGatewayBackendPoolDefault')]"
              },
              "defaultBackendHttpSettings": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection',concat(variables('region-appgw-name'),copyIndex()),'appGatewayBackendHttpSettings')]"
              },
              "pathRules": [
                {
                  "name": "pathRule1",
                  "properties": {
                    "paths": [
                      "[parameters('appGW-pathMatch1')]"
                    ],
                    "backendAddressPool": {
                      "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools',concat(variables('region-appgw-name'),copyIndex()),'appGatewayBackendPool1')]"
                    },
                    "backendHttpSettings": {
                      "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection',concat(variables('region-appgw-name'),copyIndex()),'appGatewayBackendHttpSettings')]"
                    }
                  }
                },
                {
                  "name": "pathRule2",
                  "properties": {
                    "paths": [
                      "[parameters('appGW-pathMatch2')]"
                    ],
                    "backendAddressPool": {
                      "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools',concat(variables('region-appgw-name'),copyIndex()),'appGatewayBackendPool2')]"
                    },
                    "backendHttpSettings": {
                      "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection',concat(variables('region-appgw-name'),copyIndex()),'appGatewayBackendHttpSettings')]"
                    }
                  }
                }
              ]
            }
          }
        ],
        "requestRoutingRules": [
          {
            "Name": "rule1",
            "properties": {
              "RuleType": "PathBasedRouting",
              "httpListener": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners',concat(variables('region-appgw-name'),copyIndex()), 'appGatewayHttpListener')]"
              },
              "urlPathMap": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/urlPathMaps',concat(variables('region-appgw-name'),copyIndex()), 'urlPathMap1')]"
              }
            }
          }
        ]
      },
      "copy": {
        "name": "region-appgw-loop",
        "count": 2
      }
    },
    {
      "apiVersion": "2018-08-01",
      "type": "Microsoft.Network/trafficManagerProfiles",
      "name": "[parameters('trafficManagerProfile_name')]",
      "location": "global",
      "tags": {
        "displayName": "Global-TrafficProfile"
      },
      "comments": "Traffic Manager Profiles tmdemo'.",
      "dependsOn": [
        "region-appgw-loop"
      ],
      "properties": {
        "profileStatus": "Enabled",
        "trafficRoutingMethod": "Performance",
        "dnsConfig": {
          "relativeName": "[parameters('trafficManagerProfile_name')]",
          "ttl": 300
        },
        "monitorConfig": {
          "protocol": "HTTP",
          "port": 80,
          "path": "/"
        },
        "endpoints": [
          {
            "name": "region1-endpoint",
            "type": "Microsoft.Network/trafficManagerProfiles/azureEndpoints",
            "properties": {
              "endpointStatus": "Enabled",
              "targetResourceId": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('region-appgw-pip'),'0'))]",
              "target": "[concat(variables('region-appgw-pip'),'0')]",
              "weight": 1,
              "priority": 1,
              "endpointLocation": "[variables('region')[0]]"
            }
          },
          {
            "name": "region2-endpoint",
            "type": "Microsoft.Network/trafficManagerProfiles/azureEndpoints",
            "properties": {
              "endpointStatus": "Enabled",
              "targetResourceId": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('region-appgw-pip'),'1'))]",
              "target": "[concat(variables('region-appgw-pip'),'1')]",
              "weight": 1,
              "priority": 2,
              "endpointLocation": "[variables('region')[1]]"
            }
          }
        ]
      }
    }
  ]
}
