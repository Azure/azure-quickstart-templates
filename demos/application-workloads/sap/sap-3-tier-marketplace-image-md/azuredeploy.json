{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "sapSystemId": {
      "type": "string",
      "maxLength": 3,
      "minLength": 3,
      "defaultValue": "DEQ",
      "metadata": {
        "description": "SAP System ID."
      }
    },
    "stackType": {
      "type": "string",
      "allowedValues": [
        "ABAP",
        "JAVA",
        "ABAP+JAVA"
      ],
      "defaultValue": "ABAP",
      "metadata": {
        "description": "The stack type of the SAP system."
      }
    },
    "osType": {
      "type": "string",
      "allowedValues": [
        "Windows Server 2012 Datacenter",
        "Windows Server 2012 R2 Datacenter",
        "Windows Server 2016 Datacenter",
        "SLES 12",
        "RHEL 7",
        "Oracle Linux 7"
      ],
      "defaultValue": "Windows Server 2016 Datacenter",
      "metadata": {
        "description": "The type of the operating system you want to deploy."
      }
    },
    "dbtype": {
      "type": "string",
      "allowedValues": [
        "SQL",
        "HANA"
      ],
      "defaultValue": "SQL",
      "metadata": {
        "description": "The type of the database"
      }
    },
    "sapSystemSize": {
      "type": "string",
      "allowedValues": [
        "Demo",
        "Small < 30.000 SAPS",
        "Medium < 70.000 SAPS",
        "Large < 180.000 SAPS",
        "X-Large < 250.000 SAPS"
      ],
      "defaultValue": "Small < 30.000 SAPS",
      "metadata": {
        "description": "The size of the SAP System you want to deploy."
      }
    },
    "systemAvailability": {
      "type": "string",
      "allowedValues": [
        "HA",
        "Not HA"
      ],
      "defaultValue": "Not HA",
      "metadata": {
        "description": "Determines whether this is a high available deployment or not. A HA deployment contains multiple instances of single point of failures."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "password",
        "sshPublicKey"
      ],
      "metadata": {
        "description": "Type of authentication to use on the Virtual Machine."
      }
    },
    "adminPasswordOrKey": {
      "type": "securestring",
      "metadata": {
        "description": "Password or ssh key for the Virtual Machine."
      }
    },
    "subnetId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The id of the subnet you want to use."
      }
    },
    "availabilityZones": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Zone numbers. Enter the comma seperated zones you want use e.g. 1,3. In an HA case, the first two will be used for the cluster VMs."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
      },
      "defaultValue": "[deployment().properties.templateLink.uri]"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
      },
      "defaultValue": ""
    }
  },
  "variables": {
    "azArray": "[split(parameters('availabilityZones'), ',')]",
    "azArrayLength": "[length(variables('azArray'))]",
    "images": {
      "Windows Server 2012 Datacenter": {
        "sku": "2012-Datacenter",
        "offer": "WindowsServer",
        "publisher": "MicrosoftWindowsServer",
        "OSType": "Windows"
      },
      "Windows Server 2012 R2 Datacenter": {
        "sku": "2012-R2-Datacenter",
        "offer": "WindowsServer",
        "publisher": "MicrosoftWindowsServer",
        "OSType": "Windows"
      },
      "Windows Server 2016 Datacenter": {
        "sku": "2016-Datacenter",
        "offer": "WindowsServer",
        "publisher": "MicrosoftWindowsServer",
        "OSType": "Windows"
      },
      "SLES 12": {
        "sku": "12-SP4",
        "offer": "SLES-SAP",
        "publisher": "SUSE",
        "OSType": "Linux"
      },
      "RHEL 7": {
        "sku": "7.5",
        "offer": "RHEL-SAP",
        "publisher": "RedHat",
        "OSType": "Linux"
      },
      "Oracle Linux 7": {
        "sku": "7.5",
        "offer": "Oracle-Linux",
        "publisher": "Oracle",
        "OSType": "Linux"
      }
    },
    "internalOSType": "[variables('images')[parameters('osType')].OSType]",
    "csExtension": {
      "Windows": {
        "Publisher": "Microsoft.Compute",
        "Name": "CustomScriptExtension",
        "Version": "1.7",
        "script": "[uri(parameters('_artifactsLocation'), concat('diskConfig.ps1', parameters('_artifactsLocationSasToken')))]",
        "scriptCall": "powershell.exe -ExecutionPolicy bypass -File diskConfig.ps1"
      },
      "Linux": {
        "Publisher": "Microsoft.Azure.Extensions",
        "Name": "CustomScript",
        "Version": "2.0",
        "script": "[uri(parameters('_artifactsLocation'), concat('diskConfig.sh', parameters('_artifactsLocationSasToken')))]",
        "scriptCall": "sh diskConfig.sh"
      }
    },
    "sizes": {
      "Demo": {
        "HANA": {
          "dbvmSize": "Standard_E8s_v3",
          "ascsVMSize": "Standard_D2s_v3",
          "diVMSize": "Standard_D2s_v3",
          "diVMCount": 1,
          "dbdisks": [
            {
              "lun": 0,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 128
            },
            {
              "lun": 1,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 128
            },
            {
              "lun": 2,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 128
            },
            {
              "lun": 3,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 128
            },
            {
              "lun": 4,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 128
            },
            {
              "lun": 5,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 128
            },
            {
              "lun": 6,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 128
            },
            {
              "lun": 7,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 128
            }
          ],
          "scriptArguments": {
            "Linux": "-luns '0,1#2,3#4#5#6,7' -names 'data#log#shared#usrsap#backup' -paths '/hana/data#/hana/log#/hana/shared#/usr/sap#/hana/backup'  -sizes '100#100#100#100#100'"
          },
          "useFastNetwork": false
        },
        "SQL": {
          "dbvmSize": "Standard_E4s_v3",
          "ascsVMSize": "Standard_D2s_v3",
          "diVMSize": "Standard_D2s_v3",
          "diVMCount": 1,
          "dbdisks": [
            {
              "lun": 0,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 128
            }
          ],
          "scriptArguments": {
            "Windows": "-luns \"0\" -names \"data\" -paths \"C:\\sql\\data,C:\\sql\\log\"  -sizes \"70,100\""
          },
          "useFastNetwork": false
        },
        "other": {
          "dbvmSize": "Standard_E4s_v3",
          "ascsVMSize": "Standard_D2s_v3",
          "diVMSize": "Standard_D2s_v3",
          "diVMCount": 1,
          "dbdisks": [
            {
              "lun": 0,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 128
            }
          ],
          "scriptArguments": {
            "Linux": "-luns '0' -names 'datalog' -paths '/db/data,/db/log'  -sizes '70,100'",
            "Windows": "-luns \"0\" -names \"data\" -paths \"C:\\db\\data,C:\\db\\log\"  -sizes \"70,100\""
          },
          "useFastNetwork": false
        }
      },
      "Small < 30.000 SAPS": {
        "HANA": {
          "dbvmSize": "Standard_E32s_v3",
          "ascsVMSize": "Standard_E2s_v3",
          "diVMSize": "Standard_E8s_v3",
          "diVMCount": 1,
          "dbdisks": [
            {
              "lun": 0,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 1,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 2,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 3,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 4,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 64
            },
            {
              "lun": 5,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            }
          ],
          "scriptArguments": {
            "Linux": "-luns '0,1,2#3#4#5' -names 'datalog#shared#usrsap#backup' -paths '/hana/data,/hana/log#/hana/shared#/usr/sap#/hana/backup' -sizes '70,100#100#100#100'"
          },
          "useFastNetwork": true
        },
        "SQL": {
          "dbvmSize": "Standard_E8s_v3",
          "ascsVMSize": "Standard_E2s_v3",
          "diVMSize": "Standard_E8s_v3",
          "diVMCount": 1,
          "dbdisks": [
            {
              "lun": 0,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 1,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 2,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 3,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 4,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            }
          ],
          "scriptArguments": {
            "Windows": "-luns \"0,1,2,3#4\" -names \"data#log\" -paths \"C:\\sql\\data#C:\\sql\\log\"  -sizes \"100#100\""
          },
          "useFastNetwork": true
        },
        "other": {
          "dbvmSize": "Standard_E8s_v3",
          "ascsVMSize": "Standard_E2s_v3",
          "diVMSize": "Standard_E8s_v3",
          "diVMCount": 1,
          "dbdisks": [
            {
              "lun": 0,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 1,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 2,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 3,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 4,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            }
          ],
          "scriptArguments": {
            "Linux": "-luns '0,1,2,3,4' -names 'datalog' -paths '/db/data,/db/log' -sizes '70,100'",
            "Windows": "-luns \"0,1,2,3#4\" -names \"data#log\" -paths \"C:\\sql\\data#C:\\sql\\log\"  -sizes \"100#100\""
          },
          "useFastNetwork": true
        }
      },
      "Medium < 70.000 SAPS": {
        "HANA": {
          "dbvmSize": "Standard_E64s_v3",
          "ascsVMSize": "Standard_E2s_v3",
          "diVMSize": "Standard_E8s_v3",
          "diVMCount": 4,
          "dbdisks": [
            {
              "lun": 0,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 1,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 2,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 3,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 4,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 64
            },
            {
              "lun": 5,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            }
          ],
          "scriptArguments": {
            "Linux": "-luns '0,1,2#3#4#5' -names 'datalog#shared#usrsap#backup' -paths '/hana/data,/hana/log#/hana/shared#/usr/sap#/hana/backup' -sizes '70,100#100#100#100'"
          },
          "useFastNetwork": true
        },
        "SQL": {
          "dbvmSize": "Standard_E16s_v3",
          "ascsVMSize": "Standard_E2s_v3",
          "diVMSize": "Standard_E8s_v3",
          "diVMCount": 4,
          "dbdisks": [
            {
              "lun": 0,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 1,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 2,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 3,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 4,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 5,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 6,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 7,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            }
          ],
          "scriptArguments": {
            "Windows": "-luns \"0,1,2,3,4,5,6#7\" -names \"data#log\" -paths \"C:\\sql\\data#C:\\sql\\log\"  -sizes \"100#100\""
          },
          "useFastNetwork": true
        },
        "other": {
          "dbvmSize": "Standard_E16s_v3",
          "ascsVMSize": "Standard_E2s_v3",
          "diVMSize": "Standard_E8s_v3",
          "diVMCount": 4,
          "dbdisks": [
            {
              "lun": 0,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 1,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 2,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 3,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 4,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 5,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 6,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 7,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            }
          ],
          "scriptArguments": {
            "Linux": "-luns '0,1,2,3,4,5,6,7' -names 'datalog' -paths '/db/data,/db/log'  -sizes '70,100'",
            "Windows": "-luns \"0,1,2,3,4,5,6#7\" -names \"data#log\" -paths \"C:\\db\\data#C:\\db\\log\"  -sizes \"100#100\""
          },
          "useFastNetwork": true
        }
      },
      "Large < 180.000 SAPS": {
        "HANA": {
          "dbvmSize": "Standard_M64s",
          "ascsVMSize": "Standard_E2s_v3",
          "diVMSize": "Standard_E16s_v3",
          "diVMCount": 6,
          "dbdisks": [
            {
              "lun": 0,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 1,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 2,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 3,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 4,
              "caching": "None",
              "writeAcceleratorEnabled": "true",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 5,
              "caching": "None",
              "writeAcceleratorEnabled": "true",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 6,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 7,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 64
            },
            {
              "lun": 8,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 9,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 1024
            }
          ],
          "scriptArguments": {
            "Linux": "-luns '0,1,2,3#4,5#6#7#8,9' -names 'data#log#shared#usrsap#backup' -paths '/hana/data#/hana/log#/hana/shared#/usr/sap#/hana/backup' -sizes '100#100#100#100#100'"
          },
          "useFastNetwork": true
        },
        "SQL": {
          "dbvmSize": "Standard_E32s_v3",
          "ascsVMSize": "Standard_E2s_v3",
          "diVMSize": "Standard_E16s_v3",
          "diVMCount": 6,
          "dbdisks": [
            {
              "lun": 0,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 1,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 2,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 3,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 4,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 5,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            }
          ],
          "scriptArguments": {
            "Windows": "-luns \"0,1,2,3,4#5\" -names \"data#log\" -paths \"C:\\sql\\data#C:\\sql\\log\"  -sizes \"100#100\""
          },
          "useFastNetwork": true
        },
        "other": {
          "dbvmSize": "Standard_E32s_v3",
          "ascsVMSize": "Standard_E2s_v3",
          "diVMSize": "Standard_E16s_v3",
          "diVMCount": 6,
          "dbdisks": [
            {
              "lun": 0,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 1,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 2,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 3,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 4,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 5,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 512
            }
          ],
          "scriptArguments": {
            "Linux": "-luns '0,1,2,3,4,5' -names 'datalog' -paths '/db/data,/db/log'  -sizes '70,100'",
            "Windows": "-luns \"0,1,2,3,4#5\" -names \"data#log\" -paths \"C:\\db\\data#C:\\db\\log\"  -sizes \"100#100\""
          },
          "useFastNetwork": true
        }
      },
      "X-Large < 250.000 SAPS": {
        "HANA": {
          "dbvmSize": "Standard_M128s",
          "ascsVMSize": "Standard_E2s_v3",
          "diVMSize": "Standard_E16s_v3",
          "diVMCount": 10,
          "dbdisks": [
            {
              "lun": 0,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 1,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 2,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 3,
              "caching": "None",
              "writeAcceleratorEnabled": "true",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 4,
              "caching": "None",
              "writeAcceleratorEnabled": "true",
              "createOption": "Empty",
              "diskSizeGB": 512
            },
            {
              "lun": 5,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 6,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 64
            },
            {
              "lun": 7,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 2048
            },
            {
              "lun": 8,
              "caching": "ReadOnly",
              "createOption": "Empty",
              "diskSizeGB": 2048
            }
          ],
          "scriptArguments": {
            "Linux": "-luns '0,1,2#3,4#5#6#7,8' -names 'data#log#shared#usrsap#backup' -paths '/hana/data#/hana/log#/hana/shared#/usr/sap#/hana/backup' -sizes '100#100#100#100#100'"
          },
          "useFastNetwork": true
        },
        "SQL": {
          "dbvmSize": "Standard_E64s_v3",
          "ascsVMSize": "Standard_E2s_v3",
          "diVMSize": "Standard_E16s_v3",
          "diVMCount": 10,
          "dbdisks": [
            {
              "lun": 0,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 1,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 2,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 3,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 4,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 5,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 6,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 7,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            }
          ],
          "scriptArguments": {
            "Windows": "-luns \"0,1,2,3,4,5,6#7\" -names \"data#log\" -paths \"C:\\sql\\data#C:\\sql\\log\"  -sizes \"100#100\""
          },
          "useFastNetwork": true
        },
        "other": {
          "dbvmSize": "Standard_E64s_v3",
          "ascsVMSize": "Standard_E2s_v3",
          "diVMSize": "Standard_E16s_v3",
          "diVMCount": 10,
          "dbdisks": [
            {
              "lun": 0,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 1,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 2,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 3,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 4,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 5,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 6,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            },
            {
              "lun": 7,
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": 1024
            }
          ],
          "scriptArguments": {
            "Linux": "-luns '0,1,2,3,4,5,6,7' -names 'datalog' -paths '/db/data,/db/log'  -sizes '70,100'",
            "Windows": "-luns \"0,1,2,3,4,5,6#7\" -names \"data#log\" -paths \"C:\\db\\data#C:\\db\\log\"  -sizes \"100#100\""
          },
          "useFastNetwork": true
        }
      }
    },
    "dbvmCount": "[if(equals(parameters('systemAvailability'), 'HA'), 2, 1)]",
    "ascsvmCount": "[if(equals(parameters('systemAvailability'), 'HA'), 2, 1)]",
    "divmCountNonHA": "[variables('sizes')[parameters('sapSystemSize')][parameters('dbType')].diVMCount]",
    "divmCount": "[if(equals(parameters('systemAvailability'), 'HA'), max(2, variables('divmCountNonHA')), variables('divmCountNonHA'))]",
    "dbVMSize": "[variables('sizes')[parameters('sapSystemSize')][parameters('dbType')].dbvmSize]",
    "ascsVMSize": "[variables('sizes')[parameters('sapSystemSize')][parameters('dbType')].ascsVMSize]",
    "diVMSize": "[variables('sizes')[parameters('sapSystemSize')][parameters('dbType')].diVMSize]",
    "dbDisks": "[variables('sizes')[parameters('sapSystemSize')][parameters('dbType')].dbdisks]",
    "sidlower": "[toLower(parameters('sapSystemId'))]",
    "vmName": "[variables('sidlower')]",
    "vnetName": "[concat(variables('sidlower'), '-vnet')]",
    "subnetName": "Subnet",
    "subnets": {
      "true": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnetName'))]",
      "false": "[parameters('subnetId')]"
    },
    "selectedSubnetId": "[variables('subnets')[string(equals(length(parameters('subnetId')), 0))]]",
    "publicIpNameASCS": "[concat(variables('sidlower'), '-pip-ascs')]",
    "avSetNameASCS": "[concat(variables('sidlower'), '-avset-ascs')]",
    "nsgName": "[concat(variables('sidlower'), '-nsg')]",
    "loadBalancerNameASCS": "[concat(variables('sidlower'), '-lb-ascs')]",
    "loadBalancerNamePubASCS": "[concat(variables('sidlower'), '-lb-pub-ascs')]",
    "vmNameASCS": "[concat(variables('vmName'), '-ascs')]",
    "nicNameASCS": "[concat(variables('sidlower'), '-nic-ascs')]",
    "avSetNameDB": "[concat(variables('sidlower'), '-avset-db')]",
    "loadBalancerNameDB": "[concat(variables('sidlower'), '-lb-db')]",
    "loadBalancerNamePubDB": "[concat(variables('sidlower'), '-lb-pub-db')]",
    "nicNameDB": "[concat(variables('sidlower'), '-nic-db')]",
    "vmNameDB": "[concat(variables('vmName'), '-db')]",
    "avSetNameDI": "[concat(variables('sidlower'), '-avset-di')]",
    "nicNameDI": "[concat(variables('sidlower'), '-nic-di')]",
    "vmNameDI": "[concat(variables('vmName'), '-di')]",
    "osSecurityRules": {
      "Windows": [
        {
          "name": "RDP",
          "properties": {
            "description": "Allow RDP Subnet",
            "protocol": "Tcp",
            "sourcePortRange": "*",
            "destinationPortRange": "3389",
            "sourceAddressPrefix": "*",
            "destinationAddressPrefix": "*",
            "access": "Allow",
            "priority": 100,
            "direction": "Inbound"
          }
        }
      ],
      "Linux": [
        {
          "name": "SSH",
          "properties": {
            "description": "Allow SSH Subnet",
            "protocol": "Tcp",
            "sourcePortRange": "*",
            "destinationPortRange": "22",
            "sourceAddressPrefix": "*",
            "destinationAddressPrefix": "*",
            "access": "Allow",
            "priority": 100,
            "direction": "Inbound"
          }
        }
      ]
    },
    "selectedSecurityRules": "[variables('osSecurityRules')[variables('internalOSType')]]",
    "scriptArgumentsASCSDI": {
      "Linux": "-luns '0' -names 'usrsap' -paths '/usr/sap'  -sizes '100'",
      "Windows": "-luns \"0\" -names \"sap\" -paths \"S\"  -sizes \"100\""
    },
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
            "keyData": "[parameters('adminPasswordOrKey')]"
          }
        ]
      }
    },
    "frontendHANADB": "frontendhdb",
    "frontendSQLDB": "frontendsql",
    "frontendSQLCL": "frontendsqlcl",
    "frontendASCS": "frontendascs",
    "frontendAERS": "frontendaers",
    "frontendSCS": "frontendscs",
    "frontendERS": "frontenders",
    "frontendASCSCL": "frontendascscl",
    "frontendPubASCS": "frontendpubascs",
    "frontendPubDB": "frontendpubdb",
    "backendPoolHANADB": "backendhdb",
    "backendPoolSQLDB": "backendsql",
    "backendPoolSQLCL": "backendsqlcl",
    "backendPoolASCS": "backendascs",
    "backendPoolAERS": "backendaers",
    "backendPoolSCS": "backendscs",
    "backendPoolERS": "backenders",
    "backendPoolASCSCL": "backendascscl",
    "backendPoolPubASCS": "backendpubascs",
    "backendPoolPubDB": "backendpubdb",
    "probePortHANADB": "probehdb",
    "probePortSQLDB": "probesql",
    "probePortSQLCL": "probesqlcl",
    "probePortASCS": "probeascs",
    "probePortAERS": "probeaers",
    "probePortSCS": "probescs",
    "probePortERS": "probeers",
    "probePortASCSCL": "probeascscl",
    "dbInstanceNumberHANA": 4,
    "ascsInstanceNumber": 0,
    "scsInstanceNumber": 1,
    "aersInstanceNumber": 2,
    "ersInstanceNumber": 3,
    "probePortInternalHANADB": "[add(62500, variables('dbInstanceNumberHANA'))]",
    "probePortInternalSQLDB": 62500,
    "probePortInternalSQLCL": 63500,
    "probePortInternalASCS": "[add(62000, variables('ascsInstanceNumber'))]",
    "probePortInternalAERS": "[add(62100, variables('aersInstanceNumber'))]",
    "probePortInternalSCS": "[add(62000, variables('scsInstanceNumber'))]",
    "probePortInternalERS": "[add(62100, variables('ersInstanceNumber'))]",
    "probePortInternalASCSCL": 63500,
    "lbRulePrefixHANADB": "[concat('lb', padLeft(variables('dbInstanceNumberHANA'), 2, '0'), 'Rule')]",
    "lbRulePrefixSQLDB": "lbsqlRule",
    "lbRulePrefixSQLCL": "lbsqlclRule",
    "lbRulePrefixASCS": "lbascsRule",
    "lbRulePrefixAERS": "lbaersRule",
    "lbRulePrefixSCS": "lbscsRule",
    "lbRulePrefixERS": "lbersRule",
    "lbRulePrefixASCSCL": "lbascsclRule",
    "idleTimeoutInMinutes": 30,
    "publicIpNameLBDB": "[concat(variables('sidlower'), '-pip-lb-db')]",
    "publicIpNameLBASCS": "[concat(variables('sidlower'), '-pip-lb-ascs')]",
    "pipIdDB": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpNameLBDB'))]",
    "pipIdASCS": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpNameLBASCS'))]",
    "lbFrontendConfigsDB": {
      "HANA": {
        "Linux": [
          {
            "properties": {
              "subnet": {
                "id": "[variables('selectedSubnetId')]"
              },
              "privateIPAllocationMethod": "Dynamic"
            },
            "name": "[variables('frontendHANADB')]"
          }
        ]
      },
      "SQL": {
        "Windows": [
          {
            "properties": {
              "subnet": {
                "id": "[variables('selectedSubnetId')]"
              },
              "privateIPAllocationMethod": "Dynamic"
            },
            "name": "[variables('frontendSQLDB')]"
          },
          {
            "properties": {
              "subnet": {
                "id": "[variables('selectedSubnetId')]"
              },
              "privateIPAllocationMethod": "Dynamic"
            },
            "name": "[variables('frontendSQLCL')]"
          }
        ]
      }
    },
    "lbFrontendConfigsABAP": [
      {
        "properties": {
          "subnet": {
            "id": "[variables('selectedSubnetId')]"
          },
          "privateIPAllocationMethod": "Dynamic"
        },
        "name": "[variables('frontendASCS')]"
      },
      {
        "properties": {
          "subnet": {
            "id": "[variables('selectedSubnetId')]"
          },
          "privateIPAllocationMethod": "Dynamic"
        },
        "name": "[variables('frontendAERS')]"
      }
    ],
    "lbFrontendConfigJAVA": [
      {
        "properties": {
          "subnet": {
            "id": "[variables('selectedSubnetId')]"
          },
          "privateIPAllocationMethod": "Dynamic"
        },
        "name": "[variables('frontendSCS')]"
      },
      {
        "properties": {
          "subnet": {
            "id": "[variables('selectedSubnetId')]"
          },
          "privateIPAllocationMethod": "Dynamic"
        },
        "name": "[variables('frontendERS')]"
      }
    ],
    "lbFrontendConfigIND": [
      {
        "properties": {
          "subnet": {
            "id": "[variables('selectedSubnetId')]"
          },
          "privateIPAllocationMethod": "Dynamic"
        },
        "name": "[variables('frontendASCSCL')]"
      }
    ],
    "lbFrontendConfigXSCS": {
      "ABAP": "[concat(variables('lbFrontendConfigIND'), variables('lbFrontendConfigsABAP'))]",
      "JAVA": "[concat(variables('lbFrontendConfigIND'), variables('lbFrontendConfigJAVA'))]",
      "ABAP+JAVA": "[concat(variables('lbFrontendConfigIND'), variables('lbFrontendConfigsABAP'), variables('lbFrontendConfigJAVA'))]"
    },
    "lbBackendPoolsDB": {
      "HANA": {
        "Linux": [
          {
            "name": "[variables('backendPoolHANADB')]"
          }
        ]
      },
      "SQL": {
        "Windows": [
          {
            "name": "[variables('backendPoolSQLDB')]"
          },
          {
            "name": "[variables('backendPoolSQLCL')]"
          }
        ]
      }
    },
    "lbBackendPoolsABAP": [
      {
        "name": "[variables('backendPoolASCS')]"
      },
      {
        "name": "[variables('backendPoolAERS')]"
      }
    ],
    "lbBackendPoolJAVA": [
      {
        "name": "[variables('backendPoolSCS')]"
      },
      {
        "name": "[variables('backendPoolERS')]"
      }
    ],
    "lbBackendPoolIND": [
      {
        "name": "[variables('backendPoolASCSCL')]"
      }
    ],
    "lbBackendPoolXSCS": {
      "ABAP": "[concat(variables('lbBackendPoolIND'), variables('lbBackendPoolsABAP'))]",
      "JAVA": "[concat(variables('lbBackendPoolIND'), variables('lbBackendPoolJAVA'))]",
      "ABAP+JAVA": "[concat(variables('lbBackendPoolIND'), variables('lbBackendPoolsABAP'), variables('lbBackendPoolJAVA'))]"
    },
    "lbRulesDB": {
      "HANA": {
        "Linux": [
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerNameDB'), variables('frontendHANADB'))]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameDB'), variables('backendPoolHANADB'))]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerNameDB'), variables('probePortHANADB'))]"
              },
              "protocol": "All",
              "frontendPort": 0,
              "backendPort": 0,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": "[variables('idleTimeoutInMinutes')]"
            },
            "name": "[concat(variables('lbRulePrefixHANADB'), padLeft(variables('dbInstanceNumberHANA'), 2, '0'), 'all')]"
          }
        ]
      },
      "SQL": {
        "Windows": [
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerNameDB'), variables('frontendSQLDB'))]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameDB'), variables('backendPoolSQLDB'))]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerNameDB'), variables('probePortSQLDB'))]"
              },
              "protocol": "All",
              "frontendPort": 0,
              "backendPort": 0,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": "[variables('idleTimeoutInMinutes')]"
            },
            "name": "[concat(variables('lbRulePrefixSQLDB'), 'all')]"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerNameDB'), variables('frontendSQLCL'))]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameDB'), variables('backendPoolSQLCL'))]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerNameDB'), variables('probePortSQLCL'))]"
              },
              "protocol": "All",
              "frontendPort": 0,
              "backendPort": 0,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": "[variables('idleTimeoutInMinutes')]"
            },
            "name": "[concat(variables('lbRulePrefixSQLCL'), 'all')]"
          }
        ]
      }
    },
    "lbRulesABAP": [
      {
        "properties": {
          "frontendIPConfiguration": {
            "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerNameASCS'), variables('frontendASCS'))]"
          },
          "backendAddressPool": {
            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolASCS'))]"
          },
          "probe": {
            "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerNameASCS'), variables('probePortASCS'))]"
          },
          "protocol": "All",
          "frontendPort": 0,
          "backendPort": 0,
          "enableFloatingIP": true,
          "idleTimeoutInMinutes": "[variables('idleTimeoutInMinutes')]"
        },
        "name": "[concat(variables('lbRulePrefixASCS'), 'all')]"
      },
      {
        "properties": {
          "frontendIPConfiguration": {
            "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerNameASCS'), variables('frontendAERS'))]"
          },
          "backendAddressPool": {
            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolAERS'))]"
          },
          "probe": {
            "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerNameASCS'), variables('probePortAERS'))]"
          },
          "protocol": "All",
          "frontendPort": 0,
          "backendPort": 0,
          "enableFloatingIP": true,
          "idleTimeoutInMinutes": "[variables('idleTimeoutInMinutes')]"
        },
        "name": "[concat(variables('lbRulePrefixAERS'), 'all')]"
      }
    ],
    "lbRulesJAVA": [
      {
        "properties": {
          "frontendIPConfiguration": {
            "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerNameASCS'), variables('frontendSCS'))]"
          },
          "backendAddressPool": {
            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolSCS'))]"
          },
          "probe": {
            "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerNameASCS'), variables('probePortSCS'))]"
          },
          "protocol": "All",
          "frontendPort": 0,
          "backendPort": 0,
          "enableFloatingIP": true,
          "idleTimeoutInMinutes": "[variables('idleTimeoutInMinutes')]"
        },
        "name": "[concat(variables('lbRulePrefixSCS'), 'all')]"
      },
      {
        "properties": {
          "frontendIPConfiguration": {
            "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerNameASCS'), variables('frontendERS'))]"
          },
          "backendAddressPool": {
            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolERS'))]"
          },
          "probe": {
            "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerNameASCS'), variables('probePortERS'))]"
          },
          "protocol": "All",
          "frontendPort": 0,
          "backendPort": 0,
          "enableFloatingIP": true,
          "idleTimeoutInMinutes": "[variables('idleTimeoutInMinutes')]"
        },
        "name": "[concat(variables('lbRulePrefixERS'), 'all')]"
      }
    ],
    "lbRulesIND": [
      {
        "properties": {
          "frontendIPConfiguration": {
            "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerNameASCS'), variables('frontendASCSCL'))]"
          },
          "backendAddressPool": {
            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolASCSCL'))]"
          },
          "probe": {
            "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerNameASCS'), variables('probePortASCSCL'))]"
          },
          "protocol": "All",
          "frontendPort": 0,
          "backendPort": 0,
          "enableFloatingIP": true,
          "idleTimeoutInMinutes": "[variables('idleTimeoutInMinutes')]"
        },
        "name": "[concat(variables('lbRulePrefixASCSCL'), 'all')]"
      }
    ],
    "lbRuleXSCS": {
      "ABAP": "[concat(variables('lbRulesIND'), variables('lbRulesABAP'))]",
      "JAVA": "[concat(variables('lbRulesIND'), variables('lbRulesJAVA'))]",
      "ABAP+JAVA": "[concat(variables('lbRulesIND'), variables('lbRulesABAP'), variables('lbRulesJAVA'))]"
    },
    "lbProbesDB": {
      "HANA": {
        "Linux": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": "[variables('probePortInternalHANADB')]",
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            },
            "name": "[variables('probePortHANADB')]"
          }
        ]
      },
      "SQL": {
        "Windows": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": "[variables('probePortInternalSQLDB')]",
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            },
            "name": "[variables('probePortSQLDB')]"
          },
          {
            "properties": {
              "protocol": "Tcp",
              "port": "[variables('probePortInternalSQLCL')]",
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            },
            "name": "[variables('probePortSQLCL')]"
          }
        ]
      }
    },
    "lbProbesABAP": [
      {
        "properties": {
          "protocol": "Tcp",
          "port": "[variables('probePortInternalASCS')]",
          "intervalInSeconds": 5,
          "numberOfProbes": 2
        },
        "name": "[variables('probePortASCS')]"
      },
      {
        "properties": {
          "protocol": "Tcp",
          "port": "[variables('probePortInternalAERS')]",
          "intervalInSeconds": 5,
          "numberOfProbes": 2
        },
        "name": "[variables('probePortAERS')]"
      }
    ],
    "lbProbesJAVA": [
      {
        "properties": {
          "protocol": "Tcp",
          "port": "[variables('probePortInternalSCS')]",
          "intervalInSeconds": 5,
          "numberOfProbes": 2
        },
        "name": "[variables('probePortSCS')]"
      },
      {
        "properties": {
          "protocol": "Tcp",
          "port": "[variables('probePortInternalERS')]",
          "intervalInSeconds": 5,
          "numberOfProbes": 2
        },
        "name": "[variables('probePortERS')]"
      }
    ],
    "lbProbesIND": [
      {
        "properties": {
          "protocol": "Tcp",
          "port": "[variables('probePortInternalASCSCL')]",
          "intervalInSeconds": 5,
          "numberOfProbes": 2
        },
        "name": "[variables('probePortASCSCL')]"
      }
    ],
    "lbProbeXSCS": {
      "ABAP": "[concat(variables('lbProbesIND'), variables('lbProbesABAP'))]",
      "JAVA": "[concat(variables('lbProbesIND'), variables('lbProbesJAVA'))]",
      "ABAP+JAVA": "[concat(variables('lbProbesIND'), variables('lbProbesABAP'), variables('lbProbesJAVA'))]"
    },
    "nicBackAddressPoolsDB": {
      "HANA": {
        "Linux": [
          {
            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNamePubDB'), variables('backendPoolPubDB'))]"
          },
          {
            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameDB'), variables('backendPoolHANADB'))]"
          }
        ]
      },
      "SQL": {
        "Windows": [
          {
            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNamePubDB'), variables('backendPoolPubDB'))]"
          },
          {
            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameDB'), variables('backendPoolSQLDB'))]"
          },
          {
            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameDB'), variables('backendPoolSQLCL'))]"
          }
        ]
      }
    },
    "nicBackAddressPoolsABAP": [
      {
        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolASCS'))]"
      },
      {
        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolAERS'))]"
      }
    ],
    "nicBackAddressPoolsJAVA": [
      {
        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolSCS'))]"
      },
      {
        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolERS'))]"
      }
    ],
    "nicBackAddressPoolsIND": [     
      {
        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolASCSCL'))]"
      }
    ],
    "nicBackAddressPoolsPub": [
      {
        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNamePubASCS'), variables('backendPoolPubASCS'))]"
      }
    ],
    "nicBackAddressPoolsINDPub": "[if(greater(length(parameters('subnetId')), 0), concat(variables('nicBackAddressPoolsIND'), variables('nicBackAddressPoolsPub')), variables('nicBackAddressPoolsIND'))]",
    "nicBackAddressPoolXSCS": {
      "ABAP": "[concat(variables('nicBackAddressPoolsINDPub'), variables('nicBackAddressPoolsABAP'))]",
      "JAVA": "[concat(variables('nicBackAddressPoolsINDPub'), variables('nicBackAddressPoolsJAVA'))]",
      "ABAP+JAVA": "[concat(variables('nicBackAddressPoolsINDPub'), variables('nicBackAddressPoolsABAP'), variables('nicBackAddressPoolsJAVA'))]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[concat(variables('nsgName'))]",
      "apiVersion": "2020-05-01",
      "location": "[parameters('location')]",
      "condition": "[equals(length(parameters('subnetId')), 0)]",
      "properties": {
        "securityRules": "[variables('selectedSecurityRules')]"
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('vnetName')]",
      "apiVersion": "2020-05-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
      ],
      "condition": "[equals(length(parameters('subnetId')), 0)]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "10.0.0.0/24",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('avSetNameASCS')]",
      "apiVersion": "2020-06-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Aligned"
      },
      "condition": "[equals(length(parameters('availabilityZones')), 0)]",
      "properties": {
        "platformFaultDomainCount": 2,
        "platformUpdateDomainCount": 10
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIpNameLBASCS')]",
      "apiVersion": "2020-05-01",
      "condition": "[and(greater(variables('ascsvmCount') , 1), greater(length(parameters('subnetId')), 0))]",
      "sku": {
        "name": "Standard"
      },
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('loadBalancerNamePubASCS')]",
      "apiVersion": "2020-05-01",
      "location": "[parameters('location')]",
      "condition": "[and(greater(variables('ascsvmCount') , 1), greater(length(parameters('subnetId')), 0))]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpNameLBASCS'))]"
      ],
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('frontendPubASCS')]",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('pipIdASCS')]"
              }
            }
          }
        ],
        "outboundRules": [
          {
            "name": "test",
            "properties": {
              "frontendIPConfigurations": [
                {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('loadBalancerNamePubASCS'), variables('frontendPubASCS'))]"
                }
              ],
              "allocatedOutboundPorts": 1000,
              "idleTimeoutInMinutes": 4,
              "enableTcpReset": true,
              "protocol": "All",
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNamePubASCS'), variables('backendPoolPubASCS'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('backendPoolPubASCS')]"
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(variables('publicIpNameASCS'), '-', copyIndex())]",
      "apiVersion": "2020-05-01",
      "condition": "[equals(length(parameters('subnetId')), 0)]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
      ],
      "sku": {
        "name": "Standard"
      },
      "copy": {
        "name": "pipLoop",
        "count": "[variables('ascsvmCount')]"
      },
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('loadBalancerNameASCS')]",
      "apiVersion": "2020-05-01",
      "location": "[parameters('location')]",
      "condition": "[greater(variables('ascsvmCount') , 1)]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
      ],
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "frontendIPConfigurations": "[variables('lbFrontendConfigXSCS')[parameters('stackType')]]",
        "backendAddressPools": "[variables('lbBackendPoolXSCS')[parameters('stackType')]]",
        "loadBalancingRules": "[variables('lbRuleXSCS')[parameters('stackType')]]",
        "probes": "[variables('lbProbeXSCS')[parameters('stackType')]]"
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicNameASCS'), '-', copyIndex())]",
      "apiVersion": "2020-05-01",
      "copy": {
        "name": "nicASCSLoop",
        "count": "[variables('ascsvmCount')]"
      },
      "dependsOn": [
        "pipLoop",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
        "[resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS'))]",
        "[resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNamePubASCS'))]"
      ],
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": "[if(equals(length(parameters('subnetId')), 0), json(concat('{\"id\": \"', resourceId('Microsoft.Network/publicIPAddresses', concat(variables('publicIpNameASCS'), '-', copyIndex())) ,'\"}')), json('null'))]",
              "subnet": {
                "id": "[variables('selectedSubnetId')]"
              },
              "loadBalancerBackendAddressPools": "[if(greater(variables('ascsvmCount'), 1), variables('nicBackAddressPoolXSCS')[parameters('stackType')], json('null'))]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmNameASCS'), '-', copyIndex())]",
      "copy": {
        "name": "xscsVMLoop",
        "count": "[variables('ascsvmCount')]"
      },
      "dependsOn": [
        "nicASCSLoop",
        "[resourceId('Microsoft.Compute/availabilitySets', variables('avSetNameASCS'))]"
      ],
      "apiVersion": "2020-06-01",
      "location": "[parameters('location')]",
      "zones": "[if(equals(length(parameters('availabilityZones')), 0), json('null'), array(variables('azArray')[mod(copyIndex(), variables('azArrayLength'))]))]",
      "properties": {
        "availabilitySet": "[if(equals(variables('azArrayLength'), 0), resourceId('Microsoft.Compute/availabilitySets', variables('avSetNameASCS')), json('null'))]",
        "hardwareProfile": {
          "vmSize": "[variables('ascsVMSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('vmNameASCS'), '-', copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('images')[parameters('osType')].publisher]",
            "offer": "[variables('images')[parameters('osType')].offer]",
            "sku": "[variables('images')[parameters('osType')].sku]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('vmNameASCS'), '-', copyIndex(), '-osdisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            }
          },
          "dataDisks": [
            {
              "lun": 0,
              "createOption": "Empty",
              "diskSizeGB": 128
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nicNameASCS'), '-', copyIndex()))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmNameASCS'), '-', copyIndex(), '/', variables('csExtension')[variables('internalOSType')].Name)]",
      "apiVersion": "2020-06-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "xscsVMLoop"
      ],
      "copy": {
        "name": "xscsExtVMLoop",
        "count": "[variables('ascsvmCount')]"
      },
      "properties": {
        "publisher": "[variables('csExtension')[variables('internalOSType')].Publisher]",
        "type": "[variables('csExtension')[variables('internalOSType')].Name]",
        "typeHandlerVersion": "[variables('csExtension')[variables('internalOSType')].Version]",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[variables('csExtension')[variables('internalOSType')].script]"
          ],
          "commandToExecute": "[concat(variables('csExtension')[variables('internalOSType')].scriptCall, ' ', variables('scriptArgumentsASCSDI')[variables('internalOSType')])]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('avSetNameDB')]",
      "apiVersion": "2020-06-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Aligned"
      },
      "condition": "[equals(length(parameters('availabilityZones')), 0)]",
      "properties": {
        "platformFaultDomainCount": 2,
        "platformUpdateDomainCount": 10
      }
    },    
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIpNameLBDB')]",
      "apiVersion": "2020-05-01",
      "sku": {
        "name": "Standard"
      },
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('loadBalancerNamePubDB')]",
      "apiVersion": "2020-05-01",
      "location": "[parameters('location')]",
      "condition": "[greater(variables('ascsvmCount') , 1)]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpNameLBDB'))]"
      ],
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('frontendPubDB')]",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('pipIdDB')]"
              }
            }
          }
        ],
        "outboundRules": [
          {
            "name": "test",
            "properties": {
              "frontendIPConfigurations": [
                {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('loadBalancerNamePubDB'), variables('frontendPubDB'))]"
                }
              ],
              "allocatedOutboundPorts": 1000,
              "idleTimeoutInMinutes": 4,
              "enableTcpReset": true,
              "protocol": "All",
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNamePubDB'), variables('backendPoolPubDB'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('backendPoolPubDB')]"
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('loadBalancerNameDB')]",
      "apiVersion": "2020-05-01",
      "location": "[parameters('location')]",
      "condition": "[greater(variables('dbvmCount') , 1)]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
      ],
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "frontendIPConfigurations": "[variables('lbFrontendConfigsDB')[parameters('dbType')][variables('internalOSType')]]",
        "backendAddressPools": "[variables('lbBackendPoolsDB')[parameters('dbType')][variables('internalOSType')]]",
        "loadBalancingRules": "[variables('lbRulesDB')[parameters('dbType')][variables('internalOSType')]]",
        "probes": "[variables('lbProbesDB')[parameters('dbType')][variables('internalOSType')]]"
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicNameDB'), '-', copyIndex())]",
      "apiVersion": "2020-05-01",
      "copy": {
        "name": "nicDBLoop",
        "count": "[variables('dbvmCount')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
        "[resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameDB'))]",
        "[resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNamePubDB'))]"
      ],
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('selectedSubnetId')]"
              },
              "loadBalancerBackendAddressPools": "[if(greater(variables('dbvmCount'), 1), variables('nicBackAddressPoolsDB')[parameters('dbType')][variables('internalOSType')], json('null'))]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmNameDB'), '-', copyIndex())]",
      "copy": {
        "name": "dbVMLoop",
        "count": "[variables('dbvmCount')]"
      },
      "dependsOn": [
        "nicDBLoop",
        "[resourceId('Microsoft.Compute/availabilitySets', variables('avSetNameDB'))]"
      ],
      "apiVersion": "2020-06-01",
      "location": "[parameters('location')]",
      "zones": "[if(equals(length(parameters('availabilityZones')), 0), json('null'), array(variables('azArray')[mod(copyIndex(), variables('azArrayLength'))]))]",
      "properties": {
        "availabilitySet": "[if(equals(variables('azArrayLength'), 0), resourceId('Microsoft.Compute/availabilitySets', variables('avSetNameDB')), json('null'))]",        
        "hardwareProfile": {
          "vmSize": "[variables('dbvmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('vmNameDB'), '-', copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('images')[parameters('osType')].publisher]",
            "offer": "[variables('images')[parameters('osType')].offer]",
            "sku": "[variables('images')[parameters('osType')].sku]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('vmNameDB'), '-', copyIndex(), '-osdisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            }
          },
          "dataDisks": "[variables('dbDisks')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nicNameDB'), '-', copyIndex()))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmNameDB'), '-', copyIndex(), '/', variables('csExtension')[variables('internalOSType')].Name)]",
      "apiVersion": "2020-06-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "dbVMLoop"
      ],
      "copy": {
        "name": "dbExtVMLoop",
        "count": "[variables('dbvmCount')]"
      },
      "properties": {
        "publisher": "[variables('csExtension')[variables('internalOSType')].Publisher]",
        "type": "[variables('csExtension')[variables('internalOSType')].Name]",
        "typeHandlerVersion": "[variables('csExtension')[variables('internalOSType')].Version]",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[variables('csExtension')[variables('internalOSType')].script]"
          ],
          "commandToExecute": "[concat(variables('csExtension')[variables('internalOSType')].scriptCall, ' ', variables('sizes')[parameters('sapSystemSize')][parameters('dbType')].scriptArguments[variables('internalOSType')])]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('avSetNameDI')]",
      "apiVersion": "2020-06-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Aligned"
      },
      "condition": "[equals(length(parameters('availabilityZones')), 0)]",
      "properties": {
        "platformFaultDomainCount": 2,
        "platformUpdateDomainCount": 10
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicNameDI'), '-', copyindex())]",
      "apiVersion": "2020-05-01",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
      ],
      "copy": {
        "name": "nicDILoop",
        "count": "[variables('divmCount')]"
      },
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('selectedSubnetId')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmNameDI'), '-', copyIndex())]",
      "copy": {
        "name": "diVMLoop",
        "count": "[variables('divmCount')]"
      },
      "dependsOn": [
        "nicDILoop",
        "[resourceId('Microsoft.Compute/availabilitySets', variables('avSetNameDI'))]"
      ],
      "apiVersion": "2020-06-01",
      "location": "[parameters('location')]",
      "zones": "[if(equals(length(parameters('availabilityZones')), 0), json('null'), array(variables('azArray')[mod(copyIndex(), variables('azArrayLength'))]))]",
      "properties": {
        "availabilitySet": "[if(equals(variables('azArrayLength'), 0), resourceId('Microsoft.Compute/availabilitySets', variables('avSetNameDI')), json('null'))]",
        "hardwareProfile": {
          "vmSize": "[variables('divmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('vmNameDI'), '-', copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('images')[parameters('osType')].publisher]",
            "offer": "[variables('images')[parameters('osType')].offer]",
            "sku": "[variables('images')[parameters('osType')].sku]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('vmNameDI'), '-', copyIndex(), '-osdisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            }
          },
          "dataDisks": [
            {
              "lun": 0,
              "createOption": "Empty",
              "diskSizeGB": 128
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nicNameDI'), '-', copyIndex()))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmNameDI'), '-', copyIndex(), '/', variables('csExtension')[variables('internalOSType')].Name)]",
      "apiVersion": "2020-06-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "diVMLoop"
      ],
      "copy": {
        "name": "diExtVMLoop",
        "count": "[variables('divmCount')]"
      },
      "properties": {
        "publisher": "[variables('csExtension')[variables('internalOSType')].Publisher]",
        "type": "[variables('csExtension')[variables('internalOSType')].Name]",
        "typeHandlerVersion": "[variables('csExtension')[variables('internalOSType')].Version]",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[variables('csExtension')[variables('internalOSType')].script]"
          ],
          "commandToExecute": "[concat(variables('csExtension')[variables('internalOSType')].scriptCall, ' ', variables('scriptArgumentsASCSDI')[variables('internalOSType')])]"
        }
      }
    }
  ]
}
