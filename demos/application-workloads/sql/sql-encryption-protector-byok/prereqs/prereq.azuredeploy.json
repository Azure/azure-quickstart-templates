{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Specifies the name of the key vault."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Specifies the Azure location where the key vault should be created."
      }
    },
    "enabledForDeployment": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
      }
    },
    "enabledForDiskEncryption": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
      }
    },
    "enabledForTemplateDeployment": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
      }
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "metadata": {
        "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
      }
    },
    "cosmosDbId": {
      "type": "string",
      "metadata": {
        "description": "Specifies the object ID of the 'Azure Cosmos DB' principal."
      }
    },

    "skuName": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard",
        "Premium"
      ],
      "metadata": {
        "description": "Specifies whether the key vault is a standard vault or a premium vault."
      }
    },

    "keyName": {
      "type": "string",
      "defaultValue": "mykey",
      "metadata": {
        "description": "The name off the key that will contain encryption info for Azure Machine Learning and Cosmos DB."
      }
    }
  },
  "variables": {
    "scriptName": "createKey",
    "identityName": "scratch",
    "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
    "roleDefinitionName": "[guid(variables('identityName'), variables('roleDefinitionId'))]",
    "keyPermissions": [
      "get",
      "wrapKey",
      "unwrapKey"
    ]
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "name": "[variables('identityName')]",
      "apiVersion": "2018-11-30",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-04-01-preview",
      "name": "[variables('roleDefinitionName')]",
      "dependsOn": [
        "[variables('identityName')]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('roleDefinitionId')]",
        "principalId": "[reference(variables('identityName')).principalId]",
        "scope": "[resourceGroup().id]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[parameters('keyVaultName')]",
      "apiVersion": "2019-09-01",
      "location": "[parameters('location')]",
      "properties": {
        "enabledForDeployment": "[parameters('enabledForDeployment')]",
        "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
        "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
        "tenantId": "[parameters('tenantId')]",
        "accessPolicies": [
          {
            "objectId": "[reference(variables('identityName')).principalId]",
            "tenantId": "[parameters('tenantId')]",
            "permissions": {
              "keys": [ "all" ]
            }
          },
          {
            "objectId": "[parameters('cosmosDbId')]",
            "tenantId": "[parameters('tenantId')]",
            "permissions": {
              "keys": "[variables('keyPermissions')]"
            }
          }
        ],
        "sku": {
          "name": "[parameters('skuName')]",
          "family": "A"
        },
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices"
        }
      }
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[variables('scriptName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('roleDefinitionName')]",
        "[parameters('keyVaultName')]"
      ],
      "kind": "AzurePowerShell",
      "identity": {
        "type": "userAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('identityName'))]": { /*ttk bug*/
          }
        }
      },
      "properties": {
        "forceUpdateTag": "1",
        "azPowerShellVersion": "3.0",
        "arguments": "[format(' -vaultName {0} -keyName {1}', parameters('keyVaultName'), parameters('keyName'))]",
        "scriptContent": "
        param(
          [string] $vaultName,
          [string] $keyName
        )
        $key = Add-AzKeyVaultKey -VaultName $vaultName -Name $keyName -Destination 'Software';
        $DeploymentScriptOutputs = @{};
        $DeploymentScriptOutputs['keyName'] = $key.Name;
        $DeploymentScriptOutputs['keyVersion'] = $key.Version;
        ",
        "timeout": "PT5M",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "P1D"
      }
    }
  ],
  "outputs": {
    "keyVaultName": {
      "type": "string",
      "value": "[parameters('keyVaultName')]"
    },
    "keyVaultResourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "keyName": {
      "type": "string",
      "value": "[reference(variables('scriptName')).outputs.keyName]"
    },
    "keyVersion": {
      "type": "string",
      "value": "[reference(variables('scriptName')).outputs.keyVersion]"
    }
  }
}
