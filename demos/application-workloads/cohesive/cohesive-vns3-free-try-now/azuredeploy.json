{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "User Name for VM's (required but not used for VNS3)"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin Password for VM's"
      }
    },
    "numberOfInstances": {
      "type": "int",
      "defaultValue": 3,
      "minValue": 1,
      "maxValue": 5,
      "metadata": {
        "description": "Hosts to deploy"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Deployment location"
      }
    },
    "virtualMachineOs": {
      "type": "string",
      "defaultValue": "ubuntu",
      "allowedValues": [
        "ubuntu",
        "windows"
      ],
      "metadata": {
        "description": "Virtual Machine Operating System, Ubuntu or Windows"
      }
    },
    "instanceSize": {
      "type": "string",
      "defaultValue": "small",
      "allowedValues": [
        "small",
        "medium",
        "large"
      ],
      "metadata": {
        "description": "Size of VM instance, defaults to Standard_B1ms to keep within core limits while giving reasonable performance"
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located including a trailing '/'"
      },
      "defaultValue": "[deployment().properties.templateLink.uri]"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
      },
      "defaultValue": ""
    }
  },
  "variables": {
    "suffix": "[uniqueString(resourceGroup().id, parameters('location'))]",
    "resourceGroupName": "[toLower(resourceGroup().name)]",
    "storageAccount": "[substring(concat(parameters('location'),'storage', variables('suffix')), 0, 24)]",
    "virtualNetworkName": "[concat(variables('resourceGroupName'), '-vnet')]",
    "vnetSubnet": "10.10.10.0/24",
    "vnetPublicSubnet": "10.10.10.0/28",
    "vnetPrivateSubnet": "10.10.10.16/28",
    "publicSubnet": "publicsubnet",
    "privateSubnet": "privatesubnet",
    "vns3LicenseType": "free",
    "vns3ControllerName": "VNS3Controller",
    "networkInterfaceName": "[toLower(concat(variables('vns3ControllerName'), '-nic'))]",
    "publicIPAddresseName": "[concat(variables('vns3ControllerName'), '-ip')]",
    "networkSecurityGroupName": "[concat(variables('vns3ControllerName'), '-nsg')]",
    "routeTableName": "private-subnet-routes",
    "vnsPlanType": "[toLower(concat(variables('vns3LicenseType'), 'Plan'))]",
    "osScript": "[toLower(concat(parameters('virtualMachineOs'), 'Script'))]",
    "vnsStaticIp": "10.10.10.10",
    "vnsVersion": {
      "free": {
        "imageReference": {
          "publisher": "cohesive",
          "offer": "cohesive-vns3-5_0_x",
          "sku": "cohesive-vns3-5_0_x-free",
          "version": "latest"
        }
      }
    },
    "planType": {
      "freePlan": {
        "plan": {
          "name": "cohesive-vns3-5_0_x-free",
          "publisher": "cohesive",
          "product": "cohesive-vns3-5_0_x"
        }
      }
    },
    "CustomScriptForLinux": "CustomScript",
    "linuxScriptFileUri": "[uri(parameters('_artifactsLocation'), concat('scripts/customextensionlinux.sh', parameters('_artifactsLocationSasToken')))]",
    "linuxScriptCommandToExecute": "sudo bash customextensionlinux.sh",
    "windowsScriptFileUri": "[uri(parameters('_artifactsLocation'), concat('scripts/CustomExtensionWindows.ps1', parameters('_artifactsLocationSasToken')))]",
    "windowsScriptCommandToExecute": "powershell -ExecutionPolicy Unrestricted -File CustomExtensionWindows.ps1 ",
    "OS": {
      "ubuntu": {
        "image": {
          "publisher": "Canonical",
          "offer": "UbuntuServer",
          "sku": "18.04-LTS",
          "version": "latest"
        }
      },
      "windows": {
        "image": {
          "publisher": "MicrosoftWindowsServer",
          "offer": "WindowsServer",
          "sku": "2019-Datacenter",
          "version": "latest"
        }
      }
    },
    "VM": {
      "small": {
        "VMsize": "Standard_B1s"
      },
      "medium": {
        "VMsize": "Standard_B2s"
      },
      "large": {
        "VMsize": "Standard_A2_V2"
      }
    },
    "vmName": "[parameters('virtualMachineOs')]",
    "vmNic": "[toLower(concat(variables('vmName'), '-nic'))]",
    "vmNsg": "[toLower(concat(variables('vmName'), '-nsg'))]",
    "vmPip": "[toLower(concat(variables('vmName'), '-pip'))]",
    "osScriptToRun": {
      "ubuntuScript": {
        "properties": {
          "publisher": "Microsoft.Azure.Extensions",
          "type": "[variables('CustomScriptForLinux')]",
          "typeHandlerVersion": "2.0",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "fileUris": [
              "[variables('linuxScriptFileUri')]"
            ],
            "commandToExecute": "[variables('linuxScriptCommandToExecute')]"
          }
        }
      },
      "windowsScript": {
        "properties": {
          "publisher": "Microsoft.Compute",
          "type": "CustomScriptExtension",
          "typeHandlerVersion": "1.10",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "fileUris": [
              "[variables('windowsScriptFileUri')]"
            ],
            "commandToExecute": "[variables('windowsScriptCommandToExecute')]"
          }
        }
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2020-12-01",
      "name": "[variables('vns3ControllerName')]",
      "location": "[parameters('location')]",
      "plan": "[variables('planType')[variables('vnsPlanType')].plan]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccount'))]"
      ],
      "tags": {
        "Name": "VNS3 Controller"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('VM')[parameters('instanceSize')].VMsize]"
        },
        "storageProfile": {
          "osDisk": {
            "name": "[concat(variables('vns3ControllerName'), '-disc')]",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "StandardSSD_LRS"
            },
            "diskSizeGB": 30
          },
          "imageReference": "[variables('vnsVersion')[variables('vns3LicenseType')].imageReference]"
        },
        "osProfile": {
          "computerName": "[variables('vns3ControllerName')]",
          "adminUsername": "[parameters('adminUserName')]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": false,
            "provisionVMAgent": true
          },
          "allowExtensionOperations": true
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference(variables('storageAccount'),'2021-01-01').primaryEndpoints['blob']]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-08-01",
      "name": "[variables('networkInterfaceName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddresseName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('privateSubnet'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('publicSubnet'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
      ],
      "tags": {
        "Name": "VNS3 Controller"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('vnsStaticIp')]",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddresseName'))]"
              },
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('publicSubnet'))]"
              },
              "privateIPAddressVersion": "IPv4"
            }
          }
        ],
        "enableAcceleratedNetworking": false,
        "enableIPForwarding": true,
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-08-01",
      "name": "[variables('networkSecurityGroupName')]",
      "location": "[parameters('location')]",
      "tags": {
        "Name": "VNS3 Controller"
      },
      "properties": {
        "securityRules": [
          {
            "name": "VNS3_Web_API_Port",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "8000",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "VNS3_UDP_1194",
            "properties": {
              "protocol": "Udp",
              "sourcePortRange": "1194",
              "destinationPortRange": "1194",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound"
            }
          },
          {
            "name": "VNS3_UDP_500",
            "properties": {
              "protocol": "Udp",
              "sourcePortRange": "500",
              "destinationPortRange": "500",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 300,
              "direction": "Inbound"
            }
          },
          {
            "name": "VNS3_NAT_T",
            "properties": {
              "protocol": "Udp",
              "sourcePortRange": "4500",
              "destinationPortRange": "4500",
              "sourceAddressPrefix": "1.2.3.4/32",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 400,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-08-01",
      "name": "[variables('publicIPAddresseName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic",
        "tier": "Regional"
      },
      "tags": {
        "Name": "VNS3 Controller"
      },
      "properties": {
        "publicIPAddressVersion": "IPv4",
        "publicIPAllocationMethod": "Static",
        "idleTimeoutInMinutes": 4
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-08-01",
      "name": "[variables('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetSubnet')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('publicSubnet')]",
            "properties": {
              "addressPrefix": "[variables('vnetPublicSubnet')]"
            }
          },
          {
            "name": "[variables('privateSubnet')]",
            "properties": {
              "addressPrefix": "[variables('vnetPrivateSubnet')]"
            }
          }
        ],
        "enableDdosProtection": false,
        "enableVmProtection": false
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-01-01",
      "name": "[variables('storageAccount')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "Storage",
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": false,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2020-06-01",
      "name": "[concat(variables('virtualNetworkName'), '/', variables('publicSubnet'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "addressPrefix": "[variables('vnetPublicSubnet')]"
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2020-06-01",
      "name": "[concat(variables('virtualNetworkName'), '/', variables('privateSubnet'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "addressPrefix": "[variables('vnetPrivateSubnet')]",
        "routeTable": {
          "id": "[resourceId('Microsoft.Network/routeTables', variables('routeTableName'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/routeTables",
      "apiVersion": "2020-11-01",
      "name": "[variables('routeTableName')]",
      "location": "[parameters('location')]",
      "properties": {
        "disableBgpRoutePropagation": false,
        "routes": [
          {
            "name": "natgateway",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "10.10.10.10",
              "hasBgpOverride": false
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/routeTables/routes",
      "apiVersion": "2020-06-01",
      "name": "[concat(variables('routeTableName'),'/','natgateway')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/routeTables', variables('routeTableName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "addressPrefix": "0.0.0.0/0",
        "nextHopType": "Internet",
        "hasBgpOverride": false
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-08-01",
      "name": "[concat(variables('vmPip'), copyindex())]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic",
        "tier": "Regional"
      },
      "copy": {
        "name": "PublicIpLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "tags": {
        "Name": "VNS3 Controller"
      },
      "properties": {
        "publicIPAddressVersion": "IPv4",
        "publicIPAllocationMethod": "Static",
        "idleTimeoutInMinutes": 4
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-08-01",
      "name": "[concat(variables('vmNic'), copyindex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "NicLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('privateSubnet'))]",
        "SecurityLoop",
        "PublicIpLoop"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('vmPip'), copyindex()))]"
              },
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('privateSubnet'))]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('vmNsg'), copyindex()))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-08-01",
      "name": "[concat(variables('vmNsg'), copyindex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "SecurityLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "tags": {
        "Name": "VNS3 Controller"
      },
      "properties": {
        "securityRules": [
          {
            "name": "SSH",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 300,
              "direction": "Inbound"
            }
          },
          {
            "name": "RDP",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "3389",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 400,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2020-12-01",
      "name": "[concat(variables('vmName'), copyIndex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "virtualMachineLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "dependsOn": [
        "NicLoop"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('VM')[parameters('instanceSize')].VMsize]"
        },
        "osProfile": {
          "computerName": "[concat(variables('vmName'), copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": "[variables('OS')[parameters('virtualMachineOs')].image]",
          "osDisk": {
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('vmNic'), copyindex()))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2020-12-01",
      "name": "[concat(variables('vmName'), copyIndex(), '/', variables('osScript'))]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "CustomScriptLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vns3ControllerName'))]",
        "virtualMachineLoop"
      ],
      "properties": "[variables('osScriptToRun')[variables('osScript')].properties]"
    }
  ],
  "outputs": {
    "privateIPAddress": {
      "type": "string",
      "value": "[resourceId('Microsoft.Network/privateIPAddresses', variables('vnsStaticIp'))]"
    }
  }
}
