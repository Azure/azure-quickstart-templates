{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "imageSku": {
      "type": "string",
      "defaultValue": "8.0",
      "metadata": {
        "description": "OpenLogic CentOS version to use"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin username for the virtual machines"
      }
    },
     "adminPassword":{
       "type": "securestring",
       "metadata": {
          "description": "Admin password for the VM"
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "sshPublicKey",
      "allowedValues": [
        "password",
        "sshPublicKey"
      ],
      "metadata": {
        "description": "Authentication type for the virtual machines"
      }
    },
    "sshPublicKey": {
      "type": "string",
      "metadata": {
        "description": "SSH public key that will be included on all nodes. The OpenSSH public key can be generated with tools like ssh-keygen on Linux or OS X."
      }
    },
    "dnsNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "Globally unique DNS name prefix name must be between 3 and 50 characters long and can contain only dashes, numbers, and lowercase letters. The domain name suffix (e.g. westus.cloudapp.zure.com) will be automatically updated based on the selected location."
      }
    },
    "clientAvailabilitySetName": {
      "type": "string",
      "defaultValue": "availset-lustre-clients",
      "metadata": {
        "description": "Lustre clients availability set name is important for grouping clients into deployments that can communicate with each other via RDMA"
      }
    },
    "vmNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "Prefix for the virtual machine names"
      }
    },
    "clientVmSize": {
      "type": "string",
      "defaultValue": "Standard_D2_v3",
      "metadata": {
        "description": "Size of the Lustre client VM"
      }
    },
    "clientCount": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Number of Lustre clients"
      }
    },
    "filesystemName": {
      "type": "string",
      "defaultValue": "lustre",
      "metadata": {
        "description": "Name of the Lustre filesystem exposed by the Lustre MGS node"
      }
    },
    "mgsIpAddress": {
      "type": "string",
      "defaultValue": "10.1.0.4",
      "metadata": {
        "description": "IP address of the Lustre MGS node"
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "Storage account type (e.g. Premium_LRS or Standard_LRS). Make sure to select Premium_LRS only when using DS-series or GS-series Virtual Machines."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Default location for the resources"
      }
    },
    "existingVnetResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Existing Virtual Network Resource Group where Lustre servers are deployed"
      }
    },
    "existingVnetName": {
      "type": "string",
      "metadata": {
        "description": "Existing Virtual Network name (e.g. vnet-lustre)"
      }
    },
    "existingSubnetClientsName": {
      "type": "string",
      "metadata": {
        "description": "Lustre clients will be deployed into this subnet within the existing Virtual Network"
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "defaultValue": "[deployment().properties.templateLink.uri]",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
      }
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
      },
      "defaultValue": ""
    }
  },
  "variables": {
    "storageAccountName": "[concat(uniquestring(resourceGroup().id),'storage')]",
    "osType": {
      "publisher": "openlogic",
      "offer": "CentOS",
      "sku": "[parameters('imageSku')]",
      "version": "latest"
    },
    "clientAvailabilitySetSettings": {
      "name": "[concat(parameters('clientAvailabilitySetName'))]",
      "faultDomainCount": "2",
      "updateDomainCount": "3"
    },
    "scriptUrlLustreClient": "[uri(parameters('_artifactsLocation'), concat('lustre_client.sh', parameters('_artifactsLocationSasToken')))]",
    "sshKeyPath": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[variables('sshKeyPath')]",
            "keyData": "[parameters('sshPublicKey')]"
          }
        ]
      }
    }
  },
  "resources": [
    {
      "apiVersion": "2021-01-01",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('storageAccountType')]"
      }
    },
    {
      "apiVersion": "2020-12-01",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('clientAvailabilitySetSettings').name]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Aligned"
        },
      "properties": {
        "platformFaultDomainCount": "[variables('clientAvailabilitySetSettings').faultDomainCount]",
        "platformUpdateDomainCount": "[variables('clientAvailabilitySetSettings').updateDomainCount]"
      }
    },
    {
      "apiVersion": "2020-07-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(parameters('vmNamePrefix'),'client0')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "idleTimeoutInMinutes": 4,
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsNamePrefix'),'')]"
        }
      }
    },
    {
      "apiVersion": "2020-07-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('vmNamePrefix'), 'client0')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses/', concat(parameters('vmNamePrefix'), 'client0'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ip1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('vmNamePrefix'), 'client0'))]"
              },
              "subnet": {
                "id": "[resourceId(parameters('existingVnetResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('existingVnetName'), parameters('existingSubnetClientsName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2020-07-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('vmNamePrefix'), 'client', copyIndex(1))]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "clientNicCopy",
        "count": "[sub(parameters('clientCount'),1)]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ip1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId(parameters('existingVnetResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('existingVnetName'), parameters('existingSubnetClientsName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2020-12-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(parameters('vmNamePrefix'), 'client', copyIndex())]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Compute/availabilitySets/', variables('clientAvailabilitySetSettings').name)]",
        "[resourceId('Microsoft.Network/networkInterfaces/', concat(parameters('vmNamePrefix'), 'client', copyIndex()))]"
      ],
      "copy": {
        "name": "clientVmCopy",
        "count": "[parameters('clientCount')]"
      },
      "tags": {
        "LustreType": "client"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('clientAvailabilitySetSettings').name)]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('clientVmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(parameters('vmNamePrefix'), 'client', copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
          "imageReference": "[variables('osType')]",
          "osDisk": {
            "name": "[concat(parameters('vmNamePrefix'), 'client', copyIndex(),'_OSDisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('vmNamePrefix'), 'client', copyIndex()))]"
            }
          ]
        }
      }
    },
    {
      "apiVersion": "2020-12-01",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('vmNamePrefix'), 'client', copyIndex(), '/init')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', concat(parameters('vmNamePrefix'),'client',copyIndex()))]"
      ],
      "copy": {
        "name": "clientExtensionsCopy",
        "count": "[parameters('clientCount')]"
      },
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
    		"type": "CustomScript",
    		"typeHandlerVersion": "2.0",
    		"autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": [
                "[variables('scriptUrlLustreClient')]"
            ],
          "commandToExecute": "[concat('bash lustre_client.sh -n CLIENTCENTOS', parameters('imageSku'), ' -i ', copyIndex(), ' -d 0', ' -m ', parameters('mgsIpAddress'), ' -l ', reference(resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmNamePrefix'), 'client', copyIndex()))).ipConfigurations[0].properties.privateIPAddress, ' -f ', parameters('filesystemName'))]"
        }
      }
    }
  ],
  "outputs": {
    "client0DomainName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',concat(parameters('vmNamePrefix'),'client0'))).dnsSettings.fqdn]"
    }
  }
}
