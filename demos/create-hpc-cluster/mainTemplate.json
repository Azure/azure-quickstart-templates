{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "clusterName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 15,
      "metadata": {
        "description": "The HPC Pack cluster name, also used as the host name of the head node. It must contain between 3 and 15 characters with lowercase letters and numbers, and must start with a letter."
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Name of the virtual network to be created. It must contain between 2 and 63 characters, start with a letter, end with a letter or number, and may contain only letters, numbers, underscores, periods, or hyphens."
      }
    },
    "privateDomainName": {
      "type": "string",
      "defaultValue": "hpc.local",
      "metadata": {
        "description": "The fully qualified domain name (FQDN) for the private domain forest which will be created by this template, for example 'hpc.local'."
      }
    },
    "headNodeVMSize": {
      "type": "string",
      "defaultValue": "Standard_D8s_v3",
      "metadata": {
        "description": "The VM size of the head node, all available VM sizes in Azure can be found at https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-sizes. Note that some VM sizes in the list are only available in some particular locations. Please check the availability and the price of the VM sizes at https://azure.microsoft.com/pricing/details/virtual-machines/windows/ before deployment."
      }
    },
    "headNodeDiskType": {
      "type": "string",
      "defaultValue": "SSD",
      "allowedValues": [
        "HDD",
        "SSD"
      ],
      "metadata": {
        "description": "The disk type of head node VM. Note that SSD only supports DS-series, DSv2-series, GS-series, and Fs-series VMs."
      }
    },
    "computeNodeImageOsPlatform": {
      "type": "string",
      "allowedValues": [
        "Windows",
        "Linux"
      ],
      "metadata": {
        "description": "The VM image OS platform for the compute nodes"
      }
    },
    "computeNodeImagePublisher": {
      "type": "string",
      "metadata": {
        "description": "The VM image publisher for the compute nodes"
      }
    },
    "computeNodeImageOffer": {
      "type": "string",
      "metadata": {
        "description": "The VM image offer for the compute nodes"
      }
    },
    "computeNodeImageSku": {
      "type": "string",
      "metadata": {
        "description": "The VM image sku for the compute nodes"
      }
    },
    "computeNodeNamePrefix": {
      "type": "string",
      "minLength": 1,
      "maxLength": 12,
      "defaultValue": "IaaSCN",
      "metadata": {
        "description": "The name prefix of the compute nodes. It must be no more than 12 characters, begin with a letter, and contain only letters, numbers and hyphens. For example, if 'IaaSCN-' is specified, the compute node names will be 'IaaSCN-000', 'IaaSCN-001', ..."
      }
    },
    "computeNodeNumber": {
      "type": "int",
      "defaultValue": 10,
      "minValue": 1,
      "maxValue": 500,
      "metadata": {
        "description": "The number of the compute nodes"
      }
    },
    "computeNodeVMSize": {
      "type": "string",
      "defaultValue": "Standard_D4_v3",
      "metadata": {
        "description": "The VM size of the compute nodes, all available VM sizes in Azure can be found at https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-sizes. Note that some VM sizes in the list are only available in some particular locations. Please check the availability and the price of the VM sizes at https://azure.microsoft.com/pricing/details/virtual-machines/windows/ before deployment."
      }
    },
    "computeNodeDiskType": {
      "type": "string",
      "defaultValue": "HDD",
      "allowedValues": [
        "HDD",
        "SSD"
      ],
      "metadata": {
        "description": "The disk type of the compute node VMs. Note that SSD only supports DS-series, DSv2-series, GS-series, and Fs-series VMs."
      }
    },
    "publicIPName": {
      "type": "string",
      "metadata": {
        "description": "The name of the public IP address"
      }
    },
    "publicIPRGName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource group for the public IP address resource"
      }
    },
    "publicIPNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Indicates whether the public IP address is new or existing"
      }
    },
    "publicIPDNSNameLabel": {
      "type": "string",
      "metadata": {
        "description": "The DNS name label of the public IP address"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Administrator user name for the virtual machines and the Active Directory domain."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Administrator password for the virtual machines and the Active Directory domain"
      }
    },
    "headNodePostConfigScript": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional URL of a public available PowerShell script you want to run on the head node after it is configured. The script will be run as the Local System account. You can also specify arguments for the script, for example 'http://www.contoso.com/myhnpostscript.ps1 -Arg1 arg1 -Arg2 arg2'."
      }
    },
    "computeNodePostConfigScript": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional URL of a public available PowerShell script you want to run on the compute nodes after they are configured. The script will be run as the Local System account. You can also specify arguments for the script, for example 'http://www.contoso.com/mycnpostscript.ps1 -Arg1 arg1 -Arg2 arg2'."
      }
    },
    "_artifactsLocation": {
            "type": "string",
            "metadata": {
                "description": "The location of resources, such as templates and DSC modules, that the template depends on"
            },
            "defaultValue": "[deployment().properties.templateLink.uri]"
        },
    "_artifactsLocationSasToken": {
        "type": "securestring",
        "metadata": {
            "description": "Auto-generated token to access _artifactsLocation"
        },
        "defaultValue": ""
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location for all resources."
      }
    }
  },
  "variables": {
    "storageAccountTypes": {
      "HDD": "Standard_LRS",
      "SSD": "Premium_LRS"
    },
    "hnStorageAccountName": "[toLower(concat('hpc', uniqueString(resourceGroup().id, toLower(parameters('clusterName')))))]",
    "hnStorageAccountId": "[resourceId('Microsoft.Storage/storageAccounts',variables('hnStorageAccountName'))]",
    "addressPrefix": "10.0.0.0/16",
    "subnet1Name": "Subnet-1",
    "subnet1Prefix": "10.0.0.0/22",
    "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), variables('subnet1Name'))]",
    "publicIPAddressType": "Dynamic",
    "availabilitySetNamePrefix": "[concat(parameters('clusterName'), '-avset')]",
    "nbrVMPerAvailabilitySet": 180,
    "availabilitySetNumber": "[add(div(parameters('computeNodeNumber'), variables('nbrVMPerAvailabilitySet')), 1)]",
    "nicNameSuffix": "[concat('-nic', uniqueString(variables('subnetRef')))]",
    "nicNameHN": "[concat(parameters('clusterName'), variables('nicNameSuffix'))]",
    "vmSizeSuffix": "[uniqueString(resourceGroup().id)]",
    "suffixA8Size": "[concat('Standard_A8', variables('vmSizeSuffix'))]",
    "suffixA9Size": "[concat('Standard_A9', variables('vmSizeSuffix'))]",
    "suffixH16rSize": "[concat('Standard_H16r', variables('vmSizeSuffix'))]",
    "suffixH16mrSize": "[concat('Standard_H16mr', variables('vmSizeSuffix'))]",
    "suffixNC24rSize": "[concat('Standard_NC24r', variables('vmSizeSuffix'))]",
    "suffixHNSize": "[concat(parameters('headNodeVMSize'), variables('vmSizeSuffix'))]",
    "suffixCNSize": "[concat(parameters('computeNodeVMSize'), variables('vmSizeSuffix'))]",
    "cnRDMACapable": "[replace(replace(replace(replace(replace(replace(variables('suffixCNSize'), variables('suffixA8Size'), 'enabled'), variables('suffixA9Size'), 'enabled'), variables('suffixH16rSize'), 'enabled'), variables('suffixH16mrSize'), 'enabled'), variables('suffixNC24rSize'), 'enabled'), variables('suffixCNSize'), 'disabled')]",
    "hnRDMACapable": "[replace(replace(replace(replace(replace(replace(variables('suffixHNSize'), variables('suffixA8Size'), 'enabled'), variables('suffixA9Size'), 'enabled'), variables('suffixH16rSize'), 'enabled'), variables('suffixH16mrSize'), 'enabled'), variables('suffixNC24rSize'), 'enabled'), variables('suffixHNSize'), 'disabled')]",
    "hnRDMAJumpBox": {
      "disabled-disabled": "disabled",
      "disabled-enabled": "disabled",
      "enabled-disabled": "disabled",
      "enabled-enabled": "enabled"
    },
    "hnRDMAState": "[variables('hnRDMAJumpBox')[concat(variables('hnRDMACapable'), '-', variables('cnRDMACapable'))]]",
    "cnRDMAState": "[variables('cnRDMACapable')]",
    "cnOsPlatformRelated": {
      "Linux": {
        "template": "linuxnode.json"
      },
      "Windows": {
        "template": "[concat('windowsnode-rdma-', variables('cnRDMAState'), '.json')]"
      }
    },
    "curCNOSPlatformRelated": "[variables('cnOsPlatformRelated')[parameters('computeNodeImageOsPlatform')]]",
    "computeNodeTemplateUrl": "[uri(parameters('_artifactsLocation'), concat(variables('curCNOSPlatformRelated').template, parameters('_artifactsLocationSasToken')))]",
    "computeNodeCustomData": "[base64(concat('HPCClusterName=', parameters('clusterName'), '\r\nImageCategory=public\r\nImageName=', parameters('computeNodeImageOffer'), '-', parameters('computeNodeImageSku'), '\r\nVMSize=', parameters('computeNodeVMSize')))]",
    "adminBase64Password": "[base64(parameters('adminPassword'))]",
    "iaasInfoArg": "[concat('-SubscriptionId ', subscription().subscriptionId, ' -VNet ', parameters('virtualNetworkName'), ' -Subnet ', variables('subnet1Name'), ' -Location \"', parameters('location'), '\" -ResourceGroup ', resourceGroup().name)]",
    "headNodeCommandStr": "[concat('powershell.exe -ExecutionPolicy Unrestricted -File PrepareHN.ps1 -DomainFQDN ', parameters('privateDomainName'), ' -AdminUserName ', parameters('adminUsername'), ' -AdminBase64Password \"', variables('adminBase64Password'), '\" -CNSize ', parameters('computeNodeVMSize'), ' -PostConfigScript \"', base64(trim(parameters('headNodePostConfigScript'))), '\" ', variables('iaasInfoArg'))]",
    "hnStorageConnStrPrefix": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('hnStorageAccountName'), ';AccountKey=')]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('hnStorageAccountName')]",
      "apiVersion": "2021-04-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage",
      "properties": {}
    },
    {
      "apiVersion": "2017-10-01",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[parameters('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnet1Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet1Prefix')]"
            }
          }
        ]
      }
    },
    {
      "name": "setupClusterPublicIP",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(parameters('_artifactsLocation'), concat('publicip-', parameters('publicIPNewOrExisting'), '.json', parameters('_artifactsLocationSasToken')))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "publicIPAddressName": {
            "value": "[parameters('publicIPName')]"
          },
          "publicIPAddressType": {
            "value": "[variables('publicIPAddressType')]"
          },
          "domainNameLabel": {
            "value": "[parameters('publicIPDNSNameLabel')]"
          },
          "publicIPRGName": {
            "value": "[parameters('publicIpRGName')]"
          },
          "location":{
            "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "apiVersion": "2017-10-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicNameHN')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]",
        "Microsoft.Resources/deployments/setupClusterPublicIP"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "IPConfig",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "10.0.0.4",
              "publicIPAddress": {
                "id": "[reference('setupClusterPublicIP').outputs.resourceId.value]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2017-12-01",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[concat(variables('availabilitySetNamePrefix'), padLeft(string(copyIndex()), 2, '0'))]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Aligned"
      },
      "properties": {
        "platformUpdateDomainCount": 5,
        "platformFaultDomainCount": 2
      },
      "copy": {
        "name": "availabilitySetCopy",
        "count": "[variables('availabilitySetNumber')]"
      }
    },
    {
      "apiVersion": "2017-05-10",
      "type": "Microsoft.Resources/deployments",
      "name": "createHeadNode",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', variables('nicNameHN'))]",
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('hnStorageAccountName'))]",
        "availabilitySetCopy"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(parameters('_artifactsLocation'),concat('headnode-rdma-', variables('hnRDMAState'), '.json', parameters('_artifactsLocationSasToken')))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vmName": {
            "value": "[parameters('clusterName')]"
          },
          "vmSize": {
            "value": "[parameters('headNodeVMSize')]"
          },
          "storageAccountType": {
            "value": "[variables('storageAccountTypes')[parameters('headNodeDiskType')]]"
          },
          "nicName": {
            "value": "[variables('nicNameHN')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "availabilitySetName": {
            "value": "[concat(variables('availabilitySetNamePrefix'), '00')]"
          },
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          },
          "privateDomainName": {
            "value": "[parameters('privateDomainName')]"
          },
          "location":{
            "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "apiVersion": "2017-05-10",
      "type": "Microsoft.Resources/deployments",
      "name": "updateVNetDNS",
      "dependsOn": [
        "Microsoft.Resources/deployments/createHeadNode"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(parameters('_artifactsLocation'), concat('vnet-with-dns-server.json', parameters('_artifactsLocationSasToken')))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "virtualNetworkName": {
            "value": "[parameters('virtualNetworkName')]"
          },
          "virtualNetworkAddressRange": {
            "value": "[variables('addressPrefix')]"
          },
          "subnetName": {
            "value": "[variables('subnet1Name')]"
          },
          "subnetRange": {
            "value": "[variables('subnet1Prefix')]"
          },
          "DNSServerAddress": {
            "value": [
              "10.0.0.4",
              "8.8.8.8"
            ]
          },
          "location":{
            "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('clusterName'),'/configureHeadNode')]",
      "apiVersion": "2017-12-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "Microsoft.Resources/deployments/updateVNetDNS"
      ],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.9",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[uri(parameters('_artifactsLocation'), concat('PrepareHN.ps1', parameters('_artifactsLocationSasToken')))]",
            "[uri(parameters('_artifactsLocation'), concat('HPCHNPrepare.ps1', parameters('_artifactsLocationSasToken')))]"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat(variables('headNodeCommandStr'), ' -AzureStorageConnStr \"', variables('hnStorageConnStrPrefix'), listKeys(variables('hnStorageAccountId'),'2017-10-01').keys[0].value, '\" -PublicDnsName ', reference('setupClusterPublicIP').outputs.fqdn.value)]"
        }
      }
    },
    {
      "apiVersion": "2017-05-10",
      "type": "Microsoft.Resources/deployments",
      "name": "[concat('create', parameters('computeNodeNamePrefix'), padLeft(string(copyIndex()), 3, '0'))]",
      "dependsOn": [
        "availabilitySetCopy",
        "Microsoft.Resources/deployments/updateVNetDNS"
      ],
      "copy": {
        "name": "CN",
        "count": "[parameters('computeNodeNumber')]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('computeNodeTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "nicName": {
            "value": "[concat(parameters('computeNodeNamePrefix'), padLeft(string(copyIndex()), 3, '0'), variables('nicNameSuffix'))]"
          },
          "subnetId": {
            "value": "[variables('subnetRef')]"
          },
          "vmName": {
            "value": "[concat(parameters('computeNodeNamePrefix'), padLeft(string(copyIndex()), 3, '0'))]"
          },
          "vmSize": {
            "value": "[parameters('computeNodeVMSize')]"
          },
          "storageAccountType": {
            "value": "[variables('storageAccountTypes')[parameters('computeNodeDiskType')]]"
          },
          "imgPublisher": {
            "value": "[parameters('computeNodeImagePublisher')]"
          },
          "imgOffer": {
            "value": "[parameters('computeNodeImageOffer')]"
          },
          "imgSku": {
            "value": "[parameters('computeNodeImageSku')]"
          },
          "imgVersion": {
            "value": "latest"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "availabilitySetName": {
            "value": "[concat(variables('availabilitySetNamePrefix'), padLeft(string(div(add(copyIndex(), 1), variables('nbrVMPerAvailabilitySet'))), 2, '0'))]"
          },
          "customData": {
            "value": "[variables('computeNodeCustomData')]"
          },
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          },
          "clusterName": {
            "value": "[parameters('clusterName')]"
          },
          "privateDomainName": {
            "value": "[parameters('privateDomainName')]"
          },
          "computeNodePostConfigScript": {
            "value": "[trim(parameters('computeNodePostConfigScript'))]"
          },
          "location":{
            "value":"[parameters('location')]"
          }
        }
      }
    }
  ],
  "outputs": {
    "clusterDNSName": {
      "type": "string",
      "value": "[reference('setupClusterPublicIP').outputs.fqdn.value]"
    }
  }
}

