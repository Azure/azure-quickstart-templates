{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "_artifactsLocation": {
            "type": "string",
            "defaultValue": "[deployment().properties.templateLink.uri]",
            "metadata": {
                "description": "The base URI where artifacts required by this template are located including a trailing '/'"
            }
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "The sasToken required to access _artifactsLocation. If your artifacts are stored on a public repo or public storage account you can leave this blank."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Azure region for all resources"
            }
        },
        "vnet1Name": {
            "type": "string",
            "defaultValue": "vnetgtw",
            "metadata": {
                "description": "name of the VNet where is deployed the Gateway Load Balancer"
            }
        },
        "vnet2Name": {
            "type": "string",
            "defaultValue": "vnetapp",
            "metadata": {
                "description": "name of the VNet where are deployed the Public Load Balancer and the application VMs"
            }
        },
        "vmSize": {
             "type": "string",
            "defaultValue": "Standard_DS1_v2",
            "metadata": {
                "description": "size of the Virtual Machine"
            }
        },
        "nva1Name": {
            "type": "string",
            "defaultValue": "nva1",
            "metadata": {
                "description": "name of the nva1 in the backend pool of the Gateway Load Balancer"
            }
        },
        "nva2Name": {
            "type": "string",
            "defaultValue": "nva2",
            "metadata": {
                "description": "name of the nva2 in the backend pool of the Gateway Load Balancer"
            }
        },
        "vmapp1Name": {
            "type": "string",
            "defaultValue": "vmapp1",
            "metadata": {
                "description": "name of the of the application VM1 in the backend pool of the Public Load Balancer"
            }
        },
         "vmapp2Name": {
            "type": "string",
            "defaultValue": "vmapp2",
            "metadata": {
                "description": "name of the of the application VM2 in the backend pool of the Public Load Balancer"
            }
        },
        "vmclient1Name":{
            "type": "string",
            "defaultValue": "vmclient1",
            "metadata": {
                "description": "name of the of VM client in the vnet2"
            }
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "VMs admin username"
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "VMs admin password"
            }
        },
        "storageAccountType": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS",
                "Premium_LRS"
            ],
            "metadata": {
                "description": "The storage account type for the disks of the VM"
            }
        },
        "bastionName": {
             "type": "string",
            "defaultValue": "bastion",
            "metadata": {
                "description": "name of the azure bastion"
            }
        }
    },
    "variables": {
        "location": "[parameters('location')]",
        "scriptFolder": "scripts",
        "elbName": "elb",
        "elbSkuName": "Standard",
        "elbPublicIpAddressName": "[concat(variables('elbName'),'-pubIP')]",
        "elbFrontEndName": "elbFrontEnd",
        "elbBackEndPoolName": "elbBackEndPool",
        "elbProbeName": "elbHealthProbe",
        "elbRule1frontendPort": 8081,
        "elbRule1backendPort": 8081,
        "elbRule2frontendPort": 8082,
        "elbRule2backendPort": 8082,
        "elbRule3frontendPort": 8083,
        "elbRule3backendPort": 8083,
        "elbRule4frontendPort": 8084,
        "elbRule4backendPort": 8084,
        "elbprobePort": 8080,

        "gwlbName": "gwlb",
        "gwlbFrontEndIP": "10.0.1.100",
        "gwlbFrontEndName": "lbFrontEndConf",
        "gwlbBackEndPoolName": "gwlbBackEndPool",
        "gwlbProbeName": "gwlbprobe",
        "gwlbprobePort": 8080,
        "vxlanTunnelInternalPort": 10800,
        "vxlanTunnelInternalIdentifier": 800,
        "vxlanTunnelExternalPort": 10801,
        "vxlanTunnelExternalIdentifier": 801,

        "vnet1Name": "[parameters('vnet1Name')]",
        "vnet2Name": "[parameters('vnet2Name')]",
        "vnet1": {
            "location": "[variables('location')]",
            "name": "[variables('vnet1Name')]",
            "addressSpacePrefix1": "10.0.1.0/24",
            "subnet1Name": "nvasubnet",
            "subnet2Name": "fesubnet",
            "subnet1Prefix": "10.0.1.0/28",
            "subnet2Prefix": "10.0.1.96/28",
            "peeringName": "[concat(variables('vnet1Name'),'To',variables('vnet2Name'))]"
        },
        "vnet2": {
            "location": "[variables('location')]",
            "name": "[variables('vnet2Name')]",
            "addressSpacePrefix1": "10.0.2.0/24",
            "subnet1Name": "appsubnet",
            "subnet2Name": "clientsubnet",
            "subnet3Name": "AzureBastionSubnet",
            "subnet1Prefix": "10.0.2.0/28",
            "subnet2Prefix": "10.0.2.32/28",
            "subnet3Prefix": "10.0.2.192/26",
            "peeringName": "[concat(variables('vnet2Name'),'To',variables('vnet1Name'))]"
        },

        "nginxScriptFileName": "nginx-serverblocks.sh",
        "nginxScriptURL": "[uri(parameters('_artifactsLocation'), concat(variables('scriptFolder'), '/', variables('nginxScriptFileName'), parameters('_artifactsLocationSasToken')))]",
        "nginxCommand": "[format('{0} {1} {2} {3} {4} {5}','bash', variables('nginxScriptFileName'), variables('elbRule1backendPort') ,variables('elbRule2backendPort'), variables('elbRule3backendPort') , variables('elbRule4backendPort') )]",

        "nvaScriptFileName": "nva.sh",
        "nvaScriptURL": "[uri(parameters('_artifactsLocation'), concat(variables('scriptFolder'), '/', variables('nvaScriptFileName'), parameters('_artifactsLocationSasToken')))]",
        "nvaCommand": "[format('{0} {1} -p {2} -v {3} -P {4} -V {5} -n {6}', 'bash', variables('nvaScriptFileName'), variables('vxlanTunnelInternalPort'), variables('vxlanTunnelInternalIdentifier'),variables('vxlanTunnelExternalPort'), variables('vxlanTunnelExternalIdentifier'),variables('gwlbFrontEndIP'))]",

        "adminUsername": "[parameters('adminUsername')]",
        "adminPassword": "[parameters('adminPassword')]",
        "nva1Name": "[parameters('nva1Name')]",
        "nva2Name": "[parameters('nva2Name')]",
        "nva1IpAddresses": "10.0.1.10",
        "nva2IpAddresses": "10.0.1.11",
        "vmapp1Name": "[parameters('vmapp1Name')]",
        "vmapp2Name": "[parameters('vmapp2Name')]",
        "vmapp1IpAddress": "10.0.2.5",
        "vmapp2IpAddress": "10.0.2.6",
        "vmclient1Name": "[parameters('vmclient1Name')]",
        "nvaArray": [
            {
                "location": "[variables('location')]",
                "vmName": "[variables('nva1Name')]",
                "publisher": "canonical",
                "offer": "0001-com-ubuntu-server-focal",
                "sku": "20_04-lts",
                "version": "latest",
                "vnetName": "[variables('vnet1').name]",
                "subnetName": "[variables('vnet1').subnet1Name]",
                "privateIP": "[variables('nva1IpAddresses')]",
                "enableIPForwarding": true,
                "acceleratedNetworking": false,
                "scriptURL": "[variables('nvaScriptURL')]",
                "scriptCommand": "[variables('nvaCommand')]",
                "nsgName": "[concat(variables('nva1Name'),'-nsg')]"
            },
            {
                "location": "[variables('location')]",
                "vmName": "[variables('nva2Name')]",
                "publisher": "canonical",
                "offer": "0001-com-ubuntu-server-focal",
                "sku": "20_04-lts",
                "version": "latest",
                "vnetName": "[variables('vnet1').name]",
                "subnetName": "[variables('vnet1').subnet1Name]",
                "privateIP": "[variables('nva2IpAddresses')]",
                "enableIPForwarding": true,
                "acceleratedNetworking": false,
                "scriptURL": "[variables('nvaScriptURL')]",
                "scriptCommand": "[variables('nvaCommand')]",
                "nsgName": "[concat(variables('nva2Name'),'-nsg')]"
            }
        ],
        "vmarray": [
            {
                "location": "[variables('location')]",
                "vmName": "[variables('vmapp1Name')]",
                "publisher": "canonical",
                "offer": "0001-com-ubuntu-server-focal",
                "sku": "20_04-lts",
                "version": "latest",
                "vnetName": "[variables('vnet2').name]",
                "subnetName": "[variables('vnet2').subnet1Name]",
                "privateIP": "[variables('vmapp1IpAddress')]",
                "enableIPForwarding": false,
                "acceleratedNetworking": false,
                "scriptURL": "[variables('nginxScriptURL')]",
                "scriptCommand": "[variables('nginxCommand')]",
                "nsgName": "[concat(variables('vmapp1Name'),'-nsg')]"
            },
            {
                "location": "[variables('location')]",
                "vmName": "[variables('vmapp2Name')]",
                "publisher": "canonical",
                "offer": "0001-com-ubuntu-server-focal",
                "sku": "20_04-lts",
                "version": "latest",
                "vNetName": "[variables('vnet2').name]",
                "subnetName": "[variables('vnet2').subnet1Name]",
                "privateIP": "[variables('vmapp2IpAddress')]",
                "enableIPForwarding": false,
                "acceleratedNetworking": false,
                "scriptURL": "[variables('nginxScriptURL')]",
                "scriptCommand": "[variables('nginxCommand')]",
                "nsgName": "[concat(variables('vmapp2Name'),'-nsg')]"
            },
            {
                "location": "[variables('location')]",
                "vmName": "[variables('vmclient1Name')]",
                "publisher": "canonical",
                "offer": "0001-com-ubuntu-server-focal",
                "sku": "20_04-lts",
                "version": "latest",
                "vNetName": "[variables('vnet2').name]",
                "subnetName": "[variables('vnet2').subnet2Name]",
                "privateIP": "10.0.2.40",
                "enableIPForwarding": false,
                "acceleratedNetworking": false,
                "scriptURL": "SKIP_CustomScript",
                "scriptCommand": "SKIP_CustomScript",
                "nsgName": "[concat(variables('vmclient1Name'),'-nsg')]"
            }
        ],
        "nvaCount": "[length(variables('nvaArray'))]",
        "vmCount": "[length(variables('vmArray'))]",
        "vmStorageAccountType": "[parameters('storageAccountType')]",
        "bastionName": "[parameters('bastionName')]",
        "bastionSubnetName": "[variables('vnet2').subnet3Name]",
        "bastionPublicIPAddressName": "[concat(variables('bastionName'),'-pubIP')]",
        "bastionSkuName": "Standard",
        "deploymentBastion": true
    },
    "resources": [
        {
            "comments": "Create vnet1",
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2022-01-01",
            "name": "[variables('vnet1').name]",
            "location": "[variables('vnet1').location]",
            "dependsOn": [],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('vnet1').addressSpacePrefix1]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('vnet1').subnet1Name]",
                        "properties": {
                            "addressPrefix": "[variables('vnet1').subnet1Prefix]"
                        }
                    },
                    {
                        "name": "[variables('vnet1').subnet2Name]",
                        "properties": {
                            "addressPrefix": "[variables('vnet1').subnet2Prefix]"
                        }
                    }
                ]
            }
        },
        {
            "comments": "Create vnet2",
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2020-11-01",
            "name": "[variables('vnet2').name]",
            "location": "[variables('vnet2').location]",
            "dependsOn": [],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('vnet2').addressSpacePrefix1]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('vnet2').subnet1Name]",
                        "properties": {
                            "addressPrefix": "[variables('vnet2').subnet1Prefix]"
                        }
                    },
                    {
                        "name": "[variables('vnet2').subnet2Name]",
                        "properties": {
                            "addressPrefix": "[variables('vnet2').subnet2Prefix]"
                        }
                    },
                    {
                        "name": "[variables('vnet2').subnet3Name]",
                        "properties": {
                            "addressPrefix": "[variables('vnet2').subnet3Prefix]"
                        }
                    }
                ]
            }
        },
        {
            "comments": "This is the peering from vnet1 to vnet2",
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "2022-01-01",
            "name": "[concat(variables('vnet1').name,'/',variables('vnet1').peeringName)]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId( 'Microsoft.Network/virtualNetworks', variables('vnet1').name)]",
                "[resourceId( 'Microsoft.Network/virtualNetworks', variables('vnet2').name)]"
            ],
            "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                    "id": "[resourceId( 'Microsoft.Network/virtualNetworks', variables('vnet2').name)]"
                }
            }
        },
        {
            "comments": "This is the peering from vnet2 to vnet1",
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "2022-01-01",
            "name": "[concat(variables('vnet2').name,'/',variables('vnet2').peeringName)]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId( 'Microsoft.Network/virtualNetworks', variables('vnet1').name)]",
                "[resourceId( 'Microsoft.Network/virtualNetworks', variables('vnet2').name)]"
            ],
            "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                    "id": "[resourceId( 'Microsoft.Network/virtualNetworks', variables('vnet1').name)]"
                }
            }
        },
        {
            "comments": "Gateway Load Balancer in vnet1",
            "type": "Microsoft.Network/loadBalancers",
            "apiVersion": "2022-01-01",
            "name": "[variables('gwlbName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnet1').name)]"
            ],
            "sku": {
                "name": "Gateway",
                "tier": "Regional"
            },
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "[variables('gwlbFrontEndName')]",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnet1').name, variables('vnet1').subnet2Name)]"
                            },
                            "privateIPAddress": "[variables('gwlbFrontEndIP')]",
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddressVersion": "IPv4"
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "[variables('gwlbBackEndPoolName')]",
                        "properties": {

                            "tunnelInterfaces": [
                                {
                                    "port": "[variables('vxlanTunnelInternalPort')]",
                                    "identifier": "[variables('vxlanTunnelInternalIdentifier')]",
                                    "protocol": "VXLAN",
                                    "type": "Internal"
                                },
                                {
                                    "port": "[variables('vxlanTunnelExternalPort')]",
                                    "identifier": "[variables('vxlanTunnelExternalIdentifier')]",
                                    "protocol": "VXLAN",
                                    "type": "External"
                                }
                            ]
                        }
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "lbAnyPortRule",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('gwlbName'),variables('gwlbFrontEndName'))]"
                            },
                            "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('gwlbName'),variables('gwlbBackEndPoolName'))]"
                            },
                            "probe": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('gwlbName'), variables('gwlbProbeName'))]"
                            },
                            "protocol": "All",
                            "frontendPort": 0,
                            "backendPort": 0,
                            "loadDistribution": "Default",
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4,
                            "disableOutboundSnat": true
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "[variables('gwlbProbeName')]",
                        "properties": {
                            "protocol": "Http",
                            "port": "[variables('gwlbprobePort')]",
                            "requestPath": "/",
                            "intervalInSeconds": 15,
                            "numberOfProbes": 2
                        }
                    }
                ]
            }
        },
        {
            "comments": "public IP of the Ëxternal Load Balancer",
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2022-01-01",
            "name": "[variables('elbPublicIpAddressName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "[variables('elbSkuName')]"
            },
            "properties": {
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Static"
            }
        },
        {
            "comments": "Create the Ëxternal Load Balancer",
            "type": "Microsoft.Network/loadBalancers",
            "apiVersion": "2022-01-01",
            "name": "[variables('elbName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "[variables('elbSkuName')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('elbPublicIpAddressName'))]",
                "[resourceId('Microsoft.Network/loadBalancers', variables('gwlbName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnet2').name)]"
            ],
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "[variables('elbFrontEndName')]",
                        "properties": {
                            "gatewayLoadBalancer": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('gwlbName'), variables('gwlbFrontEndName') )]"
                            },
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('elbPublicIpAddressName'))]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "[variables('elbBackEndPoolName')]"
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "[concat('http-', string(variables('elbRule1backendPort')) )]",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('elbName'), variables('elbFrontEndName'))]"
                            },
                            "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('elbName'), variables('elbBackendPoolName'))]"
                            },
                            "frontendPort": "[variables('elbRule1frontendPort')]",
                            "backendPort": "[variables('elbRule1backendPort')]",
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4,
                            "protocol": "Tcp",
                            "enableTcpReset": true,
                            "loadDistribution": "Default",
                            "disableOutboundSnat": true,
                            "probe": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('elbName'), variables('elbProbeName'))]"
                            }
                        }
                    },
                    {
                        "name": "[concat('http-', string(variables('elbRule2backendPort')) )]",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('elbName'), variables('elbFrontEndName'))]"
                            },
                            "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('elbName'), variables('elbBackendPoolName'))]"
                            },
                            "frontendPort": "[variables('elbRule2frontendPort')]",
                            "backendPort": "[variables('elbRule2backendPort')]",
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4,
                            "protocol": "Tcp",
                            "enableTcpReset": true,
                            "loadDistribution": "Default",
                            "disableOutboundSnat": true,
                            "probe": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('elbName'), variables('elbProbeName'))]"
                            }
                        }
                    },
                    {
                        "name": "[concat('http-', string(variables('elbRule3backendPort')) )]",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('elbName'), variables('elbFrontEndName'))]"
                            },
                            "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('elbName'), variables('elbBackendPoolName'))]"
                            },
                            "frontendPort": "[variables('elbRule3frontendPort')]",
                            "backendPort": "[variables('elbRule3backendPort')]",
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4,
                            "protocol": "Tcp",
                            "enableTcpReset": true,
                            "loadDistribution": "Default",
                            "disableOutboundSnat": true,
                            "probe": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('elbName'), variables('elbProbeName'))]"
                            }
                        }
                    },
                    {
                        "name": "[concat('http-', string(variables('elbRule4backendPort')) )]",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('elbName'), variables('elbFrontEndName'))]"
                            },
                            "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('elbName'), variables('elbBackendPoolName'))]"
                            },
                            "frontendPort": "[variables('elbRule4frontendPort')]",
                            "backendPort": "[variables('elbRule4backendPort')]",
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4,
                            "protocol": "Tcp",
                            "enableTcpReset": true,
                            "loadDistribution": "Default",
                            "disableOutboundSnat": true,
                            "probe": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('elbName'), variables('elbProbeName'))]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "[variables('elbProbeName')]",
                        "properties": {
                            "protocol": "Http",
                            "port": "[variables('elbprobePort')]",
                            "requestPath": "/",
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    }
                ]
            }
        },
        {
            "comments": "backed pool of the External Load Balancer",
            "type": "Microsoft.Network/loadBalancers/backendAddressPools",
            "apiVersion": "2022-01-01",
            "name": "[concat(variables('elbName'), '/', variables('elbBackEndPoolName'))]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/loadBalancers', variables('elbName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnet2').name)]"
            ],
            "properties": {
                "loadBalancerBackendAddresses": [
                    {
                        "name": "app1-address",
                        "properties": {
                            "virtualNetwork": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnet2').name)]"
                            },
                            "ipAddress": "[variables('vmapp1IpAddress')]"
                        }
                    },
                    {
                        "name": "app2-address",
                        "properties": {
                            "virtualNetwork": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnet2').name)]"
                            },
                            "ipAddress": "[variables('vmapp2IpAddress')]"
                        }
                    }
                ]
            }
        },
        {
            "comments": "Create the Network Security Groups applied to the NIC of the NVAs",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2022-01-01",
            "name": "[variables('nvaArray')[copyIndex()].nsgName]",
            "location": "[variables('nvaArray')[copyIndex()].location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH-rule",
                        "properties": {
                            "description": "allow SSH",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 500,
                            "direction": "Inbound"
                        }
                    }
                ]
            },
            "copy": {
                "name": "nsgNVACopy",
                "count": "[variables('nvaCount')]"
            }
        },
        {
            "comments": "Create public IPs for the NVAs",
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2022-01-01",
            "name": "[concat(variables('nvaArray')[copyIndex()].vmName,'-pubIP')]",
            "location": "[variables('nvaArray')[copyIndex()].location]",
            "sku": {
                "name": "Standard",
                "tier": "Regional"
            },
            "copy": {
                "name": "publicIpNVACopy",
                "count": "[variables('nvaCount')]"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            }
        },
        {
            "comments": "Create the NIC of the NVAs",
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2022-01-01",
            "name": "[concat( variables('nvaArray')[copyIndex()].vmName,'-NIC' )]",
            "location": "[variables('nvaArray')[copyIndex()].location]",
            "copy": {
                "name": "nicNVACopy",
                "count": "[variables('nvaCount')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnet1').name)]",
                "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('nvaArray')[copyIndex()].vmName,'-pubIP' ) )]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nvaArray')[copyIndex()].nsgName)]",
                "[resourceId('Microsoft.Network/loadBalancers', variables('gwlbName') )]"
            ],
            "properties": {
                "primary": true,
                "enableIPForwarding": "[variables('nvaArray')[copyIndex()].enableIPForwarding]",
                "enableAcceleratedNetworking": "[variables('nvaArray')[copyIndex()].acceleratedNetworking]",
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[variables('nvaArray')[copyIndex()].privateIP]",
                            "publicIPAddress": {
                                "id": "[resourceId( 'Microsoft.Network/publicIPAddresses',concat( variables('nvaArray')[copyIndex()].vmName,'-pubIP' )  )]"
                            },
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('nvaArray')[copyIndex()].vNetName, variables('nvaArray')[copyIndex()].subnetName)]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('gwlbName'),variables('gwlbBackEndPoolName'))]"
                                }
                            ]
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nvaArray')[copyIndex()].nsgName)]"
                }
            }
        },
        {
            "comments": "Create the NVAs",
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2022-03-01",
            "name": "[variables('nvaArray')[copyIndex()].vmName]",
            "location": "[variables('nvaArray')[copyIndex()].location]",
            "copy": {
                "name": "nvaCopy",
                "count": "[variables('nvaCount')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nvaArray')[copyIndex()].vmName,'-NIC')  )]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('nvaArray')[copyIndex()].vmName]",
                    "adminUsername": "[variables('adminUsername')]",
                    "adminPassword": "[variables('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('nvaArray')[copyIndex()].publisher]",
                        "offer": "[variables('nvaArray')[copyIndex()].offer]",
                        "sku": "[variables('nvaArray')[copyIndex()].sku]",
                        "version": "[variables('nvaArray')[copyIndex()].version]"
                    },
                    "osDisk": {
                        "createOption": "FromImage",
                        "name": "[concat(variables('nvaArray')[copyIndex()].vmName,'-OS')]",
                        "managedDisk": {
                            "storageAccountType": "[variables('vmStorageAccountType')]"
                        }
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat( variables('nvaArray')[copyIndex()].vmName,'-NIC' )  )]"
                        }
                    ]
                }
            }
        },
        {
            "comments": "custom script extension to configure the NVAs through a bash script",
            "condition": "[not( empty(variables('nvaArray')[copyIndex()].scriptCommand) )]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2022-03-01",
            "name": "[concat(variables('nvaArray')[copyIndex()].vmName, '/', 'vmCustomScript')]",
            "location": "[variables('nvaArray')[copyIndex()].location]",
            "copy": {
                "name": "nvaScriptCopy",
                "count": "[variables('nvaCount')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('nvaArray')[copyIndex()].vmName )]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.1",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[variables('nvaArray')[copyIndex()].scriptURL]"
                    ],
                    "commandToExecute": "[variables('nvaArray')[copyIndex()].scriptCommand]"
                }
            }
        },
        {
            "comments": "Create the Network Security rules to applied to the NIC of the application VMs",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2022-01-01",
            "name": "[variables('vmArray')[copyIndex()].nsgName]",
            "location": "[variables('vmArray')[copyIndex()].location]",
            "copy": {
                "name": "nsgAppCopy",
                "count": "[variables('vmCount')]"
            },
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH-rule",
                        "properties": {
                            "description": "allow SSH",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "[concat('Allow-',variables('elbRule1backendPort'))]",
                        "properties": {
                            "description": "allow web",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "[string(variables('elbRule1backendPort'))]",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 200,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "[concat('Allow-',variables('elbRule2backendPort'))]",
                        "properties": {
                            "description": "allow web",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "[string(variables('elbRule2backendPort'))]",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 250,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "[concat('Allow-',variables('elbRule3backendPort'))]",
                        "properties": {
                            "description": "allow web",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "[string(variables('elbRule3backendPort'))]",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 300,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "[concat('Allow-',variables('elbRule4backendPort'))]",
                        "properties": {
                            "description": "allow web",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "[string(variables('elbRule4backendPort'))]",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 350,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "comments": "Create public IPs for the application VMs",
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2022-01-01",
            "name": "[concat(variables('vmArray')[copyIndex()].vmName,'-pubIP')]",
            "location": "[variables('vmArray')[copyIndex()].location]",
            "sku": {
                "name": "Standard",
                "tier": "Regional"
            },
            "copy": {
                "name": "publicIpAppCopy",
                "count": "[variables('vmCount')]"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            }
        },
        {
            "comments": "NIC of the application VMs",
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2022-01-01",
            "name": "[concat( variables('vmArray')[copyIndex()].vmName,'-NIC' )]",
            "location": "[variables('vmArray')[copyIndex()].location]",
            "copy": {
                "name": "nicAppCopy",
                "count": "[variables('vmCount')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnet1').name)]",
                "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('vmArray')[copyIndex()].vmName,'-pubIP' ) )]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('vmArray')[copyIndex()].nsgName)]"
            ],
            "properties": {
                "primary": true,
                "enableIPForwarding": "[variables('vmArray')[copyIndex()].enableIPForwarding]",
                "enableAcceleratedNetworking": "[variables('vmArray')[copyIndex()].acceleratedNetworking]",
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[variables('vmArray')[copyIndex()].privateIP]",
                            "publicIPAddress": {
                                "id": "[resourceId( 'Microsoft.Network/publicIPAddresses',concat( variables('vmArray')[copyIndex()].vmName,'-pubIP' )  )]"
                            },
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vmArray')[copyIndex()].vNetName, variables('vmArray')[copyIndex()].subnetName)]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('vmArray')[copyIndex()].nsgName)]"
                }
            }
        },
        {
            "comments": "Create the application VMs in vnet2",
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2022-03-01",
            "name": "[variables('vmArray')[copyIndex()].vmName]",
            "location": "[variables('vmArray')[copyIndex()].location]",
            "copy": {
                "name": "appVMCopy",
                "count": "[variables('vmCount')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('vmArray')[copyIndex()].vmName,'-NIC')  )]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('vmArray')[copyIndex()].vmName]",
                    "adminUsername": "[variables('adminUsername')]",
                    "adminPassword": "[variables('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('vmArray')[copyIndex()].publisher]",
                        "offer": "[variables('vmArray')[copyIndex()].offer]",
                        "sku": "[variables('vmArray')[copyIndex()].sku]",
                        "version": "[variables('vmArray')[copyIndex()].version]"
                    },
                    "osDisk": {
                        "createOption": "FromImage",
                        "name": "[concat(variables('vmArray')[copyIndex()].vmName,'-OS')]",
                        "managedDisk": {
                            "storageAccountType": "[variables('vmStorageAccountType')]"
                        }
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat( variables('vmArray')[copyIndex()].vmName,'-NIC' )  )]"
                        }
                    ]
                }
            }
        },
        {
            "comments": "custom script extension to configure the application VMs through a bash script",
            "condition": "[not( equals(variables('vmArray')[copyIndex()].scriptCommand,'SKIP_CustomScript') )]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2022-03-01",
            "name": "[concat(variables('vmArray')[copyIndex()].vmName, '/', 'vmCustomScript')]",
            "location": "[variables('vmArray')[copyIndex()].location]",
            "copy": {
                "name": "appVMScriptCopy",
                "count": "[variables('vmCount')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('vmArray')[copyIndex()].vmName )]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.1",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[variables('vmArray')[copyIndex()].scriptURL]"
                    ],
                    "commandToExecute": "[variables('vmArray')[copyIndex()].scriptCommand]"
                }
            }
        },
        {
            "comments": "public IP of Azure Bastion",
            "condition": "[variables('deploymentBastion')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2022-01-01",
            "name": "[variables('bastionPublicIPAddressName')]",
            "location": "[variables('vnet2').location]",
            "sku": {
                "name": "[variables('bastionSkuName')]"
            },
            "properties": {
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Static"
            }
        },
        {
            "comments": "Deployment of the Azure Bastion in vnet2",
            "condition": "[variables('deploymentBastion')]",
            "type": "Microsoft.Network/bastionHosts",
            "apiVersion": "2022-01-01",
            "name": "[variables('bastionName')]",
            "location": "[variables('vnet2').location]",
            "sku": {
                "name": "Standard"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('bastionPublicIPAddressName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnet2').name)]"
            ],
            "properties": {
                "disableCopyPaste": false,
                "enableFileCopy": true,
                "enableIpConnect": true,
                "enableShareableLink": true,
                "enableTunneling": true,
                "ipConfigurations": [
                    {
                        "name": "IpConf",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('bastionPublicIPAddressName'))]"
                            },
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnet2').name, variables('bastionSubnetName'))]"
                            }
                        }
                    }
                ]
            }
        }
    ],
    "outputs": {
        "nginxScriptFileName": {
            "type": "string",
            "value": "[variables('nginxScriptFileName')]"
        },
        "nginxScriptURL": {
            "type": "string",
            "value": "[variables('nginxScriptURL')]"
        },
        "nginxCommand": {
            "type": "string",
            "value": "[variables('nginxCommand')]"
        },
        "nvaScriptFileName": {
            "type": "string",
            "value": "[variables('nvaScriptFileName')]"
        },
        "nvaScriptURL": {
            "type": "string",
            "value": "[variables('nvaScriptURL')]"
        },
        "nvaCommand": {
            "type": "string",
            "value": "[variables('nvaCommand')]"
        }
    }
}