{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "newStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Unique name of the new storage account that will be created to store virtual machine VHDs"
      }
    },
    "domainName": {
      "type": "string",
      "metadata": {
        "description": "Domain name of the publicly accessible Apache test web server"
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "Virtual machine administrator username"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Virtual machine administrator password"
      }
    },
    "memcachedVmSize": {
      "type": "string",
      "defaultValue": "Standard_A0",
      "metadata": {
        "description": "Size of the memcached virtual machine"
      }
    },
    "apacheVmSize": {
      "type": "string",
      "defaultValue": "Standard_A0",
      "metadata": {
        "description": "Size of the Apache virtual machine"
      }
    },
    "numberOfMemcachedInstances": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Number of memcached virtual machines to provision"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Virtual network name"
      }
    },
    "addressPrefix": {
      "type": "string",
      "defaultValue": "10.1.0.0/16",
      "metadata": {
        "description": "Virtual network address prefix"
      }
    },
    "subnetDmzPrefix": {
      "type": "string",
      "defaultValue": "10.1.0.0/24",
      "metadata": {
        "description": "Address prefix for the DMZ subnet"
      }
    },
    "subnetMemcachedPrefix": {
      "type": "string",
      "defaultValue": "10.1.1.0/24",
      "metadata": {
        "description": "Address prefix for the Memcached subnet"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
      },
      "defaultValue": "[deployment().properties.templateLink.uri]"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
      },
      "defaultValue": ""
    }
  },
  "variables": {
    "subnetMemcachedName": "[concat(parameters('virtualNetworkName'), '-subnet')]",
    "subnetDmzName": "[concat(parameters('virtualNetworkName'), '-dmzsubnet')]",
    "imageReference": {
      "publisher": "Canonical",
      "offer": "UbuntuServer",
      "sku": "14.04.5-LTS",
      "version": "latest"
    },
    "subnetDmzRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets/', parameters('virtualNetworkName'), variables('subnetDmzName'))]",
    "subnetMemcachedRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets/', parameters('virtualNetworkName'), variables('subnetMemcachedName'))]",
    "memcachedMachineNamePrefix": "memcached"
  },
  "resources": [
    {
      "apiVersion": "2021-01-01",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('newStorageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      }
    },
    {
      "apiVersion": "2020-11-01",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[parameters('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetDmzName')]",
            "properties": {
              "addressPrefix": "[parameters('subnetDmzPrefix')]"
            }
          },
          {
            "name": "[variables('subnetMemcachedName')]",
            "properties": {
              "addressPrefix": "[parameters('subnetMemcachedPrefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2020-11-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "publicip",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[parameters('domainName')]"
        }
      }
    },
    {
      "apiVersion": "2020-11-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "nicapache",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses','publicip')]"
              },
              "subnet": {
                "id": "[variables('subnetDmzRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2020-11-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('nicmemcached', copyindex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "memcachedNicLoop",
        "count": "[parameters('numberOfMemcachedInstances')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetMemcachedRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2020-12-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[parameters('domainName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', 'nicapache')]",
        "[resourceId('Microsoft.Storage/storageAccounts/', parameters('newStorageAccountName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('apacheVmSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('domainName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": "[variables('imageReference')]",
          "osDisk": {
            "name": "[concat(parameters('domainName'),'_OSDisk')]", 
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces','nicapache')]"
            }
          ]
        }
      }
    },
    {
      "apiVersion": "2020-12-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('memcachedMachineNamePrefix'), copyindex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "memcachedVmLoop",
        "count": "[parameters('numberOfMemcachedInstances')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', concat('nicmemcached', copyindex()))]",
        "[resourceId('Microsoft.Storage/storageAccounts/', parameters('newStorageAccountName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('memcachedVmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('memcachedMachineNamePrefix'), copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": "[variables('imageReference')]",
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://', parameters('newStorageAccountName'), '.blob.', environment().suffixes.storage, '/vhds/', variables('memcachedMachineNamePrefix'), copyindex(), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat('nicmemcached', copyindex()))]"
            }
          ]
        }
      }
    },
    {
      "apiVersion": "2020-12-01",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('memcachedMachineNamePrefix'), copyindex(), '/install_memcached')]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "extensionLoop",
        "count": "[parameters('numberOfMemcachedInstances')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', concat(variables('memcachedMachineNamePrefix'), copyindex()))]",
        "[resourceId('Microsoft.Compute/virtualMachines/', parameters('domainName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[uri(parameters('_artifactsLocation'), concat('install_memcached.sh', parameters('_artifactsLocationSasToken')))]"
          ],
          "commandToExecute": "[concat('sh install_memcached.sh ', ' ', concat(reference(resourceId('Microsoft.Network/networkInterfaces/', concat('nicmemcached', copyindex()))).ipConfigurations[0].properties.privateIPAddress, ' ', reference('nicapache').ipConfigurations[0].properties.privateIPAddress))]"
        }
      }
    },
    {
      "apiVersion": "2020-12-01",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('domainName'), '/install_apache')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', parameters('domainName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[uri(parameters('_artifactsLocation'), concat('install_apache.sh', parameters('_artifactsLocationSasToken')))]"
          ],
          "commandToExecute": "[concat('sh install_apache.sh ', parameters('numberOfMemcachedInstances'), ' ', parameters('subnetMemcachedPrefix'))]"
        }
      }
    }
  ],
  "outputs": {}
}
