{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "sapSystemId": {
      "type": "string",
      "maxLength": 3,
      "minLength": 3,
      "metadata": {
        "description": "SAP System ID."
      }
    },
    "osType": {
      "type": "string",
      "allowedValues": [ "Windows Server 2012 Datacenter", "Windows Server 2012 R2 Datacenter", "SLES 12" ],
      "defaultValue": "Windows Server 2012 R2 Datacenter",
      "metadata": {
        "description": "The type of the operating system you want to deploy."
      }
    },
    "sapSystemSize": {
      "type": "string",
      "allowedValues": [ "Small < 30.000 SAPS", "Medium < 70.000 SAPS", "Large < 180.000 SAPS", "X-Large < 250.000 SAPS" ],
      "defaultValue": "Small < 30.000 SAPS",
      "metadata": {
        "description": "The size of the SAP System you want to deploy."
      }
    },
    "systemAvailability": {
      "type": "string",
      "allowedValues": [ "HA", "Not HA" ],
      "defaultValue": "Not HA",
      "metadata": {
        "description": "Determines whether this is a high available deployment or not. A HA deployment contains multiple instances of single point of failures."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    }
  },
  "variables": {
    "github": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/sap-2-tier-marketplace-image/shared/",
    "images": {
      "Windows Server 2012 Datacenter": {
        "sku": "2012-Datacenter",
        "offer": "WindowsServer",
        "publisher": "MicrosoftWindowsServer",
        "OSType": "Windows"
      },
      "Windows Server 2012 R2 Datacenter": {
        "sku": "2012-R2-Datacenter",
        "offer": "WindowsServer",
        "publisher": "MicrosoftWindowsServer",
        "OSType": "Windows"
      },
      "SLES 11 SP4": {
        "sku": "11-SP4",
        "offer": "SLES",
        "publisher": "SUSE",
        "OSType": "Linux"
      },
      "SLES 12": {
        "sku": "12",
        "offer": "SLES",
        "publisher": "SUSE",
        "OSType": "Linux"
      }
    },
    "imageSku": "[variables('images')[parameters('osType')].sku]",
    "imagePublisher": "[variables('images')[parameters('osType')].publisher]",
    "imageOffer": "[variables('images')[parameters('osType')].offer]",

    "internalOSType": "[variables('images')[parameters('osType')].OSType]",
    "csExtension": {
      "Windows": {
        "Publisher": "Microsoft.Compute",
        "Name": "CustomScriptExtension",
        "Version": "1.7",
        "script": "[concat(variables('github'), 'configureSAPVM.ps1')]",
        "scriptCall": "powershell.exe -ExecutionPolicy bypass -File configureSAPVM.ps1"
      },
      "Linux": {
        "Publisher": "Microsoft.OSTCExtensions",
        "Name": "CustomScriptForLinux",
        "Version": "1.3",
        "script": "[concat(variables('github'), 'configureSAPVM.sh')]",
        "scriptCall": "sh configureSAPVM.sh"
      }
    },
    "cseExtPublisher": "[variables('csExtension')[variables('internalOSType')].Publisher]",
    "cseExtName": "[variables('csExtension')[variables('internalOSType')].Name]",
    "cseExtVersion": "[variables('csExtension')[variables('internalOSType')].Version]",
    "csExtensionScript": "[variables('csExtension')[variables('internalOSType')].script]",
    "csExtensionscriptCall": "[variables('csExtension')[variables('internalOSType')].scriptCall]",

    "storageTypes": {
      "Premium": "Premium_LRS",
      "Standard": "Standard_LRS"
    },

    "vmSizes": {
      "Small < 30.000 SAPS": {
        "Not HA": {
          "dbserversize": "Standard_GS2",
          "dbservercount": 1,
          "ascsserversize": "Standard_D13",
          "ascsservercount": 1,
          "diserversize": "Standard_D13",
          "diservercount": 1
        },
        "HA": {
          "dbserversize": "Standard_GS2",
          "dbservercount": 2,
          "ascsserversize": "Standard_D13",
          "ascsservercount": 2,
          "diserversize": "Standard_D13",
          "diservercount": 1
        }
      },
      "Medium < 70.000 SAPS": {
        "Not HA": {
          "dbserversize": "Standard_GS3",
          "dbservercount": 1,
          "ascsserversize": "Standard_D13",
          "ascsservercount": 1,
          "diserversize": "Standard_D13",
          "diservercount": 4
        },
        "HA": {
          "dbserversize": "Standard_GS3",
          "dbservercount": 2,
          "ascsserversize": "Standard_D13",
          "ascsservercount": 2,
          "diserversize": "Standard_D13",
          "diservercount": 4
        }
      },

      "Large < 180.000 SAPS": {
        "Not HA": {
          "dbserversize": "Standard_GS4",
          "dbservercount": 1,
          "ascsserversize": "Standard_D14",
          "ascsservercount": 1,
          "diserversize": "Standard_D14",
          "diservercount": 5
        },
        "HA": {
          "dbserversize": "Standard_GS4",
          "dbservercount": 2,
          "ascsserversize": "Standard_D11",
          "ascsservercount": 2,
          "diserversize": "Standard_D14",
          "diservercount": 6
        }
      },
      "X-Large < 250.000 SAPS": {
        "Not HA": {
          "dbserversize": "Standard_GS5",
          "dbservercount": 1,
          "ascsserversize": "Standard_D14",
          "ascsservercount": 1,
          "diserversize": "Standard_D14",
          "diservercount": 9
        },
        "HA": {
          "dbserversize": "Standard_GS5",
          "dbservercount": 2,
          "ascsserversize": "Standard_D11",
          "ascsservercount": 2,
          "diserversize": "Standard_D14",
          "diservercount": 10
        }
      }
    },
    "dbvmSize": "[variables('vmSizes')[parameters('sapSystemSize')][parameters('systemAvailability')].dbserversize]",
    "dbvmCount": "[variables('vmSizes')[parameters('sapSystemSize')][parameters('systemAvailability')].dbservercount]",
    "ascsvmSize": "[variables('vmSizes')[parameters('sapSystemSize')][parameters('systemAvailability')].ascsserversize]",
    "ascsvmCount": "[variables('vmSizes')[parameters('sapSystemSize')][parameters('systemAvailability')].ascsservercount]",
    "divmSize": "[variables('vmSizes')[parameters('sapSystemSize')][parameters('systemAvailability')].diserversize]",
    "divmCount": "[variables('vmSizes')[parameters('sapSystemSize')][parameters('systemAvailability')].diservercount]",
    "location": "[resourceGroup().location]",
    "sidlower": "[toLower(parameters('sapSystemId'))]",
    "vmName": "[variables('sidlower')]",
    "storageAccountName": "[concat(variables('sidlower'), uniqueString(variables('sidlower'), resourceGroup().id))]",
    "vnetName": "[concat(variables('sidlower'), '-vnet')]",
    "publicIPAddressType": "Dynamic",
    "addressPrefix": "10.0.0.0/16",
    "subnetName": "Subnet",
    "subnetPrefix": "10.0.0.0/24",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('vnetName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
    "nestedDeploymentName": "nestedTemplate",
    "nestedDeploymentNameASCS": "[concat(variables('nestedDeploymentName'), 'ascs')]",
    "nestedDeploymentNameDB": "[concat(variables('nestedDeploymentName'), 'db')]",
    "nestedDeploymentNameDI": "[concat(variables('nestedDeploymentName'), 'di')]",
    "nestedDeploymentNameProf": "[concat(variables('nestedDeploymentName'), 'prof')]",

    "publicIpNameASCS": "[concat(variables('sidlower'), '-pip-ascs')]",
    "avSetNameASCS": "[concat(variables('sidlower'), '-avset-ascs')]",
    "nestedDeploymentNameNSG": "[concat(variables('nestedDeploymentNameASCS'), 'nsg')]",
    "nsgNameASCS": "[concat(variables('sidlower'), '-nsg-ascs')]",
    "storageAccountNameASCS": "[concat('ascs', variables('storageAccountName'))]",
    "internalStorageTypeASCS": "Standard_LRS",
    "loadBalancerNameASCS": "[concat(variables('sidlower'), '-lb-ascs')]",
    "lbProbePortInternalASCS": 62300,
    "vmNameASCS": "[concat(variables('vmName'), '-ascs')]",
    "nicNameASCS": "[concat(variables('sidlower'), '-nic-ascs')]",

    "lbProbePortInternalDB": "62300",
    "avSetNameDB": "[concat(variables('sidlower'), '-avset-db')]",
    "storageAccountNameDB": "[concat('db', variables('storageAccountName'))]",
    "internalStorageTypeDB": "Premium_LRS",
    "loadBalancerNameDB": "[concat(variables('sidlower'), '-lb-db')]",
    "nicNameDB": "[concat(variables('sidlower'), '-nic-db')]",
    "vmNameDB": "[concat(variables('vmName'), '-db')]",

    "avSetNameDI": "[concat(variables('sidlower'), '-avset-di')]",
    "nicNameDI": "[concat(variables('sidlower'), '-nic-di')]",
    "storageAccountNameDI": "[concat('di', variables('storageAccountName'))]",
    "internalStorageTypeDI": "Standard_LRS",
    "vmNameDI": "[concat(variables('vmName'), '-di')]",
    "osDiskType": "image",
    "apiVerion": "2015-06-15",
    "apiVerionRm": "2015-01-01"
  },
  "resources": [

    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('vnetName')]",
      "apiVersion": "[variables('apiVerion')]",
      "location": "[variables('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      }
    },

    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('avSetNameASCS')]",
      "apiVersion": "[variables('apiVerion')]",
      "location": "[variables('location')]",
      "properties": {
        "platformFaultDomainCount": 3,
        "platformUpdateDomainCount": 20
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(variables('publicIpNameASCS'), '-', copyIndex())]",
      "apiVersion": "[variables('apiVerion')]",
      "copy": {
        "name": "nicLoop",
        "count": "[variables('ascsvmCount')]"
      },
      "location": "[variables('location')]",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
      }
    },
    {
      "apiVersion": "[variables('apiVerionRm')]",
      "name": "[concat(variables('nestedDeploymentNameNSG'), '-', copyIndex())]",
      "type": "Microsoft.Resources/deployments",
      "copy": {
        "name": "nicLoop",
        "count": "[variables('ascsvmCount')]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('github'), 'nsg.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "nsgName": { "value": "[concat(variables('nsgNameASCS'), '-', copyIndex())]" },
          "location": { "value": "[variables('location')]" },
          "osType": { "value": "[variables('internalOSType')]" }
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat(variables('storageAccountNameASCS'), copyIndex())]",
      "apiVersion": "[variables('apiVerion')]",
      "copy": {
        "name": "nicLoop",
        "count": "[variables('ascsvmCount')]"
      },
      "location": "[variables('location')]",
      "properties": {
        "accountType": "[variables('internalStorageTypeASCS')]"
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('loadBalancerNameASCS')]",
      "apiVersion": "[variables('apiVerion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]"
      ],
      "location": "[variables('location')]",
      "properties": {
        "frontendIPConfigurations": [
          {
            "properties": {
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "privateIPAllocationMethod": "Dynamic"
            },
            "name": "LoadBalancerFrontend"
          }
        ],
        "backendAddressPools": [
          {
            "name": "BackendPool1"
          }
        ],
        "loadBalancingRules": [
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/backendAddressPools/BackendPool1')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/probes/lbprobe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 445,
              "backendPort": 445,
              "idleTimeoutInMinutes": 15
            },
            "name": "lbrule445"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/backendAddressPools/BackendPool1')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/probes/lbprobe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 3200,
              "backendPort": 3200,
              "idleTimeoutInMinutes": 15
            },
            "name": "lbrule3200"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/backendAddressPools/BackendPool1')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/probes/lbprobe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 3300,
              "backendPort": 3300,
              "idleTimeoutInMinutes": 15
            },
            "name": "lbrule3300"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/backendAddressPools/BackendPool1')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/probes/lbprobe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 3600,
              "backendPort": 3600,
              "idleTimeoutInMinutes": 15
            },
            "name": "lbrule3600"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/backendAddressPools/BackendPool1')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/probes/lbprobe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 3900,
              "backendPort": 3900,
              "idleTimeoutInMinutes": 15
            },
            "name": "lbrule3900"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/backendAddressPools/BackendPool1')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/probes/lbprobe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 50013,
              "backendPort": 50013,
              "idleTimeoutInMinutes": 15
            },
            "name": "lbrule50013"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/backendAddressPools/BackendPool1')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/probes/lbprobe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 50014,
              "backendPort": 50014,
              "idleTimeoutInMinutes": 15
            },
            "name": "lbrule50014"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/backendAddressPools/BackendPool1')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/probes/lbprobe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 50016,
              "backendPort": 50016,
              "idleTimeoutInMinutes": 15
            },
            "name": "lbrule50016"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/backendAddressPools/BackendPool1')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/probes/lbprobe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 51013,
              "backendPort": 51013,
              "idleTimeoutInMinutes": 15
            },
            "name": "lbrule51013"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/backendAddressPools/BackendPool1')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/probes/lbprobe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 51014,
              "backendPort": 51014,
              "idleTimeoutInMinutes": 15
            },
            "name": "lbrule51014"
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": "[variables('lbProbePortInternalASCS')]",
              "intervalInSeconds": 10,
              "numberOfProbes": 2
            },
            "name": "lbprobe"
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicNameASCS'), '-', copyIndex())]",
      "apiVersion": "[variables('apiVerion')]",
      "copy": {
        "name": "nicLoop",
        "count": "[variables('ascsvmCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIpNameASCS'), '-', copyIndex())]",
        "[concat('Microsoft.Resources/deployments/', variables('nestedDeploymentNameNSG'), '-', copyIndex())]",
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerNameASCS'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]"
      ],
      "location": "[variables('location')]",
      "properties": {
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('nsgNameASCS'), '-', copyIndex()))]"
        },
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('publicIpNameASCS'), '-', copyIndex()))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameASCS')), '/backendAddressPools/BackendPool1')]"
                }
              ]
            }
          }
        ]
      }
    },

    {
      "apiVersion": "[variables('apiVerionRm')]",
      "name": "[concat(variables('nestedDeploymentNameProf'), '-ascs-', copyIndex())]",
      "type": "Microsoft.Resources/deployments",
      "copy": {
        "name": "nicLoop",
        "count": "[variables('ascsvmCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', concat(variables('storageAccountNameASCS'), copyIndex()))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('github'), 'os-disk-parts.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "imageSku": { "value": "[variables('imageSku')]" },
          "imagePublisher": { "value": "[variables('imagePublisher')]" },
          "imageOffer": { "value": "[variables('imageOffer')]" },
          "userImageVhdUri": { "value": "" },
          "userImageStorageAccount": { "value": "" },
          "osDiskVhdUri": { "value": "" },
          "osDiskType": { "value": "[variables('osDiskType')]" },
          "osType": { "value": "[variables('internalOSType')]" },
          "sidlower": { "value": "[variables('sidlower')]" },
          "vmName": { "value": "[concat(variables('vmNameASCS'), '-', copyIndex())]" },
          "storageAccountName": { "value": "[concat(variables('storageAccountNameASCS'), copyIndex())]" }
        }
      }
    },
    {
      "apiVersion": "[variables('apiVerionRm')]",
      "name": "[concat(variables('nestedDeploymentNameASCS'), '-', copyIndex())]",
      "type": "Microsoft.Resources/deployments",
      "copy": {
        "name": "nicLoop",
        "count": "[variables('ascsvmCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicNameASCS'), '-', copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('avSetNameASCS'))]",
        "[concat('Microsoft.Resources/deployments/', variables('nestedDeploymentNameProf'), '-ascs-', copyIndex())]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('github'), 'server-Standard_multiNIC_No.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "imageReference": { "value": "[reference(concat(variables('nestedDeploymentNameProf'), '-ascs-', copyIndex())).outputs.imageReference.value]" },
          "osDisk": { "value": "[reference(concat(variables('nestedDeploymentNameProf'), '-ascs-', copyIndex())).outputs.osDisk.value]" },
          "osDiskType": { "value": "[variables('osDiskType')]" },
          "location": { "value": "[variables('location')]" },
          "sidlower": { "value": "[variables('sidlower')]" },
          "vmName": { "value": "[concat(variables('vmNameASCS'), '-', copyIndex())]" },
          "vmSize": { "value": "[variables('ascsvmSize')]" },
          "adminUsername": { "value": "[parameters('adminUsername')]" },
          "adminPassword": { "value": "[parameters('adminPassword')]" },
          "cseExtPublisher": { "value": "[variables('cseExtPublisher')]" },
          "cseExtName": { "value": "[variables('cseExtName')]" },
          "cseExtVersion": { "value": "[variables('cseExtVersion')]" },
          "csExtensionScript": { "value": "[variables('csExtensionScript')]" },
          "csExtensionscriptCall": { "value": "[variables('csExtensionscriptCall')]" },
          "avSetName": { "value": "[variables('avSetNameASCS')]" },
          "storageAccountName": { "value": "[concat(variables('storageAccountNameASCS'), copyIndex())]" },
          "nicName": { "value": "[concat(variables('nicNameASCS'), '-', copyIndex())]" }
        }
      }
    },


    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('avSetNameDB')]",
      "apiVersion": "[variables('apiVerion')]",
      "location": "[variables('location')]",
      "properties": {
        "platformFaultDomainCount": 3,
        "platformUpdateDomainCount": 20
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountNameDB')]",
      "apiVersion": "[variables('apiVerion')]",
      "location": "[variables('location')]",
      "properties": {
        "accountType": "[variables('internalStorageTypeDB')]"
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('loadBalancerNameDB')]",
      "apiVersion": "[variables('apiVerion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]"
      ],
      "location": "[variables('location')]",
      "properties": {
        "frontendIPConfigurations": [
          {
            "properties": {
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "privateIPAllocationMethod": "Dynamic"
            },
            "name": "LoadBalancerFrontend"
          }
        ],
        "backendAddressPools": [
          {
            "name": "BackendPool1"
          }
        ],
        "loadBalancingRules": [
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameDB')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameDB')), '/backendAddressPools/BackendPool1')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameDB')), '/probes/lbprobe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 1433,
              "backendPort": 1433
            },
            "name": "lbrule1433"
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": "[variables('lbProbePortInternalDB')]",
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            },
            "name": "lbprobe"
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicNameDB'), '-', copyIndex())]",
      "apiVersion": "[variables('apiVerion')]",
      "copy": {
        "name": "nicLoop",
        "count": "[variables('dbvmCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerNameDB'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]"
      ],
      "location": "[variables('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerNameDB')), '/backendAddressPools/BackendPool1')]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVerionRm')]",
      "name": "[concat(variables('nestedDeploymentNameProf'), '-db-', copyIndex())]",
      "type": "Microsoft.Resources/deployments",
      "copy": {
        "name": "nicLoop",
        "count": "[variables('dbvmCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountNameDB'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('github'), 'os-disk-parts.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "imageSku": { "value": "[variables('imageSku')]" },
          "imagePublisher": { "value": "[variables('imagePublisher')]" },
          "imageOffer": { "value": "[variables('imageOffer')]" },
          "userImageVhdUri": { "value": "" },
          "userImageStorageAccount": { "value": "" },
          "osDiskVhdUri": { "value": "" },
          "osDiskType": { "value": "[variables('osDiskType')]" },
          "osType": { "value": "[variables('internalOSType')]" },
          "sidlower": { "value": "[variables('sidlower')]" },
          "vmName": { "value": "[concat(variables('vmNameDB'), '-', copyIndex())]" },
          "storageAccountName": { "value": "[variables('storageAccountNameDB')]" }
        }
      }
    },
    {
      "apiVersion": "[variables('apiVerionRm')]",
      "name": "[concat(variables('nestedDeploymentNameDB'), '-', copyIndex())]",
      "copy": {
        "name": "nicLoop",
        "count": "[variables('dbvmCount')]"
      },
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicNameDB'), '-', copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('avSetNameDB'))]",
        "[concat('Microsoft.Resources/deployments/', variables('nestedDeploymentNameProf'), '-db-', copyIndex())]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('github'), 'db-server-', variables('dbvmSize'), '_multiNIC_No.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "imageReference": { "value": "[reference(concat(variables('nestedDeploymentNameProf'), '-db-', copyIndex())).outputs.imageReference.value]" },
          "osDisk": { "value": "[reference(concat(variables('nestedDeploymentNameProf'), '-db-', copyIndex())).outputs.osDisk.value]" },
          "osDiskType": { "value": "[variables('osDiskType')]" },
          "location": { "value": "[variables('location')]" },
          "sidlower": { "value": "[variables('sidlower')]" },
          "vmName": { "value": "[concat(variables('vmNameDB'), '-', copyIndex())]" },
          "vmSize": { "value": "[variables('dbvmSize')]" },
          "adminUsername": { "value": "[parameters('adminUsername')]" },
          "adminPassword": { "value": "[parameters('adminPassword')]" },
          "cseExtPublisher": { "value": "[variables('cseExtPublisher')]" },
          "cseExtName": { "value": "[variables('cseExtName')]" },
          "cseExtVersion": { "value": "[variables('cseExtVersion')]" },
          "csExtensionScript": { "value": "[variables('csExtensionScript')]" },
          "csExtensionscriptCall": { "value": "[variables('csExtensionscriptCall')]" },
          "avSetName": { "value": "[variables('avSetNameDB')]" },
          "storageAccountName": { "value": "[variables('storageAccountNameDB')]" },
          "nicName": { "value": "[concat(variables('nicNameDB'), '-', copyIndex())]" }
        }
      }
    },

    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('avSetNameDI')]",
      "apiVersion": "[variables('apiVerion')]",
      "location": "[variables('location')]",
      "properties": {
        "platformFaultDomainCount": 3,
        "platformUpdateDomainCount": 20
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicNameDI'), '-', copyindex())]",
      "apiVersion": "[variables('apiVerion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]"
      ],
      "copy": {
        "name": "nicLoop",
        "count": "[variables('divmCount')]"
      },
      "location": "[variables('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat(variables('storageAccountNameDI'), copyindex()) ]",
      "apiVersion": "[variables('apiVerion')]",
      "copy": {
        "name": "nicLoop",
        "count": "[add(div(variables('divmCount'), 3), 1)]"
      },
      "location": "[variables('location')]",
      "properties": {
        "accountType": "[variables('internalStorageTypeDI')]"
      }
    },
    {
      "apiVersion": "[variables('apiVerionRm')]",
      "name": "[concat(variables('nestedDeploymentNameProf'), '-di-', copyIndex())]",
      "type": "Microsoft.Resources/deployments",
      "copy": {
        "name": "nicLoop",
        "count": "[variables('divmCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountNameDI'), div(copyIndex(), 3))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('github'), 'os-disk-parts.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "imageSku": { "value": "[variables('imageSku')]" },
          "imagePublisher": { "value": "[variables('imagePublisher')]" },
          "imageOffer": { "value": "[variables('imageOffer')]" },
          "userImageVhdUri": { "value": "" },
          "userImageStorageAccount": { "value": "" },
          "osDiskVhdUri": { "value": "" },
          "osDiskType": { "value": "[variables('osDiskType')]" },
          "osType": { "value": "[variables('internalOSType')]" },
          "sidlower": { "value": "[variables('sidlower')]" },
          "vmName": { "value": "[concat(variables('vmNameDI'), '-', copyIndex())]" },
          "storageAccountName": { "value": "[concat(variables('storageAccountNameDI'), div(copyIndex(), 3))]" }
        }
      }
    },
    {
      "apiVersion": "[variables('apiVerionRm')]",
      "name": "[concat(variables('nestedDeploymentNameDI'), '-', copyIndex())]",
      "type": "Microsoft.Resources/deployments",
      "copy": {
        "name": "nicLoop",
        "count": "[variables('divmCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicNameDI'), '-', copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('avSetNameDI'))]",
        "[concat('Microsoft.Resources/deployments/', variables('nestedDeploymentNameProf'), '-di-', copyIndex())]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('github'), 'server-Standard_multiNIC_No.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "imageReference": { "value": "[reference(concat(variables('nestedDeploymentNameProf'), '-di-', copyIndex())).outputs.imageReference.value]" },
          "osDisk": { "value": "[reference(concat(variables('nestedDeploymentNameProf'), '-di-', copyIndex())).outputs.osDisk.value]" },
          "osDiskType": { "value": "[variables('osDiskType')]" },
          "location": { "value": "[variables('location')]" },
          "sidlower": { "value": "[variables('sidlower')]" },
          "vmName": { "value": "[concat(variables('vmNameDI'), '-', copyIndex())]" },
          "vmSize": { "value": "[variables('ascsvmSize')]" },
          "adminUsername": { "value": "[parameters('adminUsername')]" },
          "adminPassword": { "value": "[parameters('adminPassword')]" },
          "cseExtPublisher": { "value": "[variables('cseExtPublisher')]" },
          "cseExtName": { "value": "[variables('cseExtName')]" },
          "cseExtVersion": { "value": "[variables('cseExtVersion')]" },
          "csExtensionScript": { "value": "[variables('csExtensionScript')]" },
          "csExtensionscriptCall": { "value": "[variables('csExtensionscriptCall')]" },
          "avSetName": { "value": "[variables('avSetNameDI')]" },
          "storageAccountName": { "value": "[concat(variables('storageAccountNameDI'), div(copyIndex(), 3))]" },
          "nicName": { "value": "[concat(variables('nicNameDI'), '-', copyIndex())]" }
        }
      }
    }
  ]
}
