{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "existingFunctionAppName": {
            "type": "string",
            "metadata": {
                "description": "The name of the function container in which the function has to be created."
            }
        },
        "functionName": {
            "type": "string",
            "defaultValue": "transformfunction",
            "metadata": {
                "description": "The name of the function."
            }
        }
    },
    "resources": [{
        "apiVersion": "2015-08-01",
        "name": "[concat(parameters('existingFunctionAppName'),'/', parameters('functionName'))]",
        "type": "Microsoft.Web/sites/functions",
        "properties": {
            "config": {
                "bindings": [{
                    "name": "req",
                    "webHookType": "genericJson",
                    "direction": "in",
                    "type": "httpTrigger"
                }, {
                    "name": "res",
                    "direction": "out",
                    "type": "http"
                }]
            },
            "files": {
                "IntegrationXsltException.csx": "//-----------------------------------------------------------------------\r\n// <copyright file=\"IntegrationXsltException.csx\" company=\"Microsoft\">\r\n//      All rights reserved.\r\n// </copyright>\r\n//-----------------------------------------------------------------------\r\n\r\nusing System;\r\nusing System.Net;\r\n\r\n[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Design\", \"CA1032:ImplementStandardExceptionConstructors\", Justification = \"Not needed.\")]\r\n[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Usage\", \"CA2237:MarkISerializableTypesWithSerializable\", Justification = \"Not needed.\")]\r\npublic class IntegrationXsltException : Exception\r\n{\r\n    public IntegrationXsltException()\r\n    {\r\n    }\r\n\r\n    public IntegrationXsltException(string message) : base(message, null)\r\n    {\r\n        this.StatusCode = HttpStatusCode.InternalServerError;\r\n    }\r\n\r\n    public IntegrationXsltException(HttpStatusCode statusCode, string message)\r\n        : base(message)\r\n    {\r\n        this.StatusCode = statusCode;\r\n    }\r\n\r\n    public IntegrationXsltException(HttpStatusCode statusCode, string message, Exception innerException)\r\n        : base(message, innerException)\r\n    {\r\n        this.StatusCode = statusCode;\r\n    }\r\n\r\n    public HttpStatusCode StatusCode { get; set; }\r\n}",
                "ContentHash.csx": "//-----------------------------------------------------------------------\r\n// <copyright file=\"ContentHash.csx\" company=\"Microsoft\">\r\n//      All rights reserved.\r\n// </copyright>\r\n//-----------------------------------------------------------------------\r\n\r\nusing Newtonsoft.Json;\r\n\r\npublic class ContentHash\r\n{\r\n    public string Algorithm { get; set; }\r\n\r\n    public string Value { get; set; }\r\n}\r\n",
                "XsltHelper.csx": "//-----------------------------------------------------------------------\r\n// <copyright file=\"XsltHelper.csx\" company=\"Microsoft\">\r\n//      All rights reserved.\r\n// </copyright>\r\n//-----------------------------------------------------------------------\r\n\r\n#load \"ContentEnvelope.csx\"\r\n#load \"ContentHash.csx\"\r\n#load \"ContentLinkDefinition.csx\"\r\n#load \"HttpRequestMessageExtensions.csx\"\r\n#load \"IntegrationXsltException.csx\"\r\n#load \"Validation.csx\"\r\n#load \"XsltInput.csx\"\r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Globalization;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Net;\r\nusing System.Net.Http;\r\nusing System.Runtime.Caching;\r\nusing System.Text;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Xml;\r\nusing System.Xml.Linq;\r\nusing System.Xml.Xsl;\r\nusing Newtonsoft.Json;\r\nusing Newtonsoft.Json.Linq;\r\n\r\npublic static class XsltHelper\r\n{\r\n\tprivate static readonly MemoryCache CompiledTransformCache = new MemoryCache(\"CompiledTransformCache\");\r\n\r\n\tprivate static readonly CacheItemPolicy CachePolicy = new CacheItemPolicy()\r\n\t{\r\n\t\tSlidingExpiration = new TimeSpan(0, 20, 0)\r\n\t};\r\n\r\n\tpublic static async Task<HttpResponseMessage> Transform(HttpRequestMessage request, CancellationToken cancellationToken)\r\n\t{\r\n\t\tvar transformRequest = await XsltHelper.GetXsltInput(request, cancellationToken).ConfigureAwait(continueOnCapturedContext: false);\r\n\r\n\t\tValidation.XslTransformRequest(transformRequest);\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tusing (var mapContent = await XsltHelper.GetMapContent(transformRequest.MapContentLink.Uri, cancellationToken).ConfigureAwait(continueOnCapturedContext: false))\r\n\t\t\tusing (var seekableMapContent = new MemoryStream())\r\n\t\t\t{\r\n\t\t\t\tawait mapContent.CopyToAsync(seekableMapContent).ConfigureAwait(continueOnCapturedContext: false);\r\n\r\n\t\t\t\tseekableMapContent.Position = 0;\r\n\r\n\t\t\t\t// NOTE(rarayudu): Using stream readers to take care of encoding issues.\r\n\t\t\t\t// In logic apps RP, we are always storing the schema/map contents using UTF8 encdoing. This will create problems for XMLs which have encoding of type other than UTF8.\r\n\t\t\t\t// Another possibility is to read the content as string and use the StringReader. - Not following that as don't want to load the entire string incase if the schema is large.\r\n\t\t\t\tusing (var transformStreamReader = new StreamReader(stream: seekableMapContent, detectEncodingFromByteOrderMarks: true))\r\n\t\t\t\t{\r\n\t\t\t\t\tvar arguments = XsltHelper.GetXsltArguments(\r\n\t\t\t\t\t\txsltParameters: transformRequest.XsltParameters,\r\n\t\t\t\t\t\ttransformStreamReader: transformStreamReader);\r\n\r\n\t\t\t\t\tvar inputXmlContent = transformRequest.Content.Type == JTokenType.String\r\n\t\t\t\t\t\t? Encoding.UTF8.GetBytes(transformRequest.Content.ToObject<string>())\r\n\t\t\t\t\t\t: transformRequest.Content.ToObject<ContentEnvelope>().DecodeAsBytes();\r\n\r\n\t\t\t\t\tvar settings = new XsltSettings(enableDocumentFunction: true, enableScript: true);\r\n\r\n\t\t\t\t\t// NOTE(rarayudu): Set the transform stream reader stream postion to start for the XslCompiledTransform.\r\n\t\t\t\t\ttransformStreamReader.BaseStream.Position = 0;\r\n\r\n\t\t\t\t\tusing (var inputXmlStream = new MemoryStream(inputXmlContent))\r\n\t\t\t\t\tusing (var inputXmlStreamReader = new StreamReader(stream: inputXmlStream, detectEncodingFromByteOrderMarks: true))\r\n\t\t\t\t\tusing (var inputXmlReader = XmlReader.Create(inputXmlStreamReader))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar xsltCompiler = GetCompiledTransformFromCache(mapAbsolutePath: transformRequest.MapContentLink.Uri.AbsolutePath, mapVersion: transformRequest.MapContentLink.ContentVersion);\r\n\r\n\t\t\t\t\t\tif (xsltCompiler == null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tusing (var transformXmlReader = XmlReader.Create(transformStreamReader))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\txsltCompiler = new XslCompiledTransform();\r\n\t\t\t\t\t\t\t\txsltCompiler.Load(transformXmlReader, settings, new XmlUrlResolver());\r\n\r\n\t\t\t\t\t\t\t\tXsltHelper.CompiledTransformCache.Set(\r\n\t\t\t\t\t\t\t\t\tkey: transformRequest.MapContentLink.Uri.AbsolutePath,\r\n\t\t\t\t\t\t\t\t\tvalue: new TransformCachedItem(mapVersion: transformRequest.MapContentLink.ContentVersion, compiledTransform: xsltCompiler),\r\n\t\t\t\t\t\t\t\t\tpolicy: CachePolicy);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tusing (var outputStream = new MemoryStream())\r\n\t\t\t\t\t\tusing (var outputXmlWriter = XmlWriter.Create(outputStream))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\txsltCompiler.Transform(inputXmlReader, arguments, outputXmlWriter);\r\n\r\n\t\t\t\t\t\t\treturn HttpRequestMessageExtensions.CreateXmlResponse(\r\n\t\t\t\t\t\t\t\trequest: request,\r\n\t\t\t\t\t\t\t\tstatusCode: HttpStatusCode.OK,\r\n\t\t\t\t\t\t\t\tcontent: new ByteArrayContent(outputStream.ToArray()));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (XmlException ex)\r\n\t\t{\r\n\t\t\tthrow new IntegrationXsltException(\r\n\t\t\t\tstatusCode: HttpStatusCode.BadRequest,\r\n\t\t\t\tmessage: string.Format(CultureInfo.InvariantCulture, \"An error occurred while processing input xml. '{0}'\", ex.Message),\r\n\t\t\t\tinnerException: ex);\r\n\t\t}\r\n\t\tcatch (XsltException ex)\r\n\t\t{\r\n\t\t\tthrow new IntegrationXsltException(\r\n\t\t\t\tstatusCode: HttpStatusCode.BadRequest,\r\n\t\t\t\tmessage: string.Format(CultureInfo.InvariantCulture, \"An error occurred while processing map. '{0}'\", ex.Message),\r\n\t\t\t\tinnerException: ex);\r\n\t\t}\r\n\t\tcatch (IntegrationXsltException)\r\n\t\t{\r\n\t\t\tXsltHelper.CompiledTransformCache.Remove(key: transformRequest.MapContentLink.Uri.AbsolutePath);\r\n\r\n\t\t\tthrow;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static async Task<XsltInput> GetXsltInput(HttpRequestMessage request, CancellationToken cancellationToken)\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\treturn await request.Content.ReadAsAsync<XsltInput>(cancellationToken).ConfigureAwait(continueOnCapturedContext: false);\r\n\t\t}\r\n\t\tcatch (Exception ex)\r\n\t\t{\r\n\t\t\tif (ex is FormatException || ex is ArgumentException || ex is JsonException)\r\n\t\t\t{\r\n\t\t\t\tthrow new IntegrationXsltException(\r\n\t\t\t\t\tstatusCode: HttpStatusCode.BadRequest,\r\n\t\t\t\t\tmessage: string.Format(CultureInfo.InvariantCulture, \"The request content is not valid and could not be deserialized: '{0}'\", ex.Message),\r\n\t\t\t\t\tinnerException: ex);\r\n\t\t\t}\r\n\r\n\t\t\tthrow;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static async Task<Stream> GetMapContent(Uri mapContentLink, CancellationToken cancellationToken)\r\n\t{\r\n\t\tvar httpClient = new HttpClient();\r\n\t\tvar response = await httpClient.GetAsync(mapContentLink, cancellationToken).ConfigureAwait(continueOnCapturedContext: false);\r\n\r\n\t\tif (response.StatusCode != HttpStatusCode.OK)\r\n\t\t{\r\n\t\t\tvar responseContent = response.Content != null\r\n\t\t\t\t? await response.Content.ReadAsStringAsync().ConfigureAwait(continueOnCapturedContext: false)\r\n\t\t\t\t: string.Empty;\r\n\r\n\t\t\tthrow new IntegrationXsltException(\r\n\t\t\t\tstatusCode: response.StatusCode,\r\n\t\t\t\tmessage: string.Format(CultureInfo.InvariantCulture, \"An error occurred while fetching the map content using the content link: '{0}'. Error: '{1}'\", mapContentLink, responseContent));\r\n\t\t}\r\n\r\n\t\treturn await response.Content.ReadAsStreamAsync().ConfigureAwait(continueOnCapturedContext: false);\r\n\t}\r\n\r\n\tprivate static XsltArgumentList GetXsltArguments(IDictionary<string, string> xsltParameters, TextReader transformStreamReader)\r\n\t{\r\n\t\tvar arguments = new XsltArgumentList();\r\n\t\tif (xsltParameters != null)\r\n\t\t{\r\n\t\t\tforeach (KeyValuePair<string, string> parameter in xsltParameters)\r\n\t\t\t{\r\n\t\t\t\tif (parameter.Key.Contains(':'))\r\n\t\t\t\t{\r\n\t\t\t\t\tvar splitArgument = parameter.Key.Split(':');\r\n\t\t\t\t\tif (splitArgument.Length == 2)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\targuments.AddParam(splitArgument[1], GetParameterNamespace(splitArgument[0], transformStreamReader), parameter.Value ?? string.Empty);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\targuments.AddParam(parameter.Key, string.Empty, parameter.Value ?? string.Empty);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\targuments.AddParam(parameter.Key, string.Empty, parameter.Value ?? string.Empty);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn arguments;\r\n\t}\r\n\r\n\tprivate static string GetParameterNamespace(string namespacePrefix, TextReader transformStreamReader)\r\n\t{\r\n\t\tvar xsltDocument = XDocument.Load(transformStreamReader);\r\n\t\tif (xsltDocument.Root != null)\r\n\t\t{\r\n\t\t\tvar namespaceOfPrefix = xsltDocument.Root.GetNamespaceOfPrefix(namespacePrefix);\r\n\t\t\treturn namespaceOfPrefix != null ? namespaceOfPrefix.NamespaceName : string.Empty;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthrow new IntegrationXsltException(HttpStatusCode.BadRequest, \"The provided map is not valid.\");\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static XslCompiledTransform GetCompiledTransformFromCache(string mapAbsolutePath, string mapVersion)\r\n\t{\r\n\t\tif (CompiledTransformCache.Contains(mapAbsolutePath))\r\n\t\t{\r\n\t\t\tvar cachedData = (TransformCachedItem)CompiledTransformCache.Get(key: mapAbsolutePath);\r\n\r\n\t\t\tif (cachedData.MapVersion == mapVersion)\r\n\t\t\t{\r\n\t\t\t\treturn cachedData.CompiledTransform;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate class TransformCachedItem\r\n\t{\r\n\t\tpublic TransformCachedItem(string mapVersion, XslCompiledTransform compiledTransform)\r\n\t\t{\r\n\t\t\tthis.MapVersion = mapVersion;\r\n\t\t\tthis.CompiledTransform = compiledTransform;\r\n\t\t}\r\n\r\n\t\tpublic string MapVersion { get; set; }\r\n\r\n\t\tpublic XslCompiledTransform CompiledTransform { get; set; }\r\n\t}\r\n}",
                "HttpRequestMessageExtensions.csx": "//-----------------------------------------------------------------------\r\n// <copyright file=\"HttpRequestMessageExtensions.csx\" company=\"Microsoft\">\r\n//      All rights reserved.\r\n// </copyright>\r\n//-----------------------------------------------------------------------\r\n\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics.CodeAnalysis;\r\nusing System.Linq;\r\nusing System.Net;\r\nusing System.Net.Http;\r\nusing System.Net.Http.Headers;\r\n\r\npublic static class HttpRequestMessageExtensions\r\n{\r\n    public static readonly string HeaderClientRequestId = \"x-ms-client-request-id\";\r\n\r\n    [SuppressMessage(\"Microsoft.Design\", \"CA1062:Validate arguments of public methods\", Justification = \"By design. As this is a extension method caller has to take care of it.\")]\r\n    public static string GetClientRequestId(HttpRequestMessage request)\r\n    {\r\n        return HttpRequestMessageExtensions.GetFirstOrDefaultHeader(request: request, name: HttpRequestMessageExtensions.HeaderClientRequestId, defaultValue: string.Empty);\r\n    }\r\n\r\n    [SuppressMessage(\"Microsoft.Design\", \"CA1026:DefaultParametersShouldNotBeUsed\", Justification = \"By design\")]\r\n    [SuppressMessage(\"Microsoft.Design\", \"CA1062:Validate arguments of public methods\", Justification = \"By design. As this is a extension method caller has to take care of it.\")]\r\n    public static string GetFirstOrDefaultHeader(HttpRequestMessage request, string name, string defaultValue = null)\r\n    {\r\n        IEnumerable<string> values = (IEnumerable<string>)null;\r\n\r\n        if (request.Headers.TryGetValues(name, out values) && values.Any<string>())\r\n        {\r\n            return values.First<string>();\r\n        }\r\n\r\n        return defaultValue;\r\n    }\r\n\r\n    [SuppressMessage(\"Microsoft.Design\", \"CA1062:Validate arguments of public methods\", Justification = \"By design. As this is a extension method caller has to take care of it.\")]\r\n    public static HttpResponseMessage CreateXmlResponse(HttpRequestMessage request, HttpStatusCode statusCode, HttpContent content)\r\n    {\r\n        var response = request.CreateResponse(statusCode);\r\n\r\n        try\r\n        {\r\n            if (content != null)\r\n            {\r\n                response.Content = content;\r\n                response.Content.Headers.ContentType = new MediaTypeHeaderValue(\"application/xml\");\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            response.Dispose();\r\n            response = null;\r\n            throw;\r\n        }\r\n\r\n        return response;\r\n    }\r\n}\r\n",
                "run.csx": "#r \"Newtonsoft.Json\"\r\n#r \"System.Xml.Linq\"\r\n#r \"System.Runtime.Caching\"\r\n\r\n#load \"XsltHelper.csx\"\r\n#load \"HttpRequestMessageExtensions.csx\"\r\n#load \"IntegrationXsltException.csx\"\r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Globalization;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Net;\r\nusing System.Net.Http;\r\nusing System.Net.Http.Headers;\r\nusing System.Text;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Xml;\r\nusing System.Xml.Linq;\r\nusing System.Xml.Xsl;\r\nusing Newtonsoft.Json;\r\nusing Newtonsoft.Json.Linq;\r\n\r\npublic static async Task<HttpResponseMessage> Run(HttpRequestMessage req, TraceWriter log, CancellationToken token)\r\n{\r\n    var clientRequestId = string.Empty;\r\n\r\n    try\r\n    {\r\n        clientRequestId = HttpRequestMessageExtensions.GetClientRequestId(request: req);\r\n        log.Info(string.Format(\"Executing transform operation. client request id: '{0}'\", clientRequestId));\r\n        return await XsltHelper.Transform(req, token).ConfigureAwait(continueOnCapturedContext: false);\r\n    }\r\n    catch (IntegrationXsltException ex)\r\n    {\r\n        log.Info(string.Format(\"An exception occurred while performing transform. client request id: '{0}' and exception: '{1}'\", clientRequestId, ex.ToString()));\r\n        return req.CreateErrorResponse(ex.StatusCode, ex.Message);\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        log.Info(string.Format(\"An exception occurred while performing transform. client request id: '{0}' and exception: '{1}'\", clientRequestId, ex.ToString()));\r\n        throw;\r\n    }\r\n}\r\n",
                "XsltInput.csx": "//-----------------------------------------------------------------------\r\n// <copyright file=\"XsltInput.csx\" company=\"Microsoft\">\r\n//      All rights reserved.\r\n// </copyright>\r\n//-----------------------------------------------------------------------\r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing Newtonsoft.Json.Linq;\r\n\r\npublic class XsltInput\r\n{\r\n    public JToken Content { get; set; }\r\n\r\n    [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Usage\", \"CA2227:CollectionPropertiesShouldBeReadOnly\", Justification = \"By design\")]\r\n    public IDictionary<string, string> XsltParameters { get; set; }\r\n\r\n    public ContentLinkDefinition MapContentLink { get; set; }\r\n}",
                "Validation.csx": "//-----------------------------------------------------------------------\r\n// <copyright file=\"Validation.csx\" company=\"Microsoft\">\r\n//      All rights reserved.\r\n// </copyright>\r\n//-----------------------------------------------------------------------\r\n\r\nusing System.Globalization;\r\nusing System.Net;\r\n\r\npublic static class Validation\r\n{\r\n    public static void XslTransformRequest(XsltInput xsltInput)\r\n    {\r\n        if (xsltInput == null || xsltInput.Content == null)\r\n        {\r\n            throw new IntegrationXsltException(\r\n                statusCode: HttpStatusCode.BadRequest,\r\n                message: \"The provided xml content to transform is null or empty.\");\r\n        }\r\n\r\n        if (xsltInput.MapContentLink == null)\r\n        {\r\n            throw new IntegrationXsltException(\r\n                statusCode: HttpStatusCode.BadRequest,\r\n                message: \"The provided content link for the map is null or empty.\");\r\n        }\r\n\r\n        if (xsltInput.MapContentLink.Uri == null)\r\n        {\r\n            throw new IntegrationXsltException(\r\n                statusCode: HttpStatusCode.BadRequest,\r\n                message: \"The provided uri in the content link for the map is null or empty.\");\r\n        }\r\n\r\n        if (!xsltInput.MapContentLink.Uri.IsAbsoluteUri)\r\n        {\r\n            throw new IntegrationXsltException(\r\n                statusCode: HttpStatusCode.BadRequest,\r\n                message: string.Format(CultureInfo.InvariantCulture, \"The provided uri '{0}' in the content link for the map is not a valid uri.\", xsltInput.MapContentLink.Uri));\r\n        }\r\n    }\r\n}\r\n",
                "ContentEnvelope.csx": "//-----------------------------------------------------------------------\r\n// <copyright file=\"ContentEnvelope.csx\" company=\"Microsoft\">\r\n//      All rights reserved.\r\n// </copyright>\r\n//-----------------------------------------------------------------------\r\n\r\nusing System;\r\nusing System.Net.Mime;\r\nusing System.Text;\r\nusing Newtonsoft.Json;\r\n\r\npublic class ContentEnvelope\r\n{\r\n    [JsonProperty(PropertyName = \"$content-encoding\", Required = Required.Default)]\r\n    public string ContentEncoding { get; set; }\r\n\r\n    [JsonProperty(PropertyName = \"$content-type\", Required = Required.Always)]\r\n    public string ContentType { get; set; }\r\n\r\n    [JsonProperty(PropertyName = \"$content\", Required = Required.Always)]\r\n    public string Content { get; set; }\r\n\r\n    public string DecodeAsString()\r\n    {\r\n        var contentType = new ContentType(this.ContentType);\r\n        var encoding = contentType.CharSet != null ? Encoding.GetEncoding(contentType.CharSet) : Encoding.UTF8;\r\n\r\n        return encoding.GetString(Convert.FromBase64String(this.Content));\r\n    }\r\n\r\n    public byte[] DecodeAsBytes()\r\n    {\r\n        return Convert.FromBase64String(this.Content);\r\n    }\r\n}",
                "ContentLinkDefinition.csx": "//-----------------------------------------------------------------------\r\n// <copyright file=\"ContentLinkDefinition.csx\" company=\"Microsoft\">\r\n//      All rights reserved.\r\n// </copyright>\r\n//-----------------------------------------------------------------------\r\n\r\n#load \"ContentHash.csx\"\r\n\r\nusing System;\r\nusing Newtonsoft.Json;\r\nusing Newtonsoft.Json.Linq;\r\n\r\npublic class ContentLinkDefinition\r\n{\r\n    [JsonProperty(Required = Required.Always)]\r\n    public Uri Uri { get; set; }\r\n\r\n    public string ContentVersion { get; set; }\r\n\r\n    public long? ContentSize { get; set; }\r\n\r\n    public ContentHash ContentHash { get; set; }\r\n\r\n    public JToken Metadata { get; set; }\r\n}"
            }
        }
    }]
}