{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.13.1.58284",
      "templateHash": "10332435245636193525"
    }
  },
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for the Virtual Machine administrator. Do not use simple names such as 'admin'"
      }
    },
    "adminPassword": {
      "type": "secureString",
      "metadata": {
        "description": "Password for the Virtual Machine administrator."
      }
    },
    "uniqueNamePrefix": {
      "type": "string",
      "defaultValue": "[take(format('shc{0}', uniqueString(resourceGroup().id)), 8)]",
      "maxLength": 12,
      "metadata": {
        "description": "Unique name that will be used to generate various other names including the name of the Public IP used to access the Virtual Machine."
      }
    },
    "windowsOSVersion": {
      "type": "string",
      "defaultValue": "2022-Datacenter",
      "allowedValues": [
        "2008-R2-SP1",
        "2012-Datacenter",
        "2012-R2-Datacenter",
        "2016-Datacenter",
        "2019-Datacenter",
        "2022-Datacenter"
      ],
      "metadata": {
        "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version. Allowed values: 2008-R2-SP1, 2012-Datacenter, 2012-R2-Datacenter."
      }
    },
    "mySqlPasswordForRootUser": {
      "type": "secureString",
      "metadata": {
        "description": "Password for the MySQL 'root' admin user."
      }
    },
    "mySqlIdpUser": {
      "type": "string",
      "metadata": {
        "description": "User name that will be used to create user in MySQL database which has all privileges."
      }
    },
    "mySqlPasswordForIdpUser": {
      "type": "secureString",
      "metadata": {
        "description": "Password for the MySQL Idp user."
      }
    },
    "vmCountFrontend": {
      "type": "int",
      "defaultValue": 2,
      "allowedValues": [
        1,
        2,
        3,
        4,
        5
      ],
      "metadata": {
        "description": "Number of web front end VMs to create."
      }
    },
    "vmSizeFrontend": {
      "type": "string",
      "defaultValue": "Standard_D4s_v4",
      "metadata": {
        "description": "The size of the VM."
      }
    },
    "vmSizeDB": {
      "type": "string",
      "defaultValue": "Standard_D2s_v4",
      "metadata": {
        "description": "The size of the database backend VM."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "defaultValue": "[deployment().properties.templateLink.uri]",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located including a trailing '/'"
      }
    },
    "_artifactsLocationSasToken": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
      }
    }
  },
  "variables": {
    "imagePublisher": "MicrosoftWindowsServer",
    "imageOffer": "WindowsServer",
    "OSVersion": "[parameters('windowsOSVersion')]",
    "nicName": "[format('{0}Nic', parameters('uniqueNamePrefix'))]",
    "addressPrefix": "10.0.0.0/16",
    "subnetName": "Subnet",
    "subnetPrefix": "10.0.0.0/24",
    "subnetNameDB": "SubnetDB",
    "subnetPrefixDB": "10.0.1.0/24",
    "publicIPAddressName": "[format('{0}IP', parameters('uniqueNamePrefix'))]",
    "publicDBIPAddressName": "[format('{0}DBIP', parameters('uniqueNamePrefix'))]",
    "publicIPAddressType": "Dynamic",
    "vmName": "[format('{0}VM', parameters('uniqueNamePrefix'))]",
    "virtualNetworkName": "[format('{0}VNet', parameters('uniqueNamePrefix'))]",
    "availabilitySetName": "[format('{0}AvSet', parameters('uniqueNamePrefix'))]",
    "lbName": "[format('{0}LB', parameters('uniqueNamePrefix'))]",
    "installScriptName": "install_shibboleth_idp.ps1",
    "installCommand": "[format('powershell.exe -File {0} {1} {2} {3}db {4} \"{5}\"', variables('installScriptName'), parameters('uniqueNamePrefix'), parameters('location'), parameters('uniqueNamePrefix'), parameters('mySqlIdpUser'), parameters('mySqlPasswordForIdpUser'))]",
    "installBackendScriptName": "install_backend.ps1",
    "installBackendCommand": "[format('powershell.exe -File {0} \"{1}\" {2} \"{3}\"', variables('installBackendScriptName'), parameters('mySqlPasswordForRootUser'), parameters('mySqlIdpUser'), parameters('mySqlPasswordForIdpUser'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Compute/availabilitySets",
      "apiVersion": "2022-08-01",
      "name": "[variables('availabilitySetName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Aligned"
      },
      "properties": {
        "platformFaultDomainCount": 2,
        "platformUpdateDomainCount": 5
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2022-05-01",
      "name": "[variables('publicIPAddressName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[parameters('uniqueNamePrefix')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2022-05-01",
      "name": "[variables('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          },
          {
            "name": "[variables('subnetNameDB')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefixDB')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-sg', variables('virtualNetworkName')))]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-sg', variables('virtualNetworkName')))]"
      ]
    },
    {
      "copy": {
        "name": "nic",
        "count": "[length(range(0, parameters('vmCountFrontend')))]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2022-05-01",
      "name": "[format('{0}{1}', variables('nicName'), range(0, parameters('vmCountFrontend'))[copyIndex()])]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName')), '2022-05-01').subnets[0].id]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[reference(resourceId('Microsoft.Network/loadBalancers', variables('lbName')), '2022-05-01').backendAddressPools[0].id]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[reference(resourceId('Microsoft.Network/loadBalancers', variables('lbName')), '2022-05-01').inboundNatRules[range(0, parameters('vmCountFrontend'))[copyIndex()]].id]"
                }
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/loadBalancers', variables('lbName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2022-05-01",
      "name": "[variables('lbName')]",
      "location": "[parameters('location')]",
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontend",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "LoadBalancerBackend"
          }
        ],
        "inboundNatRules": [
          {
            "name": "SSH-VM0",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('lbName'), 'loadBalancerFrontend')]"
              },
              "protocol": "Tcp",
              "frontendPort": 2200,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "SSH-VM1",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('lbName'), 'loadBalancerFrontend')]"
              },
              "protocol": "Tcp",
              "frontendPort": 2201,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "SSH-VM2",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('lbName'), 'loadBalancerFrontend')]"
              },
              "protocol": "Tcp",
              "frontendPort": 2202,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "SSH-VM3",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('lbName'), 'loadBalancerFrontend')]"
              },
              "protocol": "Tcp",
              "frontendPort": 2203,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "SSH-VM4",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('lbName'), 'loadBalancerFrontend')]"
              },
              "protocol": "Tcp",
              "frontendPort": 2204,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('lbName'), 'loadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('lbName'), 'LoadBalancerBackend')]"
              },
              "protocol": "Tcp",
              "frontendPort": 8443,
              "backendPort": 8443,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "SourceIP",
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('lbName'), 'tcpProbe')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "tcpProbe",
            "properties": {
              "protocol": "Tcp",
              "port": 8443,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
      ]
    },
    {
      "copy": {
        "name": "vm",
        "count": "[length(range(0, parameters('vmCountFrontend')))]"
      },
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2022-08-01",
      "name": "[format('{0}{1}', variables('vmName'), range(0, parameters('vmCountFrontend'))[copyIndex()])]",
      "location": "[parameters('location')]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSizeFrontend')]"
        },
        "osProfile": {
          "computerName": "[format('{0}{1}', variables('vmName'), range(0, parameters('vmCountFrontend'))[copyIndex()])]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[variables('OSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[format('{0}{1}_OSDisk', variables('vmName'), range(0, parameters('vmCountFrontend'))[copyIndex()])]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', variables('nicName'), range(0, parameters('vmCountFrontend'))[range(0, parameters('vmCountFrontend'))[copyIndex()]]))]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', variables('nicName'), range(0, parameters('vmCountFrontend'))[range(0, parameters('vmCountFrontend'))[copyIndex()]]))]",
        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', variables('nicName'), range(0, parameters('vmCountFrontend'))[range(0, parameters('vmCountFrontend'))[copyIndex()]]))]"
      ]
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "apiVersion": "2022-08-01",
      "name": "[format('{0}db', variables('availabilitySetName'))]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Aligned"
      },
      "properties": {
        "platformFaultDomainCount": 2,
        "platformUpdateDomainCount": 5
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2022-05-01",
      "name": "[variables('publicDBIPAddressName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[format('{0}db', parameters('uniqueNamePrefix'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2022-05-01",
      "name": "[format('{0}db', variables('nicName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfigdb",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicDBIPAddressName'))]"
              },
              "subnet": {
                "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName')), '2022-05-01').subnets[0].id]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-sg', variables('virtualNetworkName')))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicDBIPAddressName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-sg', variables('virtualNetworkName')))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2022-05-01",
      "name": "[format('{0}-sg', variables('virtualNetworkName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "MySQL",
            "properties": {
              "description": "Allows MySQL traffic",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "3306",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1101,
              "direction": "Inbound"
            }
          },
          {
            "name": "RDPTCP",
            "properties": {
              "description": "Allows RDP traffic",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "3389",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1301,
              "direction": "Inbound"
            }
          },
          {
            "name": "RDPUDP",
            "properties": {
              "description": "Allows RDP traffic",
              "protocol": "UDP",
              "sourcePortRange": "*",
              "destinationPortRange": "3389",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1401,
              "direction": "Inbound"
            }
          },
          {
            "name": "SSH",
            "properties": {
              "description": "Allows SSH traffic",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1201,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2022-08-01",
      "name": "[format('{0}db', variables('vmName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', format('{0}db', variables('availabilitySetName')))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSizeDB')]"
        },
        "osProfile": {
          "computerName": "[format('{0}db', variables('vmName'))]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[variables('OSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[format('{0}db_OSDisk', variables('vmName'))]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}db', variables('nicName')))]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/availabilitySets', format('{0}db', variables('availabilitySetName')))]",
        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}db', variables('nicName')))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2022-08-01",
      "name": "[format('{0}/{1}', format('{0}db', variables('vmName')), 'CustomScriptExtension')]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.4",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[uri(parameters('_artifactsLocation'), format('{0}{1}', variables('installScriptName'), parameters('_artifactsLocationSasToken')))]"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[variables('installCommand')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}db', variables('vmName')))]"
      ]
    },
    {
      "copy": {
        "name": "vmCustomScriptExtension",
        "count": "[length(range(0, parameters('vmCountFrontend')))]"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2022-08-01",
      "name": "[format('{0}/{1}', format('{0}{1}', variables('vmName'), range(0, parameters('vmCountFrontend'))[range(0, parameters('vmCountFrontend'))[copyIndex()]]), 'customScriptExtension')]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.4",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[uri(parameters('_artifactsLocation'), format('{0}{1}', variables('installBackendScriptName'), parameters('_artifactsLocationSasToken')))]"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[variables('installBackendCommand')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('vmName'), range(0, parameters('vmCountFrontend'))[range(0, parameters('vmCountFrontend'))[copyIndex()]]))]",
        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('vmName'), range(0, parameters('vmCountFrontend'))[range(0, parameters('vmCountFrontend'))[copyIndex()]]))]"
      ]
    }
  ]
}