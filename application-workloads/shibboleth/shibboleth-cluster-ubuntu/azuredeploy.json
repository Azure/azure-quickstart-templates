{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "The Name of the administrator of the new VM. Exclusion list: 'admin','administrator'"
      }
    },
    "publicDnsName": {
      "type": "string",
      "defaultValue": "[concat('scu', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Unique public DNS prefix for the deployment. The fqdn will look something like '<dnsname>.westus.cloudapp.azure.com'. Up to 62 chars, digits or dashes, lowercase, should start with a letter: must conform to '^[a-z][a-z0-9-]{1,61}[a-z0-9]$'."
      }
    },
    "mySqlPasswordForRootUser": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the MySQL 'root' admin user."
      }
    },
    "mySqlIdpUser": {
      "type": "string",
      "defaultValue": "scu",
      "metadata": {
        "description": "User name that will be used to create user in MySQL database which has all privileges."
      }
    },
    "mySqlPasswordForIdpUser": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the MySQL Idp user."
      }
    },
    "numberOfInstances": {
      "type": "int",
      "defaultValue": 2,
      "allowedValues": [
        1,
        2,
        3,
        4,
        5
      ],
      "metadata": {
        "description": "Number of web front end VMs to create."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "sshPublicKey",
      "allowedValues": [
        "sshPublicKey",
        "password"
      ],
      "metadata": {
        "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
      }
    },
    "adminPasswordOrKey": {
      "type": "securestring",
      "metadata": {
        "description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located including a trailing '/'"
      },
      "defaultValue": "[deployment().properties.templateLink.uri]"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
      },
      "defaultValue": ""
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_A0",
      "metadata": {
        "description":"Default VM Size"
      }
    }         
  },
  "variables": {
    "vnetAddressRange": "10.0.0.0/16",
    "subnetAddressRange": "10.0.0.0/24",
    "subnetName": "Subnet",
    "availabilitySetName": "AvSet",
    "vmName": "VM",
    "storageAccountType": "Standard_LRS",
    "nicsql": "[concat(variables('vmName'),'sql')]",
    "newStorageAccountName": "[concat('st', uniqueString(resourceGroup().id))]",
    "subnet-id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', 'VNET', variables('subnetName'))]",
    "imagePublisher": "Canonical",
    "imageOffer": "UbuntuServer",
    "ubuntuOSVersion": "16.04-LTS",
    "installScriptName": "install_shibboleth_idp.sh",
    "installScriptUri": "[uri(parameters('_artifactsLocation'), concat(variables('installScriptName'), parameters('_artifactsLocationSasToken')))]",
    "installBackendScriptName": "install_backend.sh",
    "installBackendScriptUri": "[uri(parameters('_artifactsLocation'), concat(variables('installBackendScriptName'), parameters('_artifactsLocationSasToken')))]",
    "installBackendCommand": "[concat('sh ', variables('installBackendScriptName'), ' ', parameters('mySqlPasswordForRootUser'), ' ', parameters('mySqlIdpUser'), ' ', parameters('mySqlPasswordForIdpUser'))]",
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
            "keyData": "[parameters('adminPasswordOrKey')]"
          }
        ]
      }
    }
  },
  "resources": [
    {
      "apiVersion": "2020-07-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "publicIp",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[parameters('publicDnsName')]"
        }
      }
    },
    {
      "apiVersion": "2020-07-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "vmsqlIp",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('publicDnsName'),'db')]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetName')]",
      "apiVersion": "2017-12-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Aligned"
      },
      "properties": {
        "platformFaultDomainCount": 2,
        "platformUpdateDomainCount": 5
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[concat(variables('availabilitySetName'),'db')]",
      "apiVersion": "2017-12-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Aligned"
      },
      "properties": {
        "platformFaultDomainCount": 2,
        "platformUpdateDomainCount": 5
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('newStorageAccountName')]",
      "location": "[parameters('location')]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "apiVersion": "2018-02-01",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "VNET",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetAddressRange')]"
          ]
        },
        "subnets": [
          {
            "name": "Subnet",
            "properties": {
              "addressPrefix": "[variables('subnetAddressRange')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2018-02-01",
      "name": "loadBalancer",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[parameters('location')]",
      "dependsOn": [
        "Microsoft.Network/publicIPAddresses/publicIp"
      ],
      "properties": {
        "frontendIpConfigurations": [
          {
            "name": "LBFE",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses','publicIp')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "LBBAP"
          }
        ],
        "inboundNatRules": [
          {
            "name": "[concat('SSH-VM','0')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations','loadBalancer','LBFE')]"
              },
              "protocol": "Tcp",
              "frontendPort": 2200,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[concat('SSH-VM','1')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations','loadBalancer','LBFE')]"
              },
              "protocol": "Tcp",
              "frontendPort": 2201,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[concat('SSH-VM','2')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations','loadBalancer','LBFE')]"
              },
              "protocol": "Tcp",
              "frontendPort": 2202,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[concat('SSH-VM','3')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations','loadBalancer','LBFE')]"
              },
              "protocol": "Tcp",
              "frontendPort": 2203,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[concat('SSH-VM','4')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations','loadBalancer','LBFE')]"
              },
              "protocol": "Tcp",
              "frontendPort": 2204,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          }
        ],
        "loadBalancingRules": [
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', 'loadBalancer', 'LBFE')]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'loadBalancer', 'LBBAP')]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', 'loadBalancer', 'lbprobe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "idleTimeoutInMinutes": 15
            },
            "name": "lbrule"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', 'loadBalancer', 'LBFE')]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'loadBalancer', 'LBBAP')]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', 'loadBalancer', 'lbprobe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 8443,
              "backendPort": 8443,
              "idleTimeoutInMinutes": 15
            },
            "name": "lbrule8443"
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Http",
              "port": 8080,
              "requestPath": "/",
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "lbprobe"
          }
        ]
      }
    },
    {
      "apiVersion": "2018-02-01",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "vmsql",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "default-allow-ssh",
            "properties": {
              "description": "Allow SSH",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1201,
              "direction": "Inbound"
            }
          },
          {
            "name": "Port_3306",
            "properties": {
              "description": "Allow 3306",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "3306",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1010,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2018-02-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('vmName'),copyindex())]",
      "copy": {
        "name": "netIntLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "location": "[parameters('location')]",
      "dependsOn": [
        "Microsoft.Network/virtualNetworks/VNET",
        "Microsoft.Network/loadBalancers/loadBalancer"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnet-id')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools','loadBalancer','LBBAP')]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules','loadBalancer',concat('SSH-VM', copyindex()))]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2018-02-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicsql')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "Microsoft.Network/virtualNetworks/VNET",
        "Microsoft.Network/networkSecurityGroups/vmsql"
      ],
      "properties": {
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups','vmsql')]"
        },
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'vmsqlIp')]"
              },
              "subnet": {
                "id": "[variables('subnet-id')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmName'), copyindex())]",
      "copy": {
        "name": "virtualMachineLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts',variables('newStorageAccountName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces/',concat(variables('vmName'),copyindex()))]",
        "[resourceId('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('vmName'), copyindex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[variables('ubuntuOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('vmName'),copyindex()))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference(variables('newStorageAccountName'), '2021-01-01').primaryEndpoints['blob']]"
          }
        }
      }
    },
    {
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmName'),'db')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts',variables('newStorageAccountName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces/',variables('nicsql'))]",
        "[resourceId('Microsoft.Compute/availabilitySets', concat(variables('availabilitySetName'),'db'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', concat(variables('availabilitySetName'),'db'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('vmName'),'db')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[variables('ubuntuOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicsql'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference(variables('newStorageAccountName'), '2021-01-01').primaryEndpoints['blob']]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmName'),'db','/CustomScriptExtension')]",
      "apiVersion": "2017-12-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/',concat(variables('vmName'),'db'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[variables('installBackendScriptUri')]"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[variables('installBackendCommand')]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmName'),copyIndex(),'/CustomScriptExtension')]",
      "apiVersion": "2017-12-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/',concat(variables('vmName'),copyIndex()))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[variables('installScriptUri')]"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat('mv *.sh /home/',parameters('adminUsername'),' && cd /home/',parameters('adminUsername'),' && sudo chmod 777 *.sh && sudo su && bash ',variables('installScriptName'),' ', parameters('publicDnsName'),' ', parameters('location'), ' ', concat(parameters('publicDnsName'),'db'), ' ', parameters('mySqlIdpUser'), ' ', parameters('mySqlPasswordForIdpUser'))]"
        }
      },
      "copy": {
        "name": "extensionsCopy",
        "count": "[parameters('numberOfInstances')]"
      }
    }
  ]
}
