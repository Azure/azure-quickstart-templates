{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "osType": {
      "type": "string",
      "allowedValues": [
        "Windows Server 2012 Datacenter",
        "Windows Server 2012 R2 Datacenter",
        "Windows Server 2016 Datacenter",
        "SLES 12",
        "SLES 12 BYOS",
        "RHEL 7.2",
        "Oracle Linux 7.2"
      ],
      "defaultValue": "Windows Server 2012 R2 Datacenter",
      "metadata": {
        "description": "The type of the operating system you want to deploy."
      }
    },
    "loadBalancerName": {
      "type": "string",
      "metadata": {
        "description": "The name of the the load balancer"
      }
    },
    "subnetId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The id of the subnet you want to use. Leave blank if you want to create a new virtual network and subnet"
      }
    }
  },
  "variables": {
    "lbPrefix": "lb",
    "lbrulePrefix": "[concat(variables('lbPrefix'), 'Rule')]",
    "loadBalancerFrontendNFS": "[concat(variables('lbPrefix'), 'FrontendNFS')]",
    "lbProbePortNFS": "[concat(variables('lbPrefix'), 'ProbePortNFS')]",
    "backendPoolNFS": "[concat(variables('lbPrefix'), 'BackendPoolNFS')]",
    "lbProbePortInternalNFS": 61000,
    "idleTimeoutInMinutesNFS": 30,
    "nicBackAddressPools": {
      "Linux": [
        {
          "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '/backendAddressPools/', variables('backendPoolNFS'))]"
        }
      ]
    },
    "frontendIPConfigurations": {
      "Linux": [
        {
          "properties": {
            "subnet": {
              "id": "[parameters('subnetId')]"
            },
            "privateIPAllocationMethod": "Dynamic"
          },
          "name": "[variables('loadBalancerFrontendNFS')]"
        }
      ]
    },
    "backendAddressPools": {
      "Linux": [
        {
          "name": "[variables('backendPoolNFS')]"
        }
      ]
    },
    "loadBalancingRules": {
      "Linux": [
        {
          "properties": {
            "frontendIPConfiguration": {
              "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '/frontendIpConfigurations/', variables('loadBalancerFrontendNFS'))]"
            },
            "backendAddressPool": {
              "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '/backendAddressPools/', variables('backendPoolNFS'))]"
            },
            "probe": {
              "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '/probes/', variables('lbProbePortNFS'))]"
            },
            "protocol": "Tcp",
            "frontendPort": 2049,
            "backendPort": 2049,
            "enableFloatingIP": true,
            "idleTimeoutInMinutes": "[variables('idleTimeoutInMinutesNFS')]"
          },
          "name": "[concat(variables('lbrulePrefix'), '2049T')]"
        },
        {
          "properties": {
            "frontendIPConfiguration": {
              "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '/frontendIpConfigurations/', variables('loadBalancerFrontendNFS'))]"
            },
            "backendAddressPool": {
              "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '/backendAddressPools/', variables('backendPoolNFS'))]"
            },
            "probe": {
              "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '/probes/', variables('lbProbePortNFS'))]"
            },
            "protocol": "Udp",
            "frontendPort": 2049,
            "backendPort": 2049,
            "enableFloatingIP": true,
            "idleTimeoutInMinutes": "[variables('idleTimeoutInMinutesNFS')]"
          },
          "name": "[concat(variables('lbrulePrefix'), '2049U')]"
        }
      ]
    },
    "probes": {
      "Linux": [
        {
          "properties": {
            "protocol": "Tcp",
            "port": "[variables('lbProbePortInternalNFS')]",
            "intervalInSeconds": 5,
            "numberOfProbes": 2
          },
          "name": "[variables('lbProbePortNFS')]"
        }
      ]
    },
    "nicBackAddressPoolsResult": "[variables('nicBackAddressPools')[parameters('osType')]]",
    "frontendIPConfigurationsResult": "[variables('frontendIPConfigurations')[parameters('osType')]]",
    "backendAddressPoolsResult": "[variables('backendAddressPools')[parameters('osType')]]",
    "loadBalancingRulesResult": "[variables('loadBalancingRules')[parameters('osType')]]",
    "probesResult": "[variables('probes')[parameters('osType')]]"
  },
  "resources": [],
  "outputs": {
    "nicBackAddressPools": {
      "value": "[variables('nicBackAddressPoolsResult')]",
      "type": "array"
    },
    "frontendIPConfigurations": {
      "value": "[variables('frontendIPConfigurationsResult')]",
      "type": "array"
    },
    "backendAddressPools": {
      "value": "[variables('backendAddressPoolsResult')]",
      "type": "array"
    },
    "loadBalancingRules": {
      "value": "[variables('loadBalancingRulesResult')]",
      "type": "array"
    },
    "probes": {
      "value": "[variables('probesResult')]",
      "type": "array"
    }
  }
}
