{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "sapSystemId": {
      "type": "string",
      "maxLength": 3,
      "minLength": 3,
      "metadata": {
        "description": "SAP System ID."
      }
    },
    "osType": {
      "type": "string",
      "allowedValues": [
        "Windows Server 2012 Datacenter",
        "Windows Server 2012 R2 Datacenter",
        "Windows Server 2016 Datacenter",
        "SLES 12",
        "RHEL 7.2"
      ],
      "defaultValue": "Windows Server 2012 R2 Datacenter",
      "metadata": {
        "description": "The type of the operating system you want to deploy."
      }
    },
    "sapSystemSize": {
      "type": "string",
      "allowedValues": [
        "Small < 2.000 SAPS",
        "Medium < 9.000 SAPS",
        "Large < 18.000 SAPS",
        "X-Large < 40.000 SAPS"
      ],
      "defaultValue": "Small < 2.000 SAPS",
      "metadata": {
        "description": "The size of the SAP System you want to deploy."
      }
    },
    "storageType": {
      "type": "string",
      "allowedValues": [
        "Premium",
        "Standard"
      ],
      "defaultValue": "Standard",
      "metadata": {
        "description": "The storage type that should be used for the virtual machine."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "minLength": 12,
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "newOrExistingSubnet": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Determines whether a new virtual network and subnet should be created or an existing subnet should be used."
      }
    },
    "subnetId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The id of the subnet you want to use."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "location of resources"
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located including a trailing '/'"
      },
      "defaultValue": "[deployment().properties.templateLink.uri]"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
      },
      "defaultValue": ""
    }
  },
  "variables": {
    "images": {
      "Windows Server 2012 Datacenter": {
        "sku": "2012-Datacenter",
        "offer": "WindowsServer",
        "publisher": "MicrosoftWindowsServer",
        "OSType": "Windows"
      },
      "Windows Server 2012 R2 Datacenter": {
        "sku": "2012-R2-Datacenter",
        "offer": "WindowsServer",
        "publisher": "MicrosoftWindowsServer",
        "OSType": "Windows"
      },
      "Windows Server 2016 Datacenter": {
        "sku": "2016-Datacenter",
        "offer": "WindowsServer",
        "publisher": "MicrosoftWindowsServer",
        "OSType": "Windows"
      },
      "SLES 12": {
        "sku": "12-SP1",
        "offer": "SLES-SAP",
        "publisher": "SUSE",
        "OSType": "Linux"
      },
      "RHEL 7.2": {
        "sku": "7.2",
        "offer": "RHEL",
        "publisher": "RedHat",
        "OSType": "Linux"
      }
    },
    "imageSku": "[variables('images')[parameters('osType')].sku]",
    "imagePublisher": "[variables('images')[parameters('osType')].publisher]",
    "imageOffer": "[variables('images')[parameters('osType')].offer]",
    "internalOSType": "[variables('images')[parameters('osType')].OSType]",
    "csExtension": {
      "Windows": {
        "Publisher": "Microsoft.Compute",
        "Name": "CustomScriptExtension",
        "Version": "1.7",
        "script": "[uri(parameters('_artifactsLocation'), concat('shared/configureSAPVM.ps1', parameters('_artifactsLocationSasToken')))]",
        "scriptCall": "powershell.exe -ExecutionPolicy Unrestricted -File shared\\configureSAPVM.ps1"
      },
      "Linux": {
        "Publisher": "Microsoft.Azure.Extensions",
        "Name": "CustomScript",
        "Version": "2.0",
        "script": "[uri(parameters('_artifactsLocation'), concat('shared/configureSAPVM.sh', parameters('_artifactsLocationSasToken')))]",
        "scriptCall": "sh shared/configureSAPVM.sh"
      }
    },
    "cseExtPublisher": "[variables('csExtension')[variables('internalOSType')].Publisher]",
    "cseExtName": "[variables('csExtension')[variables('internalOSType')].Name]",
    "cseExtVersion": "[variables('csExtension')[variables('internalOSType')].Version]",
    "storageTypes": {
      "Premium": "Premium_LRS",
      "Standard": "Standard_LRS"
    },
    "internalStorageType": "[variables('storageTypes')[parameters('storageType')]]",
    "vmSizes": {
      "Small < 2.000 SAPS": {
        "Premium": {
          "size": "Standard_D2s_v3"
        },
        "Standard": {
          "size": "Standard_D2s_v3"
        }
      },
      "Medium < 9.000 SAPS": {
        "Premium": {
          "size": "Standard_D8s_v3"
        },
        "Standard": {
          "size": "Standard_D8_v3"
        }
      },
      "Large < 18.000 SAPS": {
        "Premium": {
          "size": "Standard_D16s_v3"
        },
        "Standard": {
          "size": "Standard_D16_v3"
        }
      },
      "X-Large < 40.000 SAPS": {
        "Premium": {
          "size": "Standard_GS5"
        },
        "Standard": {
          "size": "Standard_D16_v3"
        }
      }
    },
    "vmSize": "[variables('vmSizes')[parameters('sapSystemSize')][parameters('storageType')].size]",
    "sidlower": "[toLower(parameters('sapSystemId'))]",
    "vmName": "[concat(variables('sidlower'), '-servercs')]",
    "storageAccountName": "[concat(variables('sidlower'), uniqueString(variables('sidlower'), resourceGroup().id))]",
    "vnetName": "[concat(variables('sidlower'), '-vnet')]",
    "publicIpName": "[concat(variables('sidlower'), '-pib')]",
    "nicName": "[concat(variables('sidlower'), '-nic')]",
    "nsgName": "[concat(variables('sidlower'), '-nsg-cs')]",
    "publicIPAddressType": "Dynamic",
    "addressPrefix": "10.0.0.0/16",
    "subnetName": "Subnet",
    "subnetPrefix": "10.0.0.0/24",
    "nestedDeploymentName": "nestedTemplate",
    "nestedDeploymentNameProf": "[concat(variables('nestedDeploymentName'), 'prof')]",
    "nestedDeploymentNameVnet": "[concat(variables('nestedDeploymentName'), 'vnet')]",
    "nestedDeploymentNameNSG": "[concat(variables('nestedDeploymentName'), 'nsg')]",
    "nestedDeploymentNameNIC": "[concat(variables('nestedDeploymentName'), 'nic')]",
    "nestedDeploymentNamePIP": "[concat(variables('nestedDeploymentName'), 'pip')]",
    "osDiskType": "image"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2021-01-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[variables('internalStorageType')]"
      }
    },
    {
      "apiVersion": "2021-04-01",
      "name": "[variables('nestedDeploymentNameVnet')]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
    },
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(parameters('_artifactsLocation'), concat('shared/', parameters('newOrExistingSubnet'), 'vnet.json', parameters('_artifactsLocationSasToken')))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vnetName": {
            "value": "[variables('vnetName')]"
          },
          "addressPrefix": {
            "value": "[variables('addressPrefix')]"
          },
          "subnetName": {
            "value": "[variables('subnetName')]"
          },
          "subnetPrefix": {
            "value": "[variables('subnetPrefix')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "apiVersion": "2021-04-01",
      "name": "[variables('nestedDeploymentNameNIC')]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(parameters('_artifactsLocation'), concat('shared/nic-config.json', parameters('_artifactsLocationSasToken')))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vnetName": {
            "value": "[variables('vnetName')]"
          },
          "subnetName": {
            "value": "[variables('subnetName')]"
          },
          "publicIpName": {
            "value": "[variables('publicIpName')]"
          },
          "nsgName": {
            "value": "[variables('nsgName')]"
          },
          "newOrExistingSubnet": {
            "value": "[parameters('newOrExistingSubnet')]"
          },
          "subnetId": {
            "value": "[parameters('subnetId')]"
          }
        }
      }
    },
    {
      "apiVersion": "2021-04-01",
      "name": "[variables('nestedDeploymentNameProf')]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(parameters('_artifactsLocation'), concat('shared/os-disk-parts.json', parameters('_artifactsLocationSasToken')))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "imageSku": {
            "value": "[variables('imageSku')]"
          },
          "imagePublisher": {
            "value": "[variables('imagePublisher')]"
          },
          "imageOffer": {
            "value": "[variables('imageOffer')]"
          },
          "userImageVhdUri": {
            "value": ""
          },
          "userImageStorageAccount": {
            "value": ""
          },
          "osDiskVhdUri": {
            "value": ""
          },
          "osDiskType": {
            "value": "[variables('osDiskType')]"
          },
          "osType": {
            "value": "[variables('internalOSType')]"
          },
          "sidlower": {
            "value": "[variables('sidlower')]"
          },
          "vmName": {
            "value": "[variables('vmName')]"
          },
          "storageAccountUri": {
            "value": "[reference(variables('storageAccountName'), '2021-01-01').primaryEndpoints['blob']]"
          }
        }
      }
    },
    {
      "apiVersion": "2021-04-01",
      "name": "[variables('nestedDeploymentNamePIP')]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(parameters('_artifactsLocation'), concat('shared/', parameters('newOrExistingSubnet'), 'pip.json', parameters('_artifactsLocationSasToken')))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "publicIpName": {
            "value": "[variables('publicIpName')]"
          },
          "publicIPAddressType": {
            "value": "[variables('publicIPAddressType')]"
          },
          "location": {
              "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "apiVersion": "2021-04-01",
      "name": "[variables('nestedDeploymentNameNSG')]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(parameters('_artifactsLocation'), concat('shared/', parameters('newOrExistingSubnet'), 'nsg.json', parameters('_artifactsLocationSasToken')))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "nsgName": {
            "value": "[variables('nsgName')]"
          },
          "location": {
              "value": "[parameters('location')]"
          },
          "osType": {
            "value": "[variables('internalOSType')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName')]",
      "apiVersion": "2020-07-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments/', variables('nestedDeploymentNameVnet'))]",
        "[resourceId('Microsoft.Resources/deployments/', variables('nestedDeploymentNameNIC'))]",
        "[resourceId('Microsoft.Resources/deployments/', variables('nestedDeploymentNamePIP'))]",
        "[resourceId('Microsoft.Resources/deployments/', variables('nestedDeploymentNameNSG'))]"
      ],
      "properties": {
        "networkSecurityGroup": "[reference(variables('nestedDeploymentNameNIC')).outputs.selectedConfiguration.value.networkSecurityGroup]",
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": "[reference(variables('nestedDeploymentNameNIC')).outputs.selectedConfiguration.value.publicIPAddress]",
              "subnet": "[reference(variables('nestedDeploymentNameNIC')).outputs.selectedConfiguration.value.subnet]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2021-04-01",
      "name": "[variables('nestedDeploymentName')]",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Resources/deployments/', variables('nestedDeploymentNameProf'))]",
        "[resourceId('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(parameters('_artifactsLocation'), concat('shared/cs-server-', variables('vmSize'), '_multiNIC_No.json', parameters('_artifactsLocationSasToken')))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "imageReference": {
            "value": "[reference(variables('nestedDeploymentNameProf')).outputs.imageReference.value]"
          },
          "osDisk": {
            "value": "[reference(variables('nestedDeploymentNameProf')).outputs.osDisk.value]"
          },
          "osDiskType": {
            "value": "[variables('osDiskType')]"
          },
          "sidlower": {
            "value": "[variables('sidlower')]"
          },
          "vmName": {
            "value": "[variables('vmName')]"
          },
          "vmSize": {
            "value": "[variables('vmSize')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "storageAccountUri": {
            "value": "[reference(variables('storageAccountName'), '2021-01-01').primaryEndpoints['blob']]"
          },
          "nicName": {
            "value": "[variables('nicName')]"
          },
          "location": {
              "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmName'),'/', variables('cseExtName'))]",
      "apiVersion": "2015-06-15",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments/', variables('nestedDeploymentName'))]"
      ],
      "properties": {
        "publisher": "[variables('cseExtPublisher')]",
        "type": "[variables('cseExtName')]",
        "typeHandlerVersion": "[variables('cseExtVersion')]",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[variables('csExtension')[variables('internalOSType')].script]"
          ],
          "commandToExecute": "[concat(variables('csExtension')[variables('internalOSType')].scriptCall, ' -DBDataLUNS \"', reference(variables('nestedDeploymentName')).outputs.dbDataLUNs.value , '\" -DBLogLUNS \"', reference(variables('nestedDeploymentName')).outputs.dbLogLUNs.value, '\"')]"
        }
      }
    }
  ]
}

