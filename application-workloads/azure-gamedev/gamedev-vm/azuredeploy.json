{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.5.6.12127",
      "templateHash": "16021448726894426407"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Deployment Location"
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "defaultValue": "[deployment().properties.templateLink.uri]",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located including a trailing '/'"
      }
    },
    "_artifactsLocationSasToken": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation."
      }
    },
    "gameEngine": {
      "type": "string",
      "defaultValue": "ue_4_27",
      "allowedValues": [
        "ue_4_27",
        "ue_5_0ea"
      ],
      "metadata": {
        "description": "Select Game Engine Version"
      }
    },
    "osType": {
      "type": "string",
      "defaultValue": "win10",
      "allowedValues": [
        "win10",
        "ws2019"
      ],
      "metadata": {
        "description": "Select Operating System"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_NV12s_v3",
      "allowedValues": [
        "Standard_NC4as_T4_v3",
        "Standard_NC8as_T4_v3",
        "Standard_NC16as_T4_v3",
        "Standard_NC64as_T4_v3",
        "Standard_NV6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV12s_v3",
        "Standard_NV24s_v3",
        "Standard_NV48s_v3"
      ],
      "metadata": {
        "description": "Select Virtual Machine Skew"
      }
    },
    "administratorLogin": {
      "type": "string",
      "metadata": {
        "description": "Administrator Login for access"
      }
    },
    "passwordAdministratorLogin": {
      "type": "secureString",
      "metadata": {
        "description": "Administrator Password for access"
      }
    },
    "remoteAccessTechnology": {
      "type": "string",
      "defaultValue": "RDP",
      "allowedValues": [
        "RDP",
        "Teradici",
        "Parsec"
      ],
      "metadata": {
        "description": "Remote Access technology"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "gamingDevVM",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "vmSize": {
            "value": "[parameters('vmSize')]"
          },
          "adminName": {
            "value": "[parameters('administratorLogin')]"
          },
          "adminPass": {
            "value": "[parameters('passwordAdministratorLogin')]"
          },
          "osType": {
            "value": "[parameters('osType')]"
          },
          "gameEngine": {
            "value": "[parameters('gameEngine')]"
          },
          "remoteAccessTechnology": {
            "value": "[parameters('remoteAccessTechnology')]"
          },
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.5.6.12127",
              "templateHash": "8508946119233764992"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Resource Location."
              }
            },
            "vmSize": {
              "type": "string",
              "defaultValue": "Standard_NV12s_v3",
              "metadata": {
                "description": "Virtual Machine Size."
              }
            },
            "vmName": {
              "type": "string",
              "defaultValue": "gamedevvm",
              "metadata": {
                "description": "Virtual Machine Name."
              }
            },
            "adminName": {
              "type": "string",
              "metadata": {
                "description": "Virtual Machine User Name ."
              }
            },
            "adminPass": {
              "type": "secureString",
              "metadata": {
                "type": "password",
                "description": "Admin password."
              }
            },
            "osType": {
              "type": "string",
              "defaultValue": "win10",
              "metadata": {
                "description": "Operating System type"
              }
            },
            "gameEngine": {
              "type": "string",
              "defaultValue": "ue_4_27",
              "allowedValues": [
                "ue_4_27",
                "ue_5_0ea",
                "unity_2020_3_19f1"
              ],
              "metadata": {
                "description": "Game Engine"
              }
            },
            "gdkVersion": {
              "type": "string",
              "defaultValue": "June_2021_Update_4",
              "metadata": {
                "description": "GDK Version"
              }
            },
            "ibLicenseKey": {
              "type": "secureString",
              "defaultValue": "",
              "metadata": {
                "description": "Incredibuild License Key"
              }
            },
            "remoteAccessTechnology": {
              "type": "string",
              "defaultValue": "RDP",
              "allowedValues": [
                "RDP",
                "Teradici",
                "Parsec"
              ],
              "metadata": {
                "description": "Remote Access technology"
              }
            },
            "teradiciRegKey": {
              "type": "secureString",
              "defaultValue": "",
              "metadata": {
                "description": "Teradici Registration Key"
              }
            },
            "parsec_teamId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Parsec Team ID"
              }
            },
            "parsec_teamKey": {
              "type": "secureString",
              "defaultValue": "",
              "metadata": {
                "description": "Parsec Team Key"
              }
            },
            "parsec_host": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Parsec Hostname"
              }
            },
            "parsec_userEmail": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Parsec User Email"
              }
            },
            "parsec_isGuestAccess": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Parsec Is Guest Access"
              }
            },
            "numDataDisks": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Number of data disks"
              }
            },
            "dataDiskSize": {
              "type": "int",
              "defaultValue": 1024,
              "metadata": {
                "description": "Disk Performance Tier"
              }
            },
            "fileShareStorageAccount": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "File Share Storage Account name"
              }
            },
            "fileShareStorageAccountKey": {
              "type": "secureString",
              "defaultValue": "",
              "metadata": {
                "description": "File Share Storage Account key"
              }
            },
            "fileShareName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "File Share name"
              }
            },
            "p4Port": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Perforce Port address"
              }
            },
            "p4Username": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Perforce User"
              }
            },
            "p4Password": {
              "type": "secureString",
              "defaultValue": "",
              "metadata": {
                "description": "Perforce User password"
              }
            },
            "p4Workspace": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Perforce Client Workspace"
              }
            },
            "p4Stream": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Perforce Stream"
              }
            },
            "p4ClientViews": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Perforce Depot Client View mappings"
              }
            },
            "vnetName": {
              "type": "string",
              "defaultValue": "gamedev-vnet",
              "metadata": {
                "description": "Virtual Network name"
              }
            },
            "vnetARPrefixes": {
              "type": "array",
              "defaultValue": [
                "10.0.0.0/26"
              ],
              "metadata": {
                "description": "Address prefix of the virtual network"
              }
            },
            "vnetNewOrExisting": {
              "type": "string",
              "defaultValue": "new",
              "metadata": {
                "description": "Virtual network is new or existing"
              }
            },
            "vnetRGName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Resource Group of the Virtual network"
              }
            },
            "subNetName": {
              "type": "string",
              "defaultValue": "gamedev-vnet-subnet1",
              "metadata": {
                "description": "VM Subnet name"
              }
            },
            "subNetARPrefix": {
              "type": "string",
              "defaultValue": "10.0.0.0/28",
              "metadata": {
                "description": "Subnet prefix of the virtual network"
              }
            },
            "publicIpName": {
              "type": "string",
              "defaultValue": "GameDevVM-IP",
              "metadata": {
                "description": "Unique public ip address name"
              }
            },
            "publicIpDns": {
              "type": "string",
              "defaultValue": "[format('gamedevvm{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Unique DNS Public IP attached the VM"
              }
            },
            "publicIpAllocationMethod": {
              "type": "string",
              "defaultValue": "Dynamic",
              "metadata": {
                "description": "Public IP Allocoation Method"
              }
            },
            "publicIpSku": {
              "type": "string",
              "defaultValue": "Basic",
              "allowedValues": [
                "Basic",
                "Standard"
              ],
              "metadata": {
                "description": "SKU number"
              }
            },
            "publicIpNewOrExisting": {
              "type": "string",
              "defaultValue": "new",
              "allowedValues": [
                "new",
                "existing",
                "none"
              ],
              "metadata": {
                "description": "Public IP With or None?"
              }
            },
            "publicIpRGName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Resource Group of the Public IP Address"
              }
            },
            "environment": {
              "type": "string",
              "defaultValue": "production",
              "allowedValues": [
                "development",
                "production"
              ],
              "metadata": {
                "description": "Select Image Deployment for debugging only"
              }
            },
            "outTagsByResource": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags by resource."
              }
            },
            "_artifactsLocation": {
              "type": "string",
              "defaultValue": "[deployment().properties.templateLink.id]",
              "metadata": {
                "description": "The base URI where artifacts required by this template are located including a trailing '/'"
              }
            },
            "_artifactsLocationSasToken": {
              "type": "secureString",
              "defaultValue": "",
              "metadata": {
                "description": "The sasToken required to access _artifactsLocation."
              }
            },
            "unrealPixelStreamingEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable or disable Unreal Pixel Streaming port."
              }
            },
            "enableManagedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable Managed Identity"
              }
            },
            "enableAAD": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable Azure Active Directory Login"
              }
            }
          },
          "variables": {
            "environmentMapping": {
              "ue_4_27": "unreal_4_27",
              "ue_5_0ea": "unreal_5_0ea",
              "unity_2020_3_19f1": "unity_2020_3_19f1"
            },
            "environments": {
              "development": {
                "vmImage": {
                  "publisher": "microsoft-agci-gaming",
                  "offer": "agci-gamedev-image",
                  "sku": "[format('gamedev-{0}-{1}', parameters('gameEngine'), parameters('osType'))]",
                  "version": "latest"
                },
                "vmPlan": {
                  "publisher": "microsoft-agci-gaming",
                  "product": "agci-gamedev-image",
                  "name": "[format('gamedev-{0}-{1}', parameters('gameEngine'), parameters('osType'))]"
                }
              },
              "production": {
                "vmImage": {
                  "publisher": "microsoftcorporation1602274591143",
                  "offer": "game-dev-vm",
                  "sku": "[format('{0}_{1}', parameters('osType'), variables('environmentMapping')[parameters('gameEngine')])]",
                  "version": "latest"
                },
                "vmPlan": {
                  "publisher": "microsoftcorporation1602274591143",
                  "product": "game-dev-vm",
                  "name": "[format('{0}_{1}', parameters('osType'), variables('environmentMapping')[parameters('gameEngine')])]"
                }
              }
            },
            "vmImage": "[variables('environments')[parameters('environment')].vmImage]",
            "vmPlan": "[variables('environments')[parameters('environment')].vmPlan]",
            "ipconfName": "[format('{0}-ipconf', parameters('vmName'))]",
            "nicName": "[format('{0}-nic', parameters('vmName'))]",
            "nsgName": "[format('{0}-nsg', parameters('vmName'))]",
            "storageType": "[if(bool(greater(length(split(parameters('vmSize'), '_')), 2)), 'Premium_LRS', 'Standard_LRS')]",
            "tags": {
              "solution": "Game Development Virtual Machine",
              "engine": "[parameters('gameEngine')]",
              "ostype": "[parameters('osType')]",
              "remotesoftware": "[parameters('remoteAccessTechnology')]"
            },
            "cmdGDKInstall": "[format('(Get-Content ''C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\gdkinstall.cmd'').replace(''[VERSION]'', ''{0}'') | Set-Content ''C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\gdkinstall.cmd''', parameters('gdkVersion'))]",
            "userData": "[format('team_id={0}:key={1}:name={2}:user_email={3}:is_guest_access={4}:ibLicenseKey={5}', parameters('parsec_teamId'), parameters('parsec_teamKey'), parameters('parsec_host'), parameters('parsec_userEmail'), parameters('parsec_isGuestAccess'), parameters('ibLicenseKey'))]",
            "Script2Run": "TeradiciRegCAS.ps1",
            "CSEParams": "[format(' -pcoip_registration_code {0}', parameters('teradiciRegKey'))]",
            "cmdTeradiciRegistration": "[format('./{0}{1}', variables('Script2Run'), variables('CSEParams'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2021-04-01",
              "name": "pid-7837dd60-4ba8-419a-a26f-237bbe170773-partnercenter",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            },
            {
              "condition": "[equals(parameters('publicIpNewOrExisting'), 'new')]",
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2021-05-01",
              "name": "[parameters('publicIpName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('publicIpSku')]"
              },
              "properties": {
                "publicIPAllocationMethod": "[parameters('publicIpAllocationMethod')]",
                "dnsSettings": {
                  "domainNameLabel": "[parameters('publicIpDns')]"
                }
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2021-05-01",
              "name": "[variables('nsgName')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": "[createObject('nsgRules-RDP', if(not(parameters('unrealPixelStreamingEnabled')), createArray(createObject('name', 'RDP', 'properties', createObject('priority', 1010, 'protocol', '*', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '3389'))), createArray(createObject('name', 'RDP', 'properties', createObject('priority', 1010, 'protocol', '*', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '3389')), createObject('name', 'PixelStream', 'properties', createObject('priority', 1020, 'protocol', '*', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '80')))), 'nsgRules-Teradici', if(not(parameters('unrealPixelStreamingEnabled')), createArray(createObject('name', 'RDP', 'properties', createObject('priority', 1010, 'protocol', '*', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '3389')), createObject('name', 'PCoIPtcp', 'properties', createObject('priority', 1020, 'protocol', 'TCP', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '4172')), createObject('name', 'PCoIPudp', 'properties', createObject('priority', 1030, 'protocol', 'UDP', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '4172')), createObject('name', 'CertAuthHTTPS', 'properties', createObject('priority', 1040, 'protocol', 'TCP', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '443')), createObject('name', 'TeradiciCom', 'properties', createObject('priority', 1050, 'protocol', 'TCP', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '60443'))), createArray(createObject('name', 'RDP', 'properties', createObject('priority', 1010, 'protocol', '*', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '3389')), createObject('name', 'PCoIPtcp', 'properties', createObject('priority', 1020, 'protocol', 'TCP', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '4172')), createObject('name', 'PCoIPudp', 'properties', createObject('priority', 1030, 'protocol', 'UDP', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '4172')), createObject('name', 'CertAuthHTTPS', 'properties', createObject('priority', 1040, 'protocol', 'TCP', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '443')), createObject('name', 'TeradiciCom', 'properties', createObject('priority', 1050, 'protocol', 'TCP', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '60443')), createObject('name', 'PixelStream', 'properties', createObject('priority', 1060, 'protocol', '*', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '80')))), 'nsgRules-Parsec', if(not(parameters('unrealPixelStreamingEnabled')), createArray(createObject('name', 'RDP', 'properties', createObject('priority', 1010, 'protocol', '*', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '3389'))), createArray(createObject('name', 'RDP', 'properties', createObject('priority', 1010, 'protocol', '*', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '3389')), createObject('name', 'PixelStream', 'properties', createObject('priority', 1020, 'protocol', '*', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '80')))))[format('nsgRules-{0}', parameters('remoteAccessTechnology'))]]"
              }
            },
            {
              "condition": "[equals(parameters('vnetNewOrExisting'), 'new')]",
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2021-05-01",
              "name": "[parameters('vnetName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[first(parameters('vnetARPrefixes'))]"
                  ]
                },
                "subnets": [
                  {
                    "name": "[parameters('subNetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('subNetARPrefix')]"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2021-05-01",
              "name": "[variables('nicName')]",
              "location": "[parameters('location')]",
              "properties": {
                "enableAcceleratedNetworking": "[if(bool(greater(length(split(parameters('vmSize'), '_')), 2)), true(), false())]",
                "ipConfigurations": [
                  {
                    "name": "[variables('ipconfName')]",
                    "properties": {
                      "subnet": {
                        "id": "[resourceId(parameters('vnetRGName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subNetName'))]"
                      },
                      "privateIPAllocationMethod": "Dynamic",
                      "publicIPAddress": "[if(equals(parameters('publicIpNewOrExisting'), 'none'), null(), createObject('id', resourceId(parameters('publicIpRGName'), 'Microsoft.Network/publicIpAddresses', parameters('publicIpName'))))]"
                    }
                  }
                ],
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2021-11-01",
              "name": "[parameters('vmName')]",
              "location": "[parameters('location')]",
              "plan": "[variables('vmPlan')]",
              "identity": "[if(or(parameters('enableAAD'), parameters('enableManagedIdentity')), createObject('type', 'systemAssigned'), null())]",
              "tags": "[if(contains(parameters('outTagsByResource'), 'Microsoft.Compute/virtualMachines'), union(variables('tags'), parameters('outTagsByResource')['Microsoft.Compute/virtualMachines']), variables('tags'))]",
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "storageProfile": {
                  "copy": [
                    {
                      "name": "dataDisks",
                      "count": "[length(range(0, parameters('numDataDisks')))]",
                      "input": {
                        "lun": "[range(0, parameters('numDataDisks'))[copyIndex('dataDisks')]]",
                        "createOption": "Empty",
                        "diskSizeGB": "[parameters('dataDiskSize')]"
                      }
                    }
                  ],
                  "imageReference": "[variables('vmImage')]",
                  "osDisk": {
                    "name": "[format('{0}-osdisk', parameters('vmName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "diskSizeGB": 255,
                    "managedDisk": {
                      "storageAccountType": "[variables('storageType')]"
                    }
                  }
                },
                "osProfile": {
                  "computerName": "[parameters('vmName')]",
                  "adminUsername": "[parameters('adminName')]",
                  "adminPassword": "[parameters('adminPass')]"
                },
                "userData": "[base64(variables('userData'))]",
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
              ]
            },
            {
              "condition": "[parameters('enableAAD')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}/AADLoginForWindows', parameters('vmName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "type": "AADLoginForWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'runRemoteAccess')]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "runRemoteAccess",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "cmdGDKInstall": {
                    "value": "[variables('cmdGDKInstall')]"
                  },
                  "cmdTeradiciRegistration": {
                    "value": "[variables('cmdTeradiciRegistration')]"
                  },
                  "_artifactsLocation": {
                    "value": "[parameters('_artifactsLocation')]"
                  },
                  "_artifactsLocationSasToken": {
                    "value": "[parameters('_artifactsLocationSasToken')]"
                  },
                  "virtualMachineName": {
                    "value": "[parameters('vmName')]"
                  },
                  "remoteAccessTechnology": {
                    "value": "[parameters('remoteAccessTechnology')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "fileShareStorageAccount": {
                    "value": "[parameters('fileShareStorageAccount')]"
                  },
                  "fileShareStorageAccountKey": {
                    "value": "[parameters('fileShareStorageAccountKey')]"
                  },
                  "fileShareName": {
                    "value": "[parameters('fileShareName')]"
                  },
                  "p4Port": {
                    "value": "[parameters('p4Port')]"
                  },
                  "p4Username": {
                    "value": "[parameters('p4Username')]"
                  },
                  "p4Password": {
                    "value": "[parameters('p4Password')]"
                  },
                  "p4Workspace": {
                    "value": "[parameters('p4Workspace')]"
                  },
                  "p4Stream": {
                    "value": "[parameters('p4Stream')]"
                  },
                  "p4ClientViews": {
                    "value": "[parameters('p4ClientViews')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.5.6.12127",
                      "templateHash": "4414641532926436161"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Deployment Location"
                      }
                    },
                    "_artifactsLocation": {
                      "type": "string",
                      "defaultValue": "[deployment().properties.templateLink.uri]",
                      "metadata": {
                        "description": "The base URI where artifacts required by this template are located including a trailing '/'"
                      }
                    },
                    "_artifactsLocationSasToken": {
                      "type": "secureString",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The sasToken required to access _artifactsLocation."
                      }
                    },
                    "cmdGDKInstall": {
                      "type": "string",
                      "metadata": {
                        "description": "Toggle to Install GDK"
                      }
                    },
                    "cmdTeradiciRegistration": {
                      "type": "string",
                      "metadata": {
                        "description": "Toggle to Register Teradici"
                      }
                    },
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of Game Developer Virtual Machine"
                      }
                    },
                    "remoteAccessTechnology": {
                      "type": "string",
                      "allowedValues": [
                        "RDP",
                        "Teradici",
                        "Parsec"
                      ],
                      "metadata": {
                        "description": "Remote Access technology"
                      }
                    },
                    "fileShareStorageAccount": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of Storage Account to Link"
                      }
                    },
                    "fileShareStorageAccountKey": {
                      "type": "secureString",
                      "metadata": {
                        "description": "Key of Storage Account to Link"
                      }
                    },
                    "fileShareName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of File Share"
                      }
                    },
                    "p4Port": {
                      "type": "string",
                      "metadata": {
                        "description": "Port to use for p4"
                      }
                    },
                    "p4Username": {
                      "type": "string",
                      "metadata": {
                        "description": "Username for p4"
                      }
                    },
                    "p4Password": {
                      "type": "secureString",
                      "metadata": {
                        "description": "Password for p4"
                      }
                    },
                    "p4Workspace": {
                      "type": "string",
                      "metadata": {
                        "description": "p4 Workspace"
                      }
                    },
                    "p4Stream": {
                      "type": "string",
                      "metadata": {
                        "description": "Stream for p4"
                      }
                    },
                    "p4ClientViews": {
                      "type": "string",
                      "metadata": {
                        "description": "Client View for p4"
                      }
                    }
                  },
                  "variables": {
                    "mountFileShareParams": "[format('-storageAccount ''{0}'' -storageAccountKey ''{1}'' -fileShareName ''{2}''', parameters('fileShareStorageAccount'), parameters('fileShareStorageAccountKey'), parameters('fileShareName'))]",
                    "p4Params": "[format('-p4Port ''{0}'' -p4Username ''{1}'' -p4Password ''{2}'' -p4Workspace ''{3}'' -p4Stream ''{4}'' -p4ClientViews ''{5}''', parameters('p4Port'), parameters('p4Username'), parameters('p4Password'), parameters('p4Workspace'), parameters('p4Stream'), parameters('p4ClientViews'))]",
                    "remoteAccessExtension": {
                      "RDP": {
                        "publisher": "Microsoft.Compute",
                        "type": "CustomScriptExtension",
                        "typeHandlerVersion": "1.10",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "fileUris": [
                            "[uri(parameters('_artifactsLocation'), format('scripts/CreateDataDisk.ps1{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/MountFileShare.ps1{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/p4DepotSync.ps1{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/ibSetup.ps1{0}', parameters('_artifactsLocationSasToken')))]"
                          ],
                          "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -NoProfile -NonInteractive -command \"./CreateDataDisk.ps1;./MountFileShare.ps1 {0};./p4DepotSync.ps1 {1};./ibSetup.ps1;{2}\"', variables('mountFileShareParams'), variables('p4Params'), parameters('cmdGDKInstall'))]"
                        }
                      },
                      "Teradici": {
                        "publisher": "Microsoft.Compute",
                        "type": "CustomScriptExtension",
                        "typeHandlerVersion": "1.10",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "fileUris": [
                            "[uri(parameters('_artifactsLocation'), format('scripts/CreateDataDisk.ps1{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/MountFileShare.ps1{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/p4DepotSync.ps1{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/ibSetup.ps1{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/TeradiciRegCAS.ps1{0}', parameters('_artifactsLocationSasToken')))]"
                          ]
                        },
                        "protectedSettings": {
                          "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -command \"./CreateDataDisk.ps1;./MountFileShare.ps1 {0};./p4DepotSync.ps1 {1};./ibSetup.ps1;{2};{3}\"', variables('mountFileShareParams'), variables('p4Params'), parameters('cmdGDKInstall'), parameters('cmdTeradiciRegistration'))]"
                        }
                      },
                      "Parsec": {
                        "publisher": "Microsoft.Compute",
                        "type": "CustomScriptExtension",
                        "typeHandlerVersion": "1.10",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "fileUris": [
                            "[uri(parameters('_artifactsLocation'), format('scripts/CreateDataDisk.ps1{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/MountFileShare.ps1{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/p4DepotSync.ps1{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/ibSetup.ps1{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/PostInstall.ps1{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/parsec/Automatic-Shutdown.ps1{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/parsec/Clear-Proxy.ps1{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/parsec/CreateAutomaticShutdownScheduledTask.ps1{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/parsec/CreateClearProxyScheduledTask.ps1{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/parsec/ForceCloseShutDown.reg{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/parsec/gpt.ini{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/parsec/GPU-Update.ico{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/parsec/NetWorkRestore.ps1{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/parsec/NetworkRestore.reg{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/parsec/OneHour.ps1{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/parsec/Parsec.png{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/parsec/psscripts.ini{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/parsec/ShowDialog.ps1{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/parsec/TeamMachineSetup.ps1{0}', parameters('_artifactsLocationSasToken')))]",
                            "[uri(parameters('_artifactsLocation'), format('scripts/parsec/WarningMessage.ps1{0}', parameters('_artifactsLocationSasToken')))]"
                          ],
                          "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -NoProfile -NonInteractive -command \"./CreateDataDisk.ps1;./MountFileShare.ps1 {0};./p4DepotSync.ps1 {1};./ibSetup.ps1;{2};./PostInstall.ps1\"', variables('mountFileShareParams'), variables('p4Params'), parameters('cmdGDKInstall'))]"
                        }
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-11-01",
                      "name": "[format('{0}/CustomScriptExtension-{1}', parameters('virtualMachineName'), parameters('remoteAccessTechnology'))]",
                      "location": "[parameters('location')]",
                      "properties": "[variables('remoteAccessExtension')[parameters('remoteAccessTechnology')]]"
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', split(format('{0}/CustomScriptExtension-{1}', parameters('virtualMachineName'), parameters('remoteAccessTechnology')), '/')[0], split(format('{0}/CustomScriptExtension-{1}', parameters('virtualMachineName'), parameters('remoteAccessTechnology')), '/')[1])]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            }
          ]
        }
      }
    }
  ]
}