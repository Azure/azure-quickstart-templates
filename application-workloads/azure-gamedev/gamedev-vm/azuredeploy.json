{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.12.40.16777",
      "templateHash": "7867533791522193825"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Resource Location."
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_NV12s_v3",
      "metadata": {
        "description": "Virtual Machine Size."
      }
    },
    "useVmToSysprepCustomImage": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Use VM to sysprep an image from"
      }
    },
    "vmName": {
      "type": "string",
      "defaultValue": "gamedevvm",
      "metadata": {
        "description": "Virtual Machine Name."
      }
    },
    "adminName": {
      "type": "string",
      "metadata": {
        "description": "Virtual Machine User Name ."
      }
    },
    "adminPass": {
      "type": "secureString",
      "metadata": {
        "type": "password",
        "description": "Admin password."
      }
    },
    "osType": {
      "type": "string",
      "defaultValue": "win10",
      "allowedValues": [
        "win10",
        "ws2019"
      ],
      "metadata": {
        "description": "Operating System type"
      }
    },
    "gameEngine": {
      "type": "string",
      "defaultValue": "ue_4_27_2",
      "allowedValues": [
        "no_engine",
        "ue_4_27_2",
        "ue_5_0_1"
      ],
      "metadata": {
        "description": "Game Engine"
      }
    },
    "gdkVersion": {
      "type": "string",
      "defaultValue": "June_2021_Update_9",
      "allowedValues": [
        "June_2022_Update_1",
        "March_2022_Update_1",
        "October_2021_Update_5",
        "June_2021_Update_9"
      ],
      "metadata": {
        "description": "GDK Version"
      }
    },
    "ibLicenseKey": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "Incredibuild License Key"
      }
    },
    "remoteAccessTechnology": {
      "type": "string",
      "defaultValue": "RDP",
      "allowedValues": [
        "RDP",
        "Teradici",
        "Parsec"
      ],
      "metadata": {
        "description": "Remote Access technology"
      }
    },
    "teradiciRegKey": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "Teradici Registration Key"
      }
    },
    "parsec_teamId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Parsec Team ID"
      }
    },
    "parsec_teamKey": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "Parsec Team Key"
      }
    },
    "parsec_host": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Parsec Hostname"
      }
    },
    "parsec_userEmail": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Parsec User Email"
      }
    },
    "parsec_isGuestAccess": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Parsec Is Guest Access"
      }
    },
    "numDataDisks": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Number of data disks"
      }
    },
    "dataDiskSize": {
      "type": "int",
      "defaultValue": 1024,
      "metadata": {
        "description": "Disk Performance Tier"
      }
    },
    "fileShareStorageAccount": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "File Share Storage Account name"
      }
    },
    "fileShareStorageAccountKey": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "File Share Storage Account key"
      }
    },
    "fileShareName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "File Share name"
      }
    },
    "p4Port": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Perforce Port address"
      }
    },
    "p4Username": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Perforce User"
      }
    },
    "p4Password": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "Perforce User password"
      }
    },
    "p4Workspace": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Perforce Client Workspace"
      }
    },
    "p4Stream": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Perforce Stream"
      }
    },
    "p4ClientViews": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Perforce Depot Client View mappings"
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "gamedev-vnet",
      "metadata": {
        "description": "Virtual Network name"
      }
    },
    "vnetARPrefixes": {
      "type": "array",
      "defaultValue": [
        "10.0.0.0/26"
      ],
      "metadata": {
        "description": "Address prefix of the virtual network"
      }
    },
    "vnetNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "metadata": {
        "description": "Virtual network is new or existing"
      }
    },
    "vnetRGName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Resource Group of the Virtual network"
      }
    },
    "subNetName": {
      "type": "string",
      "defaultValue": "gamedev-vnet-subnet1",
      "metadata": {
        "description": "VM Subnet name"
      }
    },
    "subNetARPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/28",
      "metadata": {
        "description": "Subnet prefix of the virtual network"
      }
    },
    "publicIpName": {
      "type": "string",
      "defaultValue": "GameDevVM-IP",
      "metadata": {
        "description": "Unique public ip address name"
      }
    },
    "publicIpDns": {
      "type": "string",
      "defaultValue": "[format('gamedevvm{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Unique DNS Public IP attached the VM"
      }
    },
    "publicIpAllocationMethod": {
      "type": "string",
      "defaultValue": "Dynamic",
      "metadata": {
        "description": "Public IP Allocoation Method"
      }
    },
    "publicIpSku": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "Standard"
      ],
      "metadata": {
        "description": "SKU number"
      }
    },
    "publicIpNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing",
        "none"
      ],
      "metadata": {
        "description": "Public IP New or Existing or None?"
      }
    },
    "publicIpRGName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Resource Group of the Public IP Address"
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "production",
      "allowedValues": [
        "development",
        "production"
      ],
      "metadata": {
        "description": "Select Image Deployment for debugging only"
      }
    },
    "outTagsByResource": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Tags by resource."
      }
    },
    "unrealPixelStreamingEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable or disable Unreal Pixel Streaming port."
      }
    },
    "enableManagedIdentity": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable or disable the use of a Managed Identity for the VM."
      }
    },
    "enableAAD": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable or disable AAD-based login."
      }
    },
    "windowsUpdateOption": {
      "type": "string",
      "defaultValue": "AutomaticByOS",
      "allowedValues": [
        "AutomaticByOS",
        "AutomaticByPlatform",
        "Manual"
      ],
      "metadata": {
        "description": "Specifies the OS patching behavior."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('gameDevVM-{0}', deployment().name)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "vmSize": {
            "value": "[parameters('vmSize')]"
          },
          "useVmToSysprepCustomImage": {
            "value": "[parameters('useVmToSysprepCustomImage')]"
          },
          "vmName": {
            "value": "[parameters('vmName')]"
          },
          "adminName": {
            "value": "[parameters('adminName')]"
          },
          "adminPass": {
            "value": "[parameters('adminPass')]"
          },
          "osType": {
            "value": "[parameters('osType')]"
          },
          "gameEngine": {
            "value": "[parameters('gameEngine')]"
          },
          "gdkVersion": {
            "value": "[parameters('gdkVersion')]"
          },
          "ibLicenseKey": {
            "value": "[parameters('ibLicenseKey')]"
          },
          "remoteAccessTechnology": {
            "value": "[parameters('remoteAccessTechnology')]"
          },
          "teradiciRegKey": {
            "value": "[parameters('teradiciRegKey')]"
          },
          "parsec_teamId": {
            "value": "[parameters('parsec_teamId')]"
          },
          "parsec_teamKey": {
            "value": "[parameters('parsec_teamKey')]"
          },
          "parsec_host": {
            "value": "[parameters('parsec_host')]"
          },
          "parsec_userEmail": {
            "value": "[parameters('parsec_userEmail')]"
          },
          "parsec_isGuestAccess": {
            "value": "[parameters('parsec_isGuestAccess')]"
          },
          "numDataDisks": {
            "value": "[parameters('numDataDisks')]"
          },
          "dataDiskSize": {
            "value": "[parameters('dataDiskSize')]"
          },
          "fileShareStorageAccount": {
            "value": "[parameters('fileShareStorageAccount')]"
          },
          "fileShareStorageAccountKey": {
            "value": "[parameters('fileShareStorageAccountKey')]"
          },
          "fileShareName": {
            "value": "[parameters('fileShareName')]"
          },
          "p4Port": {
            "value": "[parameters('p4Port')]"
          },
          "p4Username": {
            "value": "[parameters('p4Username')]"
          },
          "p4Password": {
            "value": "[parameters('p4Password')]"
          },
          "p4Workspace": {
            "value": "[parameters('p4Workspace')]"
          },
          "p4Stream": {
            "value": "[parameters('p4Stream')]"
          },
          "p4ClientViews": {
            "value": "[parameters('p4ClientViews')]"
          },
          "vnetName": {
            "value": "[parameters('vnetName')]"
          },
          "vnetARPrefixes": {
            "value": "[parameters('vnetARPrefixes')]"
          },
          "vnetNewOrExisting": {
            "value": "[parameters('vnetNewOrExisting')]"
          },
          "vnetRGName": {
            "value": "[parameters('vnetRGName')]"
          },
          "subNetName": {
            "value": "[parameters('subNetName')]"
          },
          "subNetARPrefix": {
            "value": "[parameters('subNetARPrefix')]"
          },
          "publicIpName": {
            "value": "[parameters('publicIpName')]"
          },
          "publicIpDns": {
            "value": "[parameters('publicIpDns')]"
          },
          "publicIpAllocationMethod": {
            "value": "[parameters('publicIpAllocationMethod')]"
          },
          "publicIpSku": {
            "value": "[parameters('publicIpSku')]"
          },
          "publicIpNewOrExisting": {
            "value": "[parameters('publicIpNewOrExisting')]"
          },
          "publicIpRGName": {
            "value": "[parameters('publicIpRGName')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "outTagsByResource": {
            "value": "[parameters('outTagsByResource')]"
          },
          "unrealPixelStreamingEnabled": {
            "value": "[parameters('unrealPixelStreamingEnabled')]"
          },
          "enableManagedIdentity": {
            "value": "[parameters('enableManagedIdentity')]"
          },
          "enableAAD": {
            "value": "[parameters('enableAAD')]"
          },
          "windowsUpdateOption": {
            "value": "[parameters('windowsUpdateOption')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.10.61.36676",
              "templateHash": "1459696798853310609"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Resource Location."
              }
            },
            "vmSize": {
              "type": "string",
              "defaultValue": "Standard_NV12s_v3",
              "metadata": {
                "description": "Virtual Machine Size."
              }
            },
            "useVmToSysprepCustomImage": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Use VM to sysprep an image from"
              }
            },
            "vmName": {
              "type": "string",
              "defaultValue": "gamedevvm",
              "metadata": {
                "description": "Virtual Machine Name."
              }
            },
            "adminName": {
              "type": "string",
              "metadata": {
                "description": "Virtual Machine User Name ."
              }
            },
            "adminPass": {
              "type": "secureString",
              "metadata": {
                "type": "password",
                "description": "Admin password."
              }
            },
            "osType": {
              "type": "string",
              "defaultValue": "win10",
              "allowedValues": [
                "win10",
                "ws2019"
              ],
              "metadata": {
                "description": "Operating System type"
              }
            },
            "gameEngine": {
              "type": "string",
              "defaultValue": "ue_4_27_2",
              "allowedValues": [
                "no_engine",
                "ue_4_27_2",
                "ue_5_0_1"
              ],
              "metadata": {
                "description": "Game Engine"
              }
            },
            "gdkVersion": {
              "type": "string",
              "defaultValue": "June_2021_Update_9",
              "allowedValues": [
                "June_2022_Update_1",
                "March_2022_Update_1",
                "October_2021_Update_5",
                "June_2021_Update_9"
              ],
              "metadata": {
                "description": "GDK Version"
              }
            },
            "ibLicenseKey": {
              "type": "secureString",
              "defaultValue": "",
              "metadata": {
                "description": "Incredibuild License Key"
              }
            },
            "remoteAccessTechnology": {
              "type": "string",
              "defaultValue": "RDP",
              "allowedValues": [
                "RDP",
                "Teradici",
                "Parsec"
              ],
              "metadata": {
                "description": "Remote Access technology"
              }
            },
            "teradiciRegKey": {
              "type": "secureString",
              "defaultValue": "",
              "metadata": {
                "description": "Teradici Registration Key"
              }
            },
            "parsec_teamId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Parsec Team ID"
              }
            },
            "parsec_teamKey": {
              "type": "secureString",
              "defaultValue": "",
              "metadata": {
                "description": "Parsec Team Key"
              }
            },
            "parsec_host": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Parsec Hostname"
              }
            },
            "parsec_userEmail": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Parsec User Email"
              }
            },
            "parsec_isGuestAccess": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Parsec Is Guest Access"
              }
            },
            "numDataDisks": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Number of data disks"
              }
            },
            "dataDiskSize": {
              "type": "int",
              "defaultValue": 1024,
              "metadata": {
                "description": "Disk Performance Tier"
              }
            },
            "fileShareStorageAccount": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "File Share Storage Account name"
              }
            },
            "fileShareStorageAccountKey": {
              "type": "secureString",
              "defaultValue": "",
              "metadata": {
                "description": "File Share Storage Account key"
              }
            },
            "fileShareName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "File Share name"
              }
            },
            "p4Port": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Perforce Port address"
              }
            },
            "p4Username": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Perforce User"
              }
            },
            "p4Password": {
              "type": "secureString",
              "defaultValue": "",
              "metadata": {
                "description": "Perforce User password"
              }
            },
            "p4Workspace": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Perforce Client Workspace"
              }
            },
            "p4Stream": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Perforce Stream"
              }
            },
            "p4ClientViews": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Perforce Depot Client View mappings"
              }
            },
            "vnetName": {
              "type": "string",
              "defaultValue": "gamedev-vnet",
              "metadata": {
                "description": "Virtual Network name"
              }
            },
            "vnetARPrefixes": {
              "type": "array",
              "defaultValue": [
                "10.0.0.0/26"
              ],
              "metadata": {
                "description": "Address prefix of the virtual network"
              }
            },
            "vnetNewOrExisting": {
              "type": "string",
              "defaultValue": "new",
              "metadata": {
                "description": "Virtual network is new or existing"
              }
            },
            "vnetRGName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Resource Group of the Virtual network"
              }
            },
            "subNetName": {
              "type": "string",
              "defaultValue": "gamedev-vnet-subnet1",
              "metadata": {
                "description": "VM Subnet name"
              }
            },
            "subNetARPrefix": {
              "type": "string",
              "defaultValue": "10.0.0.0/28",
              "metadata": {
                "description": "Subnet prefix of the virtual network"
              }
            },
            "publicIpName": {
              "type": "string",
              "defaultValue": "GameDevVM-IP",
              "metadata": {
                "description": "Unique public ip address name"
              }
            },
            "publicIpDns": {
              "type": "string",
              "defaultValue": "[format('gamedevvm{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Unique DNS Public IP attached the VM"
              }
            },
            "publicIpAllocationMethod": {
              "type": "string",
              "defaultValue": "Dynamic",
              "metadata": {
                "description": "Public IP Allocoation Method"
              }
            },
            "publicIpSku": {
              "type": "string",
              "defaultValue": "Basic",
              "allowedValues": [
                "Basic",
                "Standard"
              ],
              "metadata": {
                "description": "SKU number"
              }
            },
            "publicIpNewOrExisting": {
              "type": "string",
              "defaultValue": "new",
              "allowedValues": [
                "new",
                "existing",
                "none"
              ],
              "metadata": {
                "description": "Public IP New or Existing or None?"
              }
            },
            "publicIpRGName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Resource Group of the Public IP Address"
              }
            },
            "environment": {
              "type": "string",
              "defaultValue": "production",
              "allowedValues": [
                "development",
                "production"
              ],
              "metadata": {
                "description": "Select Image Deployment for debugging only"
              }
            },
            "outTagsByResource": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags by resource."
              }
            },
            "unrealPixelStreamingEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable or disable Unreal Pixel Streaming port."
              }
            },
            "enableManagedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable or disable the use of a Managed Identity for the VM."
              }
            },
            "enableAAD": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable or disable AAD-based login."
              }
            },
            "windowsUpdateOption": {
              "type": "string",
              "defaultValue": "AutomaticByOS",
              "allowedValues": [
                "AutomaticByOS",
                "AutomaticByPlatform",
                "Manual"
              ],
              "metadata": {
                "description": "Specifies the OS patching behavior."
              }
            }
          },
          "variables": {
            "environmentMapping": {
              "no_engine": "no_engine_1_0",
              "ue_4_27_2": "unreal_4_27_2",
              "ue_5_0_1": "unreal_5_0_1"
            },
            "environments": {
              "development": {
                "vmImage": {
                  "publisher": "microsoft-azure-gaming",
                  "offer": "game-dev-vm",
                  "sku": "[format('{0}_{1}', parameters('osType'), variables('environmentMapping')[parameters('gameEngine')])]",
                  "version": "latest"
                },
                "vmPlan": {
                  "publisher": "microsoft-azure-gaming",
                  "product": "game-dev-vm",
                  "name": "[format('{0}_{1}', parameters('osType'), variables('environmentMapping')[parameters('gameEngine')])]"
                }
              },
              "production": {
                "vmImage": {
                  "publisher": "microsoft-azure-gaming",
                  "offer": "game-dev-vm",
                  "sku": "[format('{0}_{1}', parameters('osType'), variables('environmentMapping')[parameters('gameEngine')])]",
                  "version": "latest"
                },
                "vmPlan": {
                  "publisher": "microsoft-azure-gaming",
                  "product": "game-dev-vm",
                  "name": "[format('{0}_{1}', parameters('osType'), variables('environmentMapping')[parameters('gameEngine')])]"
                }
              }
            },
            "vmImage": "[variables('environments')[parameters('environment')].vmImage]",
            "vmPlan": "[variables('environments')[parameters('environment')].vmPlan]",
            "ipconfName": "[format('{0}-ipconf', parameters('vmName'))]",
            "nicName": "[format('{0}-nic', parameters('vmName'))]",
            "nsgName": "[format('{0}-nsg', parameters('vmName'))]",
            "storageType": "[if(bool(greater(length(split(parameters('vmSize'), '_')), 2)), 'Premium_LRS', 'Standard_LRS')]",
            "tags": {
              "solution": "Game Development Virtual Machine",
              "engine": "[parameters('gameEngine')]",
              "ostype": "[parameters('osType')]",
              "remotesoftware": "[parameters('remoteAccessTechnology')]"
            },
            "countDataDisks": "[if(not(startsWith(parameters('gameEngine'), 'ue_')), parameters('numDataDisks'), add(parameters('numDataDisks'), 1))]",
            "customData": "[format('fileShareStorageAccount={0}\nfileShareStorageAccountKey={1}\nfileShareName={2}\n\np4Port={3}\np4Username={4}\np4Password={5}\np4Workspace={6}\np4Stream={7}\np4ClientViews={8}\n\nibLicenseKey={9}\n\ngdkVersion={10}\nuseVmToSysprepCustomImage={11}\n\nremoteAccessTechnology={12}\n\nteradiciRegKey={13}\n\nparsecTeamId={14}\nparsecTeamKey={15}\nparsecHost={16}\nparsecUserEmail={17}\nparsecIsGuestAccess={18}\n\ndeployedFromSolutionTemplate={19}\n', parameters('fileShareStorageAccount'), parameters('fileShareStorageAccountKey'), parameters('fileShareName'), parameters('p4Port'), parameters('p4Username'), parameters('p4Password'), parameters('p4Workspace'), parameters('p4Stream'), parameters('p4ClientViews'), parameters('ibLicenseKey'), parameters('gdkVersion'), parameters('useVmToSysprepCustomImage'), parameters('remoteAccessTechnology'), parameters('teradiciRegKey'), parameters('parsec_teamId'), parameters('parsec_teamKey'), parameters('parsec_host'), parameters('parsec_userEmail'), parameters('parsec_isGuestAccess'), false())]"
          },
          "resources": [
            {
              "condition": "[equals(parameters('publicIpNewOrExisting'), 'new')]",
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2021-05-01",
              "name": "[parameters('publicIpName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('publicIpSku')]"
              },
              "properties": {
                "publicIPAllocationMethod": "[parameters('publicIpAllocationMethod')]",
                "dnsSettings": {
                  "domainNameLabel": "[parameters('publicIpDns')]"
                }
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2021-05-01",
              "name": "[variables('nsgName')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": "[createObject('nsgRules-RDP', if(not(parameters('unrealPixelStreamingEnabled')), createArray(createObject('name', 'RDP', 'properties', createObject('priority', 1010, 'protocol', '*', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '3389'))), createArray(createObject('name', 'RDP', 'properties', createObject('priority', 1010, 'protocol', '*', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '3389')), createObject('name', 'PixelStream', 'properties', createObject('priority', 1020, 'protocol', '*', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '80')))), 'nsgRules-Teradici', if(not(parameters('unrealPixelStreamingEnabled')), createArray(createObject('name', 'RDP', 'properties', createObject('priority', 1010, 'protocol', '*', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '3389')), createObject('name', 'PCoIPtcp', 'properties', createObject('priority', 1020, 'protocol', 'TCP', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '4172')), createObject('name', 'PCoIPudp', 'properties', createObject('priority', 1030, 'protocol', 'UDP', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '4172')), createObject('name', 'CertAuthHTTPS', 'properties', createObject('priority', 1040, 'protocol', 'TCP', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '443')), createObject('name', 'TeradiciCom', 'properties', createObject('priority', 1050, 'protocol', 'TCP', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '60443'))), createArray(createObject('name', 'RDP', 'properties', createObject('priority', 1010, 'protocol', '*', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '3389')), createObject('name', 'PCoIPtcp', 'properties', createObject('priority', 1020, 'protocol', 'TCP', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '4172')), createObject('name', 'PCoIPudp', 'properties', createObject('priority', 1030, 'protocol', 'UDP', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '4172')), createObject('name', 'CertAuthHTTPS', 'properties', createObject('priority', 1040, 'protocol', 'TCP', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '443')), createObject('name', 'TeradiciCom', 'properties', createObject('priority', 1050, 'protocol', 'TCP', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '60443')), createObject('name', 'PixelStream', 'properties', createObject('priority', 1060, 'protocol', '*', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '80')))), 'nsgRules-Parsec', if(not(parameters('unrealPixelStreamingEnabled')), createArray(createObject('name', 'RDP', 'properties', createObject('priority', 1010, 'protocol', '*', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '3389'))), createArray(createObject('name', 'RDP', 'properties', createObject('priority', 1010, 'protocol', '*', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '3389')), createObject('name', 'PixelStream', 'properties', createObject('priority', 1020, 'protocol', '*', 'access', 'Allow', 'direction', 'Inbound', 'sourceAddressPrefix', '*', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '80')))))[format('nsgRules-{0}', parameters('remoteAccessTechnology'))]]"
              }
            },
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2021-05-01",
              "name": "[variables('nicName')]",
              "location": "[parameters('location')]",
              "properties": {
                "enableAcceleratedNetworking": "[if(bool(greater(length(split(parameters('vmSize'), '_')), 2)), true(), false())]",
                "ipConfigurations": [
                  {
                    "name": "[variables('ipconfName')]",
                    "properties": {
                      "subnet": {
                        "id": "[resourceId(parameters('vnetRGName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subNetName'))]"
                      },
                      "privateIPAllocationMethod": "Dynamic",
                      "publicIPAddress": "[if(equals(parameters('publicIpNewOrExisting'), 'none'), null(), createObject('id', resourceId(parameters('publicIpRGName'), 'Microsoft.Network/publicIpAddresses', parameters('publicIpName'))))]"
                    }
                  }
                ],
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-{1}', parameters('vnetName'), deployment().name))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2021-11-01",
              "name": "[parameters('vmName')]",
              "location": "[parameters('location')]",
              "plan": "[variables('vmPlan')]",
              "identity": "[if(or(parameters('enableAAD'), parameters('enableManagedIdentity')), createObject('type', 'systemAssigned'), null())]",
              "tags": "[if(contains(parameters('outTagsByResource'), 'Microsoft.Compute/virtualMachines'), union(variables('tags'), parameters('outTagsByResource')['Microsoft.Compute/virtualMachines']), variables('tags'))]",
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "storageProfile": {
                  "copy": [
                    {
                      "name": "dataDisks",
                      "count": "[length(range(0, variables('countDataDisks')))]",
                      "input": {
                        "lun": "[range(0, variables('countDataDisks'))[copyIndex('dataDisks')]]",
                        "createOption": "[if(and(startsWith(parameters('gameEngine'), 'ue_'), equals(range(0, variables('countDataDisks'))[copyIndex('dataDisks')], 0)), 'FromImage', 'Empty')]",
                        "diskSizeGB": "[if(and(startsWith(parameters('gameEngine'), 'ue_'), equals(range(0, variables('countDataDisks'))[copyIndex('dataDisks')], 0)), 255, parameters('dataDiskSize'))]"
                      }
                    }
                  ],
                  "imageReference": "[variables('vmImage')]",
                  "osDisk": {
                    "name": "[format('{0}-osdisk', parameters('vmName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "diskSizeGB": 255,
                    "managedDisk": {
                      "storageAccountType": "[variables('storageType')]"
                    }
                  }
                },
                "osProfile": {
                  "computerName": "[parameters('vmName')]",
                  "adminUsername": "[parameters('adminName')]",
                  "adminPassword": "[parameters('adminPass')]",
                  "windowsConfiguration": {
                    "enableAutomaticUpdates": "[if(bool(not(equals(parameters('windowsUpdateOption'), 'Manual'))), true(), false())]",
                    "patchSettings": {
                      "patchMode": "[parameters('windowsUpdateOption')]"
                    }
                  },
                  "customData": "[base64(variables('customData'))]"
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
              ]
            },
            {
              "condition": "[parameters('enableAAD')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}/AADLoginForWindows', parameters('vmName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "type": "AADLoginForWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "condition": "[equals(parameters('vnetNewOrExisting'), 'new')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-{1}', parameters('vnetName'), deployment().name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('vnetName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "addressPrefixes": {
                    "value": [
                      "[first(parameters('vnetARPrefixes'))]"
                    ]
                  },
                  "subnets": {
                    "value": [
                      {
                        "name": "[parameters('subNetName')]",
                        "addressPrefix": "[parameters('subNetARPrefix')]",
                        "privateEndpointNetworkPolicies": "Disabled",
                        "privateLinkServiceNetworkPolicies": "Enabled",
                        "networkSecurityGroupId": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.9.1.41621",
                      "templateHash": "10893164274897986397"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Virtual Network (vNet) Name."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "addressPrefixes": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. An Array of 1 or more IP Address Prefixes for the Virtual Network."
                      }
                    },
                    "subnets": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An Array of subnets to deploy to the Virtual Network."
                      }
                    },
                    "dnsServers": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. DNS Servers associated to the Virtual Network."
                      }
                    },
                    "ddosProtectionPlanId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the DDoS protection plan to assign the VNET to. If it's left blank, DDoS protection will not be configured. If it's provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription."
                      }
                    },
                    "virtualNetworkPeerings": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Virtual Network Peerings configurations"
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "NotSpecified",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "CanNotDelete",
                        "NotSpecified",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "logsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "VMProtectionAlerts"
                      ],
                      "allowedValues": [
                        "VMProtectionAlerts"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "metricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('logsToEnable'))]",
                        "input": {
                          "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('metricsToEnable'))]",
                        "input": {
                          "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ],
                    "dnsServers_var": {
                      "dnsServers": "[array(parameters('dnsServers'))]"
                    },
                    "ddosProtectionPlan": {
                      "id": "[parameters('ddosProtectionPlanId')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2021-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "subnets",
                            "count": "[length(parameters('subnets'))]",
                            "input": {
                              "name": "[parameters('subnets')[copyIndex('subnets')].name]",
                              "properties": {
                                "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].addressPrefix]",
                                "addressPrefixes": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'addressPrefixes'), parameters('subnets')[copyIndex('subnets')].addressPrefixes, createArray())]",
                                "applicationGatewayIpConfigurations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'applicationGatewayIpConfigurations'), parameters('subnets')[copyIndex('subnets')].applicationGatewayIpConfigurations, createArray())]",
                                "delegations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'delegations'), parameters('subnets')[copyIndex('subnets')].delegations, createArray())]",
                                "ipAllocations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'ipAllocations'), parameters('subnets')[copyIndex('subnets')].ipAllocations, createArray())]",
                                "natGateway": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'natGatewayId'), createObject('id', parameters('subnets')[copyIndex('subnets')].natGatewayId), json('null'))]",
                                "networkSecurityGroup": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'networkSecurityGroupId'), createObject('id', parameters('subnets')[copyIndex('subnets')].networkSecurityGroupId), json('null'))]",
                                "privateEndpointNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'privateEndpointNetworkPolicies'), parameters('subnets')[copyIndex('subnets')].privateEndpointNetworkPolicies, null())]",
                                "privateLinkServiceNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'privateLinkServiceNetworkPolicies'), parameters('subnets')[copyIndex('subnets')].privateLinkServiceNetworkPolicies, null())]",
                                "routeTable": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'routeTableId'), createObject('id', parameters('subnets')[copyIndex('subnets')].routeTableId), json('null'))]",
                                "serviceEndpoints": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'serviceEndpoints'), parameters('subnets')[copyIndex('subnets')].serviceEndpoints, createArray())]",
                                "serviceEndpointPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'serviceEndpointPolicies'), parameters('subnets')[copyIndex('subnets')].serviceEndpointPolicies, createArray())]"
                              }
                            }
                          }
                        ],
                        "addressSpace": {
                          "addressPrefixes": "[parameters('addressPrefixes')]"
                        },
                        "ddosProtectionPlan": "[if(not(empty(parameters('ddosProtectionPlanId'))), variables('ddosProtectionPlan'), null())]",
                        "dhcpOptions": "[if(not(empty(parameters('dnsServers'))), variables('dnsServers_var'), null())]",
                        "enableDdosProtection": "[not(empty(parameters('ddosProtectionPlanId')))]"
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                      "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "virtualNetwork_peering_local",
                        "count": "[length(parameters('virtualNetworkPeerings'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-virtualNetworkPeering-local-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "localVnetName": {
                            "value": "[parameters('name')]"
                          },
                          "remoteVirtualNetworkId": {
                            "value": "[parameters('virtualNetworkPeerings')[copyIndex()].remoteVirtualNetworkId]"
                          },
                          "name": {
                            "value": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'name'), parameters('virtualNetworkPeerings')[copyIndex()].name, format('{0}-{1}', parameters('name'), last(split(parameters('virtualNetworkPeerings')[copyIndex()].remoteVirtualNetworkId, '/'))))]"
                          },
                          "allowForwardedTraffic": {
                            "value": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'allowForwardedTraffic'), parameters('virtualNetworkPeerings')[copyIndex()].allowForwardedTraffic, true())]"
                          },
                          "allowGatewayTransit": {
                            "value": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'allowGatewayTransit'), parameters('virtualNetworkPeerings')[copyIndex()].allowGatewayTransit, false())]"
                          },
                          "allowVirtualNetworkAccess": {
                            "value": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'allowVirtualNetworkAccess'), parameters('virtualNetworkPeerings')[copyIndex()].allowVirtualNetworkAccess, true())]"
                          },
                          "doNotVerifyRemoteGateways": {
                            "value": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'doNotVerifyRemoteGateways'), parameters('virtualNetworkPeerings')[copyIndex()].doNotVerifyRemoteGateways, true())]"
                          },
                          "useRemoteGateways": {
                            "value": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'useRemoteGateways'), parameters('virtualNetworkPeerings')[copyIndex()].useRemoteGateways, false())]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.9.1.41621",
                              "templateHash": "7913383313645172292"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkId'), '/')))]",
                              "metadata": {
                                "description": "Optional. The Name of Vnet Peering resource. If not provided, default value will be localVnetName-remoteVnetName"
                              }
                            },
                            "localVnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Name of the Virtual Network to add the peering to."
                              }
                            },
                            "remoteVirtualNetworkId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID"
                              }
                            },
                            "allowForwardedTraffic": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true"
                              }
                            },
                            "allowGatewayTransit": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false"
                              }
                            },
                            "allowVirtualNetworkAccess": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true"
                              }
                            },
                            "doNotVerifyRemoteGateways": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true"
                              }
                            },
                            "useRemoteGateways": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2022-01-01",
                              "name": "[format('{0}/{1}', parameters('localVnetName'), parameters('name'))]",
                              "properties": {
                                "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                                "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                                "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                                "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                                "useRemoteGateways": "[parameters('useRemoteGateways')]",
                                "remoteVirtualNetwork": {
                                  "id": "[parameters('remoteVirtualNetworkId')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the virtual network peering was deployed into"
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the virtual network peering"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', parameters('localVnetName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the virtual network peering"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringEnabled'), equals(parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringEnabled, true()), false())]",
                      "copy": {
                        "name": "virtualNetwork_peering_remote",
                        "count": "[length(parameters('virtualNetworkPeerings'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-virtualNetworkPeering-remote-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "subscriptionId": "[split(parameters('virtualNetworkPeerings')[copyIndex()].remoteVirtualNetworkId, '/')[2]]",
                      "resourceGroup": "[split(parameters('virtualNetworkPeerings')[copyIndex()].remoteVirtualNetworkId, '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "localVnetName": {
                            "value": "[last(split(parameters('virtualNetworkPeerings')[copyIndex()].remoteVirtualNetworkId, '/'))]"
                          },
                          "remoteVirtualNetworkId": {
                            "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                          },
                          "name": {
                            "value": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringName'), parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringName, format('{0}-{1}', last(split(parameters('virtualNetworkPeerings')[copyIndex()].remoteVirtualNetworkId, '/')), parameters('name')))]"
                          },
                          "allowForwardedTraffic": {
                            "value": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringAllowForwardedTraffic'), parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringAllowForwardedTraffic, true())]"
                          },
                          "allowGatewayTransit": {
                            "value": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringAllowGatewayTransit'), parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringAllowGatewayTransit, false())]"
                          },
                          "allowVirtualNetworkAccess": {
                            "value": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringAllowVirtualNetworkAccess'), parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringAllowVirtualNetworkAccess, true())]"
                          },
                          "doNotVerifyRemoteGateways": {
                            "value": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringDoNotVerifyRemoteGateways'), parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringDoNotVerifyRemoteGateways, true())]"
                          },
                          "useRemoteGateways": {
                            "value": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringUseRemoteGateways'), parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringUseRemoteGateways, false())]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.9.1.41621",
                              "templateHash": "7913383313645172292"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkId'), '/')))]",
                              "metadata": {
                                "description": "Optional. The Name of Vnet Peering resource. If not provided, default value will be localVnetName-remoteVnetName"
                              }
                            },
                            "localVnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Name of the Virtual Network to add the peering to."
                              }
                            },
                            "remoteVirtualNetworkId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID"
                              }
                            },
                            "allowForwardedTraffic": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true"
                              }
                            },
                            "allowGatewayTransit": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false"
                              }
                            },
                            "allowVirtualNetworkAccess": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true"
                              }
                            },
                            "doNotVerifyRemoteGateways": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true"
                              }
                            },
                            "useRemoteGateways": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2022-01-01",
                              "name": "[format('{0}/{1}', parameters('localVnetName'), parameters('name'))]",
                              "properties": {
                                "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                                "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                                "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                                "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                                "useRemoteGateways": "[parameters('useRemoteGateways')]",
                                "remoteVirtualNetwork": {
                                  "id": "[parameters('remoteVirtualNetworkId')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the virtual network peering was deployed into"
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the virtual network peering"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', parameters('localVnetName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the virtual network peering"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "virtualNetwork_rbac",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VNet-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": {
                            "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), parameters('roleAssignments')[copyIndex()].description, '')]"
                          },
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "principalType": {
                            "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), parameters('roleAssignments')[copyIndex()].principalType, '')]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.9.1.41621",
                              "templateHash": "6570518281545653594"
                            }
                          },
                          "parameters": {
                            "description": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "principalIds": {
                              "type": "array"
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string"
                            },
                            "resourceId": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                              "Cosmos DB Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                              "DocumentDB Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5bd9cd88-fe45-4216-938b-f97437e15450')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                              "SQL Managed Instance Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4939a1f6-9ae0-4e48-a1e0-f2cbe897382d')]",
                              "SQL Security Manager": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '056cd41c-7e88-42e1-933e-88ba6a50c9c3')]",
                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                              "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the virtual network was deployed into"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the virtual network"
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the virtual network"
                      }
                    },
                    "subnetNames": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('subnets'))]",
                        "input": "[parameters('subnets')[copyIndex()].name]"
                      },
                      "metadata": {
                        "description": "The names of the deployed subnets"
                      }
                    },
                    "subnetResourceIds": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('subnets'))]",
                        "input": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('name'), parameters('subnets')[copyIndex()].name)]"
                      },
                      "metadata": {
                        "description": "The resource IDs of the deployed subnets"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
              ]
            }
          ],
          "outputs": {
            "Host_Name": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName')), '2021-05-01').dnsSettings.fqdn]",
              "metadata": {
                "description": "Game Developer Virtual Machine Host Name"
              }
            },
            "UserName": {
              "type": "string",
              "value": "[parameters('adminName')]",
              "metadata": {
                "description": "Game Developer Virtual Machine User Name"
              }
            }
          }
        }
      }
    }
  ]
}