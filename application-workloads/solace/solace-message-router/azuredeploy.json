{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the virtual Machine(s) hosting the PubSub+ event broker instance(s). Do not use special characters."
      }
    },
    "vmAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the virtual Machine(s). Azure sets rules on passwords, check the online feedback."
      }
    },
    "solaceAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the PubSub+ event broker management 'admin' user. For password rules refer to https://docs.solace.com/Configuring-and-Managing/Configuring-Internal-CLI-User-Accounts.htm#Changing-CLI-User-Passwords "
      }
    },
    "securityGroupName": {
      "type": "string",
      "defaultValue": "solace-security",
      "metadata": {
        "description": "Security group defined to support PubSub+ event broker system level and default message vpn ports."
      }
    },
    "workspaceName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional: Unique OMS Workspace Name for Log Analytics. Leave this field empty to not deploy an OMS Workspace."
      }
    },
    "workspaceRegion": {
      "type": "string",
      "defaultValue": "East US",
      "metadata": {
        "description": "OMS Workspace Region for Log Analytics. Not used if Workspace Name is empty."
      },
      "allowedValues": [
        "East US",
        "West Europe",
        "Southeast Asia",
        "Australia Southeast",
        "Japan East",
        "UK South",
        "Central India",
        "Canada Central"
      ]
    },
    "vmAndLoadbalancerExposure": {
      "type": "string",
      "defaultValue": "Public",
      "metadata": {
        "description": "Specify the type of access to the broker VMs for SSH and to the Load Balancer for broker services. 'Internal' will make them accessible only from the local virtual network"
      },
      "allowedValues": [
        "Internal",
        "Public"
      ]
    },
    "dnsLabelForPublicLoadBalancer": {
      "type": "string",
      "defaultValue": "[concat('lb', uniqueString(resourceGroup().id, deployment().name))]",
      "metadata": {
        "description": "Ignored if Local exposure selected. If using a Public access, provide a unique DNS Label for the Load Balancer access IP. Name must satisfy regular expression ^[a-z][a-z0-9-]{1,61}[a-z0-9]$. Default will generate a unique string"
      }
    },
    "dnsLabelForVmIp": {
      "type": "string",
      "defaultValue": "[concat('vm', uniqueString(resourceGroup().id, deployment().name))]",
      "metadata": {
        "description": "Ignored if Local exposure selected. If using a Public access, provide a unique DNS Label for the broker Virtual Machine(s). Do not use '-'. Default will generate a unique string"
      }
    },
    "centosVersion": {
      "type": "string",
      "defaultValue": "7_9",
      "metadata": {
        "description": "The CentOS version for deploying the Docker containers. This will pick a fully patched image of this given CentOS version. Allowed values: 7.9"
      },
      "allowedValues": [
        "7_9"
      ]
    },
    "maxNumberOfClientConnections": {
      "type": "string",
      "defaultValue": "100",
      "metadata": {
        "description": "Broker system scaling: the maximum supported number of client connections"
      },
      "allowedValues": [
        "100",
        "1000",
        "10000",
        "100000",
        "200000"
      ]
    },
    "maxNumberOfQueueMessages": {
      "type": "string",
      "defaultValue": "100",
      "metadata": {
        "description": "Broker system scaling: the maximum number of queue messages, in millions of messages"
      },
      "allowedValues": [
        "100",
        "240",
        "3000"
      ]
    },
    "messageRoutingNodeVmSize": {
      "type": "string",
      "defaultValue": "Standard_D2_v3",
      "metadata": {
        "description": "The size of a PubSub+ broker message routing node VM. Important: ensure adequate CPU and Memory resources are available to support the selected broker system scaling parameters. For requirements check the resource calculator at https://docs.solace.com/Assistance-Tools/Resource-Calculator/pubsubplus-resource-calculator.html."
      },
      "allowedValues": [
        "Standard_D2_v3",
        "Standard_D4_v3",
        "Standard_D8_v3",
        "Standard_D16_v3",
        "Standard_D2s_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3",
        "Standard_D16s_v3"
      ]
    },
    "monitorNodeVmSize": {
      "type": "string",
      "defaultValue": "Standard_D2_v3",
      "metadata": {
        "description": "The size of the PubSub+ monitor node VM in a High Availabity deployment. For requirements check the resource calculator at https://docs.solace.com/Assistance-Tools/Resource-Calculator/pubsubplus-resource-calculator.html."
      },
      "allowedValues": [
        "Standard_D2_v3",
        "Standard_D2s_v3"
      ]
    },
    "dataDiskSize": {
      "type": "string",
      "defaultValue": "0",
      "metadata": {
        "description": "The size of the data disk in GB for diagnostics and message spooling on the Solace Message Routing Nodes. For requirements check the resource calculator at https://docs.solace.com/Assistance-Tools/Resource-Calculator/pubsubplus-resource-calculator.html."
      },
      "allowedValues": [
        "0",
        "8",
        "16",
        "32",
        "64",
        "128",
        "256"
      ]
    },
    "brokerDockerImageReference": {
      "type": "string",
      "defaultValue": "solace/solace-pubsub-standard:latest",
      "metadata": {
          "description": "Solace PubSub+ event broker docker image reference: a docker registry name with optional tag or a download URL. The download URL can be obtained from http://dev.solace.com/downloads/ or it can be a url to a remotely hosted load version. Default will use the latest image available from Docker Hub."
      }
    },
    "deploymentModel": {
      "type": "string",
      "metadata": {
        "description": "Deploy three node HA cluster or single node"
      },
      "allowedValues": [
        "HighAvailability",
        "SingleNode"
      ]
    },
    "existingVirtualNetworkName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional: Only used if deploying into an existing virtual network and subnet. Specify the Existing Virtual Network Name together with the Existing Subnet Name, otherwise leave it at default blank."
      }
    },
    "existingSubnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional: Only used if deploying into an existing virtual network and subnet. Specify the Existing Virtual Network Name together with the Existing Subnet Name, otherwise leave it at default blank."
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "The virtual network's address range in CIDR notation where the PubSub+ event broker will be deployed."
      }
    },
    "subnetPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/24",
      "metadata": {
        "description": "The subnet's address range in CIDR notation where the PubSub+ event broker will be deployed. It must be contained by the address space of the virtual network. The address range of a subnet which is in use can't be edited."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources. Default will use the same location as the Resource Group."
      }
    },
    "numberOfFaultDomains": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "The number of fault domains to be used for the deployment. For the maximum number fault domains available to your location refer to https://github.com/MicrosoftDocs/azure-docs/blob/master/includes/managed-disks-common-fault-domain-region-list.md"
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located."
      },
      "defaultValue": "[deployment().properties.templatelink.uri]"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "Optional: The Shared Access Signatures (SAS) token if required for the artifacts location, otherwise leave it at default blank."
      },
      "defaultValue": ""
    }
  },
  "variables": {
    "availabilitySetName": "solace-availabilityset",
    "platformFaultDomainCount": "[parameters('numberOfFaultDomains')]",
    "platformUpdateDomainCount": "[if(equals(parameters('numberOfFaultDomains'), 1), 1, 3)]",
    "imagePublisher": "OpenLogic",
    "imageOffer": "CentOS",
    "nestedTemplatesLocation": "nestedtemplates/",
    "solaceSecurityTemplateName": "SolaceSecurity.Template",
    "securitySharedTemplateName": "security-shared-resources.json",
    "securitySharedTemplateUri": "[uri(parameters('_artifactsLocation'), concat(variables('nestedTemplatesLocation'), variables('securitySharedTemplateName'), parameters('_artifactsLocationSasToken')))]",
    "solaceLoadBalancerName": "SolaceLoadBalancer.Template",
    "loadBalancerSharedTemplateName": "loadbalancer-shared-resources.json",
    "loadBalancerSharedTemplateUri": "[uri(parameters('_artifactsLocation'), concat(variables('nestedTemplatesLocation'), variables('loadBalancerSharedTemplateName'), parameters('_artifactsLocationSasToken')))]",
    "solaceUpdateSubnetName": "SolaceUpdateSubnet.Template",
    "updateSubnetSharedTemplateName": "update-subnet-shared-resources.json",
    "updateSubnetSharedTemplateUri": "[uri(parameters('_artifactsLocation'), concat(variables('nestedTemplatesLocation'), variables('updateSubnetSharedTemplateName'), parameters('_artifactsLocationSasToken')))]",
    "scriptsLocation": "scripts/",
    "solaceInstallScriptName": "install-solace.sh",
    "solaceInstallScriptFileUri": "[uri(parameters('_artifactsLocation'), concat(variables('scriptsLocation'), variables('solaceInstallScriptName'), parameters('_artifactsLocationSasToken')))]",
    "sempQueryScriptName": "semp_query.sh",
    "sempQueryScriptFileUri": "[uri(parameters('_artifactsLocation'), concat(variables('scriptsLocation'), variables('sempQueryScriptName'), parameters('_artifactsLocationSasToken')))]",
    "publicIPAddressNameVM": "myVMPublicIPD",
    "publicIPAddressNameLB": "myLBPublicIPD",
    "publicIPAddressType": "Dynamic",
    "virtualNetworkName": "[if(not(empty(parameters('existingVirtualNetworkName'))), parameters('existingVirtualNetworkName'), 'solace-vnet')]",
    "subnetName": "[if(not(empty(parameters('existingSubnetName'))), parameters('existingSubnetName'), 'solace-subnet')]",
    "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
    "nicName": "Nicd",
    "numberOfNodes": {
      "HighAvailability": 3,
      "SingleNode": 1
    },
    "numberOfInstances": "[variables('numberOfNodes')[parameters('deploymentModel')]]",
    "monitorNodeIndex": 2,
    "lbName" : "solace-ha-group-loadbalancer",
    "lbPoolName": "solace-ha-group",
    "lbPoolID": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('lbName'), variables('lbPoolName'))]",
    "dataDisksChoices": {
      "0": [
        {
          "name": "[concat(parameters('dnsLabelForVmIp'), 0, '_DataDisk')]",
          "diskSizeGB": "[parameters('dataDiskSize')]",
          "lun": 0,
          "caching": "ReadWrite",
          "createOption": "Empty",
          "managedDisk": {
            "storageAccountType": "StandardSSD_LRS"
          }
        }
      ],
      "1": [
        {
          "name": "[concat(parameters('dnsLabelForVmIp'), 1, '_DataDisk')]",
          "diskSizeGB": "[parameters('dataDiskSize')]",
          "lun": 0,
          "caching": "ReadWrite",
          "createOption": "Empty",
          "managedDisk": {
            "storageAccountType": "StandardSSD_LRS"
          }
        }
      ]
    },
    "adminPasswordDir" : "/mnt/resource/secrets",
    "adminPasswordFile" : "[concat(variables('adminPasswordDir'),'/solOSpasswd')]",
    "useLogAnalytics": "[not(empty(parameters('workspaceName')))]",
    "logAnalyticsResourceName": "[if(variables('useLogAnalytics'), parameters('workspaceName'), 'ignored')]",
    "vmExtension" : "[if(variables('useLogAnalytics'),'OmsAgentExtension','DockerExtension')]",
    "workspaceTier": "Free",
    "containersMarketplaceName": "Containers",
    "syslogFacilities": [ "kern", "user", "daemon", "auth", "syslog", "uucp", "authpriv", "ftp", "cron", "local0", "local1", "local2", "local3", "local4", "local5", "local6", "local7" ]
  },
  "resources": [
    {
      "apiVersion": "2021-04-01",
      "type": "Microsoft.Resources/deployments",
      "name": "[variables('solaceSecurityTemplateName')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('securitySharedTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "securityGroupName": {
            "value": "[parameters('securityGroupName')]"
          },
          "subnetPrefix": {
            "value": "[parameters('subnetPrefix')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "apiVersion": "2021-04-01",
      "type": "Microsoft.Resources/deployments",
      "name": "[variables('solaceLoadBalancerName')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('loadBalancerSharedTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vmAndLoadbalancerExposure": {
            "value": "[parameters('vmAndLoadbalancerExposure')]"
          },
          "dnsLabelForPublicLoadBalancer": {
            "value": "[parameters('dnsLabelForPublicLoadBalancer')]"
          },
          "publicIPAddressNameLB": {
            "value": "[variables('publicIPAddressNameLB')]"
          },
          "publicIPAddressType": {
            "value": "[variables('publicIPAddressType')]"
          },
          "lbName": {
            "value": "[variables('lbName')]"
          },
          "lbPoolName": {
            "value": "[variables('lbPoolName')]"
          },
          "subnetRef": {
            "value": "[variables('subnetRef')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "condition": "[variables('useLogAnalytics')]",
      "apiVersion": "2021-06-01",
      "type": "Microsoft.OperationalInsights/workspaces",
      "name": "[variables('logAnalyticsResourceName')]",
      "location": "[parameters('workspaceRegion')]",
      "properties": {
        "sku": {
          "name": "[variables('workspaceTier')]"
        }
      },
      "resources": [
        {
          "condition": "[variables('useLogAnalytics')]",
          "apiVersion": "2020-08-01",
          "type": "Microsoft.OperationalInsights/workspaces/datasources",
          "name": "[concat(variables('logAnalyticsResourceName'), '/syslogCollection')]",
          "dependsOn": [
            "[resourceId('Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsResourceName'))]"
          ],
          "kind": "LinuxSyslogCollection",
          "properties": {
            "state": "Enabled"
          }
        }
      ]
    },
    {
      "condition": "[variables('useLogAnalytics')]",
      "apiVersion": "2020-08-01",
      "type": "Microsoft.OperationalInsights/workspaces/datasources",
      "name": "[concat(variables('logAnalyticsResourceName'), '/syslog', copyindex())]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsResourceName'))]"
      ],
      "copy": {
        "name": "SyslogFacilityLoop",
        "count": "[length(variables('syslogFacilities'))]"
      },
      "kind": "LinuxSyslog",
      "properties": {
        "syslogName": "[variables('syslogFacilities')[copyindex()]]",
        "syslogSeverities": [
          {
            "severity": "emerg"
          },
          {
            "severity": "alert"
          },
          {
            "severity": "crit"
          },
          {
            "severity": "err"
          },
          {
            "severity": "warning"
          }
        ]
      }
    },
    {
      "condition": "[variables('useLogAnalytics')]",
      "apiVersion": "2015-11-01-preview",
      "type": "Microsoft.OperationsManagement/solutions",
      "name": "[concat(variables('containersMarketplaceName'), '(', variables('logAnalyticsResourceName'), ')')]",
      "location": "[parameters('workspaceRegion')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsResourceName'))]"
      ],
      "properties": {
        "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsResourceName'))]"
      },
      "plan": {
        "name": "[concat(variables('containersMarketplaceName'), '(', variables('logAnalyticsResourceName'), ')')]",
        "publisher": "Microsoft",
        "product": "[concat('OMSGallery/', variables('containersMarketplaceName'))]",
        "promotionCode": ""
      }
    },
    {
      "condition": "[equals(parameters('vmAndLoadbalancerExposure'),'Public')]",
      "apiVersion": "2021-05-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(variables('publicIPAddressNameVM'), copyindex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "interfaceLoop",
        "count": "[variables('numberOfInstances')]"
      },
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsLabelForVmIp'), copyindex())]"
        }
      }
    },
    {
      "condition": "[empty(parameters('existingSubnetName'))]",
      "apiVersion": "2021-05-01",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[parameters('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2021-04-01",
      "name": "[variables('solaceUpdateSubnetName')]",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments/', variables('solaceSecurityTemplateName'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('updateSubnetSharedTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "virtualNetworkName": {
            "value": "[variables('virtualNetworkName')]"
          },
          "subnetName": {
            "value": "[variables('subnetName')]"
          },
          "subnetAddressPrefix": {
            "value": "[reference(resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName')), '2021-05-01').addressPrefix]"
          },
          "nsgId": {
            "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('securityGroupName'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "condition": "[equals(parameters('vmAndLoadbalancerExposure'),'Public')]",
      "comments": "Only created if network interfaces are to be publicly exposed. Otherwise the next resource is created.",
      "apiVersion": "2021-05-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('Public',variables('nicName'), copyindex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "nicLoop",
        "count": "[variables('numberOfInstances')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses/', concat(variables('publicIPAddressNameVM'), copyindex()))]",
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[resourceId('Microsoft.Resources/deployments/', variables('solaceLoadBalancerName'))]"
      ],
      "properties": {
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('securityGroupName'))]"
        },
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('publicIPAddressNameVM'), copyindex()))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[variables('lbPoolID')]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "condition": "[not(equals(parameters('vmAndLoadbalancerExposure'),'Public'))]",
      "apiVersion": "2021-05-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('Internal',variables('nicName'), copyindex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "nicLoop",
        "count": "[variables('numberOfInstances')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[resourceId('Microsoft.Resources/deployments/', variables('solaceLoadBalancerName'))]"
      ],
      "properties": {
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('securityGroupName'))]"
        },
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[variables('lbPoolID')]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2021-07-01",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Aligned"
        },
      "properties": {
        "platformFaultDomainCount": "[variables('platformFaultDomainCount')]",
        "platformUpdateDomainCount": "[variables('platformUpdateDomainCount')]"
      }
    },
    {
      "apiVersion":"2021-07-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(parameters('dnsLabelForVmIp'), copyindex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "virtualMachineLoop",
        "count": "[variables('numberOfInstances')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', concat(parameters('vmAndLoadbalancerExposure'),variables('nicName'), copyindex()))]",
        "[resourceId('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[if(equals(copyindex(), variables('monitorNodeIndex')), parameters('monitorNodeVmSize'), parameters('messageRoutingNodeVmSize'))]"
        },
        "osProfile": {
          "computerName": "[concat(parameters('dnsLabelForVmIp'), copyindex())]",
          "adminUsername": "[parameters('vmAdminUsername')]",
          "adminPassword": "[parameters('vmAdminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('centosVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(parameters('dnsLabelForVmIp'), copyindex(), '_OSDisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": "[if( or(equals(parameters('dataDiskSize'), '0'), equals(copyindex(), variables('monitorNodeIndex'))), json('null'), variables('dataDisksChoices')[string(copyindex())] )]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmAndLoadbalancerExposure'),variables('nicName'), copyindex()))]"
            }
          ]
        }
      }
    },
    {
      "apiVersion": "2021-07-01",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('dnsLabelForVmIp'), copyindex(), '/DockerExtension')]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "DockerLoop",
        "count": "[variables('numberOfInstances')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', concat(parameters('dnsLabelForVmIp'), copyindex()))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "DockerExtension",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "settings": "[null()]"
      }
    },
    {
      "condition": "[variables('useLogAnalytics')]",
      "apiVersion": "2021-07-01",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('dnsLabelForVmIp'), copyindex(), '/OmsAgentExtension')]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "OmsAgentLoop",
        "count": "[variables('numberOfInstances')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/extensions', concat(parameters('dnsLabelForVmIp'), copyindex()), 'DockerExtension')]",
        "[resourceId('Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsResourceName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
        "type": "OmsAgentForLinux",
        "typeHandlerVersion": "1.4",
        "settings": {
          "workspaceId": "[if(not(variables('useLogAnalytics')),  '', reference(resourceId('Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsResourceName')), '2021-06-01').customerId)]"
        },
        "protectedSettings": {
          "workspaceKey": "[if(not(variables('useLogAnalytics')),  '', listKeys(resourceId('Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsResourceName')), '2021-06-01').primarySharedKey)]"
        }
      }
    },
    {
      "apiVersion": "2021-07-01",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('dnsLabelForVmIp'), copyindex(), '/configureSolaceContainer')]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "SolaceLoop",
        "count": "[variables('numberOfInstances')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/extensions', concat(parameters('dnsLabelForVmIp'), copyindex()), variables('vmExtension'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[variables('solaceInstallScriptFileUri')]",
            "[variables('sempQueryScriptFileUri')]"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat('mkdir -p -m 770 ', variables('adminPasswordDir'), '; echo ', parameters('solaceAdminPassword'), ' > ', variables('adminPasswordFile'), '; bash ', variables('solaceInstallScriptName'), ' -c ', copyindex(), ' -d ', parameters('dnsLabelForVmIp'), ' -i ', variables('numberOfInstances'), ' -p ', variables('adminPasswordFile'), ' -n ', parameters('maxNumberOfClientConnections'), ' -q ', parameters('maxNumberOfQueueMessages'), ' -s ', if(equals(copyindex(), variables('monitorNodeIndex')), '0', parameters('dataDiskSize')), if(not(variables('useLogAnalytics')), '', concat(' -w ', reference(resourceId('Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsResourceName')), '2021-06-01').customerId)), ' -u ', parameters('brokerDockerImageReference'))]"
        }
      }
    }
  ]
}

