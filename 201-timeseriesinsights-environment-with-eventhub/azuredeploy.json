{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "eventHubNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "metadata": {
        "description": "Determines whether or not a new Event Hub is provisioned."
      }
    },
    "eventHubResourceGroup": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
        "metadata": {
          "description": "If you have an existing Event Hub provide the Resource Group name here."
        }
    },
    "eventHubNamespaceName": {
      "type": "string",
      "defaultValue": "tsiquickstartns",
      "metadata": {
        "description": "The namespace of the source event hub."
      }
    },
    "eventHubName": {
      "type": "string",
      "defaultValue": "tsiquickstarteh",
      "metadata": {
        "description": "The name of the source event hub."
      }
    },
    "consumerGroupName": {
      "type": "string",
      "defaultValue": "tsiquickstart",
      "metadata": {
        "description": "The name of the consumer group that the Time Series Insights service will use to read the data from the event hub. NOTE: To avoid resource contention, this consumer group must be dedicated to the Time Series Insights service and not shared with other readers."
      }
    },
    "environmentName": {
      "type": "string",
      "maxLength": 90,
      "defaultValue": "tsiquickstart",
      "metadata": {
        "description": "Name of the environment. The name cannot include:   '<', '>', '%', '&', ':', '\\', '?', '/' and any control characters. All other characters are allowed."
      }
    },
    "environmentDisplayName": {
      "type": "string",
      "defaultValue": "tsiquickstart",
      "maxLength": 90,
      "metadata": {
        "description": "An optional friendly name to show in tooling or user interfaces instead of the environment name."
      }
    },
    "environmentSkuName": {
      "type": "string",
      "defaultValue": "S1",
      "allowedValues": ["S1", "S2"],
      "metadata": {
        "description": "The name of the sku. For more information, see https://azure.microsoft.com/pricing/details/time-series-insights/"
      }
    },
    "environmentSkuCapacity": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 10,
      "metadata": {
        "description": "The unit capacity of the Sku. For more information, see https://azure.microsoft.com/pricing/details/time-series-insights/"
      }
    },
    "environmentDataRetentionTime": {
      "type": "string",
      "defaultValue": "P30D",
      "metadata": {
        "description": "The minimum timespan the environmentâ€™s events will be available for query. The value must be specified in the ISO 8601 format, e.g. \"P30D\" for a retention policy of 30 days."
      }
    },
    "eventSourceName": {
      "type": "string",
      "defaultValue": "tsiquickstart",
      "maxLength": 90,
      "metadata": {
        "description": "Name of the event source child resource. The name cannot include:   '<', '>', '%', '&', ':', '\\', '?', '/' and any control characters. All other characters are allowed."
      }
    },
    "eventSourceDisplayName": {
      "type": "string",
      "defaultValue": "tsiquickstart",
      "maxLength": 90,
      "metadata": {
        "description": "An optional friendly name to show in tooling or user interfaces instead of the event source name."
      }
    },
    "eventSourceTimestampPropertyName": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 90,
      "metadata": {
        "description": "The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used."
      }
    },
    "eventSourceKeyName": {
      "type": "string",
      "defaultValue": "manage",
      "metadata": {
        "description": "The name of the shared access key that the Time Series Insights service will use to connect to the event hub."
      }
    },
    "accessPolicyReaderObjectIds": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "A list of object ids of the users or applications in AAD that should have Reader access to the environment. The service principal objectId can be obtained by calling the Get-AzureRMADUser or the Get-AzureRMADServicePrincipal cmdlets. Creating an access policy for AAD groups is not yet supported."
      }
    },
    "accessPolicyContributorObjectIds": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "A list of object ids of the users or applications in AAD that should have Contributor access to the environment. The service principal objectId can be obtained by calling the Get-AzureRMADUser or the Get-AzureRMADServicePrincipal cmdlets. Creating an access policy for AAD groups is not yet supported."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    }
  },
  "variables": {
    "environmentTagsOptions": [
      null,
      {
        "displayName": "[parameters('environmentDisplayName')]"
      }
    ],
    "environmentTagsValue": "[variables('environmentTagsOptions')[length(take(parameters('environmentDisplayName'), 1))]]",
    "eventSourceTagsOptions": [
      null,
      {
        "displayName": "[parameters('eventSourceDisplayName')]"
      }
    ],
    "eventSourceTagsValue": "[variables('eventSourceTagsOptions')[length(take(parameters('eventSourceDisplayName'), 1))]]",
    "eventSourceResourceId": "[resourceId(parameters('eventHubResourceGroup'), 'Microsoft.EventHub/Namespaces/EventHubs', parameters('eventHubNamespaceName'), parameters('eventHubName'))]"
  },
  "resources": [
    {
      "condition": "[equals(parameters('eventHubNewOrExisting'), 'new')]",
      "apiVersion": "2017-04-01",
      "name": "[parameters('eventHubNamespaceName')]",
      "type": "Microsoft.EventHub/namespaces",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "isAutoInflateEnabled": true,
        "maximumThroughputUnits": 20
      },
      "resources": [
        {
          "condition": "[equals(parameters('eventHubNewOrExisting'), 'new')]",
          "apiVersion": "2017-04-01",
          "name": "[parameters('eventHubName')]",
          "type": "eventhubs",
          "dependsOn": ["[parameters('eventHubNamespaceName')]"],
          "properties": {
            "messageRetentionInDays": 7,
            "partitionCount": 4
          },
          "resources": [
            {
              "condition": "[equals(parameters('eventHubNewOrExisting'), 'new')]",
              "type": "authorizationRules",
              "name": "[parameters('eventSourceKeyName')]",
              "apiVersion": "2017-04-01",
              "location": "[parameters('location')]",
              "dependsOn": ["[parameters('eventHubName')]"],
              "properties": {
                "rights": ["Listen", "Send", "Manage"]
              }
            },
            {
              "condition": "[equals(parameters('eventHubNewOrExisting'), 'new')]",
              "apiVersion": "2017-04-01",
              "name": "[parameters('consumerGroupName')]",
              "type": "consumergroups",
              "dependsOn": ["[parameters('eventHubName')]"]
            }
          ]
        }
      ]
    },
    {
      "type": "Microsoft.TimeSeriesInsights/environments",
      "name": "[parameters('environmentName')]",
      "apiVersion": "2017-11-15",
      "location": "[parameters('location')]",
      "properties": {
        "dataRetentionTime": "[parameters('environmentDataRetentionTime')]"
      },
      "sku": {
        "name": "[parameters('environmentSkuName')]",
        "capacity": "[parameters('environmentSkuCapacity')]"
      },
      "tags": "[variables('environmentTagsValue')]",
      "resources": [
        {
          "type": "eventsources",
          "name": "[parameters('eventSourceName')]",
          "apiVersion": "2017-11-15",
          "location": "[parameters('location')]",
          "kind": "Microsoft.EventHub",
          "dependsOn": [
            "[resourceId('Microsoft.TimeSeriesInsights/environments/', parameters('environmentName'))]",
            "[resourceId('Microsoft.EventHub/Namespaces', parameters('eventHubNamespaceName'))]",
            "[resourceId('Microsoft.EventHub/Namespaces/EventHubs/ConsumerGroups', parameters('eventHubNamespaceName'), parameters('eventHubName'), parameters('consumerGroupName'))]",
            "[resourceId('Microsoft.EventHub/Namespaces/EventHubs/AuthorizationRules', parameters('eventHubNamespaceName'), parameters('eventHubName'), parameters('eventSourceKeyName'))]"
          ],
          "properties": {
            "eventSourceResourceId": "[variables('eventSourceResourceId')]",
            "eventHubName": "[parameters('eventHubName')]",
            "serviceBusNamespace": "[parameters('eventHubNamespaceName')]",
            "consumerGroupName": "[parameters('consumerGroupName')]",
            "keyName": "[parameters('eventSourceKeyName')]",
            "sharedAccessKey": "[listkeys(resourceId(parameters('eventHubResourceGroup'), 'Microsoft.EventHub/Namespaces/EventHubs/AuthorizationRules', parameters('eventHubNamespaceName'), parameters('eventHubName'), parameters('eventSourceKeyName')), '2017-04-01').primaryKey]",
            "timestampPropertyName": "[parameters('eventSourceTimestampPropertyName')]"
          },
          "tags": "[variables('eventSourceTagsValue')]"
        }
      ]
    },
    {
      "condition": "[not(empty(parameters('accessPolicyReaderObjectIds')))]",
      "type": "Microsoft.TimeSeriesInsights/environments/accessPolicies",
      "name": "[concat(parameters('environmentName'), '/', 'readerAccessPolicy', copyIndex())]",
      "copy": {
        "name": "accessPolicyReaderCopy",
        "count": "[if(empty(parameters('accessPolicyReaderObjectIds')), 1, length(parameters('accessPolicyReaderObjectIds')))]"
      },
      "apiVersion": "2017-11-15",      
      "dependsOn": [
        "[resourceId('Microsoft.TimeSeriesInsights/environments/', parameters('environmentName'))]"
      ],
      "properties": {
        "principalObjectId": "[parameters('accessPolicyReaderObjectIds')[copyIndex()]]",
        "roles": ["Reader"]
      }
    },
    {
      "condition": "[not(empty(parameters('accessPolicyContributorObjectIds')))]",
      "type": "Microsoft.TimeSeriesInsights/environments/accessPolicies",
      "name": "[concat(parameters('environmentName'), '/', 'contributorAccessPolicy', copyIndex())]",
      "copy": {
        "name": "accessPolicyContributorCopy",
        "count": "[if(empty(parameters('accessPolicyContributorObjectIds')), 1, length(parameters('accessPolicyContributorObjectIds')))]"
      },
      "apiVersion": "2017-11-15",
      "dependsOn": [
        "[resourceId('Microsoft.TimeSeriesInsights/environments/', parameters('environmentName'))]"
      ],
      "properties": {
        "principalObjectId": "[parameters('accessPolicyContributorObjectIds')[copyIndex()]]",
        "roles": ["Contributor"]
      }
    }
  ],
  "outputs": {
    "dataAccessFQDN": {
      "value": "[reference(resourceId('Microsoft.TimeSeriesInsights/environments', parameters('environmentName'))).dataAccessFQDN]",
      "type": "string"
    }
  }
}
