{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "allowedValues": ["East US", "West US", "North Central US", "South Central US", "Central US", "West Europe", "North Europe", "East Asia", "South East Asia", "Japan West", "Japan East"],
            "metadata": {
                "description": "Deployment location"
            }
        },
        "newStorageAccountName": {
            "type": "string",
            "metadata": {
                "description": "Unique DNS Name for the Storage Account where the Virtual Machine's disks will be placed."
            }
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Username for the Virtual Machine."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for the Virtual Machine."
            }
        },
        "uniqueDnsPrefixForVM": {
            "type": "string",
            "metadata": {
                "description": "Unique DNS Prefix for the Public IP used to access the Virtual Machine."
            }
        },
        "vmNamePrefix": {
            "type": "string",
            "defaultValue": "Dynamic",
            "metadata": {
                "description": "VM Name Prefix for the Virtual Machine."
            }
        },
        "publicIPAddressType": {
            "type": "string",
            "defaultValue": "Dynamic",
            "allowedValues": [
                "Dynamic",
                "Static"
            ],
            "metadata": {
                "description": "Type of public IP address"
            }
        },
        "windowsOSVersion": {
            "type": "string",
            "defaultValue": "2012-R2-Datacenter",
            "allowedValues": [
                "2008-R2-SP1",
                "2012-Datacenter",
                "2012-R2-Datacenter"
            ],
            "metadata": {
                "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version. Allowed values: 2008-R2-SP1, 2012-Datacenter, 2012-R2-Datacenter."
            }
        }
    },
    "variables": {
        "imagePublisher": "MicrosoftWindowsServer",
        "imageOffer": "WindowsServer",
        "OSDiskName": "osdiskforwindowssimple",
        "storageAccountType": "Standard_LRS",
        "vmStorageAccountContainerName": "vhds",
        "vmSize": "Standard_A2",

        "VNetName": "Contoso_Network",
        "Subnet1Name": "FrontendSubnet",
        "Subnet2Name": "NVASubnet",
        "Subnet3Name": "BackendSubnet",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('VNetName'))]",
        "subnet1Ref": "[concat(variables('vnetID'),'/subnets/', variables('Subnet1Name'))]",
        "subnet2Ref": "[concat(variables('vnetID'),'/subnets/', variables('Subnet2Name'))]",
        "subnet3Ref": "[concat(variables('vnetID'),'/subnets/', variables('Subnet3Name'))]",

        "VNetAddressPrefix": "10.1.0.0/16",
        "Subnet1Prefix": "10.1.0.0/24",
        "Subnet2Prefix": "10.1.1.0/24",
        "Subnet3Prefix": "10.1.2.0/24",

        "routeTableName": "BasicNVA",
        "NvmPrivateIPAddress": "10.1.1.4",
        "nsgname": "DefaultNSG",
        "scaleNumber": 3,
        "apiVer": "2015-06-15"
    },
    "resources": [{
        "type": "Microsoft.Storage/storageAccounts",
        "name": "[parameters('newStorageAccountName')]",
        "apiVersion": "2015-05-01-preview",
        "location": "[parameters('location')]",
        "properties": {
            "accountType": "[variables('storageAccountType')]"
        }
    }, {
        "apiVersion": "[variables('apiVer')]",
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[concat(parameters('uniqueDnsPrefixForVM'), copyIndex())]",
        "location": "[parameters('location')]",
        "copy": {
            "name": "pubIPLoop",
            "count": "[variables('scaleNumber')]"
        },
        "properties": {
            "publicIPAllocationMethod": "[parameters('publicIPAddressType')]",
            "dnsSettings": {
                "domainNameLabel": "[concat(parameters('uniqueDnsPrefixForVM'), copyIndex())]"
            }
        }
    }, {

        "apiVersion": "[variables('apiVer')]",
        "type": "Microsoft.Network/networkSecurityGroups",
        "name": "DefaultNSG",
        "location": "[parameters('location')]",
        "properties": {
            "securityRules": [{
                "name": "rdp_rule",
                "properties": {
                    "description": "Allow RDP",
                    "protocol": "Tcp",
                    "sourcePortRange": "*",
                    "destinationPortRange": "3389",
                    "sourceAddressPrefix": "Internet",
                    "destinationAddressPrefix": "*",
                    "access": "Allow",
                    "priority": 100,
                    "direction": "Inbound"
                }
            }]
        }
    }, {
        "type": "Microsoft.Network/routeTables",
        "name": "[variables('routeTableName')]",
        "apiVersion": "[variables('apiVer')]",
        "location": "[parameters('location')]",
        "properties": {
            "routes": [{
                "name": "VirtualApplianceRouteToSubnet3",
                "properties": {
                    "addressPrefix": "[variables('subnet3Prefix')]",
                    "nextHopType": "VirtualAppliance",
                    "nextHopIpAddress": "[variables('NvmPrivateIPAddress')]"
                }
            }]
        }
    }, {
        "apiVersion": "[variables('apiVer')]",
        "type": "Microsoft.Network/virtualNetworks",
        "name": "[variables('VNetName')]",
        "location": "[parameters('location')]",
        "dependsOn": [
            "[concat('Microsoft.Network/routeTables/', variables('routeTableName'))]",
            "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsgname'))]"
        ],
        "properties": {
            "addressSpace": {
                "addressPrefixes": [
                    "[variables('VNetAddressPrefix')]"
                ]
            },
            "subnets": [{
                "name": "[variables('Subnet1Name')]",
                "properties": {
                    "addressPrefix": "[variables('Subnet1Prefix')]",
                    "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgname'))]"
                    },
                    "routeTable": {
                        "id": "[resourceId('Microsoft.Network/routeTables', variables('routeTableName'))]"
                    }
                }
            }, {
                "name": "[variables('Subnet2Name')]",
                "properties": {
                    "addressPrefix": "[variables('Subnet2Prefix')]",
                    "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgname'))]"
                    }
                }
            }, {
                "name": "[variables('Subnet3Name')]",
                "properties": {
                    "addressPrefix": "[variables('Subnet3Prefix')]",
                    "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgname'))]"
                    }
                }
            }]
        }
    }, {
        "apiVersion": "[variables('apiVer')]",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "Nic0",
        "location": "[parameters('location')]",
        "dependsOn": [
            "[concat('Microsoft.Network/virtualNetworks/', variables('VNetName'))]",
            "[concat('Microsoft.Network/publicIPAddresses/', parameters('uniqueDnsPrefixForVM'), '0')]"
        ],
        "properties": {
            "ipConfigurations": [{
                "name": "ipconfig1",
                "properties": {
                    "privateIPAllocationMethod": "Dynamic",
                    "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('uniqueDnsPrefixForVM'), '0'))]"
                    },
                    "subnet": {
                        "id": "[variables('subnet1Ref')]"
                    }
                }
            }]
        }
    }, {
        "apiVersion": "[variables('apiVer')]",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "Nic1",
        "location": "[parameters('location')]",
        "dependsOn": [
            "[concat('Microsoft.Network/publicIPAddresses/', parameters('uniqueDnsPrefixForVM'), '1')]",
            "[concat('Microsoft.Network/virtualNetworks/', variables('VNetName'))]"
        ],
        "properties": {
            "ipConfigurations": [{
                "name": "ipconfig1",
                "properties": {
                    "privateIPAllocationMethod": "Static",
                    "privateIPAddress": "[variables('NvmPrivateIPAddress')]",
                    "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('uniqueDnsPrefixForVM'), '1'))]"
                    },
                    "subnet": {
                        "id": "[variables('subnet2Ref')]"
                    }
                }
            }],
            "enableIPForwarding": true
        }
    }, {
        "apiVersion": "[variables('apiVer')]",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "Nic2",
        "location": "[parameters('location')]",
        "dependsOn": [
            "[concat('Microsoft.Network/publicIPAddresses/', parameters('uniqueDnsPrefixForVM'), '2')]",
            "[concat('Microsoft.Network/virtualNetworks/', variables('VNetName'))]"
        ],
        "properties": {
            "ipConfigurations": [{
                "name": "ipconfig1",
                "properties": {
                    "privateIPAllocationMethod": "Dynamic",
                    "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('uniqueDnsPrefixForVM'), '2'))]"
                    },
                    "subnet": {
                        "id": "[variables('subnet3Ref')]"
                    }
                }
            }]
        }
    }, {
        "apiVersion": "[variables('apiVer')]",
        "type": "Microsoft.Compute/virtualMachines",
        "name": "[concat(parameters('vmNamePrefix'), copyIndex())]",
        "location": "[parameters('location')]",
        "copy": {
            "name": "vmLoop",
            "count": "[variables('scaleNumber')]"
        },
        "dependsOn": [
            "[concat('Microsoft.Storage/storageAccounts/', parameters('newStorageAccountName'))]",
            "[concat('Microsoft.Network/networkInterfaces/Nic0')]",
            "[concat('Microsoft.Network/networkInterfaces/Nic1')]",
            "[concat('Microsoft.Network/networkInterfaces/Nic2')]"
        ],
        "properties": {
            "hardwareProfile": {
                "vmSize": "[variables('vmSize')]"
            },
            "osProfile": {
                "computerName": "[concat(parameters('vmNamePrefix'), copyIndex())]",
                "adminUsername": "[parameters('adminUsername')]",
                "adminPassword": "[parameters('adminPassword')]"
            },
            "storageProfile": {
                "imageReference": {
                    "publisher": "[variables('imagePublisher')]",
                    "offer": "[variables('imageOffer')]",
                    "sku": "[parameters('windowsOSVersion')]",
                    "version": "latest"
                },
                "osDisk": {
                    "name": "osdisk",
                    "vhd": {
                        "uri": "[concat('http://',parameters('newStorageAccountName'),'.blob.core.windows.net/vhds/', 'osdisk', copyIndex(), '.vhd')]"
                    },
                    "caching": "ReadWrite",
                    "createOption": "FromImage"
                }
            },
            "networkProfile": {
                "networkInterfaces": [{
                    "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('Nic', copyIndex()))]"
                }]
            }
        }
    }]
}
