{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"accountName": {
			"type": "string",
			"defaultValue": "[concat('mongodb-', uniqueString(resourceGroup().id))]",
			"metadata": {
				"description": "Cosmos DB account name"
			}
		},
		"location": {
			"type": "string",
			"defaultValue": "[resourceGroup().location]",
			"metadata": {
				"description": "Location for the Cosmos DB account."
			}
		},
		"primaryRegion":{
			"type":"string",
			"metadata": {
				"description": "The primary replica region for the Cosmos DB account."
			}
		},
		"secondaryRegion":{
			"type":"string",
			"metadata": {
			  "description": "The secondary replica region for the Cosmos DB account."
		  }
		},
		"defaultConsistencyLevel": {
			"type": "string",
			"defaultValue": "Session",
			"allowedValues": [ "Eventual", "ConsistentPrefix", "Session", "BoundedStaleness", "Strong" ],
			"metadata": {
				"description": "The default consistency level of the Cosmos DB account."
			}
		},
		"serverVersion": {
			"defaultValue": "3.6",
			"allowedValues": [
				"3.2",
				"3.6"
			],
			"type": "String",
			"metadata": {
				"description": "Specifies the MongoDB server version to use."
			}
		},
		"maxStalenessPrefix": {
			"type": "int",
			"defaultValue": 100000,
			"minValue": 10,
			"maxValue": 2147483647,
			"metadata": {
				"description": "Max stale requests. Required for BoundedStaleness. Valid ranges, Single Region: 10 to 1000000. Multi Region: 100000 to 1000000."
			}
		},
		"maxIntervalInSeconds": {
			"type": "int",
			"defaultValue": 300,
			"minValue": 5,
			"maxValue": 86400,
			"metadata": {
				"description": "Max lag time (seconds). Required for BoundedStaleness. Valid ranges, Single Region: 5 to 84600. Multi Region: 300 to 86400."
			}
		},
		"databaseName": {
			"type": "string",
			"metadata": {
				"description": "The name for the Mongo DB database"
			}
		},
		"throughput": {
			"type": "int",
			"defaultValue": 400,
			"minValue": 400,
			"maxValue": 1000000,
			"metadata": {
				"description": "The shared throughput for the Mongo DB database"
			}			
		},
		"collection1Name": {
			"type": "string",
			"metadata": {
				"description": "The name for the first Mongo DB collection"
			}
		},
		"collection2Name": {
			"type": "string",
			"metadata": {
				"description": "The name for the second Mongo DB collection"
			}
		}
	},
	"variables": {
		"accountName": "[toLower(parameters('accountName'))]",
		"consistencyPolicy": {
			"Eventual": {
				"defaultConsistencyLevel": "Eventual"
			},
			"ConsistentPrefix": {
				"defaultConsistencyLevel": "ConsistentPrefix"
			},
			"Session": {
				"defaultConsistencyLevel": "Session"
			},
			"BoundedStaleness": {
				"defaultConsistencyLevel": "BoundedStaleness",
				"maxStalenessPrefix": "[parameters('maxStalenessPrefix')]",
				"maxIntervalInSeconds": "[parameters('maxIntervalInSeconds')]"
			},
			"Strong": {
				"defaultConsistencyLevel": "Strong"
			}
		},
		"locations": 
		[ 
			{
				"locationName": "[parameters('primaryRegion')]",
				"failoverPriority": 0,
				"isZoneRedundant": false
			}, 
			{
				"locationName": "[parameters('secondaryRegion')]",
				"failoverPriority": 1,
				"isZoneRedundant": false
			}
		]
	},
	"resources": 
	[
		{
			"type": "Microsoft.DocumentDB/databaseAccounts",
			"name": "[variables('accountName')]",
			"apiVersion": "2020-03-01",
			"location": "[parameters('location')]",
			"kind": "MongoDB",
			"properties": {
				"consistencyPolicy": "[variables('consistencyPolicy')[parameters('defaultConsistencyLevel')]]",
				"locations": "[variables('locations')]",
				"databaseAccountOfferType": "Standard",
				"apiProperties": {
					"serverVersion": "[parameters('serverVersion')]"
				}
			}
		},
		{
			"type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases",
			"name": "[concat(variables('accountName'), '/', parameters('databaseName'))]",
			"apiVersion": "2020-03-01",
			"dependsOn": [ "[resourceId('Microsoft.DocumentDB/databaseAccounts/', variables('accountName'))]" ],
			"properties":{
				"resource":{
					"id": "[parameters('databaseName')]"
				},
				"options": { "throughput": "[parameters('throughput')]" }
			}
		},
		{
			"type": "Microsoft.DocumentDb/databaseAccounts/mongodbDatabases/collections",
			"name": "[concat(variables('accountName'), '/', parameters('databaseName'), '/', parameters('collection1Name'))]",
			"apiVersion": "2020-03-01",
			"dependsOn": [ "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases', variables('accountName'), parameters('databaseName'))]" ],
			"properties":
			{
				"resource":{
					"id":  "[parameters('collection1Name')]",
					"shardKey": { "user_id": "Hash" },
					"indexes": [
						{
							"key": { "keys":["user_id", "user_address"] },
							"options": { "unique": "true" }
						},
						{
							"key": { "keys":["_ts"] },
							"options": { "expireAfterSeconds": "2629746" }
						}
					],
					"options": {
						"If-Match": "<ETag>"
					}
				}
			}
		},
		{
			"type": "Microsoft.DocumentDb/databaseAccounts/mongodbDatabases/collections",
			"name": "[concat(variables('accountName'), '/', parameters('databaseName'), '/', parameters('collection2Name'))]",
			"apiVersion": "2020-03-01",
			"dependsOn": [ "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases', variables('accountName'),  parameters('databaseName'))]" ],
			"properties":
			{
				"resource":{
					"id":  "[parameters('collection2Name')]",
					"shardKey": { "company_id": "Hash" },
					"indexes": [
						{
							"key": { "keys":["company_id", "company_address"] },
							"options": { "unique": "true" }
						},
						{
							"key": { "keys":["_ts"] },
							"options": { "expireAfterSeconds": "2629746" }
						}
					],
					"options": {
						"If-Match": "<ETag>"
					}
				}
			}
		}
	]
}
