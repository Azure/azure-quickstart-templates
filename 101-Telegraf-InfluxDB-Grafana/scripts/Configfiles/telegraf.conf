# Configuration for telegraf agent
[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  debug = false
  quiet = false
  omit_hostname = false

###############################################################################
#                                  OUTPUTS                                    #
###############################################################################

## FOR NATS
#[[outputs.nats]]
# servers = ["nats://x.x.x.x:4222"]
#  subject = "telegraf"
#  ssl_ca = "ca.pem"
#  ssl_cert = "cert.pem"
#  ssl_key = "key.pem"
#  insecure_skip_verify = false
#  data_format = "influx"

[[outputs.influxdb]]
  urls = ["http://influxdb:8086"]
  database = "kafka"
  retention_policy = ""
  write_consistency = "any"
  timeout = "5s"
  username = "root"
  password = "root"
###############################################################################
#                                  PLUGINS                                    #
###############################################################################



[[inputs.cpu]]
  percpu = false
  totalcpu = true
  fielddrop = ["time_*"]

[[inputs.diskio]]
  skip_serial_number = true

[[inputs.disk]]
# interval = "%INTERVAL_DISK%"

[[inputs.mem]]

# Get the number of processes and group them by status
[[inputs.processes]]

# Read metrics about swap memory usage
[[inputs.swap]]

[[inputs.docker]]
#   endpoint = "ENV"
   endpoint = "unix:///var/run/docker.sock"
   container_names = []
   timeout = "5s"
  ## docker labels to include and exclude as tags.  Globs accepted.
  ## Note that an empty array for both will include all labels as tags
  docker_label_include = []
  docker_label_exclude = []

# Get kernel statistics from /proc/stat
[[inputs.kernel]]

[[inputs.system]]
  [inputs.system.tags]
    n_cpus = "%N_CPUS%"
	
[[inputs.net]]
  interfaces = ["eth0"]
  [inputs.net.tagdrop]
  interface = ["all"]

[[inputs.net_response]]
  protocol = "tcp"
  address = ":80"

[[inputs.net_response]]
  protocol = "tcp"
  address = ":3000"

[[inputs.net_response]]
  protocol = "tcp"
  address = ":8086"

tagexclude = ["server"]
# Read JMX metrics through Jolokia
[[inputs.jolokia]]
  ## This is the context root used to compose the jolokia url
  ## NOTE that Jolokia requires a trailing slash at the end of the context root
  context = "/jolokia/"
  ## List of servers exposing jolokia read service
  [[inputs.jolokia.servers]]
    name = "as-server-01"
    host = "10.106.131.202"
    port = "8080"
#[[inputs.jolokia2_agent]]
#  urls = ["http://10.106.131.202/jolokia"]

## List of metrics collected on above servers
  ## Each metric consists in a name, a jmx path and either
  ## a pass or drop slice attribute.
  ## This collects all heap memory usage metrics.
  [[inputs.jolokia.metrics]]
    name = "heap_memory_usage"
    mbean  = "java.lang:type=Memory"
    attribute = "HeapMemoryUsage"
  ## This collects thread counts metrics.
  [[inputs.jolokia.metrics]]
    name = "thread_count"
    mbean  = "java.lang:type=Threading"
    attribute = "TotalStartedThreadCount,ThreadCount,DaemonThreadCount,PeakThreadCount"
  ## This collects number of class loaded/unloaded counts metrics.
  [[inputs.jolokia.metrics]]
    name = "class_count"
    mbean  = "java.lang:type=ClassLoading"
    attribute = "LoadedClassCount,UnloadedClassCount,TotalLoadedClassCount"
[[inputs.redis]]
  ## specify servers via a url matching:
  ##  [protocol://][:password]@address[:port]
  ##  e.g.
  ##    tcp://localhost:6379
  ##    tcp://:password@192.168.99.100
  ##
  ## If no servers are specified, then localhost is used as the host.
  ## If no port is specified, 6379 is used
  servers = ["tcp://10.106.131.202:6379"]
# Gather metrics from the Tomcat server status page.
[[inputs.tomcat]]
  ## URL of the Tomcat server status
  url = "http://10.106.131.202:8080/manager/status/all?XML=true"

  ## HTTP Basic Auth Credentials
#  username = "tommy"
#  password = "s3cret"

  ## Request timeout
  # timeout = "5s"

  ## Optional SSL Config
  # ssl_ca = "/etc/telegraf/ca.pem"
  # ssl_cert = "/etc/telegraf/cert.pem"
  # ssl_key = "/etc/telegraf/key.pem"
  ## Use SSL but skip chain & host verification
  # insecure_skip_verify = false
  
#NodeJS Application Metrics
# Statsd Server
#[[inputs.statsd]]
 # Address and port to host UDP listener on
# service_address = .localhost:8125.
 # Delete gauges every interval (default=false)
# delete_gauges = true
 # Delete counters every interval (default=false)
# delete_counters = true
 # Delete sets every interval (default=false)
# delete_sets = false
 # Delete timings & histograms every interval (default=true)
# delete_timings = true
 # Percentiles to calculate for timing & histogram stats
# percentiles = [90]

# convert measurement names, "." to "_" and "-" to "__"
# convert_names = false

#templates = [
# "* measurement.field"
# ]

# Number of UDP messages allowed to queue up, once filled,
 # the statsd server will start dropping packets
# allowed_pending_messages = 10000

# Number of timing/histogram values to track per-measurement in the
 # calculation of percentiles. Raising this limit increases the accuracy
 # of percentiles but also increases the memory usage and cpu time.
# percentile_limit = 1000

# UDP packet size for the server to listen for. This will depend on the size
 # of the packets that the client is sending, which is usually 1500 bytes.
# udp_packet_size = 1500

#[[inputs.exec]]
#    interval = "60s"
#    commands = ["/usr/bin/sudo /opt/telegraf_jmx/telegraf_jmx.sh && /bin/cat /tmp/telegraf_jmx.out"]
#    timeout = "50s"
#    data_format = "influx"
