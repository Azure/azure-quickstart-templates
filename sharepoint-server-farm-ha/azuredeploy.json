{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "sharepointFarmName": {
      "type": "string",
      "metadata": {
        "group": "basics",
        "description": "The name of the SharePoint farm"
      },
      "defaultValue": "spfarm"
    },
    "location": {
      "type": "string",
      "metadata": {
        "group": "Infrastructure settings",
        "description": "The region to deploy the resources into. Only change if resources need to be deployed to a different location than the resource group."
      },
      "defaultValue": "[resourceGroup().location]"
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "group": "Infrastructure settings",
        "description": "The name of the administrator account of the new VMs and Domain"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "group": "Infrastructure settings",
        "description": "The password for the administrator account of the new VMs and Domain"
      }
    },
    "storageAccountNamePrefix": {
      "type": "string",
      "metadata": {
        "group": "Infrastructure settings",
        "description": "The prefix of the new storage account created to store the VM disks. Different storage accounts will be created for AD, SQL, and SharePoint VMs."
      }
    },
    "storageAccountType": {
      "type": "string",
      "metadata": {
        "group": "Infrastructure settings",
        "description": "The type of storage account"
      },
      "defaultValue": "Premium_LRS"
    },
    "virtualNetworkName": {
      "type": "string",
      "defaultValue": "spfarmhaVNET",
      "metadata": {
        "group": "Infrastructure settings",
        "description": "Name of virtual network to be created"
      }
    },
    "virtualNetworkAddressRange": {
      "type": "string",
      "metadata": {
        "group": "Infrastructure settings",
        "description": "The address range of the new VNET in CIDR format"
      },
      "defaultValue": "10.0.0.0/16"
    },
    "staticSubnet": {
      "type": "string",
      "metadata": {
        "group": "Infrastructure settings",
        "description": "The address range of the subnet static IPs are allocated from in the new VNET"
      },
      "defaultValue": "10.0.0.0/24"
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "group": "Infrastructure settings",
        "description": "Change this value to your repo name if deploying from a fork"
      },
      "defaultValue": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/sharepoint-server-farm-ha"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "group": "Infrastructure settings",
        "description": "Auto-generated token to access _artifactsLocation",
        "artifactsLocationSasToken": ""
      },
      "defaultValue": ""
    },
    "domainName": {
      "type": "string",
      "metadata": {
        "group": "Active Directory settings",
        "description": "The FQDN of the AD Domain created "
      },
      "defaultValue": "sphafarm.local"
    },
    "adVMSize": {
      "type": "string",
      "metadata": {
        "group": "Active Directory settings",
        "description": "The size of the AD VMs created"
      },
      "defaultValue": "Standard_DS1"
    },
    "adPdcNicIPAddress": {
      "type": "string",
      "metadata": {
        "group": "Active Directory settings",
        "description": "The IP address of the new AD VM"
      },
      "defaultValue": "10.0.0.4"
    },
    "adBdcNicIPAddress": {
      "type": "string",
      "metadata": {
        "group": "Active Directory settings",
        "description": "The IP address of the new AD VM"
      },
      "defaultValue": "10.0.0.5"
    },
    "sqlVMSize": {
      "type": "string",
      "metadata": {
        "group": "SQL Server settings",
        "description": "The size of the SQL VMs created"
      },
      "defaultValue": "Standard_DS3"
    },
    "witnessVMSize": {
      "type": "string",
      "metadata": {
        "group": "SQL Server settings",
        "description": "The size of the witness VM created"
      },
      "defaultValue": "Standard_DS1"
    },
    "sqlServerServiceAccountUserName": {
      "type": "string",
      "metadata": {
        "group": "SQL Server settings",
        "description": "The SQL Server service account name"
      },
      "defaultValue": "sqlservice"
    },
    "sqlServerServiceAccountPassword": {
      "type": "securestring",
      "metadata": {
        "group": "SQL Server settings",
        "description": "The SQL Server Service account password"
      }
    },
    "sqlLBIPAddress": {
      "type": "string",
      "metadata": {
        "group": "SQL Server settings",
        "description": "The IP address of the new SQL ILB"
      },
      "defaultValue": "10.0.0.6"
    },
    "sqlSubnet": {
      "type": "string",
      "metadata": {
        "group": "SQL Server settings",
        "description": "The address range of the SQL subnet created in the new VNET"
      },
      "defaultValue": "10.0.1.0/24"
    },
    "spWebSubnet": {
      "type": "string",
      "metadata": {
        "group": "SharePoint Server settings",
        "description": "The address range of the SP Web subnet created in the new VNET"
      },
      "defaultValue": "10.0.2.0/24"
    },
    "spAppSubnet": {
      "type": "string",
      "metadata": {
        "group": "SharePoint Server settings",
        "description": "The address range of the SP App subnet created in the new VNET"
      },
      "defaultValue": "10.0.3.0/24"
    },
    "spWebIPRGName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "group": "SharePoint Server settings",
        "description": "Resource Group containing existing SP Web IP address"
      }
    },
    "spWebIPNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "group": "SharePoint Server settings",
        "description": "Indicates whether the Sharepoint farm's IP is new or existing"
      }
    },
    "spWebIPAddressName": {
      "type": "string",
      "metadata": {
        "group": "SharePoint Server settings",
        "description": "The new or existing - depending on value of spWebIPNewOrExisting parameter - IP address name for SP Web "
      }
    },
    "dnsPrefix": {
      "type": "string",
      "metadata": {
        "group": "SharePoint Server settings",
        "description": "The DNS Prefix for the Public IP Address for the Sharepoint Web Application"
      }
    },
    "spVMSize": {
      "type": "string",
      "metadata": {
        "group": "SharePoint Server settings",
        "description": "The size of the SP VMs Created"
      },
      "defaultValue": "Standard_DS2"
    },
    "sharePointSetupUserAccountUserName": {
      "type": "string",
      "metadata": {
        "group": "SharePoint Server settings",
        "description": "The Sharepoint Setup account name"
      },
      "defaultValue": "sp_setup"
    },
    "sharePointSetupUserAccountPassword": {
      "type": "securestring",
      "metadata": {
        "group": "SharePoint Server settings",
        "description": "The Sharepoint Setup account password"
      }
    },
    "sharePointFarmAccountUserName": {
      "type": "string",
      "metadata": {
        "group": "SharePoint Server settings",
        "description": "The Sharepoint Farm account name"
      },
      "defaultValue": "sp_farm"
    },
    "sharePointFarmAccountPassword": {
      "type": "securestring",
      "metadata": {
        "group": "SharePoint Server settings",
        "description": "The Sharepoint Farm account password"
      }
    },
    "sharePointFarmPassphrasePassword": {
      "type": "securestring",
      "metadata": {
        "group": "SharePoint Server settings",
        "description": "The Sharepoint Farm Passphrase"
      }
    },
    "spSiteTemplateName": {
      "type": "string",
      "metadata": {
        "group": "SharePoint Server settings",
        "description": "The Sharepoint Content Site Template Name"
      },
      "defaultValue": "STS#0"
    }
  },
  "variables": {
    "spCADNSPrefix": "[concat(parameters('dnsPrefix'),'admin')]",
    "spCAIPAddressName": "[concat(parameters('spWebIPAddressName'),'admin')]",
    "configDatabaseName": "SP_Config",
    "administrationContentDatabaseName": "SP_AdminContent",
    "contentDatabaseName": "spfarm_Content",
    "lbSettings": {
      "rdpLBFE": "rdpLBFE",
      "sqlLBFE": "sqlLBFE",
      "spWebLBFE": "spWebLBFE",
      "spCALBFE": "spCALBFE",
      "adLBBE": "adLBBE",
      "sqlLBBE": "sqlLBBE",
      "spWebLBBE": "spWebLBBE",
      "spCALBBE": "spCALBBE",
      "spWebLB": "spWeb",
      "spCALB": "spCALB",
      "sqlLBName": "sqlLoadBalancer",
      "rdpLBName": "rdpLoadBalancer",
      "spWebLBName": "spWebLoadBalancer",
      "spCALBName": "spCALoadBalancer"
    },
    "subnetNames": {
      "staticSubnetName": "staticSubnet",
      "sqlSubnetName": "sqlSubnet",
      "spWebSubnetName": "spWebSubnet",
      "spAppSubnetName": "spAppSubnet"
    },
    "RDPNAT": "RDP",
    "spCANAT": "spCANAT",
    "SQLAOProbe": "SQLAlwaysOnEndPointProbe",
    "spWebProbe": "spWebProbe",
    "rdpIPAddressName": "rdpIP",
    "vmSettings": {
      "availabilitySets": {
        "sqlAvailabilitySetName": "sqlAvailabilitySet",
        "adAvailabilitySetName": "adAvailabilitySet",
        "spWebAvailabilitySetName": "spWebAvailabilitySet",
        "spAppAvailabilitySetName": "spAppAvailabilitySet"
      },
      "noOfSqlVMs": 2,
      "noOfspRoleVMs": 2,
      "vmContainerName": "vhds",
      "adPDCVMName": "ad-pdc",
      "adBDCVMName": "ad-bdc",
      "sqlVMName": "sql-",
      "sqlwVMName": "sql-w",
      "spwebVMName": "sps-web-",
      "spappVMName": "sps-app-",
      "windowsImagePublisher": "MicrosoftWindowsServer",
      "windowsImageOffer": "WindowsServer",
      "windowsImageSKU": "2012-R2-Datacenter",
      "sqlImagePublisher": "MicrosoftSQLServer",
      "sqlImageOffer": "SQL2014SP2-WS2012R2",
      "sqlImageSKU": "Enterprise",
      "spImagePublisher": "MicrosoftSharePoint",
      "spImageOffer": "MicrosoftSharePointServer",
      "spImageSKU": "2016",
      "rdpPort": 3389,
      "spCentralAdminPort": 80,
      "windowsDiskSize": 128,
      "sqlDiskSize": 1000,
      "spDiskSize": 128
    },
    "prefix": "[tolower(trim(subString(concat(parameters('dnsPrefix'),'           '),0,10)))]",
    "sqlAOEPName": "[concat(variables('prefix'),'-hadr')]",
    "sqlAOAGName": "[concat(variables('prefix'),'-ag')]",
    "sqlAOListenerName": "[concat(variables('prefix'),'ag-listener')]",
    "sharePath": "[concat(variables('prefix'),'-fsw')]",
    "clusterName": "[concat(variables('prefix'),'-fc')]",
    "adPdcNicName": "[concat(variables('vmSettings').adPDCVMName,'-nic')]",
    "adBdcNicName": "[concat(variables('vmSettings').adBDCVMName,'-nic')]",
    "sqlwNicName": "[concat(variables('vmSettings').sqlwVMName,'-nic')]",
    "staticSubnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets/', parameters('virtualNetworkName'),variables('subnetNames').staticSubnetName)]",
    "sqlSubnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets/', parameters('virtualNetworkName'),variables('subnetNames').sqlSubnetName)]",
    "spWebSubnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets/', parameters('virtualNetworkName'),variables('subnetNames').spWebSubnetName)]",
    "spAppSubnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets/', parameters('virtualNetworkName'),variables('subnetNames').spAppSubnetName)]",
    "spWebResourceIdexisting": "[resourceId(parameters('spWebIPRGName'),concat('Microsoft.Network','/','publicIPAddresses'),parameters('spWebIPAddressName'))]",
    "spWebResourceIdnew": "[resourceId(concat('Microsoft.Network','/','publicIPAddresses'),parameters('spWebIPAddressName'))]",
    "sharepointCAfqdn": "[concat(variables('spCADNSPrefix'),'.',toLower(trim(replace(parameters('location'),' ' ,''))),'.cloudapp.azure.com')]",
    "sharepointWebfqdn": "[concat(parameters('dnsPrefix'),'.',toLower(trim(replace(parameters('location'),' ' ,''))),'.cloudapp.azure.com')]",
    "ids": {
      "adNicId": "[resourceId('Microsoft.Network/networkInterfaces',variables('adPdcNicName'))]",
      "rdplbID": "[resourceId('Microsoft.Network/loadBalancers',variables('lbSettings').rdpLBName)]",
      "spWeblbID": "[resourceId('Microsoft.Network/loadBalancers',variables('lbSettings').spWebLBName)]",
      "sqllbID": "[resourceId('Microsoft.Network/loadBalancers',variables('lbSettings').sqlLBName)]",
      "spCAlbID": "[resourceId('Microsoft.Network/loadBalancers',variables('lbSettings').spCALBName)]",
      "spCAResourceId": "[resourceId('Microsoft.Network/publicIPAddresses',variables('spCAIPAddressName'))]",
      "adAvailabilitySetName": "[resourceId('Microsoft.Compute/availabilitySets',variables('vmSettings').availabilitySets.adAvailabilitySetName)]",
      "sqlAvailabilitySetName": "[resourceId('Microsoft.Compute/availabilitySets',variables('vmSettings').availabilitySets.sqlAvailabilitySetName)]",
      "spWebAvailabilitySetName": "[resourceId('Microsoft.Compute/availabilitySets',variables('vmSettings').availabilitySets.spWebAvailabilitySetName)]",
      "spAppAvailabilitySetName": "[resourceId('Microsoft.Compute/availabilitySets',variables('vmSettings').availabilitySets.spAppAvailabilitySetName)]"
    },
    "derivedIds": {
      "adIPConfigID": "[concat(variables('ids').adNicId,'/ipConfigurations/ipconfig1')]",
      "rdplbFEConfigID": "[concat(variables('ids').rdplbID,'/frontendIPConfigurations/',variables('lbSettings').rdpLBFE)]",
      "spWebLBFEConfigID": "[concat(variables('ids').spWeblbID,'/frontendIPConfigurations/',variables('lbSettings').spWebLBFE)]",
      "adRDPNATRuleID": "[concat(variables('ids').rdplbID,'/inboundNatRules/',variables('RDPNAT'))]",
      "adBEAddressPoolID": "[concat(variables('ids').rdplbID,'/backendAddressPools/',variables('lbSettings').adLBBE)]",
      "spWebProbeID": "[concat(variables('ids').spWeblbID,'/probes/',variables('spWebProbe'))]",
      "spWebBEAddressPoolID": "[concat(variables('ids').spWeblbID,'/backendAddressPools/',variables('lbSettings').spWebLBBE)]",
      "sqlBEAddressPoolID": "[concat(variables('ids').sqllbID,'/backendAddressPools/',variables('lbSettings').sqlLBBE)]",
      "sqllbFEConfigID": "[concat(variables('ids').sqllbID,'/frontendIPConfigurations/',variables('lbSettings').sqlLBFE)]",
      "sqllbProbeID": "[concat(variables('ids').sqllbID,'/probes/',variables('SQLAOProbe'))]",
      "spCABEAddressPoolID": "[concat(variables('ids').spCAlbID,'/backendAddressPools/',variables('lbSettings').spCALBBE)]",
      "spCAlbFEConfigID": "[concat(variables('ids').spCAlbID,'/frontendIPConfigurations/',variables('lbSettings').spCALBFE)]",
      "spCANATRuleID": "[concat(variables('ids').spCAlbID,'/inboundNatRules/',variables('spCANAT'))]"
    },
    "subnets": [
      {
        "name": "[variables('subnetNames').staticSubnetName]",
        "properties": {
          "addressPrefix": "[parameters('staticSubnet')]"
        }
      },
      {
        "name": "[variables('subnetNames').sqlSubnetName]",
        "properties": {
          "addressPrefix": "[parameters('sqlSubnet')]"
        }
      },
      {
        "name": "[variables('subnetNames').spWebSubnetName]",
        "properties": {
          "addressPrefix": "[parameters('spWebSubnet')]"
        }
      },
      {
        "name": "[variables('subnetNames').spAppSubnetName]",
        "properties": {
          "addressPrefix": "[parameters('spAppSubnet')]"
        }
      }
    ]
  },
  "resources": [
    {
      "name": "CreatingStorageAccounts",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'),'/','nestedtemplates','/','creatingStorageAccounts.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "storageAccountNamePrefix": {
            "value": "[parameters('storageAccountNamePrefix')]"
          },
          "storageAccountType": {
            "value": "[parameters('storageAccountType')]"
          }
        }
      }
    },
    {
      "name": "SettingUpRdp",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'),'/','nestedtemplates','/','publicip-rdp.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "rdpIPAddressName": {
            "value": "[variables('rdpIPAddressName')]"
          },
          "rdpLBName": {
            "value": "[variables('lbSettings').rdpLBName]"
          },
          "rdpLBFE": {
            "value": "[variables('lbSettings').rdpLBFE]"
          },
          "adLBBE": {
            "value": "[variables('lbSettings').adLBBE]"
          },
          "RDPNAT": {
            "value": "[variables('RDPNAT')]"
          },
          "rdplbFEConfigID": {
            "value": "[variables('derivedIds').rdplbFEConfigID]"
          }
        }
      }
    },
    {
      "name": "SettingUpSharepointWebPublicIP",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'),'/','nestedtemplates','/','publicip-',parameters('spWebIPNewOrExisting'),'.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "publicIPAddressName": {
            "value": "[parameters('spWebIPAddressName')]"
          },
          "publicIPAddressType": {
            "value": "dynamic"
          },
          "dnsPrefix": {
            "value": "[parameters('dnsPrefix')]"
          },
          "publicIpRGName": {
            "value": "[parameters('spWebIPRGName')]"
          }
        }
      }
    },
    {
      "name": "SettingUpSharepointCentralAdminPublicIP",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'),'/','nestedtemplates','/','publicip-new.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "publicIPAddressName": {
            "value": "[variables('spCAIPAddressName')]"
          },
          "publicIPAddressType": {
            "value": "dynamic"
          },
          "dnsPrefix": {
            "value": "[variables('spCADNSPrefix')]"
          },
          "publicIpRGName": {
            "value": "[resourceGroup().name]"
          }
        }
      }
    },
    {
      "name": "CreatingAvailabilitySets",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'),'/','nestedtemplates','/','availabilitySets.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "adAvailabilitySetName": {
            "value": "[variables('vmSettings').availabilitySets.adAvailabilitySetName]"
          },
          "sqlAvailabilitySetName": {
            "value": "[variables('vmSettings').availabilitySets.sqlAvailabilitySetName]"
          },
          "spWebAvailabilitySetName": {
            "value": "[variables('vmSettings').availabilitySets.spWebAvailabilitySetName]"
          },
          "spAppAvailabilitySetName": {
            "value": "[variables('vmSettings').availabilitySets.spAppAvailabilitySetName]"
          }
        }
      }
    },
    {
      "name": "CreatingVirtualNetwork",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'),'/','nestedtemplates','/','vnet-new.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "virtualNetworkName": {
            "value": "[parameters('virtualNetworkName')]"
          },
          "virtualNetworkAddressRange": {
            "value": "[parameters('virtualNetworkAddressRange')]"
          },
          "subnets": {
            "value": "[variables('subnets')]"
          }
        }
      }
    },
    {
      "name": "SettingUpLoadBalancers",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/SettingUpSharepointCentralAdminPublicIP",
        "Microsoft.Resources/deployments/SettingUpSharepointWebPublicIP",
        "Microsoft.Resources/deployments/SettingUpRdp",
        "Microsoft.Resources/deployments/CreatingVirtualNetwork"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'),'/','nestedtemplates','/','setupLBs.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "spCALBName": {
            "value": "[variables('lbSettings').spCALBName]"
          },
          "spCALBFE": {
            "value": "[variables('lbSettings').spCALBFE]"
          },
          "spCAResourceId": {
            "value": "[variables('ids').spCAResourceId]"
          },
          "spCALBBE": {
            "value": "[variables('lbSettings').spCALBBE]"
          },
          "spCANAT": {
            "value": "[variables('spCANAT')]"
          },
          "spCAlbFEConfigID": {
            "value": "[variables('derivedIds').spCAlbFEConfigID]"
          },
          "spWebLBName": {
            "value": "[variables('lbSettings').spWebLBName]"
          },
          "spWebLBFE": {
            "value": "[variables('lbSettings').spWebLBFE]"
          },
          "spWebResourceId": {
            "value": "[variables(concat('spWebResourceId',parameters('spWebIPNewOrExisting')))]"
          },
          "spWebLBBE": {
            "value": "[variables('lbSettings').spWebLBBE]"
          },
          "spWebLB": {
            "value": "[variables('lbSettings').spWebLB]"
          },
          "spWebLBFEConfigID": {
            "value": "[variables('derivedIds').spWebLBFEConfigID]"
          },
          "spWebBEAddressPoolID": {
            "value": "[variables('derivedIds').spWebBEAddressPoolID]"
          },
          "spWebProbeID": {
            "value": "[variables('derivedIds').spWebProbeID]"
          },
          "spWebProbe": {
            "value": "[variables('spWebProbe')]"
          },
          "sqlLBName": {
            "value": "[variables('lbSettings').sqlLBName]"
          },
          "sqlLBFE": {
            "value": "[variables('lbSettings').sqlLBFE]"
          },
          "sqlLBIPAddress": {
            "value": "[parameters('sqlLBIPAddress')]"
          },
          "staticSubnetRef": {
            "value": "[variables('staticSubnetRef')]"
          },
          "sqlLBBE": {
            "value": "[variables('lbSettings').sqlLBBE]"
          },
          "sqllbFEConfigID": {
            "value": "[variables('derivedIds').sqllbFEConfigID]"
          },
          "sqllbProbeID": {
            "value": "[variables('derivedIds').sqllbProbeID]"
          },
          "SQLAOProbe": {
            "value": "[variables('SQLAOProbe')]"
          }
        }
      }
    },
    {
      "name": "CreatingNetworkInterfaces",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingVirtualNetwork",
        "Microsoft.Resources/deployments/SettingUpRdp",
        "Microsoft.Resources/deployments/SettingUpLoadBalancers"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'),'/','nestedtemplates','/','creatingNICS.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "adPdcNicName": {
            "value": "[variables('adPdcNicName')]"
          },
          "adPdcNicIPAddress": {
            "value": "[parameters('adPdcNicIPAddress')]"
          },
          "staticSubnetRef": {
            "value": "[variables('staticSubnetRef')]"
          },
          "adBEAddressPoolID": {
            "value": "[variables('derivedIds').adBEAddressPoolID]"
          },
          "adRDPNATRuleID": {
            "value": "[variables('derivedIds').adRDPNATRuleID]"
          },
          "adBdcNicName": {
            "value": "[variables('adBdcNicName')]"
          },
          "adBdcNicIPAddress": {
            "value": "[parameters('adBdcNicIPAddress')]"
          },
          "sqlVMName": {
            "value": "[variables('vmSettings').sqlVMName]"
          },
          "sqlSubnetRef": {
            "value": "[variables('sqlSubnetRef')]"
          },
          "sqlBEAddressPoolID": {
            "value": "[variables('derivedIds').sqlBEAddressPoolID]"
          },
          "spwebVMName": {
            "value": "[variables('vmSettings').spwebVMName]"
          },
          "spWebSubnetRef": {
            "value": "[variables('spWebSubnetRef')]"
          },
          "spWebBEAddressPoolID": {
            "value": "[variables('derivedIds').spWebBEAddressPoolID]"
          },
          "spappVMName": {
            "value": "[variables('vmSettings').spappVMName]"
          },
          "spAppSubnetRef": {
            "value": "[variables('spAppSubnetRef')]"
          },
          "spCABEAddressPoolID": {
            "value": "[variables('derivedIds').spCABEAddressPoolID]"
          },
          "spCANATRuleID": {
            "value": "[variables('derivedIds').spCANATRuleID]"
          },
          "sqlwNicName": {
            "value": "[variables('sqlwNicName')]"
          }
        }
      }
    },
    {
      "name": "ProvisioningPrimaryADDomainController",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingStorageAccounts",
        "Microsoft.Resources/deployments/CreatingNetworkInterfaces",
        "Microsoft.Resources/deployments/CreatingAvailabilitySets",
        "Microsoft.Resources/deployments/SettingUpRdp"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'),'/','nestedtemplates','/','provisioningPrimaryDomainController.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "adPDCVMName": {
            "value": "[variables('vmSettings').adPDCVMName]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "storageAccountNamePrefix": {
            "value": "[parameters('storageAccountNamePrefix')]"
          },
          "availabilitySet": {
            "value": "[variables('ids').adAvailabilitySetName]"
          },
          "adVMSize": {
            "value": "[parameters('adVMSize')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "windowsImagePublisher": {
            "value": "[variables('vmSettings').windowsImagePublisher]"
          },
          "windowsImageOffer": {
            "value": "[variables('vmSettings').windowsImageOffer]"
          },
          "windowsImageSKU": {
            "value": "[variables('vmSettings').windowsImageSKU]"
          },
          "vmContainerName": {
            "value": "[variables('vmSettings').vmContainerName]"
          },
          "adPdcNicName": {
            "value": "[variables('adPdcNicName')]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "adPDCConfigurationFunction": {
            "value": "CreateADPDC.ps1\\CreateADPDC"
          },
          "adPDCModulesURL": {
            "value": "[concat(parameters('_artifactsLocation'),'/','dscv2','/','CreateADPDC.ps1.zip', parameters('_artifactsLocationSasToken'))]"
          }
        }
      }
    },
    {
      "name": "UpdatingDNStoPrimaryADVM",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/ProvisioningPrimaryADDomainController"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/', 'nestedtemplates', '/','vnet-with-dns-server.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "virtualNetworkName": {
            "value": "[parameters('virtualNetworkName')]"
          },
          "virtualNetworkAddressRange": {
            "value": "[parameters('virtualNetworkAddressRange')]"
          },
          "subnets": {
            "value": "[variables('subnets')]"
          },
          "DNSServerAddress": {
            "value": [
              "[parameters('adPdcNicIPAddress')]"
            ]
          }
        }
      }
    },
    {
      "name": "ProvisioningBackupADDomainController",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingStorageAccounts",
        "Microsoft.Resources/deployments/CreatingNetworkInterfaces",
        "Microsoft.Resources/deployments/CreatingAvailabilitySets"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'),'/','nestedtemplates','/','provisioningBackupDomainController.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "adBDCVMName": {
            "value": "[variables('vmSettings').adBDCVMName]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "storageAccountNamePrefix": {
            "value": "[parameters('storageAccountNamePrefix')]"
          },
          "availabilitySet": {
            "value": "[variables('ids').adAvailabilitySetName]"
          },
          "adVMSize": {
            "value": "[parameters('adVMSize')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "windowsImagePublisher": {
            "value": "[variables('vmSettings').windowsImagePublisher]"
          },
          "windowsImageOffer": {
            "value": "[variables('vmSettings').windowsImageOffer]"
          },
          "windowsImageSKU": {
            "value": "[variables('vmSettings').windowsImageSKU]"
          },
          "vmContainerName": {
            "value": "[variables('vmSettings').vmContainerName]"
          },
          "adBdcNicName": {
            "value": "[variables('adBdcNicName')]"
          },
          "DNSServer": {
            "value": "[parameters('adPdcNicIPAddress')]"
          },
          "adBDCPreparationFunction": {
            "value": "PrepareADBDC.ps1\\PrepareADBDC"
          },
          "adBDCPreparationModulesURL": {
            "value": "[concat(parameters('_artifactsLocation'),'/','dscv2','/','PrepareADBDC.ps1.zip', parameters('_artifactsLocationSasToken'))]"
          }
        }
      }
    },
    {
      "name": "ConfiguringBackupADDomainController",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/ProvisioningBackupADDomainController",
        "Microsoft.Resources/deployments/UpdatingDNStoPrimaryADVM"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'),'/','nestedtemplates','/','configuringBackupDomainController.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "adBDCVMName": {
            "value": "[variables('vmSettings').adBDCVMName]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "adBDCConfigurationFunction": {
            "value": "ConfigureADBDC.ps1\\ConfigureADBDC"
          },
          "adBDCConfigurationModulesURL": {
            "value": "[concat(parameters('_artifactsLocation'),'/','dscv2','/','ConfigureADBDC.ps1.zip', parameters('_artifactsLocationSasToken'))]"
          }
        }
      }
    },
    {
      "name": "UpdatingDNSwithBackupADVM",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/ConfiguringBackupADDomainController"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/', 'nestedtemplates', '/','vnet-with-dns-server.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "virtualNetworkName": {
            "value": "[parameters('virtualNetworkName')]"
          },
          "virtualNetworkAddressRange": {
            "value": "[parameters('virtualNetworkAddressRange')]"
          },
          "subnets": {
            "value": "[variables('subnets')]"
          },
          "DNSServerAddress": {
            "value": [
              "[parameters('adPdcNicIPAddress')]",
              "[parameters('adBdcNicIPAddress')]"
            ]
          }
        }
      }
    },
    {
      "name": "ProvisioningSQLVirtualMachines",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingStorageAccounts",
        "Microsoft.Resources/deployments/CreatingNetworkInterfaces",
        "Microsoft.Resources/deployments/CreatingAvailabilitySets"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'),'/','nestedtemplates','/','provisioningSQLVMs.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "sqlVMName": {
            "value": "[variables('vmSettings').sqlVMName]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "storageAccountNamePrefix": {
            "value": "[parameters('storageAccountNamePrefix')]"
          },
          "availabilitySet": {
            "value": "[variables('ids').sqlAvailabilitySetName]"
          },
          "sqlVMSize": {
            "value": "[parameters('sqlVMSize')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "windowsImagePublisher": {
            "value": "[variables('vmSettings').windowsImagePublisher]"
          },
          "windowsImageOffer": {
            "value": "[variables('vmSettings').windowsImageOffer]"
          },
          "windowsImageSKU": {
            "value": "[variables('vmSettings').windowsImageSKU]"
          },
          "vmContainerName": {
            "value": "[variables('vmSettings').vmContainerName]"
          },
          "sqlImagePublisher": {
            "value": "[variables('vmSettings').sqlImagePublisher]"
          },
          "sqlImageOffer": {
            "value": "[variables('vmSettings').sqlImageOffer]"
          },
          "sqlImageSKU": {
            "value": "[variables('vmSettings').sqlImageSKU]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "sqlAOPrepareModulesURL": {
            "value": "[concat(parameters('_artifactsLocation'),'/','dscv2','/','PrepareAlwaysOnSqlServer.ps1.zip', parameters('_artifactsLocationSasToken'))]"
          },
          "sqlAOPrepareFunction": {
            "value": "PrepareAlwaysOnSqlServer.ps1\\PrepareAlwaysOnSqlServer"
          },
          "prepareClusterModulesURL": {
            "value": "[concat(parameters('_artifactsLocation'),'/','dscv2','/','PrepareFailoverCluster.ps1.zip', parameters('_artifactsLocationSasToken'))]"
          },
          "prepareClusterConfigurationFunction": {
            "value": "PrepareFailoverCluster.ps1\\PrepareFailoverCluster"
          },
          "sharePath": {
            "value": "[variables('sharePath')]"
          },
          "witnessVMSize": {
            "value": "[parameters('witnessVMSize')]"
          },
          "sqlwVMName": {
            "value": "[variables('vmSettings').sqlwVMName]"
          },
          "sqlwNicName": {
            "value": "[variables('sqlwNicName')]"
          },
          "fswPreparationModulesURL": {
            "value": "[concat(parameters('_artifactsLocation'),'/','dscv2','/','PrepareFileShareWitness.ps1.zip', parameters('_artifactsLocationSasToken'))]"
          },
          "fswPreparationFunction": {
            "value": "PrepareFileShareWitness.ps1\\PrepareFileShareWitness"
          },
          "DNSServer": {
            "value": "[parameters('adPdcNicIPAddress')]"
          }
        }
      }
    },
    {
      "name": "ConfiguringSQLAlwaysOnCluster",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/UpdatingDNSwithBackupADVM",
        "Microsoft.Resources/deployments/ProvisioningSQLVirtualMachines"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'),'/','nestedtemplates','/','configuringSQLAlwaysOnCluster.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "sqlVMName": {
            "value": "[variables('vmSettings').sqlVMName]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "sqlAOConfigurationModulesURL": {
            "value": "[concat(parameters('_artifactsLocation'),'/','dscv2','/','ConfigureAlwaysOnSqlServer.ps1.zip', parameters('_artifactsLocationSasToken'))]"
          },
          "sqlAOConfigurationFunction": {
            "value": "ConfigureAlwaysOnSqlServer.ps1\\ConfigureAlwaysOnSqlServer"
          },
          "sqlAOEPName": {
            "value": "[variables('sqlAOEPName')]"
          },
          "sqlServerServiceAccountUserName": {
            "value": "[parameters('sqlServerServiceAccountUserName')]"
          },
          "sharePointSetupUserAccountUserName": {
            "value": "[parameters('sharePointSetupUserAccountUserName')]"
          },
          "sqlServerServiceAccountPassword": {
            "value": "[parameters('sqlServerServiceAccountPassword')]"
          },
          "sharePointSetupUserAccountPassword": {
            "value": "[parameters('sharePointSetupUserAccountPassword')]"
          },
          "configureClusterModulesURL": {
            "value": "[concat(parameters('_artifactsLocation'),'/','dscv2','/','ConfigureFailoverCluster.ps1.zip', parameters('_artifactsLocationSasToken'))]"
          },
          "configureClusterConfigurationFunction": {
            "value": "ConfigureFailoverCluster.ps1\\ConfigureFailoverCluster"
          },
          "clusterName": {
            "value": "[variables('clusterName')]"
          },
          "sharePath": {
            "value": "[variables('sharePath')]"
          },
          "sqlAOAGName": {
            "value": "[variables('sqlAOAGName')]"
          },
          "sqlAOListenerName": {
            "value": "[variables('sqlAOListenerName')]"
          },
          "sqlLBName": {
            "value": "[variables('lbSettings').sqlLBName]"
          },
          "sqlLBIPAddress": {
            "value": "[parameters('sqlLBIPAddress')]"
          },
          "adPDCVMName": {
            "value": "[variables('vmSettings').adPDCVMName]"
          },
          "sqlwVMName": {
            "value": "[variables('vmSettings').sqlwVMName]"
          },
          "fswConfigurationModulesURL": {
            "value": "[concat(parameters('_artifactsLocation'),'/','dscv2','/','ConfigureFileShareWitness.ps1.zip', parameters('_artifactsLocationSasToken'))]"
          },
          "fswConfigurationFunction": {
            "value": "ConfigureFileShareWitness.ps1\\ConfigureFileShareWitness"
          }
        }
      }
    },
    {
      "name": "CreatingSharepointVirtualMachines",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingStorageAccounts",
        "Microsoft.Resources/deployments/CreatingNetworkInterfaces",
        "Microsoft.Resources/deployments/CreatingAvailabilitySets"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'),'/','nestedtemplates','/','provisioningSharepointVMs.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "spappVMName": {
            "value": "[variables('vmSettings').spappVMName]"
          },
          "spwebVMName": {
            "value": "[variables('vmSettings').spwebVMName]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "spVMSize": {
            "value": "[parameters('spVMSize')]"
          },
          "spWebAvailabilitySet": {
            "value": "[variables('ids').spWebAvailabilitySetName]"
          },
          "spAppAvailabilitySet": {
            "value": "[variables('ids').spAppAvailabilitySetName]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "spImagePublisher": {
            "value": "[variables('vmSettings').spImagePublisher]"
          },
          "spImageOffer": {
            "value": "[variables('vmSettings').spImageOffer]"
          },
          "spImageSKU": {
            "value": "[variables('vmSettings').spImageSKU]"
          },
          "vmContainerName": {
            "value": "[variables('vmSettings').vmContainerName]"
          },
          "storageAccountNamePrefix": {
            "value": "[parameters('storageAccountNamePrefix')]"
          },
          "spPreparationModulesURL": {
            "value": "[concat(parameters('_artifactsLocation'),'/','dscv2','/','PrepareSharePointServerHA.ps1.zip', parameters('_artifactsLocationSasToken'))]"
          },
          "spPreparationFunction": {
            "value": "PrepareSharePointServerHA.ps1\\PrepareSharePointServerHA"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "DNSServer": {
            "value": "[parameters('adPdcNicIPAddress')]"
          }
        }
      }
    },
    {
      "name": "ConfiguringSharepoint",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/ConfiguringSQLAlwaysOnCluster",
        "Microsoft.Resources/deployments/CreatingSharepointVirtualMachines"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'),'/','nestedtemplates','/','configuringSharePoint.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "spappVMName": {
            "value": "[variables('vmSettings').spappVMName]"
          },
          "sqlVMName": {
            "value": "[variables('vmSettings').sqlVMName]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "spConfigurationModulesURL": {
            "value": "[concat(parameters('_artifactsLocation'),'/','dscv2','/','ConfigureSharePointServerHA.ps1.zip', parameters('_artifactsLocationSasToken'))]"
          },
          "spConfigurationFunction": {
            "value": "ConfigureSharePointServerHA.ps1\\ConfigureSharePointServerHA"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "sharePointSetupUserAccountUserName": {
            "value": "[parameters('sharePointSetupUserAccountUserName')]"
          },
          "sharePointFarmAccountUserName": {
            "value": "[parameters('sharePointFarmAccountUserName')]"
          },
          "sqlServerServiceAccountUserName": {
            "value": "[parameters('sqlServerServiceAccountUserName')]"
          },
          "sqlAOAGName": {
            "value": "[variables('sqlAOAGName')]"
          },
          "administrationContentDatabaseName": {
            "value": "[variables('administrationContentDatabaseName')]"
          },
          "configDatabaseName": {
            "value": "[variables('configDatabaseName')]"
          },
          "contentDatabaseName": {
            "value": "[variables('contentDatabaseName')]"
          },
          "sharepointCAfqdn": {
            "value": "[variables('sharepointCAfqdn')]"
          },
          "sharePointSetupUserAccountPassword": {
            "value": "[parameters('sharePointSetupUserAccountPassword')]"
          },
          "sharePointFarmAccountPassword": {
            "value": "[parameters('sharePointFarmAccountPassword')]"
          },
          "sharePointFarmPassphrasePassword": {
            "value": "[parameters('sharePointFarmPassphrasePassword')]"
          },
          "sqlServerServiceAccountPassword": {
            "value": "[parameters('sqlServerServiceAccountPassword')]"
          },
          "spwebVMName": {
            "value": "[variables('vmSettings').spwebVMName]"
          },
          "sharepointFarmName": {
            "value": "[parameters('sharepointFarmName')]"
          },
          "sharepointWebfqdn": {
            "value": "[variables('sharepointWebfqdn')]"
          },
          "spSiteTemplateName": {
            "value": "[parameters('spSiteTemplateName')]"
          }
        }
      }
    }
  ],
  "outputs": {
    "fqdn": {
      "value": "[variables('sharepointWebfqdn')]",
      "type": "string"
    },
    "cafqdn": {
      "value": "[variables('sharepointCAfqdn')]",
      "type": "string"
    }
  }
}
