{
    "options": [
        {
            "enabled": false,
            "definition": {
                "id": "5d58cc01-7c75-450c-be18-a388ddb129ec"
            },
            "inputs": {
                "branchFilters": "[\"+refs/heads/*\"]",
                "additionalFields": "{}"
            }
        },
        {
            "enabled": false,
            "definition": {
                "id": "a9db38f9-9fdc-478c-b0f9-464221e58316"
            },
            "inputs": {
                "workItemType": "Bug",
                "assignToRequestor": "true",
                "additionalFields": "{}"
            }
        }
    ],
    "triggers": [
        {
            "branchFilters": [
                "+master"
            ],
            "forks": {
                "enabled": true,
                "allowSecrets": true
            },
            "pathFilters": [
                "-/test/*"
            ],
            "requireCommentsForNonTeamMembersOnly": false,
            "isCommentRequiredForPullRequest": false,
            "triggerType": 64
        }
    ],
    "variables": {
        "app.id": {
            "value": "<GUID for the SP deploying the template, should have limited permissions in a public repo - must be able to also read the GEN resources>"
        },
        "app.id.admin": {
            "value": "<GUID for the SP that can give permissions to the app.id SP to deploy to the test resourceGroup>"
        },
        "app.secret": {
            "value": null,
            "isSecret": true
        },
        "app.secret.admin": {
            "value": null,
            "isSecret": true
        },
        "config.file.uri": {
            "value": "uri to the .config.json file that contains GEN values for the subscription used for test deployments"
        },
        "gen.parameters.filename": {
            "value": "gen.azuredeploy.parameters.json"
        },
        "gen.prereq.parameters.filename": {
            "value": "gen.prereq.parameters.json"
        },
        "location": {
            "value": "<location resources should be deployed to, should match the location prereq resources are deployed to when required>"
        },
        "mainTemplate.deployment.name": {
            "value": "mainTemplate-deployment"
        },
        "prereq.deployment.name": {
            "value": "prereq-deployment"
        },
        "prereq.outputs.filename": {
            "value": "prereq.outputs.json"
        },
        "resourceGroup.name": {
            "value": "<this will be generated>"
        },
        "sample.folder": {
            "value": "<this must be set by the pipeline task>"
        },
        "skipComponentGovernanceDetection": {
            "value": "true"
        },
        "subscription.id": {
            "value": "<subscription Id used for test deployments>"
        },
        "system.debug": {
            "value": "false",
            "allowOverride": true
        },
        "tenant.id": {
            "value": "<tenantId for the subscription and service principals>"
        },
        "ttk.asset.filename": {
            "value": "AzTemplateToolKit.zip"
        },
        "ttk.folder": {
            "value": "$(Agent.BuildDirectory)\\test"
        }
    },
    "retentionRules": [
        {
            "branches": [
                "+refs/heads/*"
            ],
            "artifacts": [],
            "artifactTypesToDelete": [
                "FilePath",
                "SymbolStore"
            ],
            "daysToKeep": 10,
            "minimumToKeep": 1,
            "deleteBuildRecord": true,
            "deleteTestResults": true
        }
    ],
    "properties": {},
    "tags": [],
    "jobAuthorizationScope": 1,
    "jobTimeoutInMinutes": 60,
    "jobCancelTimeoutInMinutes": 5,
    "process": {
        "phases": [
            {
                "steps": [
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Download Template Toolkit Release",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "263abc27-4582-4174-8789-af599697778e",
                            "versionSpec": "0.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "connection": "d49d0a9d-09e7-4ac4-a95e-176b3df35bdc",
                            "userRepository": "bmoore-msft/azure-quickstart-templates",
                            "defaultVersionType": "latest",
                            "version": "",
                            "itemPattern": "$(ttk.asset.filename)",
                            "downloadPath": "$(ttk.folder)"
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Expand Files TTK Files",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "# Expand the TTK files\nGet-ChildItem \"$(ttk.folder)\" -Recurse\n\nWrite-Host \"Expanding files...\"\nExpand-Archive -Path \"$(ttk.folder)\\*.zip\" -DestinationPath \"$(ttk.folder)\" -Verbose\n\nWrite-Host \"Expanded files found:\"\nGet-ChildItem \"$(ttk.folder)\" -Recurse",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Get Folder for Sample & ResourceGroup Name",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)\\ci-scripts\\Get-SampleFolder.ps1",
                            "arguments": "",
                            "script": "#Get the folder of the sample in this PR and generate the resourceGroup name\n\nWrite-Host \"##vso[task.setvariable variable=sample.folder]101-application-gateway-create\"\n\n$resourceGroupName = \"azdo-$(New-Guid)\"\nWrite-Host \"##vso[task.setvariable variable=resourceGroup.name]$resourceGroupName\"\n\n<#\n101-application-gateway-public-ip\n101-application-gateway-public-ip-ssl-offload\n101-application-gateway-redirect\n101-application-gateway-rewrite\n101-application-gateway-v2-autoscale-create\n101-application-gateway-waf\n101-app-service-certificate-standard\n101-app-service-certificate-wildcard\n101-automation-configuration\n101-automation-runbook-getvms\n101-availability-set-create-3FDs-20UDs\n101-azure-api-management-create\n101-azure-database-migration-service\n101-azure-dns-new-zone\n101-azurefirewall-create\n101-azurefirewall-sandbox\n101-azurepolicy-assign-builtinpolicy-resourcegroup\n101-azure-relay-create-namespace\n101-azure-search-create\n101-backup-oms-monitoring\n101-backup-protect-iaasvm\n101-backup-vault-create\n101-batchaccount-with-storage\n101-batch-with-keyvault-pfx-password\n101-cdn-with-custom-origin\n101-cognitive-services-Computer-vision-API\n101-cognitive-services-translate\n101-container-registry\n101-container-registry-geo-replication\n101-cosmosdb-api-for-mongodb-account-create\n101-cosmosdb-create-account\n101-cosmosdb-create-arm-template\n101-cosmosdb-create-multi-region-account\n101-create-ase-with-webapp\n101-databricks-all-in-one-template-for-vnet-injection\n101-databricks-nsg-for-vnet-injection\n101-databricks-vnet-for-vnet-injection\n101-databricks-workspace\n101-databricks-workspace-with-custom-vnet-address\n101-databricks-workspace-with-vnet-injection\n101-data-factory-blob-to-sql-copy\n101-data-factory-blob-to-sql-copy-stored-proc\n101-data-factory-chained-copy-activities\n101-data-factory-hive-transformation\n101-data-factory-salesforce-to-blob-copy\n101-data-factory-v2-blob-to-blob-copy\n101-data-factory-v2-blob-to-sql-copy\n101-data-factory-v2-onprem-sql-to-blob-copy\n101-data-factory-v2-provision-ssis-runtime\n101-data-factory-v2-transform-using-spark\n101-data-lake-analytics\n101-data-lake-store-encryption-adls\n101-data-lake-store-encryption-key-vault\n101-data-lake-store-no-encryption\n101-DDoS-Attack-Prevention\n101-default-shared-dashboard\n101-documentdb-account-consistencypolicy-create\n101-documentdb-account-create\n101-dtl-create-lab\n101-event-grid\n101-event-grid-cloudevents\n101-event-grid-event-hubs-handler\n101-event-grid-resource-events-to-webhook\n101-event-grid-subscription-and-storage\n101-expressroute-circuit-create\n101-front-door-create-basic\n101-front-door-create-multiple-backends\n101-front-door-custom-domain\n101-front-door-geo-filtering\n101-function-app-create-dedicated\n101-function-app-create-dynamic\n101-hdinsight-hbase-enhancedwrite\n101-hdinsight-hbase-linux\n101-hdinsight-hbase-linux-vnet\n101-hdinsight-hbase-replication-geo\n101-hdinsight-hbase-replication-one-vnet\n101-hdinsight-hbase-replication-two-vnets-same-region\n101-hdinsight-interactive-hive\n101-hdinsight-kafka\n101-hdinsight-linux-add-edge-node\n101-hdinsight-linux-ssh-password\n101-hdinsight-linux-ssh-publickey\n101-hdinsight-linux-ssh-publickey-metastore-vnet\n101-hdinsight-linux-with-edge-node\n101-hdinsight-linux-with-existing-default-storage-account\n101-hdinsight-linux-with-existing-linked-storage-account\n101-hdinsight-linux-with-sql-database\n101-hdinsight-rserver\n101-hdinsight-secure-vnet\n101-hdinsight-spark-linux\n101-hdinsight-spark-linux-vnet\n101-hub-and-spoke-sandbox\n101-integrationpatterns-messagerouter-logicapp\n101-integrationpatterns-messagerouter-servicebus\n101-internal-loadbalancer-create\n101-iothub-with-consumergroup-create\n101-jenkins\n101-jenkins-with-ssh-public-key\n101-keyvault-add-access-policy\n101-key-vault-create\n101-kusto-cluster-database\n101-loadbalancer-with-multivip\n101-loadbalancer-with-nat-rule\n101-logic-app-and-function-app\n101-logic-app-create\n101-logic-app-ftp-to-blob\n101-logic-app-sendgrid\n101-logic-app-sql-proc\n101-machine-learning-create\n101-managed-mysql-with-vnet\n101-media-services-create\n101-mobile-app-create\n101-mutiple-vms-with-data-management-gateway\n101-networkwatcher-create\n101-nic-publicip-dns-vnet\n101-point-to-site\n101-powerbi-workspace-create\n101-rbac-builtinrole-resourcegroup\n101-rbac-builtinrole-virtualmachine\n101-recovery-services-backup-vms\n101-recovery-services-create-vault-enable-diagnostics\n101-recovery-services-create-vm-and-configure-backup\n101-recovery-services-daily-backup-policy-create\n101-recovery-services-vault-create\n101-recovery-services-weekly-backup-policy-create\n101-redis-cache\n101-scheduler-service-bus\n#>",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "DEBUG: Dump Vars",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "Write-Host \"Dump SubId: $(subscription.id)\"\nWrite-Host \"Dump RG: $(resourceGroup.name)\"\nWrite-Host \"Dump Folder: $(sample.folder)\"\n\n\n",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "false",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "Run Best Practices Tests",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "test/template-tests/Test-AzureRMTemplate.ps1",
                            "arguments": "-TemplatePath \"$(sample.folder)\"",
                            "script": "Import-Module $(ttk.folder)/template-tests/AzRMTester.psd1 -Verbose\n\nTest-AzureRMTemplate -TemplatePath \"$(sample.folder)\"\n",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Check for Prereq Deployment",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "#checks to see if there are prereqs that need to be deployed and sets the env variable to trigger prereq tasks\n\n$result = Test-Path \"$(sample.folder)\\prereqs\\prereq.azuredeploy.json\"\n\nWrite-Host \"Result: $result\"\n\nWrite-Host \"##vso[task.setvariable variable=deploy.prereqs]$result\"\n\n#Write-Host \"Deploy Prereqs: $(deploy.prereqs)\"\n",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Connect To Azure (Admin) To Create RG",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/ConnectTo-Azure.ps1",
                            "arguments": "-appId $(app.id.admin) -secret $(app.secret.admin) -tenantId $(tenant.id) -subscriptionId $(subscription.id) -InstallAzModule",
                            "script": "# Write your powershell commands here.\n\nWrite-Host \"Hello World\"\n\n# Use the environment variables input below to pass secret variables to this script.",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "Create ResourceGroup - Assign RBAC (mainTemplate RG)",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/Create-ResourceGroupAssignment.ps1",
                            "arguments": "-ResourceGroupName \"$(resourceGroup.name)\" -Location $(location) -appId $(app.id) -objectId $(app.object.id)",
                            "script": "# Write your powershell commands here.\n\nWrite-Host \"Hello World\"\n\n# Use the environment variables input below to pass secret variables to this script.",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "Create ResourceGroup - Assign RBAC (prereqs RG) ",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['deploy.prereqs'], 'true'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/Create-ResourceGroupAssignment.ps1",
                            "arguments": "-ResourceGroupName \"$(resourceGroup.name)-prereqs\" -Location $(location) -appId $(app.id) -objectId $(app.object.id)",
                            "script": "# Write your powershell commands here.\n\nWrite-Host \"Hello World\"\n\n# Use the environment variables input below to pass secret variables to this script.",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Connect To Azure (non-Admin) To Deploy",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/ConnectTo-Azure.ps1",
                            "arguments": "-appId $(app.id) -secret $(app.secret) -tenantId $(tenant.id) -subscriptionId $(subscription.id)",
                            "script": "# Write your powershell commands here.\n\nWrite-Host \"Hello World\"\n\n# Use the environment variables input below to pass secret variables to this script.",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "GEN Parameters (Prereqs)",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['deploy.prereqs'], 'true'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/Gen-TemplateParameters.ps1",
                            "arguments": "-configUri \"$(config.file.uri)\" -TemplateParametersFile \"$(sample.folder)\\prereqs\\prereq.azuredeploy.parameters.json\" -NewTemplateParametersFile \"$(sample.folder)\\prereqs\\$(gen.prereq.parameters.filename)\"",
                            "script": "# Write your powershell commands here.\n\nWrite-Host \"Hello World\"\n\n# Use the environment variables input below to pass secret variables to this script.",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Deploy Template (prereqs)",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['deploy.prereqs'], 'true'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)\\Deploy-AzTemplate.ps1",
                            "arguments": "-ArtifactStagingDirectory \"$(sample.folder)\\prereqs\" -Location \"$(Location)\" -ResourceGroupName \"$(resourceGroup.name)\" -TemplateParametersFile \"$(sample.folder)\\prereqs\\$(gen.prereq.parameters.filename)\" -DeploymentName \"$(prereq.deployment.name)\" -TemplateFile \"$(sample.folder)\\prereqs\\prereq.azuredeploy.json\"",
                            "script": "# Write your powershell commands here.\n\nWrite-Host \"Hello World\"\n\n# Use the environment variables input below to pass secret variables to this script.",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Dump Outputs To File (prereqs)",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['deploy.prereqs'], 'true'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "$PreReqOutputs = (Get-AzResourceGroupDeployment -ResourceGroupName $(resourceGroup.name) -Name $(prereq.deployment.name)).Outputs | ConvertTo-Json\nWrite-Host \"$PreReqOutputs\"\n\n###Write-Output \"##vso[task.setvariable variable=prereq.config.json]$PreReqOutputs\"\n\n$PreReqOutputs | Out-File -FilePath \"$(sample.folder)\\prereqs\\$(prereq.outputs.filename)\"",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "DEBUG: Dump Prereqs Output File",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['deploy.prereqs'], 'true'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "Write-Host (Get-Content \"$(sample.folder)\\prereqs\\$(prereq.outputs.filename)\" -Raw)\n",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "GEN mainTemplate Params",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/Gen-TemplateParameters.ps1",
                            "arguments": "-configUri \"$(config.file.uri)\" -TemplateParametersFile \"$(sample.folder)\\azuredeploy.parameters.json\" -NewTemplateParametersFile \"$(sample.folder)\\$(gen.parameters.filename)\" -prereqOutputsFileName \"$(sample.folder)\\prereqs\\$(prereq.outputs.filename)\"",
                            "script": "# Write your powershell commands here.\n\nWrite-Host \"Hello World\"\n\n# Use the environment variables input below to pass secret variables to this script.",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "DEBUG: dump mainTemplate param file content",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "Write-Host (Get-Content \"$(sample.folder)\\$(gen.parameters.filename)\" -Raw)",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Deploy mainTemplate",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)\\Deploy-AzTemplate.ps1",
                            "arguments": "-ArtifactStagingDirectory \"$(sample.folder)\" -Location \"$(Location)\" -ResourceGroupName \"$(resourceGroup.name)\" -TemplateParametersFile \"$(sample.folder)\\$(gen.parameters.filename)\" -DeploymentName \"$(mainTemplate.deployment.name)\"",
                            "script": "# Write your powershell commands here.\n\nWrite-Host \"Hello World\"\n\n# Use the environment variables input below to pass secret variables to this script.",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Connect To Azure (Admin) To Clean Up",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/ConnectTo-Azure.ps1",
                            "arguments": "-appId $(app.id.admin) -secret $(app.secret.admin) -tenantId $(tenant.id) -subscriptionId $(subscription.id)",
                            "script": "# Write your powershell commands here.\n\nWrite-Host \"Hello World\"\n\n# Use the environment variables input below to pass secret variables to this script.",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Write Test Result for README.MD",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "<#\n\nThis is a placeholder - for when we want to write the last test result to the readme file\n\n#>",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "false",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": true,
                        "displayName": "Clean Up ResourceGroup (mainTemplate)",
                        "timeoutInMinutes": 0,
                        "condition": "succeededOrFailed()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "Remove-AzResourceGroup -Name \"$(resourceGroup.Name)\" -Force -Verbose\n",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Clean Up ResourceGroup (prereqs)",
                        "timeoutInMinutes": 0,
                        "condition": "eq(variables['deploy.prereqs'], 'true')",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "Remove-AzResourceGroup -Name \"$(resourceGroup.Name)-prereqs\" -Force -Verbose\n\n",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    }
                ],
                "name": "Agent job 1",
                "refName": "Job_1",
                "condition": "succeeded()",
                "target": {
                    "executionOptions": {
                        "type": 0
                    },
                    "allowScriptsAuthAccessOption": false,
                    "type": 1
                },
                "jobAuthorizationScope": 1
            }
        ],
        "type": 1
    },
    "repository": {
        "properties": {
            "apiUrl": "https://api.github.com/repos/Azure/azure-quickstart-templates",
            "branchesUrl": "https://api.github.com/repos/Azure/azure-quickstart-templates/branches",
            "cloneUrl": "https://github.com/Azure/azure-quickstart-templates.git",
            "connectedServiceId": "d49d0a9d-09e7-4ac4-a95e-176b3df35bdc",
            "defaultBranch": "master",
            "fullName": "Azure/azure-quickstart-templates",
            "hasAdminPermissions": "True",
            "isFork": "False",
            "isPrivate": "False",
            "lastUpdated": "07/05/2019 20:37:51",
            "manageUrl": "https://github.com/Azure/azure-quickstart-templates",
            "nodeId": "MDEwOlJlcG9zaXRvcnkzNDQwNzY1MQ==",
            "ownerId": "6844498",
            "orgName": "Azure",
            "refsUrl": "https://api.github.com/repos/Azure/azure-quickstart-templates/git/refs",
            "safeRepository": "Azure/azure-quickstart-templates",
            "shortName": "azure-quickstart-templates",
            "ownerAvatarUrl": "https://avatars0.githubusercontent.com/u/6844498?v=4",
            "archived": "False",
            "externalId": "34407651",
            "ownerIsAUser": "False",
            "checkoutNestedSubmodules": "false",
            "cleanOptions": "0",
            "fetchDepth": "0",
            "gitLfsSupport": "false",
            "reportBuildStatus": "true",
            "skipSyncSource": "false",
            "labelSourcesFormat": "$(build.buildNumber)",
            "labelSources": "0"
        },
        "id": "Azure/azure-quickstart-templates",
        "type": "GitHub",
        "name": "Azure/azure-quickstart-templates",
        "url": "https://github.com/Azure/azure-quickstart-templates.git",
        "defaultBranch": "master",
        "clean": "false",
        "checkoutSubmodules": false
    },
    "processParameters": {},
    "quality": 1,
    "authoredBy": {
        "displayName": "Brian Moore (AZURE RESOURCE MANAGER)",
        "url": "https://app.vssps.visualstudio.com/Aec0b5c4d-d8c6-4ce2-95f7-541aa5095f68/_apis/Identities/a776ea98-0041-458d-a782-55b352492e1e",
        "_links": {
            "avatar": {
                "href": "https://bmoore-msft.visualstudio.com/_apis/GraphProfile/MemberAvatars/aad.ZmNkYzI4MmEtZTY1My03M2Y5LThkNTgtYzgwMTY1ZDM1NTRk"
            }
        },
        "id": "a776ea98-0041-458d-a782-55b352492e1e",
        "uniqueName": "bmoore@microsoft.com",
        "imageUrl": "https://bmoore-msft.visualstudio.com/_apis/GraphProfile/MemberAvatars/aad.ZmNkYzI4MmEtZTY1My03M2Y5LThkNTgtYzgwMTY1ZDM1NTRk",
        "descriptor": "aad.ZmNkYzI4MmEtZTY1My03M2Y5LThkNTgtYzgwMTY1ZDM1NTRk"
    },
    "drafts": [],
    "queue": { },
    "id": 15,
    "name": "QuickStarts-Az-CI-Public",
    "path": "\\",
    "type": 2,
    "queueStatus": 0,
    "revision": 81,
    "createdDate": "2019-07-07T21:58:51.327Z",
    "project": {
        "id": "<GUID for the projectId this pipeline will be imported into>",
        "name": "QuickStarts",
        "state": 1,
        "revision": 62879213,
        "visibility": 0,
        "lastUpdateTime": "2019-04-10T20:34:26.580Z"
    }
}