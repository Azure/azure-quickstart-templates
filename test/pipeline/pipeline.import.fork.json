{
    "triggers": [
        {
            "branchFilters": [
                "+master"
            ],
            "forks": {
                "enabled": true,
                "allowSecrets": true
            },
            "pathFilters": [
                "-/test/*"
            ],
            "requireCommentsForNonTeamMembersOnly": false,
            "isCommentRequiredForPullRequest": false,
            "triggerType": 64
        }
    ],
    "variables": {
        "app.id": {
            "value": "<GUID for the SP deploying the template, should have limited permissions in a public repo - must be able to also read the GEN resources>"
        },
        "app.id.admin": {
            "value": "<GUID for the SP that can give permissions to the app.id SP to deploy to the test resourceGroup>"
        },
        "app.secret": {
            "value": null,
            "isSecret": true
        },
        "app.secret.admin": {
            "value": null,
            "isSecret": true
        },
        "config.file.uri": {
            "value": "<uri to the .config.json file that contains GEN values for the subscription used for test deployments>"
        },
        "gen.parameters.filename": {
            "value": "gen.azuredeploy.parameters.json"
        },
        "gen.prereq.parameters.filename": {
            "value": "gen.prereq.parameters.json"
        },
        "location": {
            "value": "<location resources should be deployed to, should match the location prereq resources are deployed to when required>"
        },
        "mainTemplate.deployment.name": {
            "value": "mainTemplate-deployment"
        },
        "prereq.deployment.name": {
            "value": "prereq-deployment"
        },
        "prereq.outputs.filename": {
            "value": "prereq.outputs.json"
        },
        "prereq.resourceGroup.name": {
            "value": "<this will set by a pipeline task>"
        },
        "resourceGroup.name": {
            "value": "<this will set by a pipeline task>"
        },
        "sample.folder": {
            "value": "<this will set by a pipeline task>"
        },
        "subscription.id": {
            "value": "<subscription Id used for test deployments>"
        },
        "system.debug": {
            "value": "false",
            "allowOverride": true
        },
        "tenant.id": {
            "value": "<tenantId for the subscription and service principals>"
        },
        "ttk.asset.filename": {
            "value": "AzTemplateToolKit.zip"
        },
        "ttk.folder": {
            "value": "$(Agent.BuildDirectory)\\test"
        }
    },
    "retentionRules": [
        {
            "branches": [
                "+refs/heads/*"
            ],
            "artifacts": [],
            "artifactTypesToDelete": [
                "FilePath",
                "SymbolStore"
            ],
            "daysToKeep": 10,
            "minimumToKeep": 1,
            "deleteBuildRecord": true,
            "deleteTestResults": true
        }
    ],
    "properties": {},
    "tags": [],
    "jobAuthorizationScope": 1,
    "jobTimeoutInMinutes": 360,
    "jobCancelTimeoutInMinutes": 5,
    "badgeEnabled": false,
    "process": {
        "phases": [
            {
                "steps": [
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Download Template Toolkit Release",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "263abc27-4582-4174-8789-af599697778e",
                            "versionSpec": "0.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "connection": "00000000-0000-0000-0000-000000000000",
                            "userRepository": "Azure/azure-quickstart-templates",
                            "defaultVersionType": "latest",
                            "version": "",
                            "itemPattern": "$(ttk.asset.filename)",
                            "downloadPath": "$(ttk.folder)"
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Expand Files TTK Files",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "# Expand the TTK files\nGet-ChildItem \"$(ttk.folder)\" -Recurse\n\nWrite-Host \"Expanding files...\"\nExpand-Archive -Path \"$(ttk.folder)\\*.zip\" -DestinationPath \"$(ttk.folder)\" -Verbose\n\nWrite-Host \"Expanded files found:\"\nGet-ChildItem \"$(ttk.folder)\" -Recurse",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Get Folder for Sample & ResourceGroup Name",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)\\ci-scripts\\Get-SampleFolder.ps1",
                            "arguments": "",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "Run Best Practices Tests",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "test/template-tests/Test-AzureRMTemplate.ps1",
                            "arguments": "-TemplatePath \"$(sample.folder)\"",
                            "script": "Import-Module $(ttk.folder)/template-tests/AzRMTester.psd1 -Verbose\n$testOutput = @(Test-AzureRMTemplate -TemplatePath \"$(sample.folder)\")\n\n$testOutput \n\nif ($testOutput | ? {$_.Errors }) {\n   exit 1 \n} else {\n   exit 0\n} \n",
                            "errorActionPreference": "continue",
                            "failOnStderr": "true",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Check for Prereq Deployment",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "#checks to see if there are prereqs that need to be deployed and sets the env variable to trigger prereq tasks\n\n$result = Test-Path \"$(sample.folder)\\prereqs\\prereq.azuredeploy.json\"\n\nWrite-Host \"Result: $result\"\n\nWrite-Host \"##vso[task.setvariable variable=deploy.prereqs]$result\"\n\n#Write-Host \"Deploy Prereqs: $(deploy.prereqs)\"\n",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Connect To Azure (Admin) To Create RG",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/ConnectTo-Azure.ps1",
                            "arguments": "-appId $(app.id.admin) -secret $(app.secret.admin) -tenantId $(tenant.id) -subscriptionId $(subscription.id) -InstallAzModule",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "Create ResourceGroup - Assign RBAC (mainTemplate RG)",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/Create-ResourceGroupAssignment.ps1",
                            "arguments": "-ResourceGroupName \"$(resourceGroup.name)\" -Location $(location) -appId $(app.id)",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "Create ResourceGroup - Assign RBAC (prereqs RG) ",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['deploy.prereqs'], 'true'), not(eq(variables['resourceGroup.name'], variables['prereq.resourceGroup.name'])))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/Create-ResourceGroupAssignment.ps1",
                            "arguments": "-ResourceGroupName \"$(prereq.resourceGroup.name)\" -Location $(location) -appId $(app.id)",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Connect To Azure (non-Admin) To Deploy",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/ConnectTo-Azure.ps1",
                            "arguments": "-appId $(app.id) -secret $(app.secret) -tenantId $(tenant.id) -subscriptionId $(subscription.id)",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "GEN Parameters (Prereqs)",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['deploy.prereqs'], 'true'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/Gen-TemplateParameters.ps1",
                            "arguments": "-configUri \"$(config.file.uri)\" -TemplateParametersFile \"$(sample.folder)\\prereqs\\prereq.azuredeploy.parameters.json\" -NewTemplateParametersFile \"$(sample.folder)\\prereqs\\$(gen.prereq.parameters.filename)\"",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Deploy Template (prereqs)",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['deploy.prereqs'], 'true'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)\\Deploy-AzTemplate.ps1",
                            "arguments": "-ArtifactStagingDirectory \"$(sample.folder)\\prereqs\" -Location \"$(Location)\" -ResourceGroupName \"$(prereq.resourceGroup.name)\" -TemplateParametersFile \"$(sample.folder)\\prereqs\\$(gen.prereq.parameters.filename)\" -DeploymentName \"$(prereq.deployment.name)\" -TemplateFile \"$(sample.folder)\\prereqs\\prereq.azuredeploy.json\"",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Dump Outputs To File (prereqs)",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['deploy.prereqs'], 'true'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "$PreReqOutputs = (Get-AzResourceGroupDeployment -ResourceGroupName \"$(prereq.resourceGroup.name)\" -Name $(prereq.deployment.name)).Outputs | ConvertTo-Json\nWrite-Host \"$PreReqOutputs\"\n\n###Write-Output \"##vso[task.setvariable variable=prereq.config.json]$PreReqOutputs\"\n\n$PreReqOutputs | Out-File -FilePath \"$(sample.folder)\\prereqs\\$(prereq.outputs.filename)\"",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "DEBUG: Dump Prereqs Output File",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['deploy.prereqs'], 'true'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "Write-Host (Get-Content \"$(sample.folder)\\prereqs\\$(prereq.outputs.filename)\" -Raw)\n",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "GEN mainTemplate Params",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/Gen-TemplateParameters.ps1",
                            "arguments": "-configUri \"$(config.file.uri)\" -TemplateParametersFile \"$(sample.folder)\\azuredeploy.parameters.json\" -NewTemplateParametersFile \"$(sample.folder)\\$(gen.parameters.filename)\" -prereqOutputsFileName \"$(sample.folder)\\prereqs\\$(prereq.outputs.filename)\"",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "DEBUG: dump mainTemplate param file content",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "Write-Host (Get-Content \"$(sample.folder)\\$(gen.parameters.filename)\" -Raw)",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Deploy mainTemplate",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)\\Deploy-AzTemplate.ps1",
                            "arguments": "-ArtifactStagingDirectory \"$(sample.folder)\" -Location \"$(Location)\" -ResourceGroupName \"$(resourceGroup.name)\" -TemplateParametersFile \"$(sample.folder)\\$(gen.parameters.filename)\" -DeploymentName \"$(mainTemplate.deployment.name)\"",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Connect To Azure (Admin) To Clean Up",
                        "timeoutInMinutes": 0,
                        "condition": "always()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/ConnectTo-Azure.ps1",
                            "arguments": "-appId $(app.id.admin) -secret $(app.secret.admin) -tenantId $(tenant.id) -subscriptionId $(subscription.id)",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Write Test Result for README.MD",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "<#\n\nThis is a placeholder - for when we want to write the last test result to the readme file\n\n#>",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "false",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Clean Up ResourceGroup (mainTemplate)",
                        "timeoutInMinutes": 0,
                        "condition": "always()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/Kill-AzResourceGroup.ps1",
                            "arguments": "-ResourceGroupName \"$(resourceGroup.name)\"",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Clean Up ResourceGroup (prereqs)",
                        "timeoutInMinutes": 0,
                        "condition": "and(always(), eq(variables['deploy.prereqs'], 'true'), not(eq(variables['resourceGroup.name'], variables['prereq.resourceGroup.name'])))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/Kill-AzResourceGroup.ps1",
                            "arguments": "-ResourceGroupName \"$(prereq.resourceGroup.name)\"",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    }
                ],
                "name": "Agent job 1",
                "refName": "Job_1",
                "condition": "succeeded()",
                "target": {
                    "executionOptions": {
                        "type": 0
                    },
                    "allowScriptsAuthAccessOption": false,
                    "type": 1
                },
                "jobAuthorizationScope": 1,
                "jobTimeoutInMinutes": 360
            }
        ],
        "type": 1
    },
    "repository": { },
    "processParameters": {},
    "quality": 1,
    "authoredBy": {
        "displayName": "Brian Moore (AZURE RESOURCE MANAGER)",
        "url": "https://app.vssps.visualstudio.com/Ac8aef736-af44-4df8-8ee0-e3f71ba093b7/_apis/Identities/a776ea98-0041-458d-a782-55b352492e1e",
        "_links": {
            "avatar": {
                "href": "https://dev.azure.com/azurequickstarts/_apis/GraphProfile/MemberAvatars/aad.ZmNkYzI4MmEtZTY1My03M2Y5LThkNTgtYzgwMTY1ZDM1NTRk"
            }
        },
        "id": "a776ea98-0041-458d-a782-55b352492e1e",
        "uniqueName": "bmoore@microsoft.com",
        "imageUrl": "https://dev.azure.com/azurequickstarts/_apis/GraphProfile/MemberAvatars/aad.ZmNkYzI4MmEtZTY1My03M2Y5LThkNTgtYzgwMTY1ZDM1NTRk",
        "descriptor": "aad.ZmNkYzI4MmEtZTY1My03M2Y5LThkNTgtYzgwMTY1ZDM1NTRk"
    },
    "drafts": [],
    "queue": { },
    "id": 5,
    "name": "Azure-QuickStart-Templates-Fork-Import",
    "path": "\\",
    "type": 2,
    "queueStatus": 0,
    "revision": 3,
    "createdDate": "2019-07-16T16:11:47.817Z",
    "project": {
        "id": "00000000-0000-0000-0000-000000000000",
        "state": 1,
        "visibility": 2
    }
}