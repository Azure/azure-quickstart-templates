{
    "triggers": [
        {
            "branchFilters": [
                "+master"
            ],
            "forks": {
                "enabled": true,
                "allowSecrets": true,
                "allowFullAccessToken": false
            },
            "pathFilters": [
                "-/test/*",
                "-/1-CONTRIBUTION-GUIDE/*",
                "-/.github/*"
            ],
            "requireCommentsForNonTeamMembersOnly": false,
            "isCommentRequiredForPullRequest": false,
            "triggerType": 64
        },
        {
            "schedules": [
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 0,
                    "startMinutes": 0,
                    "daysToBuild": 127,
                    "scheduleJobId": "89416352-b578-4bb1-80da-fcca111d4de0",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 1,
                    "startMinutes": 0,
                    "daysToBuild": 127,
                    "scheduleJobId": "1b9d5c96-1e96-46be-a12b-86ab2d116649",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 2,
                    "startMinutes": 0,
                    "daysToBuild": 127,
                    "scheduleJobId": "efa50167-0016-406f-ae26-33bcbb60f8dc",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 3,
                    "startMinutes": 0,
                    "daysToBuild": 127,
                    "scheduleJobId": "faeb59f8-32d7-486f-a569-ff7e55eb17d6",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 4,
                    "startMinutes": 0,
                    "daysToBuild": 127,
                    "scheduleJobId": "fda1ea3a-6ab2-457a-a704-731dabad83bd",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 5,
                    "startMinutes": 0,
                    "daysToBuild": 127,
                    "scheduleJobId": "6d34d1ed-0afd-4572-abfa-0bba864395e6",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 6,
                    "startMinutes": 0,
                    "daysToBuild": 127,
                    "scheduleJobId": "fe139ab3-9a9c-4d34-9063-00959072d35a",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 7,
                    "startMinutes": 0,
                    "daysToBuild": 127,
                    "scheduleJobId": "cbdb641c-6c15-4f25-a5ae-8c3505853ee3",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 8,
                    "startMinutes": 0,
                    "daysToBuild": 127,
                    "scheduleJobId": "0bd0a948-15ea-4e17-b63d-7140acfb8e0a",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 9,
                    "startMinutes": 0,
                    "daysToBuild": 127,
                    "scheduleJobId": "fbbfcc19-c070-4c95-8cb2-b3c034a05d3c",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 10,
                    "startMinutes": 0,
                    "daysToBuild": 127,
                    "scheduleJobId": "97ad661b-bc54-4eb9-b9d3-5910623c8115",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 11,
                    "startMinutes": 0,
                    "daysToBuild": 127,
                    "scheduleJobId": "95104431-11e6-4fad-9a3d-0321ee76d1c4",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 12,
                    "startMinutes": 0,
                    "daysToBuild": 127,
                    "scheduleJobId": "15d1be4d-8969-464b-9f0a-f47ace984a94",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 13,
                    "startMinutes": 0,
                    "daysToBuild": 127,
                    "scheduleJobId": "608cd8c9-e3cd-4b6d-9533-ea5482185aa5",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 14,
                    "startMinutes": 0,
                    "daysToBuild": 127,
                    "scheduleJobId": "3c1c2551-941d-43e5-86ce-8b964dbf3f0a",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 15,
                    "startMinutes": 0,
                    "daysToBuild": 127,
                    "scheduleJobId": "1663958d-5d5a-4257-8e9b-5ddf845962ec",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 16,
                    "startMinutes": 0,
                    "daysToBuild": 127,
                    "scheduleJobId": "9902a378-a601-4e44-af8c-aa403acdd7f7",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 17,
                    "startMinutes": 0,
                    "daysToBuild": 127,
                    "scheduleJobId": "7576f4a9-7a14-437d-9bfe-f045c705857f",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 18,
                    "startMinutes": 0,
                    "daysToBuild": 127,
                    "scheduleJobId": "cbd18724-4409-4133-aa13-3328094effd2",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 19,
                    "startMinutes": 0,
                    "daysToBuild": 127,
                    "scheduleJobId": "11230642-50de-4b59-88aa-0a2f0b4f9bbc",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 20,
                    "startMinutes": 0,
                    "daysToBuild": 127,
                    "scheduleJobId": "516eb030-25f2-45a2-9c99-a0052a615d6e",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 21,
                    "startMinutes": 0,
                    "daysToBuild": 127,
                    "scheduleJobId": "9cd74cdd-2646-4f86-881d-941b085c860f",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 22,
                    "startMinutes": 0,
                    "daysToBuild": 127,
                    "scheduleJobId": "ba742a8f-c185-4f34-89d5-2c3f8b49c1bb",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 23,
                    "startMinutes": 0,
                    "daysToBuild": 127,
                    "scheduleJobId": "94117ce0-94c0-4cd4-82db-927c646cfbcd",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 0,
                    "startMinutes": 30,
                    "daysToBuild": 127,
                    "scheduleJobId": "51eeb0f2-c2e5-4aa2-852f-9eb467c4d98c",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 1,
                    "startMinutes": 30,
                    "daysToBuild": 127,
                    "scheduleJobId": "d34d43d0-2b58-4741-b2a6-736dd029a173",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 2,
                    "startMinutes": 30,
                    "daysToBuild": 127,
                    "scheduleJobId": "ae7029d8-dcd3-4d84-87e9-fd497b897640",
                    "scheduleOnlyWithChanges": false
                },
                {
                    "branchFilters": [
                        "+master"
                    ],
                    "timeZoneId": "Central Standard Time",
                    "startHours": 3,
                    "startMinutes": 30,
                    "daysToBuild": 127,
                    "scheduleJobId": "5b78164e-805c-4f4e-b34e-3b96ed0a28c9",
                    "scheduleOnlyWithChanges": false
                }
            ],
            "triggerType": 8
        }
    ],
    "variables": {
        "app.id": {
            "value": "244790b2-d023-403d-8814-b4ecfe847e55"
        },
        "app.id.admin": {
            "value": "05ff27fb-fcd2-4bae-97ee-4e60a67ff73b"
        },
        "app.secret": {
            "value": null,
            "isSecret": true
        },
        "app.secret.admin": {
            "value": null,
            "isSecret": true
        },
        "config.file.uri": {
            "value": "https://azbotstorage.blob.core.windows.net/gen-artifacts-config/.config.json"
        },
        "environment": {
            "value": "AzureCloud"
        },
        "gen.artifacts.resourceGroup": {
            "value": "ttk-gen-artifacts"
        },
        "gen.parameters.filename": {
            "value": "gen.azuredeploy.parameters.json"
        },
        "gen.prereq.parameters.filename": {
            "value": "gen.prereq.parameters.json"
        },
        "location": {
            "value": "westus"
        },
        "mainTemplate.deployment.name": {
            "value": "mainTemplate-deployment"
        },
        "parameters.filename": {
            "value": "azuredeploy.parameters.json"
        },
        "prereq.deployment.name": {
            "value": "prereq-deployment"
        },
        "prereq.outputs.filename": {
            "value": "prereq.outputs.json"
        },
        "prereq.resourceGroup.name": {
            "value": "<this will set by a pipeline task>"
        },
        "resourceGroup.name": {
            "value": "<this will set by a pipeline task>"
        },
        "result.best.practice": {
            "value": "FAIL"
        },
        "result.credscan": {
            "value": ""
        },
        "result.deployment": {
            "value": "FAIL"
        },
        "result.deployment.last.test.date.parameter": {
            "value": "PublicLastTestDate"
        },
        "result.deployment.parameter": {
            "value": "PublicDeployment"
        },
        "result.metadata": {
            "value": "FAIL"
        },
        "result.readme": {
            "value": "FAIL"
        },
        "sample.folder": {
            "value": "<this will set by a pipeline task>"
        },
        "skipComponentGovernanceDetection": {
            "value": "true"
        },
        "storage.account.key": {
            "value": null,
            "isSecret": true
        },
        "subscription.id": {
            "value": "0cec7090-2e08-4498-9337-eb96ade50821"
        },
        "system.debug": {
            "value": "false",
            "allowOverride": true
        },
        "tenant.id": {
            "value": "6457d1f2-4394-4fc2-b163-e46ffcbbec5c"
        },
        "ttk.asset.filename": {
            "value": "arm-template-toolkit.zip"
        },
        "ttk.folder": {
            "value": "$(Agent.BuildDirectory)\\test"
        },
        "ttk.uri": {
            "value": "https://aka.ms/arm-ttk-latest"
        },
        "validation.type": {
            "value": "Automated"
        },
        "whatif.module.uri": {
            "value": null,
            "isSecret": true
        }
    },
    "properties": {},
    "tags": [],
    "jobAuthorizationScope": 1,
    "jobTimeoutInMinutes": 360,
    "jobCancelTimeoutInMinutes": 15,
    "badgeEnabled": false,
    "process": {
        "phases": [
            {
                "steps": [
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Download TTK",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "New-Item '$(ttk.folder)' -ItemType Directory\nInvoke-WebRequest -uri '$(ttk.uri)' -OutFile \"$(ttk.folder)/$(ttk.asset.filename)\" -Verbose\nGet-ChildItem '$(ttk.folder)' -Recurse\n\nWrite-Host \"Expanding files...\"\nExpand-Archive -Path '$(ttk.folder)/*.zip' -DestinationPath '$(ttk.folder)' -Verbose\n\nWrite-Host \"Expanded files found:\"\nGet-ChildItem '$(ttk.folder)' -Recurse",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": false,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Install Az Module from Storage",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "$AzModuleUri = 'https://azurequickstartsservice.blob.core.windows.net/ttk/AzModules/Az-AzTable.5.0.zip'\n\ngci env:\n $p = ($env:psmodulepath).split(';')[0]\n\nInvoke-WebRequest -uri \"$AzModuleUri\" -OutFile \"$env:TEMP/az.zip\" -Verbose\n\n#Get-ChildItem '$p' -Recurse\n\nWrite-Host \"Expanding files...\"\nExpand-Archive -Path \"$env:TEMP/az.zip\" -DestinationPath \"$p\" -Verbose\n\nWrite-Host \"Expanded files found:\"\n#Get-ChildItem \"$p\" -Recurse\n\nGet-Module Az -ListAvailable\n\n#Get-AzResourceGroup\n",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Connect To Azure (Admin) To Create RGs",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/ConnectTo-Azure.ps1",
                            "arguments": "-appId $(app.id.admin) -secret \"$(app.secret.admin)\" -tenantId $(tenant.id) -subscriptionId $(subscription.id) -Environment $(environment) -InstallAzModule ",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Get Oldest Sample Folder (Scheduled)",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), or(eq(variables['Build.Reason'], 'Schedule'), eq(variables['Build.Reason'], 'Manual')))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)\\ci-scripts\\Get-OldestSampleFolder.ps1",
                            "arguments": "-StorageAccountKey \"$(storage.account.key)\"",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "Set Build Number",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), or(eq(variables['Build.Reason'], 'Schedule'), eq(variables['Build.Reason'], 'Manual')))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "$s = \"$(sample.name)\"\n$s = $s.Replace('\\', '#')\nWrite-Host \"Setting build #: $s\"\nWrite-Host \"##vso[build.updatebuildnumber]($s)\"\n\n",
                            "errorActionPreference": "continue",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Get Sample Folder (Pull Request)",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)\\ci-scripts\\Get-SampleFolder.ps1",
                            "arguments": "",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "true",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "DEBUG: Dump ENV",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "gci \"env:\"\n\n$ErrorView = \"NormalView\"  # this is required due to a breaking change in the AzDO build image, otherwise, failure flags are not properly set",
                            "errorActionPreference": "continue",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "Validate metadata.json",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)\\ci-scripts\\Validate-Metadata.ps1",
                            "arguments": "",
                            "script": "",
                            "errorActionPreference": "continue",
                            "failOnStderr": "true",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "DEBUG: Dump ENV",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "gci \"env:\"\n\n",
                            "errorActionPreference": "continue",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "PR comment (doc owner)",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'), ne(variables['docOwner.message'], ''))",
                        "task": {
                            "id": "deea6198-adf8-4b16-9939-7addf85708b2",
                            "versionSpec": "0.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "gitHubConnection": "9d87270a-7fc7-43db-bf57-09f9f4e8879b",
                            "repositoryName": "$(Build.Repository.Name)",
                            "id": "$(System.PullRequest.PullRequestNumber)",
                            "comment": "$(docOwner.message)"
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Check to see if this is a MOVE: PR",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['build.reason'], 'PullRequest'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "$GitHubRepository = $ENV:BUILD_REPOSITORY_NAME\n$GitHubPRNumber = $ENV:SYSTEM_PULLREQUEST_PULLREQUESTNUMBER\n$HasDocOwner = $(($ENV:DOCOWNER_MESSAGE).Length -gt 0)\nWrite-Host \"##vso[task.setvariable variable=HasDocOwner]$HasDocOwner\"\n\n$PRUri = \"https://api.github.com/repos/$($GitHubRepository)/pulls/$($GitHubPRNumber)\"\n\n$response = Invoke-Restmethod \"$PRUri\"\n\nif($response.title -like \"*MOVE:*\" -and $HasDocOwner){\n    Write-Host \"##vso[task.setvariable variable=pingTom]YES\"\n}\n",
                            "errorActionPreference": "continue",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "DEBUG: Dump ENV copy",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "gci \"env:\"\n\n",
                            "errorActionPreference": "continue",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "Ping mumian",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['pingTom'], 'YES'))",
                        "task": {
                            "id": "deea6198-adf8-4b16-9939-7addf85708b2",
                            "versionSpec": "0.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "gitHubConnection": "9d87270a-7fc7-43db-bf57-09f9f4e8879b",
                            "repositoryName": "$(Build.Repository.Name)",
                            "id": "$(System.PullRequest.PullRequestNumber)",
                            "comment": "@mumian - this appears to be a \"Move\" that will need a manual doc update"
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "Ping TomFitz re: moving a sample used in docs copy",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['pingTom'], 'YES'))",
                        "task": {
                            "id": "deea6198-adf8-4b16-9939-7addf85708b2",
                            "versionSpec": "0.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "gitHubConnection": "9d87270a-7fc7-43db-bf57-09f9f4e8879b",
                            "repositoryName": "$(Build.Repository.Name)",
                            "id": "$(System.PullRequest.PullRequestNumber)",
                            "comment": "@tfitzmac - this appears to be a \"Move\" that will need a manual doc update"
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "PR label (add manual validation)",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['validation.type'], 'Manual'), ne(variables['Build.SourceBranch'], 'refs/heads/master'))",
                        "task": {
                            "id": "79ae0514-ee91-4a19-ae69-030952b0b23e",
                            "versionSpec": "0.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "gitHubConnection": "9d87270a-7fc7-43db-bf57-09f9f4e8879b",
                            "action": "add",
                            "label": "manual validation"
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "PR label (add metadata)",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['result.metadata'], 'FAIL'), ne(variables['Build.SourceBranch'], 'refs/heads/master'))",
                        "task": {
                            "id": "79ae0514-ee91-4a19-ae69-030952b0b23e",
                            "versionSpec": "0.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "gitHubConnection": "9d87270a-7fc7-43db-bf57-09f9f4e8879b",
                            "action": "add",
                            "label": "metadata"
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "PR label (remove metadata)",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['result.metadata'], 'PASS'), ne(variables['Build.SourceBranch'], 'refs/heads/master'))",
                        "task": {
                            "id": "79ae0514-ee91-4a19-ae69-030952b0b23e",
                            "versionSpec": "0.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "gitHubConnection": "9d87270a-7fc7-43db-bf57-09f9f4e8879b",
                            "action": "remove",
                            "label": "metadata"
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "Validate README.md",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)\\ci-scripts\\Validate-ReadMe.ps1",
                            "arguments": "",
                            "script": "",
                            "errorActionPreference": "continue",
                            "failOnStderr": "true",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "DEBUG: Dump ENV",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "gci \"env:\"\n\n",
                            "errorActionPreference": "continue",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "PR label (add readme)",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['result.readme'], 'FAIL'), ne(variables['Build.SourceBranch'], 'refs/heads/master'))",
                        "task": {
                            "id": "79ae0514-ee91-4a19-ae69-030952b0b23e",
                            "versionSpec": "0.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "gitHubConnection": "9d87270a-7fc7-43db-bf57-09f9f4e8879b",
                            "action": "add",
                            "label": "readme"
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "PR label (remove readme)",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['result.readme'], 'PASS'), ne(variables['Build.SourceBranch'], 'refs/heads/master'))",
                        "task": {
                            "id": "79ae0514-ee91-4a19-ae69-030952b0b23e",
                            "versionSpec": "0.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "gitHubConnection": "9d87270a-7fc7-43db-bf57-09f9f4e8879b",
                            "action": "remove",
                            "label": "readme"
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "Run Best Practices Tests",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "Import-Module $(ttk.folder)/arm-ttk/arm-ttk.psd1 -Verbose\n$testOutput = @(Test-AzTemplate -TemplatePath \"$(sample.folder)\")\n$testOutput\n\nif ($testOutput | ? {$_.Errors }) {\n   exit 1 \n} else {\n    Write-Host \"##vso[task.setvariable variable=result.best.practice]$true\"\n    exit 0\n} \n",
                            "errorActionPreference": "continue",
                            "failOnStderr": "true",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "PR label (add best practices)",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['result.best.practice'], 'FAIL'), ne(variables['Build.SourceBranch'], 'refs/heads/master'))",
                        "task": {
                            "id": "79ae0514-ee91-4a19-ae69-030952b0b23e",
                            "versionSpec": "0.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "gitHubConnection": "9d87270a-7fc7-43db-bf57-09f9f4e8879b",
                            "action": "add",
                            "label": "best practices"
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "PR label (remove best practices)",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['result.best.practice'], 'true'), ne(variables['Build.SourceBranch'], 'refs/heads/master'))",
                        "task": {
                            "id": "79ae0514-ee91-4a19-ae69-030952b0b23e",
                            "versionSpec": "0.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "gitHubConnection": "9d87270a-7fc7-43db-bf57-09f9f4e8879b",
                            "action": "remove",
                            "label": "best practices"
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Generate RG Names and Check for Prereqs",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), ne(variables['result.deployment'], 'Not Supported'), ne(variables['validation.type'], 'Manual'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)\\ci-scripts\\Gen-ResourceGroupNames.ps1",
                            "arguments": "-sampleFolder \"$(sample.folder)\"",
                            "script": "\n",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "Create ResourceGroup - Assign RBAC (mainTemplate RG)",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), ne(variables['result.deployment'], 'Not Supported'), ne(variables['validation.type'], 'Manual'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/Create-ResourceGroupAssignment.ps1",
                            "arguments": "-ResourceGroupName \"$(resourceGroup.name)\" -Location \"$(location)\" -appId $(app.id) ",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "Create ResourceGroup - Assign RBAC (prereqs RG) ",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['deploy.prereqs'], 'true'), ne(variables['prereq.resourceGroup.name'], variables['resourceGroup.name']),  ne(variables['result.deployment'], 'Not Supported'), ne(variables['validation.type'], 'Manual'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/Create-ResourceGroupAssignment.ps1",
                            "arguments": "-ResourceGroupName \"$(prereq.resourceGroup.name)\" -Location \"$(location)\" -appId $(app.id)",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Connect To Azure (non-Admin) To Deploy",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), ne(variables['result.deployment'], 'Not Supported'), ne(variables['validation.type'], 'Manual'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/ConnectTo-Azure.ps1",
                            "arguments": "-appId $(app.id) -secret \"$(app.secret)\" -tenantId $(tenant.id) -subscriptionId $(subscription.id) -Environment \"$(environment)\"",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "GEN Parameters (Prereqs)",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['deploy.prereqs'], 'true'), ne(variables['result.deployment'], 'Not Supported'), ne(variables['validation.type'], 'Manual'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/Gen-TemplateParameters.ps1",
                            "arguments": "-configUri \"$(config.file.uri)\" -TemplateParametersFile \"$(sample.folder)\\prereqs\\prereq.$(parameters.filename)\" -NewTemplateParametersFile \"$(sample.folder)\\prereqs\\$(gen.prereq.parameters.filename)\"",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "DEBUG: dump mainTemplate param file content (prereqs)",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), ne(variables['result.deployment'], 'Not Supported'), ne(variables['validation.type'], 'Manual'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "if(Test-Path -Path \"$(sample.folder)\\prereqs\\$(gen.prereq.parameters.filename)\"){\n\n  Write-Output (Get-Content \"$(sample.folder)\\prereqs\\$(gen.prereq.parameters.filename)\" -Raw)\n\n}\n",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Deploy Template (prereqs)",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['deploy.prereqs'], 'true'), ne(variables['result.deployment'], 'Not Supported'), ne(variables['validation.type'], 'Manual'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)\\Deploy-AzTemplate.ps1",
                            "arguments": "-ArtifactStagingDirectory \"$(sample.folder)\\prereqs\" -Location \"$(Location)\" -ResourceGroupName \"$(prereq.resourceGroup.name)\" -TemplateParametersFile \"$(sample.folder)\\prereqs\\$(gen.prereq.parameters.filename)\" -DeploymentName \"$(prereq.deployment.name)\" -TemplateFile \"$(sample.folder)\\prereqs\\prereq.azuredeploy.json\"",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Dump Outputs To File (prereqs)",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['deploy.prereqs'], 'true'), ne(variables['result.deployment'], 'Not Supported'), ne(variables['validation.type'], 'Manual'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "$PreReqOutputs = (Get-AzResourceGroupDeployment -ResourceGroupName \"$(prereq.resourceGroup.name)\" -Name $(prereq.deployment.name)).Outputs | ConvertTo-Json -Depth 100\nWrite-Output \"$PreReqOutputs\"\n\n###Write-Output \"##vso[task.setvariable variable=prereq.config.json]$PreReqOutputs\"\n\n$PreReqOutputs | Out-File -FilePath \"$(sample.folder)\\prereqs\\$(prereq.outputs.filename)\"",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "DEBUG: Dump Prereqs Output File",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['deploy.prereqs'], 'true'),  ne(variables['result.deployment'], 'Not Supported'), ne(variables['validation.type'], 'Manual'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "Write-Output (Get-Content \"$(sample.folder)\\prereqs\\$(prereq.outputs.filename)\" -Raw)\n",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "GEN mainTemplate Params",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), ne(variables['result.deployment'], 'Not Supported'), ne(variables['validation.type'], 'Manual'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/Gen-TemplateParameters.ps1",
                            "arguments": "-configUri \"$(config.file.uri)\" -TemplateParametersFile \"$(sample.folder)\\$(parameters.filename)\" -NewTemplateParametersFile \"$(sample.folder)\\$(gen.parameters.filename)\" -prereqOutputsFileName \"$(sample.folder)\\prereqs\\$(prereq.outputs.filename)\"",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "DEBUG: dump mainTemplate param file content",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), ne(variables['result.deployment'], 'Not Supported'), ne(variables['validation.type'], 'Manual'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "Write-Output(Get-Content \"$(sample.folder)\\$(gen.parameters.filename)\" -Raw)",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Deploy mainTemplate",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), ne(variables['result.deployment'], 'Not Supported'), ne(variables['validation.type'], 'Manual'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "$(ttk.folder)\\Deploy-AzTemplate.ps1 `\n    -ArtifactStagingDirectory \"$(sample.folder)\" `\n    -Location \"$(Location)\" `\n    -ResourceGroupName \"$(resourceGroup.name)\" `\n    -TemplateParametersFile \"$(sample.folder)\\$(gen.parameters.filename)\" `\n    -DeploymentName \"$(mainTemplate.deployment.name)\"\n\nWrite-Host \"##vso[task.setvariable variable=result.deployment]$true\"\n\n",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Connect To Azure (Admin) To Clean Up",
                        "timeoutInMinutes": 0,
                        "condition": "and(ne(variables['result.deployment'], 'Not Supported'), ne(variables['validation.type'], 'Manual'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/ConnectTo-Azure.ps1",
                            "arguments": "-appId $(app.id.admin) -secret \"$(app.secret.admin)\" -tenantId $(tenant.id) -subscriptionId $(subscription.id)",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": false,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "What-If (prereqs)",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['deploy.prereqs'], 'true'), ne(variables['result.deployment'], 'Not Supported'), ne(variables['validation.type'], 'Manual'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "New-AzResourceGroupDeployment -ResourceGroupName \"$(prereq.resourceGroup.name)\" `\n    -TemplateFile \"$(sample.folder)\\prereqs\\prereq.azuredeploy.json\" `\n    -TemplateParameterFile \"$(sample.folder)\\prereqs\\$(gen.prereq.parameters.filename)\" `\n    -WhatIf \n",
                            "errorActionPreference": "continue",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": false,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "What-If",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "New-AzResourceGroupDeployment -ResourceGroupName \"$(resourceGroup.name)\" `\n    -TemplateFile \"$(sample.folder)\\azuredeploy.json\" `\n    -TemplateParameterFile \"$(sample.folder)\\$(gen.parameters.filename)\" `\n    -WhatIf \n",
                            "errorActionPreference": "continue",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": false,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "What-If (Upload Results)",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)\\ci-scripts\\Run-WhatIf.ps1",
                            "arguments": "-uploadResults -StorageAccountKey $(storage.account.key)",
                            "script": "",
                            "errorActionPreference": "continue",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "Write Test Result for README.MD",
                        "timeoutInMinutes": 0,
                        "condition": "always()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)\\ci-scripts\\Write-TestResults.ps1",
                            "arguments": "-$(result.deployment.parameter) \"$(result.deployment)\" -StorageAccountKey \"$(storage.account.key)\"",
                            "script": "<#\n\nThis is a placeholder - for when we want to write the last test result to the readme file\n\n#>",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Clean Up ResourceGroup (main)",
                        "timeoutInMinutes": 0,
                        "condition": "and(ne(variables['result.deployment'], 'Not Supported'), ne(variables['validation.type'], 'Manual'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "# remove the resource group\nWrite-Host \"First attempt...\"\n& $(ttk.folder)/ci-scripts/Kill-AzResourceGroup.ps1 -ResourceGroupName \"$(resourceGroup.name)\" -ErrorAction SilentlyContinue\n\n# if the resource group still exists after the first attempt, try again after a few minutes\nWrite-Host \"Checking for ResourceGroup…\"\nif ((Get-AzResourceGroup -Name \"$(resourceGroup.name)\" -verbose -ErrorAction SilentlyContinue) -ne $null) {\n\n    Write-Host \"Found the resource group - sleeping...\" \n    Sleep 600\n    Write-Host \"Attempting Kill-AzResourceGroup…\"\n    & $(ttk.folder)/ci-scripts/Kill-AzResourceGroup.ps1 -ResourceGroupName \"$(resourceGroup.name)\"\n\n}\n",
                            "errorActionPreference": "continue",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Clean Up ResourceGroup (prereqs)",
                        "timeoutInMinutes": 0,
                        "condition": "and(eq(variables['deploy.prereqs'], 'true'), ne(variables['prereq.resourceGroup.name'], variables['resourceGroup.name']),  ne(variables['result.deployment'], 'Not Supported'), ne(variables['validation.type'], 'Manual'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "# remove the resource group\nWrite-Host \"First attempt...\"\n& $(ttk.folder)/ci-scripts/Kill-AzResourceGroup.ps1 -ResourceGroupName \"$(prereq.resourceGroup.name)\" -ErrorAction SilentlyContinue\n\n# if the resource group still exists after the first attempt, try again after a few minutes\nWrite-Host \"Checking for ResourceGroup…\"\nif ((Get-AzResourceGroup -Name \"$(prereq.resourceGroup.name)\" -verbose -ErrorAction SilentlyContinue) -ne $null) {\n\n    Write-Host \"Found the resource group - sleeping...\" \n    Sleep 600\n    Write-Host \"Attempting Kill-AzResourceGroup…\"\n    & $(ttk.folder)/ci-scripts/Kill-AzResourceGroup.ps1 -ResourceGroupName \"$(prereq.resourceGroup.name)\"\n}\n",
                            "errorActionPreference": "continue",
                            "failOnStderr": "false",
                            "showWarnings": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    }
                ],
                "name": "Agent job 1",
                "refName": "Job_1",
                "condition": "succeeded()",
                "target": {
                    "executionOptions": {
                        "type": 0
                    },
                    "allowScriptsAuthAccessOption": false,
                    "type": 1
                },
                "jobAuthorizationScope": 1,
                "jobTimeoutInMinutes": 360
            }
        ],
        "target": {
            "agentSpecification": {
                "identifier": "windows-2019"
            }
        },
        "type": 1
    },
    "repository": {
        "properties": {
            "apiUrl": "https://api.github.com/repos/Azure/azure-quickstart-templates",
            "branchesUrl": "https://api.github.com/repos/Azure/azure-quickstart-templates/branches",
            "cloneUrl": "https://github.com/Azure/azure-quickstart-templates.git",
            "connectedServiceId": "50e33d0b-fa1f-4db0-9552-57d2ccb899a3",
            "defaultBranch": "master",
            "fullName": "Azure/azure-quickstart-templates",
            "hasAdminPermissions": "False",
            "isFork": "False",
            "isPrivate": "False",
            "lastUpdated": "04/27/2021 14:54:27",
            "manageUrl": "https://github.com/Azure/azure-quickstart-templates",
            "nodeId": "MDEwOlJlcG9zaXRvcnkzNDQwNzY1MQ==",
            "ownerId": "6844498",
            "orgName": "Azure",
            "refsUrl": "https://api.github.com/repos/Azure/azure-quickstart-templates/git/refs",
            "safeRepository": "Azure/azure-quickstart-templates",
            "shortName": "azure-quickstart-templates",
            "ownerAvatarUrl": "https://avatars.githubusercontent.com/u/6844498?v=4",
            "archived": "False",
            "externalId": "34407651",
            "ownerIsAUser": "False",
            "checkoutNestedSubmodules": "false",
            "cleanOptions": "0",
            "fetchDepth": "0",
            "gitLfsSupport": "false",
            "reportBuildStatus": "true",
            "skipSyncSource": "false",
            "labelSourcesFormat": "$(build.buildNumber)",
            "labelSources": "0"
        },
        "id": "Azure/azure-quickstart-templates",
        "type": "GitHub",
        "name": "Azure/azure-quickstart-templates",
        "url": "https://github.com/Azure/azure-quickstart-templates.git",
        "defaultBranch": "master",
        "clean": "false",
        "checkoutSubmodules": false
    },
    "processParameters": {},
    "quality": 1,
    "authoredBy": {
        "displayName": "Brian Moore (AZURE RESOURCE MANAGER)",
        "url": "https://spsprodcus1.vssps.visualstudio.com/Ac8aef736-af44-4df8-8ee0-e3f71ba093b7/_apis/Identities/a776ea98-0041-458d-a782-55b352492e1e",
        "_links": {
            "avatar": {
                "href": "https://dev.azure.com/azurequickstarts/_apis/GraphProfile/MemberAvatars/aad.ZmNkYzI4MmEtZTY1My03M2Y5LThkNTgtYzgwMTY1ZDM1NTRk"
            }
        },
        "id": "a776ea98-0041-458d-a782-55b352492e1e",
        "uniqueName": "bmoore@microsoft.com",
        "imageUrl": "https://dev.azure.com/azurequickstarts/_apis/GraphProfile/MemberAvatars/aad.ZmNkYzI4MmEtZTY1My03M2Y5LThkNTgtYzgwMTY1ZDM1NTRk",
        "descriptor": "aad.ZmNkYzI4MmEtZTY1My03M2Y5LThkNTgtYzgwMTY1ZDM1NTRk"
    },
    "drafts": [],
    "queue": {
        "_links": {
            "self": {
                "href": "https://dev.azure.com/azurequickstarts/_apis/build/Queues/19"
            }
        },
        "id": 19,
        "name": "Azure Pipelines",
        "url": "https://dev.azure.com/azurequickstarts/_apis/build/Queues/19",
        "pool": {
            "id": 10,
            "name": "Azure Pipelines",
            "isHosted": true
        }
    },
    "id": 8,
    "name": "AzQuickStarts-Public",
    "url": "https://dev.azure.com/azurequickstarts/b191bd7a-37bb-47b0-870c-3f1270a79b3d/_apis/build/Definitions/8?revision=176",
    "uri": "vstfs:///Build/Definition/8",
    "path": "\\",
    "type": 2,
    "queueStatus": 0,
    "revision": 176,
    "createdDate": "2021-04-27T15:19:26.310Z",
    "project": {
        "id": "b191bd7a-37bb-47b0-870c-3f1270a79b3d",
        "name": "azure-quickstart-templates",
        "description": "Pipelines for the Azure/azure-quickstart-templates repo",
        "url": "https://dev.azure.com/azurequickstarts/_apis/projects/b191bd7a-37bb-47b0-870c-3f1270a79b3d",
        "state": 1,
        "revision": 21,
        "visibility": 2,
        "lastUpdateTime": "2019-07-08T21:54:49.103Z"
    }
}