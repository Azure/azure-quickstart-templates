{
    "triggers": [
        {
            "branchFilters": [
                "+master"
            ],
            "forks": {
                "enabled": true,
                "allowSecrets": true
            },
            "pathFilters": [
                "-/test/*",
                "-/1-CONTRIBUTION-GUIDE/*",
                "-/.github/*"
            ],
            "requireCommentsForNonTeamMembersOnly": false,
            "isCommentRequiredForPullRequest": false,
            "triggerType": 64
        }
    ],
    "variables": {
        "app.id": {
            "value": "244790b2-d023-403d-8814-b4ecfe847e55"
        },
        "app.id.admin": {
            "value": "05ff27fb-fcd2-4bae-97ee-4e60a67ff73b"
        },
        "app.secret": {
            "value": null,
            "isSecret": true
        },
        "app.secret.admin": {
            "value": null,
            "isSecret": true
        },
        "config.file.uri": {
            "value": "https://azbotstorage.blob.core.windows.net/gen-artifacts-config/.config.json?st=2019-07-08T15%3A34%3A11Z&se=2029-07-09T15%3A34%3A00Z&sp=rl&sv=2018-03-28&sr=c&sig=2lONV85wm%2FFJ8zK89NoZ3QmkEjNBgqD3IIX9wUiseAI%3D"
        },
        "gen.parameters.filename": {
            "value": "gen.azuredeploy.parameters.json"
        },
        "gen.prereq.parameters.filename": {
            "value": "gen.prereq.parameters.json"
        },
        "location": {
            "value": "westus"
        },
        "mainTemplate.deployment.name": {
            "value": "mainTemplate-deployment"
        },
        "prereq.deployment.name": {
            "value": "prereq-deployment"
        },
        "prereq.outputs.filename": {
            "value": "prereq.outputs.json"
        },
        "prereq.resourceGroup.name": {
            "value": "<this will set by a pipeline task>"
        },
        "resourceGroup.name": {
            "value": "<this will set by a pipeline task>"
        },
        "result.best.practice": {
            "value": "False"
        },
        "result.credscan": {
            "value": ""
        },
        "result.deployment": {
            "value": "False"
        },
        "result.deployment.last.test.date.parameter": {
            "value": ""
        },
        "result.deployment.parameter": {
            "value": "PublicDeployment"
        },
        "sample.folder": {
            "value": "<this will set by a pipeline task>"
        },
        "skipComponentGovernanceDetection": {
            "value": "true"
        },
        "subscription.id": {
            "value": "0cec7090-2e08-4498-9337-eb96ade50821"
        },
        "system.debug": {
            "value": "false",
            "allowOverride": true
        },
        "tenant.id": {
            "value": "6457d1f2-4394-4fc2-b163-e46ffcbbec5c"
        },
        "ttk.asset.filename": {
            "value": "arm-template-toolkit.zip"
        },
        "ttk.folder": {
            "value": "$(Agent.BuildDirectory)\\test"
        },
        "ttk.uri": {
            "value": "https://aka.ms/arm-ttk"
        }
    },
    "properties": {},
    "tags": [],
    "jobAuthorizationScope": 1,
    "jobTimeoutInMinutes": 360,
    "jobCancelTimeoutInMinutes": 15,
    "badgeEnabled": false,
    "process": {
        "phases": [
            {
                "steps": [
                    {
                        "environment": {},
                        "enabled": false,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Download Template Toolkit Release",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "263abc27-4582-4174-8789-af599697778e",
                            "versionSpec": "0.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "connection": "d6ab5960-0304-494e-90fd-d42c7ed2cfbd",
                            "userRepository": "Azure/azure-quickstart-templates",
                            "defaultVersionType": "latest",
                            "version": "",
                            "itemPattern": "$(ttk.asset.filename)",
                            "downloadPath": "$(ttk.folder)"
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Download TTK",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "New-Item '$(ttk.folder)' -ItemType Directory\nInvoke-WebRequest -uri '$(ttk.uri)' -OutFile \"$(ttk.folder)/$(ttk.asset.filename)\" -Verbose\nGet-ChildItem '$(ttk.folder)' -Recurse\n\nWrite-Host \"Expanding files...\"\nExpand-Archive -Path '$(ttk.folder)/*.zip' -DestinationPath '$(ttk.folder)' -Verbose\n\nWrite-Host \"Expanded files found:\"\nGet-ChildItem '$(ttk.folder)' -Recurse",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Connect To Azure (Admin) To Create RGs",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/ConnectTo-Azure.ps1",
                            "arguments": "-appId $(app.id.admin) -secret $(app.secret.admin) -tenantId $(tenant.id) -subscriptionId $(subscription.id) -InstallAzModule",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Get Folder for Sample",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)\\ci-scripts\\Get-SampleFolder.ps1",
                            "arguments": "",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "DEBUG: Dump ENV",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "gci \"env:\"",
                            "errorActionPreference": "continue",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "Validate metadata.json",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)\\ci-scripts\\Validate-Metadata.ps1",
                            "arguments": "",
                            "script": "",
                            "errorActionPreference": "continue",
                            "failOnStderr": "true",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": true,
                        "displayName": "Validate README.md",
                        "timeoutInMinutes": 0,
                        "condition": "succeededOrFailed()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)\\ci-scripts\\Validate-ReadMe.ps1",
                            "arguments": "",
                            "script": "",
                            "errorActionPreference": "continue",
                            "failOnStderr": "true",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "Run Best Practices Tests",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "Import-Module $(ttk.folder)/arm-ttk/arm-ttk.psd1 -Verbose\n$testOutput = @(Test-AzTemplate -TemplatePath \"$(sample.folder)\")\n$testOutput\n\nif ($testOutput | ? {$_.Errors }) {\n   exit 1 \n} else {\n    Write-Host \"##vso[task.setvariable variable=result.best.practice]$true\"\n    exit 0\n} \n",
                            "errorActionPreference": "continue",
                            "failOnStderr": "true",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Generate RG Names and Check for Prereqs",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)\\ci-scripts\\Gen-ResourceGroupNames.ps1",
                            "arguments": "-sampleFolder $(sample.folder)",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "Create ResourceGroup - Assign RBAC (mainTemplate RG)",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/Create-ResourceGroupAssignment.ps1",
                            "arguments": "-ResourceGroupName \"$(resourceGroup.name)\" -Location $(location) -appId $(app.id)",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": false,
                        "displayName": "Create ResourceGroup - Assign RBAC (prereqs RG) ",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['deploy.prereqs'], 'true'), ne(variables['prereq.resourceGroup.name'], variables['resourceGroup.name']))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/Create-ResourceGroupAssignment.ps1",
                            "arguments": "-ResourceGroupName \"$(prereq.resourceGroup.name)\" -Location $(location) -appId $(app.id)",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Connect To Azure (non-Admin) To Deploy",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/ConnectTo-Azure.ps1",
                            "arguments": "-appId $(app.id) -secret $(app.secret) -tenantId $(tenant.id) -subscriptionId $(subscription.id)",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "GEN Parameters (Prereqs)",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['deploy.prereqs'], 'true'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/Gen-TemplateParameters.ps1",
                            "arguments": "-configUri \"$(config.file.uri)\" -TemplateParametersFile \"$(sample.folder)\\prereqs\\prereq.azuredeploy.parameters.json\" -NewTemplateParametersFile \"$(sample.folder)\\prereqs\\$(gen.prereq.parameters.filename)\"",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Deploy Template (prereqs)",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['deploy.prereqs'], 'true'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)\\Deploy-AzTemplate.ps1",
                            "arguments": "-ArtifactStagingDirectory \"$(sample.folder)\\prereqs\" -Location \"$(Location)\" -ResourceGroupName \"$(prereq.resourceGroup.name)\" -TemplateParametersFile \"$(sample.folder)\\prereqs\\$(gen.prereq.parameters.filename)\" -DeploymentName \"$(prereq.deployment.name)\" -TemplateFile \"$(sample.folder)\\prereqs\\prereq.azuredeploy.json\"",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Dump Outputs To File (prereqs)",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['deploy.prereqs'], 'true'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "$PreReqOutputs = (Get-AzResourceGroupDeployment -ResourceGroupName \"$(prereq.resourceGroup.name)\" -Name $(prereq.deployment.name)).Outputs | ConvertTo-Json\nWrite-Host \"$PreReqOutputs\"\n\n###Write-Output \"##vso[task.setvariable variable=prereq.config.json]$PreReqOutputs\"\n\n$PreReqOutputs | Out-File -FilePath \"$(sample.folder)\\prereqs\\$(prereq.outputs.filename)\"",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "DEBUG: Dump Prereqs Output File",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['deploy.prereqs'], 'true'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "Write-Host (Get-Content \"$(sample.folder)\\prereqs\\$(prereq.outputs.filename)\" -Raw)\n",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "GEN mainTemplate Params",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/Gen-TemplateParameters.ps1",
                            "arguments": "-configUri \"$(config.file.uri)\" -TemplateParametersFile \"$(sample.folder)\\azuredeploy.parameters.json\" -NewTemplateParametersFile \"$(sample.folder)\\$(gen.parameters.filename)\" -prereqOutputsFileName \"$(sample.folder)\\prereqs\\$(prereq.outputs.filename)\"",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "DEBUG: dump mainTemplate param file content",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "Write-Host (Get-Content \"$(sample.folder)\\$(gen.parameters.filename)\" -Raw)",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Deploy mainTemplate",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "$(ttk.folder)\\Deploy-AzTemplate.ps1 `\n    -ArtifactStagingDirectory \"$(sample.folder)\" `\n    -Location \"$(Location)\" `\n    -ResourceGroupName \"$(resourceGroup.name)\" `\n    -TemplateParametersFile \"$(sample.folder)\\$(gen.parameters.filename)\" `\n    -DeploymentName \"$(mainTemplate.deployment.name)\"\n\nWrite-Host \"##vso[task.setvariable variable=result.deployment]$true\"\n\n",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Connect To Azure (Admin) To Clean Up",
                        "timeoutInMinutes": 0,
                        "condition": "always()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)/ci-scripts/ConnectTo-Azure.ps1",
                            "arguments": "-appId $(app.id.admin) -secret $(app.secret.admin) -tenantId $(tenant.id) -subscriptionId $(subscription.id)",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": true,
                        "displayName": "Write Test Result for README.MD",
                        "timeoutInMinutes": 0,
                        "condition": "succeededOrFailed()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "filePath",
                            "filePath": "$(ttk.folder)\\ci-scripts\\Write-TestResults.ps1",
                            "arguments": "-$(result.deployment.parameter) $(result.deployment)",
                            "script": "",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Clean Up ResourceGroup (main)",
                        "timeoutInMinutes": 0,
                        "condition": "always()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "# remove the resource group\nWrite-Host \"First attempt...\"\n& $(ttk.folder)/ci-scripts/Kill-AzResourceGroup.ps1 -ResourceGroupName \"$(resourceGroup.name)\" -ErrorAction SilentlyContinue\n\n# if the resource group still exists after the first attempt, try again after a few minutes\nWrite-Host \"Checking for ResourceGroup…\"\nif ((Get-AzResourceGroup -Name \"$(resourceGroup.name)\" -verbose -ErrorAction SilentlyContinue) -ne $null) {\n\n    Write-Host \"Found the resource group - sleeping...\" \n    Sleep 600\n    Write-Host \"Attempting Kill-AzResourceGroup…\"\n    & $(ttk.folder)/ci-scripts/Kill-AzResourceGroup.ps1 -ResourceGroupName \"$(resourceGroup.name)\"\n\n}\n",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Clean Up ResourceGroup (prereqs)",
                        "timeoutInMinutes": 0,
                        "condition": "and(always(), eq(variables['deploy.prereqs'], 'true'), ne(variables['prereq.resourceGroup.name'], variables['resourceGroup.name']))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "# remove the resource group\nWrite-Host \"First attempt...\"\n& $(ttk.folder)/ci-scripts/Kill-AzResourceGroup.ps1 -ResourceGroupName \"$(prereq.resourceGroup.name)\" -ErrorAction SilentlyContinue\n\n# if the resource group still exists after the first attempt, try again after a few minutes\nWrite-Host \"Checking for ResourceGroup…\"\nif ((Get-AzResourceGroup -Name \"$(prereq.resourceGroup.name)\" -verbose -ErrorAction SilentlyContinue) -ne $null) {\n\n    Write-Host \"Found the resource group - sleeping...\" \n    Sleep 600\n    Write-Host \"Attempting Kill-AzResourceGroup…\"\n    & $(ttk.folder)/ci-scripts/Kill-AzResourceGroup.ps1 -ResourceGroupName \"$(prereq.resourceGroup.name)\"\n}\n",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "true",
                            "workingDirectory": ""
                        }
                    }
                ],
                "name": "Agent job 1",
                "refName": "Job_1",
                "condition": "succeeded()",
                "target": {
                    "executionOptions": {
                        "type": 0
                    },
                    "allowScriptsAuthAccessOption": false,
                    "type": 1
                },
                "jobAuthorizationScope": 1,
                "jobTimeoutInMinutes": 360
            }
        ],
        "type": 1
    },
    "repository": {
        "properties": {
            "apiUrl": "https://api.github.com/repos/Azure/azure-quickstart-templates",
            "branchesUrl": "https://api.github.com/repos/Azure/azure-quickstart-templates/branches",
            "cloneUrl": "https://github.com/Azure/azure-quickstart-templates.git",
            "connectedServiceId": "d6ab5960-0304-494e-90fd-d42c7ed2cfbd",
            "defaultBranch": "master",
            "fullName": "Azure/azure-quickstart-templates",
            "hasAdminPermissions": "True",
            "isFork": "False",
            "isPrivate": "False",
            "lastUpdated": "09/17/2019 18:39:56",
            "manageUrl": "https://github.com/Azure/azure-quickstart-templates",
            "nodeId": "MDEwOlJlcG9zaXRvcnkzNDQwNzY1MQ==",
            "ownerId": "6844498",
            "orgName": "Azure",
            "refsUrl": "https://api.github.com/repos/Azure/azure-quickstart-templates/git/refs",
            "safeRepository": "Azure/azure-quickstart-templates",
            "shortName": "azure-quickstart-templates",
            "ownerAvatarUrl": "https://avatars0.githubusercontent.com/u/6844498?v=4",
            "archived": "False",
            "externalId": "34407651",
            "ownerIsAUser": "False",
            "checkoutNestedSubmodules": "false",
            "cleanOptions": "0",
            "fetchDepth": "0",
            "gitLfsSupport": "false",
            "reportBuildStatus": "true",
            "skipSyncSource": "false",
            "labelSourcesFormat": "$(build.buildNumber)",
            "labelSources": "0"
        },
        "id": "Azure/azure-quickstart-templates",
        "type": "GitHub",
        "name": "Azure/azure-quickstart-templates",
        "url": "https://github.com/Azure/azure-quickstart-templates.git",
        "defaultBranch": "master",
        "clean": "false",
        "checkoutSubmodules": false
    },
    "processParameters": {},
    "quality": 1,
    "authoredBy": {
        "displayName": "Brian Moore (AZURE RESOURCE MANAGER)",
        "url": "https://spsprodcus1.vssps.visualstudio.com/Ac8aef736-af44-4df8-8ee0-e3f71ba093b7/_apis/Identities/a776ea98-0041-458d-a782-55b352492e1e",
        "_links": {
            "avatar": {
                "href": "https://dev.azure.com/azurequickstarts/_apis/GraphProfile/MemberAvatars/aad.ZmNkYzI4MmEtZTY1My03M2Y5LThkNTgtYzgwMTY1ZDM1NTRk"
            }
        },
        "id": "a776ea98-0041-458d-a782-55b352492e1e",
        "uniqueName": "bmoore@microsoft.com",
        "imageUrl": "https://dev.azure.com/azurequickstarts/_apis/GraphProfile/MemberAvatars/aad.ZmNkYzI4MmEtZTY1My03M2Y5LThkNTgtYzgwMTY1ZDM1NTRk",
        "descriptor": "aad.ZmNkYzI4MmEtZTY1My03M2Y5LThkNTgtYzgwMTY1ZDM1NTRk"
    },
    "drafts": [],
    "queue": {
        "_links": {
            "self": {
                "href": "https://dev.azure.com/azurequickstarts/_apis/build/Queues/15"
            }
        },
        "id": 15,
        "name": "Hosted Windows Container",
        "url": "https://dev.azure.com/azurequickstarts/_apis/build/Queues/15",
        "pool": {
            "id": 7,
            "name": "Hosted Windows Container",
            "isHosted": true
        }
    },
    "id": 5,
    "path": "\\",
    "type": 2,
    "queueStatus": 0,
    "revision": 36,
    "createdDate": "2019-09-17T18:50:03.973Z",
    "project": {
        "id": "b191bd7a-37bb-47b0-870c-3f1270a79b3d",
        "name": "azure-quickstart-templates",
        "description": "Pipelines for the Azure/azure-quickstart-templates repo",
        "url": "https://dev.azure.com/azurequickstarts/_apis/projects/b191bd7a-37bb-47b0-870c-3f1270a79b3d",
        "state": 1,
        "revision": 21,
        "visibility": 2,
        "lastUpdateTime": "2019-07-08T21:54:49.103Z"
    }
}