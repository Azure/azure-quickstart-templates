{

  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "Storage account Type. Standard_LRS or Premium_LRS"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_DS2",
      "allowedValues": [
        "Standard_D2",
        "Standard_DS2",
        "Standard_D3",
        "Standard_DS3",
        "Standard_D4",
        "Standard_DS4",
        "Standard_D11",
        "Standard_DS11",
        "Standard_D12",
        "Standard_DS12",
        "Standard_D13",
        "Standard_DS13",
        "Standard_D14",
        "Standard_DS14"
      ],
      "metadata": {
        "description": "VM Size, for Premium Storage specify DS VMs."
      }
    },

    "vmSizeDataDisks": {
      "type": "int",
      "defaultValue": 120,
      "metadata": {
        "description": "Data disks Size in GBs"
      }
    },
    "linuxFileSystem": {
      "type": "string",
      "allowedValues": [
        "ext4",
        "xfs"
      ],
      "defaultValue": "ext4",
      "metadata": {
        "description": "Linux File system"
      }
    },
    "serversRole": {
      "type": "string",
      "defaultValue": "Couchbase",
      "metadata": {
        "description": "Servers role, for instance webtier, database. A tag will be created with the provided value"
      }
    },
    "serversPurpose": {
      "type": "string",
      "defaultValue": "DEV",
      "metadata": {
        "description": "Servers purpose, for instance development, test, pre-production, production. A tag will be created with the provided value"
      }
    },
    "imagePublisher": {
      "type": "string",
      "defaultValue": "Canonical",
      "allowedValues": [
        "Canonical"
      ],
      "metadata": {
        "description": "VM Image Publisher"
      }
    },
    "imageOffer": {
      "type": "string",
      "defaultValue": "UbuntuServer",
      "allowedValues": [
        "UbuntuServer"
      ],
      "metadata": {
        "description": "VM Image Offer"
      }
    },
    "imageSKU": {
      "type": "string",
      "defaultValue": "14.04.3-LTS",
      "allowedValues": [
        "14.04.3-LTS"
      ],
      "metadata": {
        "description": "VM Image SKU"
      }
    },
    "numberOfVms": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Number of VMs. The template will create N number of identical VMs"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin user name"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password"
      }
    },
    "sshKeyData": {
      "type": "securestring",
      "metadata": {
        "description": "ssh public key for the admin user"
      }
    },
    "sshStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Private storage account name in which you are storing your ssh certificates"
      }
    },
    "sshStorageAccountKey": {
      "type": "securestring",
      "metadata": {
        "description": "Private storage account key in which you are storing your ssh certificates"
      }
    },
    "couchbaseMemoryAllocationPercentage": {
      "type": "string",
      "defaultValue": "80",
      "metadata": {
        "description": "Specify the percentage of RAM Allocated to Couchbase. Leave Memory for the OS."
      }
    },
    "dnsLabelPrefix": {
      "type": "string",
      "metadata": {
        "description": "DNS Label for the Public IP. Must be lowercase. It should match with the following regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$ or it will raise an error."
      }

    },
    "publicIPType": {
      "type": "string",
      "allowedValues": [
        "Static",
        "Dynamic"
      ],
      "defaultValue": "Dynamic",
      "metadata": {
        "description": "Public facing IP Type."
      }
    }
  },
  "variables": {
    "apiVersion": "2015-06-15",
    "scriptsBaseUrl": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/couchbase-ansible/",
    "vmStorageAccountContainerName": "vhds",
    "createRAID": "true",
    "availabilitySetName": "CB01",
    "faultDomainCount": "3",
    "updateDomainCount": "10",
    "virtualNetworkName": "VNet01",
    "addressPrefix": "10.0.0.0/16",
    "subnet1Name": "FrontEnd",
    "subnet2Name": "Backend",
    "subnet1Prefix": "10.0.1.0/24",
    "subnet2Prefix": "10.0.2.0/24",
    "publicIPName": "VIP01",
    "vmNamePattern": "CB",
    "VMIPAddressStart": "10.0.2.2",
    "vmNICNamePattern": "CB",
    "loadBalancerName": "CouchbaseLB",
    "sshNatRuleFrontEndPort": "6400",
    "sshNatRuleBackEndPort": "22",
    "publicIPRef": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPName'))]",
    "NICipconfig": "ipCnfgBE",
    "NICRef": "[resourceId('Microsoft.Network/networkInterfaces',variables('vmNICNamePattern'))]",
    "DNSNameLB": "[concat(parameters('dnsLabelPrefix'))]",
    "vnetRef": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "subnetBackEndRef": "[concat(variables('vnetRef'),'/subnets/',variables('subnet2Name'))]",
    "FrontEndRef": "[concat(variables('vnetRef'),'/subnets/',variables('subnet1Name'))]",
    "loadBalancerRef": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",
    "lbRuleName": "lbRuleCbAdmin",
    "lbRuleRef": "[concat(variables('loadBalancerRef'),'/loadBalancingRules/',variables('lbRuleName'))]",
    "lbFEConfig": "LBcbaFrontConfg",
    "lbFEConfigRef": "[concat(variables('loadBalancerRef'),'/frontendIPConfigurations/',variables('lbFEConfig'))]",
    "lbBEConfig": "[concat('LBBEcbaFrontConfg')]",
    "lbBEConfigRef": "[concat(variables('loadBalancerRef'),'/backendAddressPools/' ,variables('lbBEConfig'))]",
    "sshKeyPath": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",
    "sshRootCerBlobLocation": "id_rsa",
    "nginxConfigLocation": "nginx",
    "sshRootPubBlobLocation": "id_rsa.pub",
    "ansiblePlaybookLocation": "InitStorage_RAID.yml",
    "couchbasePlaybookLocation": "couchbase_setup.yml",
    "couchbasePlaybookParamsLocation": "couchbase_parameters.yml",
    "couchbaseAdminUser": "[parameters('adminUsername')]",
    "couchbaseAdminPassword": "[parameters('adminPassword')]",
    "couchbasePlaybookUrl": "[concat(variables('scriptsBaseUrl'),variables('couchbasePlaybookLocation'))]",
    "couchbaseParametersPlaybookUrl": "[concat(variables('scriptsBaseUrl'),variables('couchbasePlaybookParamsLocation'))]",
    "nginxConfigTemplateUrl": "[concat(variables('scriptsBaseUrl'),variables('nginxConfigLocation'))]",
    "couchbaseWebConsolePort": "16195",
    "customScriptAnsibleFile": "couchbase_ansible.sh",
    "customScriptAnsibleUrl": "[concat(variables('scriptsBaseUrl'),variables('customScriptAnsibleFile'))]",
    "customScriptAnsibleCommand": "[concat('bash ',variables('customScriptAnsibleFile'))]",
    "customScriptAnsibleParameters": "[concat(' -i ',variables('VMIPAddressStart'),' -n ',parameters('numberOfVms'),' -r ',variables('createRAID'),' -f ',parameters('linuxFileSystem'),' -u ',variables('couchbaseAdminUser'),' -p ',variables('couchbaseAdminPassword') ,' -m ',parameters('couchbaseMemoryAllocationPercentage') )]",
    "customScriptSSHRootFile": "configure_ssh_root.sh",
    "customScriptSSHRootUrl": "[concat(variables('scriptsBaseUrl'),variables('customScriptSSHRootFile'))]",
    "customScriptSSHRootCommand": "[concat('bash ',variables('customScriptSSHRootFile'),' -a ', parameters('sshStorageAccountName'),' -k ', parameters('sshStorageAccountKey'))]",
    "ansiblePlaybookUrl": "[concat(variables('scriptsBaseUrl'),variables('ansiblePlaybookLocation'))]",
    "pythonAzureScriptUrl": "[concat(variables('scriptsBaseUrl'),'GetSSHFromPrivateStorageAccount.py')]",
    "ansibleVmTypes": {
      "Premium_LRS": {
        "vmSize": "Standard_DS1"
      },
      "Standard_LRS": {
        "vmSize": "Standard_A1"
      }
    },
    "currentEnvironmentSettings": "[variables('ansibleVmTypes')[parameters('storageAccountType')]]",
    "ansibleVmType": "[variables('currentEnvironmentSettings').vmSize]",
    "newStorageAccountName": "[concat(uniquestring(resourceGroup().id), 'stg')]",
    "storageRef": "[concat('Microsoft.Storage/storageAccounts/', variables('newStorageAccountName'))]"
  },

  "resources": [
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnet1Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet1Prefix')]"
            }
          },
          {
            "name": "[variables('subnet2Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet2Prefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('vnetRef')]"

      ],
      "properties": {
        "publicIPAllocationMethod": "[parameters('publicIPType')]",
        "dnsSettings": {
          "domainNameLabel": "[variables('DNSNameLB')]"
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('loadBalancerName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('publicIPRef')]"
      ],
      "properties": {

        "frontendIPConfigurations": [
          {
            "name": "[variables('lbFEConfig')]",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPRef')]"
              }
            }

          }
        ],
        "backendAddressPools": [
          { "name": "[variables('lbBEConfig')]" }
        ],
        "inboundNatRules": [
          {
            "name": "sshToAnsibleControllerNAT",
            "properties": {
              "frontendIPConfiguration": { "id": "[variables('lbFEConfigRef')]" },
              "protocol": "tcp",
              "frontendPort": "[concat(variables('sshNatRuleFrontEndPort'),'0')]",
              "backendPort": "[variables('sshNatRuleBackEndPort')]",
              "enableFloatingIP": false
            }
          },
          {
            "name": "couchbaseWebAdminConsoleNAT",
            "properties": {
              "frontendIPConfiguration": { "id": "[variables('lbFEConfigRef')]" },
              "protocol": "tcp",
              "frontendPort": "[variables('couchbaseWebConsolePort')]",
              "backendPort": "[variables('couchbaseWebConsolePort')]",
              "enableFloatingIP": false
            }
          }

        ]
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetName')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "PlatformFaultDomainCount": "[variables('faultDomainCount')]",
        "PlatformUpdateDomainCount": "[variables('updateDomainCount')]"

      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('newStorageAccountName')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('vmNICNamePattern'),copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "NICSLoop",
        "count": "[parameters('numberOfVMS')]"
      },
      "dependsOn": [
        "[variables('vnetRef')]",
        "[variables('loadBalancerRef')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "[variables('NICipconfig')]",
            "properties": {
              "privateIPAllocationMethod": "Static ",
              "privateIPAddress": "[concat(variables('VMIPAddressStart'),copyindex())]",
              "subnet": {
                "id": "[variables('subnetBackEndRef')]"
              },
              "loadBalancerBackendAddressPools": [
                { "id": "[variables('lbBEConfigRef')]" }
              ]
            }

          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmNamePattern'),copyIndex())]",
      "location": "[resourceGroup().location]",
      "tags": {
        "ServerRole": "[parameters('serversRole')]",
        "ServerEnvironment": "[parameters('serversPurpose')]"
      },
      "copy": {
        "name": "VMsLoop",
        "count": "[parameters('numberOfVms')]"
      },
      "dependsOn": [
        "[variables('storageRef')]",
        "[concat(variables('NICRef'),copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('vmNamePattern'),copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[parameters('imagePublisher')]",
            "offer": "[parameters('imageOffer')]",
            "sku": "[parameters('imageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('vmNamePattern'),copyIndex(), '-OS')]",
            "vhd": {
              "uri": "[concat('http://',variables('newStorageAccountName'),'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/',variables('vmNamePattern'),copyIndex(),'-OS.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "name": "[concat(variables('vmNamePattern'),copyIndex(), '-Data_1')]",
              "diskSizeGB": "[parameters('vmSizeDataDisks')]",
              "lun": 0,
              "vhd": {
                "uri": "[concat('http://',variables('newStorageAccountName'),'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/',variables('vmNamePattern'),copyIndex(),'-Data_1.vhd')]"
              },
              "caching": "ReadOnly",
              "createOption": "Empty"
            },
            {
              "name": "[concat(variables('vmNamePattern'),copyIndex(), '-Data_2')]",
              "diskSizeGB": "[parameters('vmSizeDataDisks')]",
              "lun": 1,
              "vhd": {
                "uri": "[concat('http://',variables('newStorageAccountName'),'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/',variables('vmNamePattern'),copyIndex(),'-Data_2.vhd')]"
              },
              "caching": "ReadOnly",
              "createOption": "Empty"
            },
            {
              "name": "[concat(variables('vmNamePattern'),copyIndex(), '-Data_3')]",
              "diskSizeGB": "[parameters('vmSizeDataDisks')]",
              "lun": 2,
              "vhd": {
                "uri": "[concat('http://',variables('newStorageAccountName'),'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/',variables('vmNamePattern'),copyIndex(),'-Data_3.vhd')]"
              },
              "caching": "ReadOnly",
              "createOption": "Empty"
            },
            {
              "name": "[concat(variables('vmNamePattern'),copyIndex(), '-Data_4')]",
              "diskSizeGB": "[parameters('vmSizeDataDisks')]",
              "lun": 3,
              "vhd": {
                "uri": "[concat('http://',variables('newStorageAccountName'),'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/',variables('vmNamePattern'),copyIndex(),'-Data_4.vhd')]"
              },
              "caching": "ReadOnly",
              "createOption": "Empty"
            }
          ]
        },

        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[concat(variables('NICRef'),copyIndex())]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmNamePattern'),copyIndex(),'/configuressh')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "VMExtensionsLoop",
        "count": "[parameters('numberOfVms')]"
      },
      "dependsOn": [
        "VMsLoop"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.4",
        "settings": {
          "fileUris": [
            "[variables('customScriptSSHRootUrl')]",
            "[variables('pythonAzureScriptUrl')]"
          ],
          "commandToExecute": "[variables('customScriptSSHRootCommand')]",
          "protectedSettings": { }

        }
      }
    },

    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "NICAnsibleController",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('vnetRef')]",
        "[variables('loadBalancerRef')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "[variables('NICipconfig')]",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(variables('VMIPAddressStart'),parameters('numberOfVms'))]",
              "subnet": { "id": "[variables('subnetBackEndRef')]" },
              "loadBalancerInboundNatRules": [
                { "id": "[concat(variables('loadBalancerRef'),'/inboundNatRules/sshToAnsibleControllerNAT')]" },
                { "id": "[concat(variables('loadBalancerRef'),'/inboundNatRules/couchbaseWebAdminConsoleNAT')]" }
              ]
            }

          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "AnsibleController",
      "location": "[resourceGroup().location]",
      "tags": {
        "ServerRole": "AnsibleController",
        "ServerEnvironment": "[parameters('serversPurpose')]"
      },
      "dependsOn": [
        "[variables('storageRef')]",
        "[resourceId('Microsoft.Network/networkInterfaces','NICAnsibleController')]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]",
        "VMsLoop"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('ansibleVMType')]"
        },
        "osProfile": {
          "computerName": "AnsibleController",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "false",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKeyData')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[parameters('imagePublisher')]",
            "offer": "[parameters('imageOffer')]",
            "sku": "[parameters('imageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "AnsibleController-OS",
            "vhd": {
              "uri": "[concat('http://',variables('newStorageAccountName'),'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/AnsibleController-OS.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces','NICAnsibleController')]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "AnsibleController/configureAnsibleAndCouchbase",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "VMExtensionsLoop"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.4",
        "settings": {
          "fileUris": [
            "[variables('customScriptAnsibleUrl')]",
            "[variables('ansiblePlaybookUrl')]",
            "[variables('couchbasePlaybookUrl')]",
            "[variables('couchbaseParametersPlaybookUrl')]",
            "[variables('nginxConfigTemplateUrl')]",
            "[variables('pythonAzureScriptUrl')]"
          ],
          "commandToExecute": "[concat(variables('customScriptAnsibleCommand'),variables('customScriptAnsibleParameters'),' -q ',reference(variables('publicIPRef'),providers('Microsoft.Network', 'publicIPAddresses').apiVersions[0]).dnsSettings.fqdn ,' -o ', variables('couchbaseWebConsolePort') ,' -a ', parameters('sshStorageAccountName'),' -k ', parameters('sshStorageAccountKey'))]",
          "protectedSettings": { }
        }
      }
    }
  ],

  "outputs": {
    "sshResourceURL": {
      "value": "[concat('SSH Url to Ansible Controller:',parameters('adminUsername'),'@', reference(variables('publicIPRef'),providers('Microsoft.Network', 'publicIPAddresses').apiVersions[0]).dnsSettings.fqdn,' -p ',variables('sshNatRuleFrontEndPort'))]",
      "type": "string"
    },
    "couchbaseWebURL": {
      "value": "[concat('URL To Couchbase Admin Console: https://', reference(variables('publicIPRef'),providers('Microsoft.Network', 'publicIPAddresses').apiVersions[0]).dnsSettings.fqdn,':',variables('couchbaseWebConsolePort'))]",
      "type": "string"
    }
  }
}
