{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.25",
  "parameters": {
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
      },
      "defaultValue": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/steelscript-appfwkdev-linux"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
      },
      "defaultValue": ""
    },
    "virtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_D2_v2",
      "metadata": {
        "description": "The VM size."
      }
    },
    "linuxImage": {
      "type": "object",
      "defaultValue": {
        "Publisher": "OpenLogic",
        "Offer": "Centos",
        "Sku": "7.3"
      },
      "allowedValues": [
        {
          "Publisher": "OpenLogic",
          "Offer": "Centos",
          "Sku": "7.3"
        },
        {
          "Publisher": "OpenLogic",
          "Offer": "Centos",
          "Sku": "7.0"
        },
        {
          "Publisher": "Canonical",
          "Offer": "UbuntuServer",
          "Sku": "17.04"
        }
      ],
      "metadata": {
        "description": "The linux sku image for the VM, among those tested."
      }
    },
    "adminPublicKey": {
      "type": "string",
      "metadata": {
        "description": "The SSH public key to authenticate on the VM using the vm login (see VM login output). Example: ssh-rsa KKKKKKKKKK..."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    }
  },
  "variables": {
    "appPrefix": "ssappfwkdev",
    "appName": "[concat(variables('appPrefix'),'-',uniquestring(resourceGroup().id))]",
    "appServerTcpPort": "8000",
    "virtualNetworkName": "[concat(variables('appPrefix'),'-vnet')]",
    "addressPrefix": "10.0.0.0/16",
    "subnetName": "[concat(variables('appPrefix'),'-subnet')]",
    "subnetPrefix": "10.0.0.0/24",
    "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'),  variables('subnetName'))]",
    "dnsLabelPrefix": "[variables('appName')]",
    "publicIPAddressType": "Dynamic",
    "publicIpAddressName": "[concat(variables('appPrefix'),'-pip')]",
    "networkInterfaceName": "[concat(variables('appPrefix'),'-nic')]",
    "networkSecurityGroupName": "[concat(variables('appPrefix'),'-nsg')]",
    "virtualMachineName": "[concat(variables('appPrefix'),'-vm')]",
    "adminUsername": "[concat(variables('appPrefix'),'-admin')]",
    "vhdStorageType": "Standard_LRS",
    "diagnosticsStorageAccountName": "[concat('diag',uniqueString(resourceGroup().id))]",
    "extensionName": "install-ssappfwkdev-script",
    "ScriptFolder": "scripts",
    "ScriptFileName": "install-ssappfwkdev.sh"
  },
  "resources": [
    {
      "name": "[variables('virtualNetworkName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2017-04-01",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "name": "[variables('publicIpAddressName')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2017-04-01",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIpAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[variables('dnsLabelPrefix')]"
        }
      }
    },
    {
      "name": "[variables('networkSecurityGroupName')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2017-04-01",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "default-allow-ssh",
            "properties": {
              "priority": 1000,
              "sourceAddressPrefix": "*",
              "protocol": "Tcp",
              "destinationPortRange": "22",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "[variables('appPrefix')]",
            "properties": {
              "priority": 1010,
              "sourceAddressPrefix": "*",
              "protocol": "Tcp",
              "destinationPortRange": "[variables('appServerTcpPort')]",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          }
        ]
      }
    },
    {
      "name": "[variables('networkInterfaceName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2017-04-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/publicIpAddresses/', variables('publicIpAddressName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "privateIPAllocationMethod": "Dynamic",
              "publicIpAddress": {
                "id": "[resourceId('Microsoft.Network/publicIpAddresses', variables('publicIpAddressName'))]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('diagnosticsStorageAccountName')]",
      "apiVersion": "2017-06-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[variables('vhdStorageType')]"
      },
      "kind": "Storage",
      "properties": {}
    },
    {
      "name": "[variables('virtualMachineName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2017-03-30",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('networkInterfaceName'))]"
      ],
      "properties": {
        "osProfile": {
          "computerName": "[variables('virtualMachineName')]",
          "adminUsername": "[variables('adminUsername')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
              "publicKeys": [
                {
                  "path": "[concat('/home/', variables('adminUsername'), '/.ssh/authorized_keys')]",
                  "keyData": "[parameters('adminPublicKey')]"
                }
              ]
            }
          }
        },
        "hardwareProfile": {
          "vmSize": "[parameters('virtualMachineSize')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[parameters('linuxImage').Publisher]",
            "offer": "[parameters('linuxImage').Offer]",
            "sku": "[parameters('linuxImage').Sku]",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[variables('vhdStorageType')]"
            }
          },
          "dataDisks": []
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName')), '2016-01-01').primaryEndpoints.blob)]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('virtualMachineName'),'/', variables('extensionName'))]",
      "apiVersion": "2016-03-30",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('virtualMachineName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[concat(parameters('_artifactsLocation'), '/', variables('ScriptFolder'), '/', variables('ScriptFileName'), parameters('_artifactsLocationSasToken'))]"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat('./',variables('ScriptFileName'))]"
        }
      }
    }
  ],
  "outputs": {
    "ssh command": {
      "type": "string",
      "value": "[concat('ssh ',variables('adminUsername'),'@',reference(concat('Microsoft.Network/publicIPAddresses/', variables('publicIpAddressName'))).dnsSettings.fqdn)]"
    },
    "URL": {
      "type": "string",
      "value": "[concat('http://',reference(concat('Microsoft.Network/publicIPAddresses/', variables('publicIpAddressName'))).dnsSettings.fqdn,':',variables('appServerTcpPort'))]"
    },
    "Credentials": {
      "type": "string",
      "value": "admin / admin"
    }
  }
}
