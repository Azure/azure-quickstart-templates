{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.19.5.34762",
      "templateHash": "16846138394047875728"
    }
  },
  "parameters": {
    "networkFabricName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Network Fabric"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure Region for deployment of the Network Fabric and associated resources"
      }
    },
    "annotation": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Switch configuration description"
      }
    },
    "networkFabricControllerId": {
      "type": "string",
      "metadata": {
        "description": "Resource Id of the Network Fabric Controller,  is should be in the format of /subscriptions/<Sub ID>/resourceGroups/<Resource group name>/providers/Microsoft.ManagedNetworkFabric/networkFabricControllers/<networkFabricController name>"
      }
    },
    "networkFabricSku": {
      "type": "string",
      "metadata": {
        "description": "Name of the Network Fabric SKU"
      }
    },
    "rackCount": {
      "type": "int",
      "metadata": {
        "description": "Number of racks associated to Network Fabric"
      },
      "maxValue": 8,
      "minValue": 1
    },
    "serverCountPerRack": {
      "type": "int",
      "metadata": {
        "description": "Number of servers per Rack"
      },
      "maxValue": 16,
      "minValue": 1
    },
    "ipv4Prefix": {
      "type": "string",
      "metadata": {
        "description": "IPv4 Prefix for Management Network"
      }
    },
    "ipv6Prefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "IPv6 Prefix for Management Network"
      }
    },
    "fabricASN": {
      "type": "int",
      "metadata": {
        "description": "ASN of CE devices for CE/PE connectivity"
      },
      "maxValue": 4294967295,
      "minValue": 1
    },
    "terminalServerConfiguration": {
      "type": "object",
      "metadata": {
        "description": "Network and credentials configuration currently applied to terminal server"
      }
    },
    "managementNetworkConfiguration": {
      "type": "object",
      "metadata": {
        "description": "Configuration to be used to setup the management network"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.ManagedNetworkFabric/networkFabrics",
      "apiVersion": "2023-06-15",
      "name": "[parameters('networkFabricName')]",
      "location": "[parameters('location')]",
      "properties": {
        "annotation": "[if(not(empty(parameters('annotation'))), parameters('annotation'), null())]",
        "networkFabricSku": "[parameters('networkFabricSku')]",
        "rackCount": "[parameters('rackCount')]",
        "serverCountPerRack": "[parameters('serverCountPerRack')]",
        "ipv4Prefix": "[parameters('ipv4Prefix')]",
        "ipv6Prefix": "[if(not(empty(parameters('ipv6Prefix'))), parameters('ipv6Prefix'), null())]",
        "fabricASN": "[parameters('fabricASN')]",
        "networkFabricControllerId": "[parameters('networkFabricControllerId')]",
        "terminalServerConfiguration": {
          "username": "[parameters('terminalServerConfiguration').username]",
          "password": "[parameters('terminalServerConfiguration').password]",
          "serialNumber": "[if(contains(parameters('terminalServerConfiguration'), 'serialNumber'), parameters('terminalServerConfiguration').serialNumber, null())]",
          "primaryIpv4Prefix": "[parameters('terminalServerConfiguration').primaryIpv4Prefix]",
          "primaryIpv6Prefix": "[if(contains(parameters('terminalServerConfiguration'), 'primaryIpv6Prefix'), parameters('terminalServerConfiguration').primaryIpv6Prefix, null())]",
          "secondaryIpv4Prefix": "[parameters('terminalServerConfiguration').secondaryIpv4Prefix]",
          "secondaryIpv6Prefix": "[if(contains(parameters('terminalServerConfiguration'), 'secondaryIpv6Prefix'), parameters('terminalServerConfiguration').secondaryIpv6Prefix, null())]"
        },
        "managementNetworkConfiguration": {
          "infrastructureVpnConfiguration": {
            "peeringOption": "[parameters('managementNetworkConfiguration').infrastructureVpnConfiguration.peeringOption]",
            "networkToNetworkInterconnectId": "[if(contains(parameters('managementNetworkConfiguration').infrastructureVpnConfiguration, 'networkToNetworkInterconnectId'), parameters('managementNetworkConfiguration').infrastructureVpnConfiguration.networkToNetworkInterconnectId, null())]",
            "optionBProperties": "[if(contains(parameters('managementNetworkConfiguration').infrastructureVpnConfiguration, 'optionBProperties'), createObject('routeTargets', if(contains(parameters('managementNetworkConfiguration').infrastructureVpnConfiguration.optionBProperties, 'routeTargets'), parameters('managementNetworkConfiguration').infrastructureVpnConfiguration.optionBProperties.routeTargets, null())), null())]",
            "optionAProperties": "[if(contains(parameters('managementNetworkConfiguration').infrastructureVpnConfiguration, 'optionAProperties'), createObject('mtu', if(contains(parameters('managementNetworkConfiguration').infrastructureVpnConfiguration.optionAProperties, 'mtu'), parameters('managementNetworkConfiguration').infrastructureVpnConfiguration.optionAProperties.mtu, null()), 'vlanId', parameters('managementNetworkConfiguration').infrastructureVpnConfiguration.optionAProperties.vlanId, 'peerASN', parameters('managementNetworkConfiguration').infrastructureVpnConfiguration.optionAProperties.peerASN, 'bfdConfiguration', if(contains(parameters('managementNetworkConfiguration').infrastructureVpnConfiguration.optionAProperties, 'bfdConfiguration'), parameters('managementNetworkConfiguration').infrastructureVpnConfiguration.optionAProperties.bfdConfiguration, null()), 'primaryIpv4Prefix', if(contains(parameters('managementNetworkConfiguration').infrastructureVpnConfiguration.optionAProperties, 'primaryIpv4Prefix'), parameters('managementNetworkConfiguration').infrastructureVpnConfiguration.optionAProperties.primaryIpv4Prefix, null()), 'primaryIpv6Prefix', if(contains(parameters('managementNetworkConfiguration').infrastructureVpnConfiguration.optionAProperties, 'primaryIpv6Prefix'), parameters('managementNetworkConfiguration').infrastructureVpnConfiguration.optionAProperties.primaryIpv6Prefix, null()), 'secondaryIpv4Prefix', if(contains(parameters('managementNetworkConfiguration').infrastructureVpnConfiguration.optionAProperties, 'secondaryIpv4Prefix'), parameters('managementNetworkConfiguration').infrastructureVpnConfiguration.optionAProperties.secondaryIpv4Prefix, null()), 'secondaryIpv6Prefix', if(contains(parameters('managementNetworkConfiguration').infrastructureVpnConfiguration.optionAProperties, 'secondaryIpv6Prefix'), parameters('managementNetworkConfiguration').infrastructureVpnConfiguration.optionAProperties.secondaryIpv6Prefix, null())), null())]"
          },
          "workloadVpnConfiguration": {
            "peeringOption": "[parameters('managementNetworkConfiguration').workloadVpnConfiguration.peeringOption]",
            "networkToNetworkInterconnectId": "[if(contains(parameters('managementNetworkConfiguration').workloadVpnConfiguration, 'networkToNetworkInterconnectId'), parameters('managementNetworkConfiguration').workloadVpnConfiguration.networkToNetworkInterconnectId, null())]",
            "optionBProperties": "[if(contains(parameters('managementNetworkConfiguration').workloadVpnConfiguration, 'optionBProperties'), createObject('routeTargets', if(contains(parameters('managementNetworkConfiguration').workloadVpnConfiguration.optionBProperties, 'routeTargets'), parameters('managementNetworkConfiguration').workloadVpnConfiguration.optionBProperties.routeTargets, null())), null())]",
            "optionAProperties": "[if(contains(parameters('managementNetworkConfiguration').workloadVpnConfiguration, 'optionAProperties'), createObject('mtu', if(contains(parameters('managementNetworkConfiguration').workloadVpnConfiguration.optionAProperties, 'mtu'), parameters('managementNetworkConfiguration').workloadVpnConfiguration.optionAProperties.mtu, null()), 'vlanId', parameters('managementNetworkConfiguration').workloadVpnConfiguration.optionAProperties.vlanId, 'peerASN', parameters('managementNetworkConfiguration').workloadVpnConfiguration.optionAProperties.peerASN, 'bfdConfiguration', if(contains(parameters('managementNetworkConfiguration').workloadVpnConfiguration.optionAProperties, 'bfdConfiguration'), parameters('managementNetworkConfiguration').workloadVpnConfiguration.optionAProperties.bfdConfiguration, null()), 'primaryIpv4Prefix', if(contains(parameters('managementNetworkConfiguration').workloadVpnConfiguration.optionAProperties, 'primaryIpv4Prefix'), parameters('managementNetworkConfiguration').workloadVpnConfiguration.optionAProperties.primaryIpv4Prefix, null()), 'primaryIpv6Prefix', if(contains(parameters('managementNetworkConfiguration').workloadVpnConfiguration.optionAProperties, 'primaryIpv6Prefix'), parameters('managementNetworkConfiguration').workloadVpnConfiguration.optionAProperties.primaryIpv6Prefix, null()), 'secondaryIpv4Prefix', if(contains(parameters('managementNetworkConfiguration').workloadVpnConfiguration.optionAProperties, 'secondaryIpv4Prefix'), parameters('managementNetworkConfiguration').workloadVpnConfiguration.optionAProperties.secondaryIpv4Prefix, null()), 'secondaryIpv6Prefix', if(contains(parameters('managementNetworkConfiguration').workloadVpnConfiguration.optionAProperties, 'secondaryIpv6Prefix'), parameters('managementNetworkConfiguration').workloadVpnConfiguration.optionAProperties.secondaryIpv6Prefix, null())), null())]"
          }
        }
      },
      "metadata": {
        "description": "Create Network Fabric Resource"
      }
    }
  ],
  "outputs": {
    "resourceID": {
      "type": "string",
      "value": "[resourceId('Microsoft.ManagedNetworkFabric/networkFabrics', parameters('networkFabricName'))]"
    }
  }
}