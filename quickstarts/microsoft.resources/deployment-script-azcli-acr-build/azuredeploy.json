{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.11.1.770",
      "templateHash": "4121684413515623854"
    }
  },
  "parameters": {
    "AcrName": {
      "type": "string",
      "defaultValue": "[format('cr{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "The name of the Azure Container Registry"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location to deploy the resources to"
      }
    },
    "gitRepositoryUrl": {
      "type": "string",
      "defaultValue": "https://github.com/Azure-Samples/DotNet47WinContainerModernize.git",
      "metadata": {
        "description": "The Git Repository URL, eg. https://github.com/YOURORG/YOURREPO.git"
      }
    },
    "gitBranch": {
      "type": "string",
      "defaultValue": "main",
      "metadata": {
        "description": "The name of the repository branch to use"
      }
    },
    "gitRepoDirectory": {
      "type": "string",
      "defaultValue": "eShopLegacyWebFormsSolution",
      "metadata": {
        "description": "The directory in the repo that contains the dockerfile"
      }
    },
    "imageName": {
      "type": "string",
      "defaultValue": "dotnet/framework/aspnet",
      "metadata": {
        "description": "The image name/path you want to create in ACR"
      }
    },
    "imageTag": {
      "type": "string",
      "defaultValue": "4.8-windowsservercore-ltsc2019"
    },
    "acrBuildPlatform": {
      "type": "string",
      "defaultValue": "windows",
      "metadata": {
        "description": "The ACR compute platform needed to build the image"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2021-12-01-preview",
      "name": "[parameters('AcrName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic"
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('buildAcrImage-{0}', replace(parameters('imageName'), '/', '-'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "AcrName": {
            "value": "[parameters('AcrName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "gitRepositoryUrl": {
            "value": "[parameters('gitRepositoryUrl')]"
          },
          "gitBranch": {
            "value": "[parameters('gitBranch')]"
          },
          "gitRepoDirectory": {
            "value": "[parameters('gitRepoDirectory')]"
          },
          "imageName": {
            "value": "[parameters('imageName')]"
          },
          "imageTag": {
            "value": "[parameters('imageTag')]"
          },
          "acrBuildPlatform": {
            "value": "[parameters('acrBuildPlatform')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "13642411578150246430"
            }
          },
          "parameters": {
            "AcrName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Container Registry"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location of the ACR and where to deploy the module resources to"
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "How the deployment script should be forced to execute"
              }
            },
            "rbacRoleNeeded": {
              "type": "string",
              "defaultValue": "b24988ac-6180-42a0-ab88-20f7382dd24c",
              "metadata": {
                "description": "Azure RoleId that are required for the DeploymentScript resource to import images"
              }
            },
            "useExistingManagedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Does the Managed Identity already exists, or should be created"
              }
            },
            "managedIdentityName": {
              "type": "string",
              "defaultValue": "id-ContainerRegistryBuild",
              "metadata": {
                "description": "Name of the Managed Identity resource"
              }
            },
            "existingManagedIdentitySubId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "For an existing Managed Identity, the Subscription Id it is located in"
              }
            },
            "existingManagedIdentityResourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "For an existing Managed Identity, the Resource Group it is located in"
              }
            },
            "initialScriptDelay": {
              "type": "string",
              "defaultValue": "30s",
              "metadata": {
                "description": "A delay before the script import operation starts. Primarily to allow Azure AAD Role Assignments to propagate"
              }
            },
            "cleanupPreference": {
              "type": "string",
              "defaultValue": "OnSuccess",
              "metadata": {
                "description": "When the script resource is cleaned up"
              },
              "allowedValues": [
                "OnSuccess",
                "OnExpiration",
                "Always"
              ]
            },
            "gitRepositoryUrl": {
              "type": "string",
              "metadata": {
                "description": "The Git Repository URL, eg. https://github.com/YOURORG/YOURREPO.git"
              }
            },
            "gitBranch": {
              "type": "string",
              "defaultValue": "main",
              "metadata": {
                "description": "The name of the repository branch to use"
              }
            },
            "gitRepoDirectory": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The directory in the repo that contains the dockerfile"
              }
            },
            "imageName": {
              "type": "string",
              "metadata": {
                "description": "The image name/path you want to create in ACR"
              }
            },
            "imageTag": {
              "type": "string",
              "defaultValue": "[string(dateTimeToEpoch(utcNow()))]",
              "metadata": {
                "description": "The image tag you want to create"
              }
            },
            "acrBuildPlatform": {
              "type": "string",
              "defaultValue": "linux",
              "metadata": {
                "description": "The ACR compute platform needed to build the image"
              }
            }
          },
          "variables": {
            "$fxv#0": "#!/bin/bash\nset -e\n\necho \"Waiting on RBAC replication ($initialDelay)\"\nsleep $initialDelay\n\naz acr build --resource-group $acrResourceGroup \\\n  --registry $acrName \\\n  --image $taggedImageName $repo \\\n  --platform $platform",
            "repo": "[format('{0}#{1}:{2}', parameters('gitRepositoryUrl'), parameters('gitBranch'), parameters('gitRepoDirectory'))]",
            "cleanRepoName": "[last(split(parameters('gitRepositoryUrl'), '/'))]",
            "taggedImageName": "[format('{0}:{1}', parameters('imageName'), parameters('imageTag'))]"
          },
          "resources": [
            {
              "condition": "[not(parameters('useExistingManagedIdentity'))]",
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[parameters('managedIdentityName')]",
              "location": "[parameters('location')]"
            },
            {
              "condition": "[not(empty(parameters('rbacRoleNeeded')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('AcrName'))]",
              "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('AcrName')), parameters('rbacRoleNeeded'), if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('rbacRoleNeeded'))]",
                "principalId": "[if(parameters('useExistingManagedIdentity'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId)]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[format('ACR-Build-{0}', variables('cleanRepoName'))]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]": {}
                }
              },
              "kind": "AzureCLI",
              "properties": {
                "forceUpdateTag": "[parameters('forceUpdateTag')]",
                "azCliVersion": "2.30.0",
                "timeout": "PT45M",
                "retentionInterval": "P1D",
                "environmentVariables": [
                  {
                    "name": "acrName",
                    "value": "[parameters('AcrName')]"
                  },
                  {
                    "name": "acrResourceGroup",
                    "value": "[resourceGroup().name]"
                  },
                  {
                    "name": "taggedImageName",
                    "value": "[variables('taggedImageName')]"
                  },
                  {
                    "name": "repo",
                    "value": "[variables('repo')]"
                  },
                  {
                    "name": "platform",
                    "value": "[parameters('acrBuildPlatform')]"
                  },
                  {
                    "name": "initialDelay",
                    "value": "[parameters('initialScriptDelay')]"
                  }
                ],
                "scriptContent": "[variables('$fxv#0')]",
                "cleanupPreference": "[parameters('cleanupPreference')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
                "[extensionResourceId(resourceId('Microsoft.ContainerRegistry/registries', parameters('AcrName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('AcrName')), parameters('rbacRoleNeeded'), if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))))]"
              ]
            }
          ],
          "outputs": {
            "acrImage": {
              "type": "string",
              "value": "[format('{0}/{1}', reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('AcrName')), '2021-12-01-preview').loginServer, variables('taggedImageName'))]",
              "metadata": {
                "description": "The ACR uri the image can be accessed on if building was successful"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('AcrName'))]"
      ]
    }
  ],
  "outputs": {
    "acrImage": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('buildAcrImage-{0}', replace(parameters('imageName'), '/', '-')))).outputs.acrImage.value]"
    }
  }
}