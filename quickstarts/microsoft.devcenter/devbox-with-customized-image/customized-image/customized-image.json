{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.18.4.5664",
      "templateHash": "8594285762464256847"
    }
  },
  "parameters": {
    "personaImage": {
      "type": "string",
      "defaultValue": "base",
      "allowedValues": [
        "base",
        "java",
        "dotnet",
        "data"
      ],
      "metadata": {
        "description": "the type of the customized image"
      }
    },
    "imageGalleryName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of Azure Compute Gallery"
      }
    },
    "imageDefinitionName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of Azure Compute Gallery image definition"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Primary location for all resources e.g. eastus"
      }
    },
    "guidId": {
      "type": "string",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "Guid for generating random template name"
      }
    }
  },
  "variables": {
    "settings": {
      "base": {
        "publisher": "MicrosoftWindowsDesktop",
        "offer": "windows-ent-cpc",
        "sku": "win11-22h2-ent-cpc-m365",
        "inlineCommand": [
          "Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))",
          "choco install -y git",
          "choco install -y azure-cli",
          "choco install -y vscode",
          "$vscode_extension_dir=\"C:/temp/extensions\"; New-Item $vscode_extension_dir -ItemType Directory -Force; [Environment]::SetEnvironmentVariable(\"VSCODE_EXTENSIONS\", $vscode_extension_dir, \"Machine\"); $env:VSCODE_EXTENSIONS=$vscode_extension_dir; Start-Process -FilePath \"C:/Program Files/Microsoft VS Code/bin/code.cmd\"  -ArgumentList \" --install-extension github.copilot\"  -Wait -NoNewWindow"
        ]
      },
      "java": {
        "publisher": "MicrosoftWindowsDesktop",
        "offer": "windows-ent-cpc",
        "sku": "win11-22h2-ent-cpc-m365",
        "inlineCommand": [
          "Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))",
          "choco install -y git",
          "choco install -y azure-cli",
          "choco install -y vscode",
          "choco install -y openjdk11",
          "choco install -y maven",
          "$vscode_extension_dir=\"C:/temp/extensions\"; New-Item $vscode_extension_dir -ItemType Directory -Force; [Environment]::SetEnvironmentVariable(\"VSCODE_EXTENSIONS\", $vscode_extension_dir, \"Machine\"); $env:VSCODE_EXTENSIONS=$vscode_extension_dir; Start-Process -FilePath \"C:/Program Files/Microsoft VS Code/bin/code.cmd\"  -ArgumentList \" --install-extension vscjava.vscode-java-pack\"  -Wait -NoNewWindow"
        ]
      },
      "dotnet": {
        "publisher": "MicrosoftWindowsDesktop",
        "offer": "windows-ent-cpc",
        "sku": "win11-22h2-ent-cpc-m365",
        "inlineCommand": [
          "Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))",
          "choco install -y git",
          "choco install -y azure-cli",
          "choco install -y vscode",
          "choco install -y dotnet-7.0-sdk",
          "$ProgressPreference = 'SilentlyContinue';$vsInstallerName = 'vs_enterprise.exe';$vsInstallerPath = Join-Path -Path $env:TEMP -ChildPath $vsInstallerName;(new-object net.webclient).DownloadFile('https://aka.ms/vs/17/release/vs_enterprise.exe', $vsInstallerPath); Start-Process -FilePath $vsInstallerPath -ArgumentList '--add', 'Microsoft.VisualStudio.Workload.CoreEditor', '--add', 'Microsoft.VisualStudio.Workload.Azure', '--add', 'Microsoft.VisualStudio.Workload.NetWeb', '--add', 'Microsoft.VisualStudio.Workload.Node', '--add', 'Microsoft.VisualStudio.Workload.Python', '--add', 'Microsoft.VisualStudio.Workload.ManagedDesktop', '--includeRecommended', '--installWhileDownloading', '--quiet', '--norestart', '--force', '--wait', '--nocache' -NoNewWindow -Wait"
        ]
      },
      "data": {
        "publisher": "MicrosoftWindowsDesktop",
        "offer": "windows-ent-cpc",
        "sku": "win11-22h2-ent-cpc-m365",
        "inlineCommand": [
          "Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))",
          "choco install -y git",
          "choco install -y azure-cli",
          "choco install -y vscode",
          "choco install -y python3",
          "$vscode_extension_dir=\"C:/temp/extensions\"; New-Item $vscode_extension_dir -ItemType Directory -Force; [Environment]::SetEnvironmentVariable(\"VSCODE_EXTENSIONS\", $vscode_extension_dir, \"Machine\"); $env:VSCODE_EXTENSIONS=$vscode_extension_dir; Start-Process -FilePath \"C:/Program Files/Microsoft VS Code/bin/code.cmd\"  -ArgumentList \" --install-extension ms-python.python\"  -Wait -NoNewWindow; Start-Process -FilePath \"C:/Program Files/Microsoft VS Code/bin/code.cmd\"  -ArgumentList \" --install-extension ms-toolsai.jupyter\"  -Wait -NoNewWindow"
        ]
      }
    },
    "resourceToken": "[toLower(uniqueString(resourceGroup().id, parameters('location')))]",
    "templateIdentityName": "[format('id-tpl-{0}', variables('resourceToken'))]",
    "templateRoleDefinitionName": "[guid(resourceGroup().id)]",
    "imageDefName": "[if(not(empty(parameters('imageDefinitionName'))), parameters('imageDefinitionName'), format('image-{0}', variables('resourceToken')))]",
    "imageBuildName": "[take(format('{0}-{1}-buid', variables('imageDefName'), parameters('guidId')), 64)]",
    "imageTemplateName": "[take(format('{0}-{1}_template', variables('imageDefName'), parameters('guidId')), 64)]",
    "queryTemplateProgress": "[take(format('{0}-{1}-query', variables('imageDefName'), parameters('guidId')), 64)]",
    "buildCommand": "[format('Invoke-AzResourceAction -ResourceName \"{0}\" -ResourceGroupName \"{1}\" -ResourceType \"Microsoft.VirtualMachineImages/imageTemplates\" -ApiVersion \"2020-02-14\" -Action Run -Force', variables('imageTemplateName'), resourceGroup().name)]",
    "galleryName": "[if(not(empty(parameters('imageGalleryName'))), parameters('imageGalleryName'), format('gal{0}', variables('resourceToken')))]",
    "readerDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]"
  },
  "resources": [
    {
      "type": "Microsoft.Compute/galleries",
      "apiVersion": "2022-03-03",
      "name": "[variables('galleryName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Compute/galleries/images",
      "apiVersion": "2022-03-03",
      "name": "[format('{0}/{1}', variables('galleryName'), variables('imageDefName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "hyperVGeneration": "V2",
        "architecture": "x64",
        "features": [
          {
            "name": "SecurityType",
            "value": "TrustedLaunch"
          }
        ],
        "identifier": {
          "offer": "[variables('settings')[parameters('personaImage')].offer]",
          "publisher": "[variables('settings')[parameters('personaImage')].publisher]",
          "sku": "[format('{0}-{1}', variables('settings')[parameters('personaImage')].sku, variables('imageDefName'))]"
        },
        "osState": "Generalized",
        "osType": "Windows"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/galleries', variables('galleryName'))]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2022-01-31-preview",
      "name": "[variables('templateIdentityName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Authorization/roleDefinitions",
      "apiVersion": "2022-04-01",
      "name": "[variables('templateRoleDefinitionName')]",
      "properties": {
        "roleName": "[variables('templateRoleDefinitionName')]",
        "description": "Image Builder access to create resources for the image build, you should delete or split out as appropriate",
        "type": "customRole",
        "permissions": [
          {
            "actions": [
              "Microsoft.Compute/galleries/read",
              "Microsoft.Compute/galleries/images/read",
              "Microsoft.Compute/galleries/images/versions/read",
              "Microsoft.Compute/galleries/images/versions/write",
              "Microsoft.Compute/images/write",
              "Microsoft.Compute/images/read",
              "Microsoft.Compute/images/delete",
              "Microsoft.Storage/storageAccounts/blobServices/containers/read",
              "Microsoft.Storage/storageAccounts/blobServices/containers/write",
              "Microsoft.Resources/deployments/read",
              "Microsoft.Resources/deploymentScripts/read",
              "Microsoft.Resources/deploymentScripts/write",
              "Microsoft.VirtualMachineImages/imageTemplates/run/action",
              "Microsoft.ContainerInstance/containerGroups/read",
              "Microsoft.ContainerInstance/containerGroups/write",
              "Microsoft.ContainerInstance/containerGroups/start/action"
            ]
          }
        ],
        "assignableScopes": [
          "[resourceGroup().id]"
        ]
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, format('{0}', resourceId('Microsoft.Authorization/roleDefinitions', variables('templateRoleDefinitionName'))), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('templateIdentityName')))]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('templateRoleDefinitionName'))]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('templateIdentityName')), '2022-01-31-preview').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('templateIdentityName'))]",
        "[resourceId('Microsoft.Authorization/roleDefinitions', variables('templateRoleDefinitionName'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, variables('readerDefinitionId'), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('templateIdentityName')))]",
      "properties": {
        "roleDefinitionId": "[variables('readerDefinitionId')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('templateIdentityName')), '2022-01-31-preview').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('templateIdentityName'))]"
      ]
    },
    {
      "type": "Microsoft.VirtualMachineImages/imageTemplates",
      "apiVersion": "2022-02-14",
      "name": "[variables('imageTemplateName')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('templateIdentityName')))]": {}
        }
      },
      "properties": {
        "buildTimeoutInMinutes": 180,
        "vmProfile": {
          "vmSize": "Standard_DS2_v2",
          "osDiskSizeGB": 127
        },
        "source": {
          "type": "PlatformImage",
          "offer": "[variables('settings')[parameters('personaImage')].offer]",
          "publisher": "[variables('settings')[parameters('personaImage')].publisher]",
          "sku": "[variables('settings')[parameters('personaImage')].sku]",
          "version": "Latest"
        },
        "customize": [
          {
            "type": "PowerShell",
            "name": "Install Choco and other tools",
            "inline": "[variables('settings')[parameters('personaImage')].inlineCommand]"
          }
        ],
        "distribute": [
          {
            "type": "SharedImage",
            "galleryImageId": "[resourceId('Microsoft.Compute/galleries/images', variables('galleryName'), variables('imageDefName'))]",
            "runOutputName": "[format('{0}_Output', variables('imageDefName'))]",
            "replicationRegions": "[array(parameters('location'))]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/galleries/images', variables('galleryName'), variables('imageDefName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('templateIdentityName'))]",
        "[resourceId('Microsoft.Authorization/roleAssignments', guid(resourceGroup().id, format('{0}', resourceId('Microsoft.Authorization/roleDefinitions', variables('templateRoleDefinitionName'))), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('templateIdentityName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[variables('imageBuildName')]",
      "location": "[parameters('location')]",
      "kind": "AzurePowerShell",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('templateIdentityName')))]": {}
        }
      },
      "properties": {
        "forceUpdateTag": "[parameters('guidId')]",
        "azPowerShellVersion": "8.3",
        "scriptContent": "[variables('buildCommand')]",
        "timeout": "PT3H",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "P1D"
      },
      "dependsOn": [
        "[resourceId('Microsoft.VirtualMachineImages/imageTemplates', variables('imageTemplateName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('templateIdentityName'))]",
        "[resourceId('Microsoft.Authorization/roleAssignments', guid(resourceGroup().id, format('{0}', resourceId('Microsoft.Authorization/roleDefinitions', variables('templateRoleDefinitionName'))), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('templateIdentityName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[variables('queryTemplateProgress')]",
      "location": "[parameters('location')]",
      "kind": "AzurePowerShell",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('templateIdentityName')))]": {}
        }
      },
      "properties": {
        "azPowerShellVersion": "8.3",
        "scriptContent": "[format('Connect-AzAccount -Identity; ''Az.ImageBuilder'', ''Az.ManagedServiceIdentity'' | ForEach-Object {{Install-Module -Name $_ -AllowPrerelease -Force}}; $status=''Started''; while ($status -ne ''Succeeded'' -and $status -ne ''Failed'' -and $status -ne ''Cancelled'') {{ Start-Sleep -Seconds 30;$status = (Get-AzImageBuilderTemplate -ImageTemplateName {0} -ResourceGroupName {1}).LastRunStatusRunState}}', variables('imageTemplateName'), resourceGroup().name)]",
        "timeout": "PT3H",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "P1D"
      },
      "dependsOn": [
        "[resourceId('Microsoft.VirtualMachineImages/imageTemplates', variables('imageTemplateName'))]",
        "[resourceId('Microsoft.Resources/deploymentScripts', variables('imageBuildName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('templateIdentityName'))]"
      ]
    }
  ],
  "outputs": {
    "galleryName": {
      "type": "string",
      "value": "[variables('galleryName')]"
    },
    "imageDefinitionName": {
      "type": "string",
      "value": "[variables('imageDefName')]"
    },
    "imageTemplateName": {
      "type": "string",
      "value": "[variables('imageTemplateName')]"
    }
  }
}