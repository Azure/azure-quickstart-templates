{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.31.92.45157",
      "templateHash": "11457933023710351951"
    }
  },
  "definitions": {
    "_1.artifactSource": {
      "type": "object",
      "properties": {
        "Url": {
          "type": "string"
        },
        "Branch": {
          "type": "string"
        },
        "Path": {
          "type": "string"
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "exports.bicep"
        }
      }
    },
    "_1.imageResult": {
      "type": "object",
      "properties": {
        "buildLog": {
          "type": "string",
          "nullable": true
        },
        "stagingResourceGroupName": {
          "type": "string",
          "nullable": true
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "exports.bicep"
        }
      }
    },
    "_1.images": {
      "type": "object",
      "properties": {
        "eShop": {
          "$ref": "#/definitions/_1.imageSettings",
          "nullable": true
        },
        "axios": {
          "$ref": "#/definitions/_1.imageSettings",
          "nullable": true
        },
        "MSBuildSdks": {
          "$ref": "#/definitions/_1.imageSettings",
          "nullable": true
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "exports.bicep"
        }
      }
    },
    "_1.imageSettings": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true
        },
        "baseImage": {
          "type": "string",
          "nullable": true
        },
        "shouldBuild": {
          "type": "bool"
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "exports.bicep"
        }
      }
    },
    "_1.results": {
      "type": "object",
      "properties": {
        "eShop": {
          "$ref": "#/definitions/_1.imageResult"
        },
        "axios": {
          "$ref": "#/definitions/_1.imageResult"
        },
        "MSBuildSdks": {
          "$ref": "#/definitions/_1.imageResult"
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "exports.bicep"
        }
      }
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "builderIdentity": {
      "type": "string",
      "metadata": {
        "description": "Full resource ID of Azure Managed Identity to be associated with Azure Image Builder Template and helper deployment scripts"
      }
    },
    "imageIdentity": {
      "type": "string",
      "metadata": {
        "description": "Full resource ID of Azure Managed Identity to use when accessing Azure and Azure DevOps resources during image creation"
      }
    },
    "galleryName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Compute Gallery where to publish the resulting image. The gallery is assumed to be in the same resource group as the resulting image.\nThis parameter is ignored if imagePublishingProfile explicitly defines the list of Compute Galleries via its computeGalleries property.\n"
      }
    },
    "galleryResourceGroup": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Compute Gallery resource group. Ignored if galleryName is not provided."
      }
    },
    "gallerySubscriptionId": {
      "type": "string",
      "defaultValue": "[subscription().subscriptionId]",
      "metadata": {
        "description": "Compute Gallery subscription id. Ignored if galleryName is not provided."
      }
    },
    "createDevDrive": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to create a separate volume, format it with Dev Drive and use the volume for all repos, caches and related tools."
      }
    },
    "osDriveMinSizeGB": {
      "type": "int",
      "defaultValue": 160,
      "metadata": {
        "description": "Minimum size of the OS drive in GB if a separate Dev Drive volume is created."
      }
    },
    "imageBuildProfile": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Custom VS SKU to use when allocating the VM for image creation"
      }
    },
    "isBaseImage": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Specifies whether the image is a base image, i.e. that is not meant to be used directly by users but as a base for other images. Base images cannot be used with Dev Box service at the moment."
      }
    },
    "imageBuildTimeoutInMinutes": {
      "type": "int",
      "defaultValue": 180,
      "metadata": {
        "description": "Timeout in minutes for the image build process"
      }
    },
    "artifactSource": {
      "$ref": "#/definitions/_1.artifactSource",
      "nullable": true,
      "metadata": {
        "description": "Git repository containing artifacts to be used in the image build"
      }
    },
    "ignoreBuildFailure": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "In the case of an error do not fail the deployment but rather return the tail of the customization log.\nUseful when debugging image build failures in PR validation pipelines (https://dev.azure.com/azurequickstarts/azure-quickstart-templates/_build).\n"
      }
    },
    "images": {
      "$ref": "#/definitions/_1.images",
      "defaultValue": {},
      "metadata": {
        "description": "Custom sample images configuration"
      }
    }
  },
  "variables": {
    "defaultImages": {
      "eShop": {
        "name": "quickstart-eShop",
        "shouldBuild": true
      },
      "axios": {
        "name": "quickstart-axios",
        "shouldBuild": true
      },
      "MSBuildSdks": {
        "name": "quickstart-MSBuildSdks",
        "shouldBuild": true
      }
    },
    "imagesWithDefaults": "[union(variables('defaultImages'), parameters('images'))]",
    "artifactSourceWithDefaults": "[union(createObject('Url', 'https://github.com/Azure/azure-quickstart-templates', 'Path', 'quickstarts/microsoft.devcenter/devbox-ready-to-code-image/tools/artifacts', 'Branch', 'master'), coalesce(parameters('artifactSource'), createObject()))]"
  },
  "resources": {
    "eShop": {
      "condition": "[variables('imagesWithDefaults').eShop.shouldBuild]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('eShopImg-{0}', uniqueString(deployment().name, resourceGroup().name))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "imageName": {
            "value": "[variables('imagesWithDefaults').eShop.name]"
          },
          "isBaseImage": {
            "value": "[parameters('isBaseImage')]"
          },
          "baseImage": {
            "value": "[coalesce(tryGet(variables('imagesWithDefaults').eShop, 'baseImage'), '')]"
          },
          "builderIdentity": {
            "value": "[parameters('builderIdentity')]"
          },
          "imageIdentity": {
            "value": "[parameters('imageIdentity')]"
          },
          "galleryName": {
            "value": "[parameters('galleryName')]"
          },
          "galleryResourceGroup": {
            "value": "[parameters('galleryResourceGroup')]"
          },
          "gallerySubscriptionId": {
            "value": "[parameters('gallerySubscriptionId')]"
          },
          "artifactSource": {
            "value": "[variables('artifactSourceWithDefaults')]"
          },
          "ignoreBuildFailure": {
            "value": "[parameters('ignoreBuildFailure')]"
          },
          "createDevDrive": {
            "value": "[parameters('createDevDrive')]"
          },
          "osDriveMinSizeGB": {
            "value": "[parameters('osDriveMinSizeGB')]"
          },
          "imageBuildProfile": {
            "value": "[parameters('imageBuildProfile')]"
          },
          "imageBuildTimeoutInMinutes": {
            "value": "[parameters('imageBuildTimeoutInMinutes')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.92.45157",
              "templateHash": "13168632934020920874"
            }
          },
          "definitions": {
            "_1.artifactSource": {
              "type": "object",
              "properties": {
                "Url": {
                  "type": "string"
                },
                "Branch": {
                  "type": "string"
                },
                "Path": {
                  "type": "string"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../exports.bicep"
                }
              }
            },
            "_1.imageResult": {
              "type": "object",
              "properties": {
                "buildLog": {
                  "type": "string",
                  "nullable": true
                },
                "stagingResourceGroupName": {
                  "type": "string",
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../exports.bicep"
                }
              }
            },
            "_1.images": {
              "type": "object",
              "properties": {
                "eShop": {
                  "$ref": "#/definitions/_1.imageSettings",
                  "nullable": true
                },
                "axios": {
                  "$ref": "#/definitions/_1.imageSettings",
                  "nullable": true
                },
                "MSBuildSdks": {
                  "$ref": "#/definitions/_1.imageSettings",
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../exports.bicep"
                }
              }
            },
            "_1.imageSettings": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true
                },
                "baseImage": {
                  "type": "string",
                  "nullable": true
                },
                "shouldBuild": {
                  "type": "bool"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../exports.bicep"
                }
              }
            },
            "_1.results": {
              "type": "object",
              "properties": {
                "eShop": {
                  "$ref": "#/definitions/_1.imageResult"
                },
                "axios": {
                  "$ref": "#/definitions/_1.imageResult"
                },
                "MSBuildSdks": {
                  "$ref": "#/definitions/_1.imageResult"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../exports.bicep"
                }
              }
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "imageName": {
              "type": "string"
            },
            "isBaseImage": {
              "type": "bool"
            },
            "builderIdentity": {
              "type": "string"
            },
            "imageIdentity": {
              "type": "string"
            },
            "galleryName": {
              "type": "string"
            },
            "galleryResourceGroup": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]"
            },
            "gallerySubscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]"
            },
            "createDevDrive": {
              "type": "bool"
            },
            "osDriveMinSizeGB": {
              "type": "int"
            },
            "imageBuildProfile": {
              "type": "object"
            },
            "imageBuildTimeoutInMinutes": {
              "type": "int"
            },
            "baseImage": {
              "type": "string",
              "defaultValue": ""
            },
            "ignoreBuildFailure": {
              "type": "bool",
              "defaultValue": false
            },
            "artifactSource": {
              "$ref": "#/definitions/_1.artifactSource"
            }
          },
          "variables": {
            "restoreCommands": [
              "dotnet workload restore",
              "dotnet restore --disable-build-servers"
            ],
            "buildTestCommands": [
              "dotnet build --no-restore --disable-build-servers --framework net9.0 src/ClientApp/ClientApp.sln",
              "dotnet test --no-build --no-restore --disable-build-servers --framework net9.0 tests/ClientApp.UnitTests/ClientApp.UnitTests.csproj"
            ],
            "repos": [
              {
                "Url": "https://github.com/dotnet/eShop",
                "Kind": "MSBuild",
                "RestoreScript": "[join(variables('restoreCommands'), ' && ')]",
                "Build": {
                  "RunBuildScript": "[join(variables('buildTestCommands'), ' && ')]"
                }
              },
              {
                "Url": "https://github.com/Azure-Samples/eShopOnAzure"
              }
            ]
          },
          "resources": {
            "devBoxImage": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('eShop-{0}', uniqueString(deployment().name, resourceGroup().name))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "imageName": {
                    "value": "[parameters('imageName')]"
                  },
                  "isBaseImage": {
                    "value": "[parameters('isBaseImage')]"
                  },
                  "baseImage": {
                    "value": "[parameters('baseImage')]"
                  },
                  "galleryName": {
                    "value": "[parameters('galleryName')]"
                  },
                  "galleryResourceGroup": {
                    "value": "[parameters('galleryResourceGroup')]"
                  },
                  "gallerySubscriptionId": {
                    "value": "[parameters('gallerySubscriptionId')]"
                  },
                  "repos": {
                    "value": "[variables('repos')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "imageIdentity": {
                    "value": "[parameters('imageIdentity')]"
                  },
                  "builderIdentity": {
                    "value": "[parameters('builderIdentity')]"
                  },
                  "createDevDrive": {
                    "value": "[parameters('createDevDrive')]"
                  },
                  "osDriveMinSizeGB": {
                    "value": "[parameters('osDriveMinSizeGB')]"
                  },
                  "artifactSource": {
                    "value": "[parameters('artifactSource')]"
                  },
                  "ignoreBuildFailure": {
                    "value": "[parameters('ignoreBuildFailure')]"
                  },
                  "imageBuildProfile": {
                    "value": "[parameters('imageBuildProfile')]"
                  },
                  "imageBuildTimeoutInMinutes": {
                    "value": "[parameters('imageBuildTimeoutInMinutes')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.31.92.45157",
                      "templateHash": "3662675939873031723"
                    }
                  },
                  "definitions": {
                    "_1.artifactSource": {
                      "type": "object",
                      "properties": {
                        "Url": {
                          "type": "string"
                        },
                        "Branch": {
                          "type": "string"
                        },
                        "Path": {
                          "type": "string"
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "../exports.bicep"
                        }
                      }
                    },
                    "_1.imageResult": {
                      "type": "object",
                      "properties": {
                        "buildLog": {
                          "type": "string",
                          "nullable": true
                        },
                        "stagingResourceGroupName": {
                          "type": "string",
                          "nullable": true
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "../exports.bicep"
                        }
                      }
                    },
                    "_1.images": {
                      "type": "object",
                      "properties": {
                        "eShop": {
                          "$ref": "#/definitions/_1.imageSettings",
                          "nullable": true
                        },
                        "axios": {
                          "$ref": "#/definitions/_1.imageSettings",
                          "nullable": true
                        },
                        "MSBuildSdks": {
                          "$ref": "#/definitions/_1.imageSettings",
                          "nullable": true
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "../exports.bicep"
                        }
                      }
                    },
                    "_1.imageSettings": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true
                        },
                        "baseImage": {
                          "type": "string",
                          "nullable": true
                        },
                        "shouldBuild": {
                          "type": "bool"
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "../exports.bicep"
                        }
                      }
                    },
                    "_1.results": {
                      "type": "object",
                      "properties": {
                        "eShop": {
                          "$ref": "#/definitions/_1.imageResult"
                        },
                        "axios": {
                          "$ref": "#/definitions/_1.imageResult"
                        },
                        "MSBuildSdks": {
                          "$ref": "#/definitions/_1.imageResult"
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "../exports.bicep"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "imageName": {
                      "type": "string",
                      "metadata": {
                        "description": "Used to name \"VM image definition\" and some other Azure resources."
                      }
                    },
                    "isBaseImage": {
                      "type": "bool",
                      "metadata": {
                        "description": "Specifies whether the image is a base image, i.e. that is not meant to be used directly by users but as a base for other images. Base images cannot be used with Dev Box service at the moment."
                      }
                    },
                    "galleryName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Name of the Compute Gallery where to publish the resulting image. The gallery is assumed to be in the same resource group as the resulting image.\nThis parameter is ignored if imagePublishingProfile explicitly defines the list of Compute Galleries via its computeGalleries property.\n"
                      }
                    },
                    "galleryResourceGroup": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]",
                      "metadata": {
                        "description": "Compute Gallery resource group. Ignored if galleryName is not provided."
                      }
                    },
                    "gallerySubscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().subscriptionId]",
                      "metadata": {
                        "description": "Compute Gallery subscription id. Ignored if galleryName is not provided."
                      }
                    },
                    "imagePublishingProfile": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Custom image Publishing Profile that can be partially specified with the rest of the properties filled in with the following defaults:\n- targetRegions : one replica in the same region as the target image;\n- computeGalleries : single gallery but only if galleryName parameter is provided.\n"
                      }
                    },
                    "imageGalleries": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Publish image to multiple image galleries"
                      }
                    },
                    "targetRegions": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Replicate image to multiple regions"
                      }
                    },
                    "builderIdentity": {
                      "type": "string",
                      "metadata": {
                        "description": "Full resource ID of Azure Managed Identity to be associated with Azure Image Builder Template and helper deployment scripts"
                      }
                    },
                    "imageIdentity": {
                      "type": "string",
                      "metadata": {
                        "description": "Full resource ID of Azure Managed Identity to use when accessing Azure and Azure DevOps resources during image creation"
                      }
                    },
                    "repos": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Git repositories to clone/update and warm up"
                      }
                    },
                    "afterReposClonedArtifacts": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Artifacts to run after all repos are cloned/updated but before packages are restored and repos are built"
                      }
                    },
                    "beforeReposSetupArtifacts": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Artifacts to run before setting up repositories"
                      }
                    },
                    "additionalArtifacts": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Artifacts to run after setting up repositories"
                      }
                    },
                    "imageVersion": {
                      "type": "string",
                      "defaultValue": "[utcNow('yyyy.MMdd.HHmmss')]"
                    },
                    "baseImage": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "When this parameter is not specified, the default base image used is https://azuremarketplace.microsoft.com/en-us/marketplace/apps/microsoftvisualstudio.visualstudioplustools.\nWhen this parameter is specified, the base image is expected to be in one of the following formats:\n1) Azure Marketplace image URN in the format <publisher>:<offer>:sku>:<version> (https://learn.microsoft.com/en-us/azure/virtual-machines/windows/cli-ps-findimage#terminology)\n2) Azure Compute Gallery image resource id (see https://learn.microsoft.com/en-us/azure/virtual-machines/linux/image-builder-json?tabs=bicep%2Cazure-powershell#sharedimageversion-source)\n3) Azure Compute Gallery image name by default is assumed to be in the same resource group as the deployment\n"
                      }
                    },
                    "defenderExclusions": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Whether to add recommended Windows defender exclusions"
                      }
                    },
                    "userDefenderExclusions": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "List of directories to add to Windows Defender exclutions when user logs in for the first time. The entries can reference user specific environment variables like %USERPROFILE%, %LOCALAPPDATA%, etc"
                      }
                    },
                    "createDevDrive": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Whether to create a separate volume, format it with Dev Drive and use the volume for all repos, caches and related tools.\nRequires a compatible Win11 22H2 October 2023 or later base image.\n"
                      }
                    },
                    "devDriveOptions": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional configuration for Dev Drive."
                      }
                    },
                    "osDriveMinSizeGB": {
                      "type": "int",
                      "defaultValue": 160,
                      "metadata": {
                        "description": "The required minimum size of NTFS C: drive when a Dev Drive volume is created.\nDefaults to 160 GB. The Dev Drive will consume the rest of the space on the machine's\nmain virtual disk. This size must be 50GB or greater to contain the OS and apps.\n\nParameters osDriveMinSizeGB and imageBuildProfile.diskSize allow full control over the sizes of C: and Q: drives.\n\nNote that because the disk image's linear partition space will now contain two partitions,\nthe size of C: cannot later be expanded. This means if you are deriving your Dev Box image\nfrom one with a smaller OS drive size than you need, you need to change the base image to a\nlarger size, or create a new base image with the size you want.\nNote: This is only applicable if createDevDrive is set to true.\n"
                      }
                    },
                    "imageBuildProfile": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Custom VS SKU to use when allocating the VM for image creation"
                      }
                    },
                    "imageBuildTimeoutInMinutes": {
                      "type": "int",
                      "defaultValue": 180,
                      "metadata": {
                        "description": "Timeout in minutes for the image build process"
                      }
                    },
                    "devTools": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Configuration of developer tools. See defaultDevTools for defaults."
                      }
                    },
                    "credentialProvider": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Configuration of Azure Artifact credential providers. See defaultCredentialProvider for defaults."
                      }
                    },
                    "customMetadata": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Custom metadata for the image to write into ImageBuildReport.txt on the desktop and report in telemetry. A proposed use case is to add information about image owners, support contacts, etc."
                      }
                    },
                    "disableAllDiskWriteCacheFlushing": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Turns off disk write cache buffer flushing for 3-5% faster builds and 20-30% faster cache downloads."
                      }
                    },
                    "installLatestWinGet": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Pre-install winget during image creation and make it available to the user right away on logging in. \nBy default, winget is installed lazily after user is logged in for the first time.\nMore at https://learn.microsoft.com/en-us/windows/package-manager/winget/#install-winget\n"
                      }
                    },
                    "artifactSource": {
                      "$ref": "#/definitions/_1.artifactSource",
                      "metadata": {
                        "description": "Git repository containing artifacts to be used in the image build"
                      }
                    },
                    "printCustomizationLogLastLines": {
                      "type": "int",
                      "defaultValue": 1000,
                      "metadata": {
                        "description": "Number of lines to print from the end of the customization log. Value of -1 will print the entire log. Value of 0 will print nothing."
                      }
                    },
                    "ignoreBuildFailure": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Set to true to ignore image build failure and return through imageBuildLog the tail of the build customization log as defined by printCustomizationLogLastLines. Useful for debugging build failures."
                      }
                    }
                  },
                  "variables": {
                    "allParamsForLogging": {
                      "imageName": "[parameters('imageName')]",
                      "isBaseImage": "[parameters('isBaseImage')]",
                      "baseImage": "[parameters('baseImage')]",
                      "deploymentName": "[deployment().name]",
                      "galleryName": "[parameters('galleryName')]",
                      "galleryResourceGroup": "[parameters('galleryResourceGroup')]",
                      "gallerySubscriptionId": "[parameters('gallerySubscriptionId')]",
                      "imagePublishingProfile": "[parameters('imagePublishingProfile')]",
                      "imageGalleries": "[parameters('imageGalleries')]",
                      "targetRegions": "[parameters('targetRegions')]",
                      "builderIdentity": "[parameters('builderIdentity')]",
                      "imageIdentity": "[parameters('imageIdentity')]",
                      "repos": "[parameters('repos')]",
                      "afterReposClonedArtifacts": "[parameters('afterReposClonedArtifacts')]",
                      "beforeReposSetupArtifacts": "[parameters('beforeReposSetupArtifacts')]",
                      "additionalArtifacts": "[parameters('additionalArtifacts')]",
                      "imageVersion": "[parameters('imageVersion')]",
                      "defenderExclusions": "[parameters('defenderExclusions')]",
                      "userDefenderExclusions": "[parameters('userDefenderExclusions')]",
                      "createDevDrive": "[parameters('createDevDrive')]",
                      "devDriveOptions": "[parameters('devDriveOptions')]",
                      "osDriveMinSizeGB": "[parameters('osDriveMinSizeGB')]",
                      "imageBuildProfile": "[parameters('imageBuildProfile')]",
                      "devTools": "[parameters('devTools')]",
                      "installLatestWinGet": "[parameters('installLatestWinGet')]",
                      "credentialProvider": "[parameters('credentialProvider')]",
                      "customMetadata": "[parameters('customMetadata')]",
                      "disableAllDiskWriteCacheFlushing": "[parameters('disableAllDiskWriteCacheFlushing')]",
                      "artifactSource": "[parameters('artifactSource')]",
                      "printCustomizationLogLastLines": "[parameters('printCustomizationLogLastLines')]",
                      "ignoreBuildFailure": "[parameters('ignoreBuildFailure')]"
                    },
                    "defaultDevTools": {
                      "VisualStudioSKU": "Enterprise",
                      "VisualStudioWorkloads": "minimal",
                      "VisualStudioBootstrapperURL": "https://aka.ms/vs/17/release/vs_Enterprise.exe",
                      "AlwaysInstallVisualStudio": false
                    },
                    "defaultCredentialProvider": {
                      "version": "",
                      "installNet6": true,
                      "msal": true,
                      "canShowDialog": true
                    },
                    "createSeparateSourcesDrive": "[parameters('createDevDrive')]",
                    "devToolsWithDefaults": "[union(variables('defaultDevTools'), parameters('devTools'))]",
                    "credentialProviderWithDefaults": "[union(variables('defaultCredentialProvider'), parameters('credentialProvider'))]"
                  },
                  "resources": {
                    "config": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('config-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "createSeparateSourcesDrive": {
                            "value": "[variables('createSeparateSourcesDrive')]"
                          },
                          "imageBuildProfile": {
                            "value": "[parameters('imageBuildProfile')]"
                          },
                          "baseImage": {
                            "value": "[parameters('baseImage')]"
                          },
                          "galleryName": {
                            "value": "[parameters('galleryName')]"
                          },
                          "galleryResourceGroup": {
                            "value": "[parameters('galleryResourceGroup')]"
                          },
                          "gallerySubscriptionId": {
                            "value": "[parameters('gallerySubscriptionId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.92.45157",
                              "templateHash": "17857372973883463269"
                            }
                          },
                          "parameters": {
                            "imageBuildProfile": {
                              "type": "object"
                            },
                            "createSeparateSourcesDrive": {
                              "type": "bool"
                            },
                            "baseImage": {
                              "type": "string"
                            },
                            "galleryName": {
                              "type": "string"
                            },
                            "galleryResourceGroup": {
                              "type": "string"
                            },
                            "gallerySubscriptionId": {
                              "type": "string"
                            },
                            "ntfsDriveRoot": {
                              "type": "string",
                              "defaultValue": "C:\\"
                            },
                            "sourcesDriveRoot": {
                              "type": "string",
                              "defaultValue": "[if(parameters('createSeparateSourcesDrive'), 'Q:\\', parameters('ntfsDriveRoot'))]"
                            }
                          },
                          "variables": {
                            "sourcesDirWithoutDriveLetter": "src",
                            "sourcesDir": "[format('{0}{1}', parameters('sourcesDriveRoot'), variables('sourcesDirWithoutDriveLetter'))]",
                            "shortcutDriveRoot": "[parameters('sourcesDriveRoot')]",
                            "baseImageDefault": "MicrosoftVisualStudio:visualstudioplustools:vs-2022-ent-general-win11-m365-gen2:latest",
                            "defaultImageBuildProfile": {
                              "diskSize": 512,
                              "sku": "Standard_D2_v4"
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "ntfsDriveRoot": {
                              "type": "string",
                              "value": "[parameters('ntfsDriveRoot')]"
                            },
                            "sourcesDriveRoot": {
                              "type": "string",
                              "value": "[parameters('sourcesDriveRoot')]"
                            },
                            "shortcutDriveRoot": {
                              "type": "string",
                              "value": "[variables('shortcutDriveRoot')]"
                            },
                            "sourcesDirWithoutDriveLetter": {
                              "type": "string",
                              "value": "[variables('sourcesDirWithoutDriveLetter')]"
                            },
                            "defenderExclusionPathList": {
                              "type": "string",
                              "value": "[variables('sourcesDir')]"
                            },
                            "ntfsSourcesDirExclusionPath": {
                              "type": "string",
                              "value": "[format('{0}{1}', parameters('ntfsDriveRoot'), variables('sourcesDirWithoutDriveLetter'))]"
                            },
                            "toolsRoot": {
                              "type": "string",
                              "value": "[format('{0}.tools', parameters('sourcesDriveRoot'))]"
                            },
                            "baseImageFull": {
                              "type": "string",
                              "value": "[if(empty(parameters('baseImage')), variables('baseImageDefault'), if(or(contains(parameters('baseImage'), '/'), contains(parameters('baseImage'), ':')), parameters('baseImage'), format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Compute/galleries/{2}/images/{3}/versions/latest', parameters('gallerySubscriptionId'), parameters('galleryResourceGroup'), parameters('galleryName'), parameters('baseImage'))))]"
                            },
                            "imageBuildProfile": {
                              "type": "object",
                              "value": "[union(variables('defaultImageBuildProfile'), parameters('imageBuildProfile'))]"
                            }
                          }
                        }
                      }
                    },
                    "devtools": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('devtools-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "devTools": {
                            "value": "[variables('devToolsWithDefaults')]"
                          },
                          "imageContainsLatestVisualStudio": {
                            "value": "[or(startsWith(reference('config').outputs.baseImageFull.value, 'MicrosoftVisualStudio:visualstudio2022:'), startsWith(reference('config').outputs.baseImageFull.value, 'MicrosoftVisualStudio:visualstudioplustools:vs-2022'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.92.45157",
                              "templateHash": "1599127666886005263"
                            }
                          },
                          "parameters": {
                            "devTools": {
                              "type": "object"
                            },
                            "imageContainsLatestVisualStudio": {
                              "type": "bool"
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "installOnce": {
                              "type": "array",
                              "value": "[concat(createArray(createObject('name', 'windows-vscodeinstall'), createObject('name', 'windows-sysinternals-suite', 'Parameters', createObject('AddShortcuts', true()))), if(or(parameters('devTools').AlwaysInstallVisualStudio, not(parameters('imageContainsLatestVisualStudio'))), createArray(createObject('Name', 'windows-visualstudio-bootstrapper', 'Parameters', union(createObject('Workloads', parameters('devTools').VisualStudioWorkloads, 'SKU', parameters('devTools').VisualStudioSKU, 'VSBootstrapperURL', parameters('devTools').VisualStudioBootstrapperURL), if(not(empty(tryGet(parameters('devTools'), 'VisualStudioInstallationDirectory'))), createObject('InstallationDirectory', parameters('devTools').VisualStudioInstallationDirectory), createObject()))), createObject('name', 'WindowsRestart')), createArray()))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "config"
                      ]
                    },
                    "repoArtifacts": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('repoArtifacts-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "ntfsDriveRoot": {
                            "value": "[reference('config').outputs.ntfsDriveRoot.value]"
                          },
                          "sourcesDriveRoot": {
                            "value": "[reference('config').outputs.sourcesDriveRoot.value]"
                          },
                          "sourcesDirWithoutDriveLetter": {
                            "value": "[reference('config').outputs.sourcesDirWithoutDriveLetter.value]"
                          },
                          "toolsRoot": {
                            "value": "[reference('config').outputs.toolsRoot.value]"
                          },
                          "credentialProvider": {
                            "value": "[variables('credentialProviderWithDefaults')]"
                          },
                          "repos": {
                            "value": "[parameters('repos')]"
                          },
                          "shortcutDriveRoot": {
                            "value": "[reference('config').outputs.shortcutDriveRoot.value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.92.45157",
                              "templateHash": "9198691132934965703"
                            }
                          },
                          "parameters": {
                            "ntfsDriveRoot": {
                              "type": "string"
                            },
                            "sourcesDriveRoot": {
                              "type": "string"
                            },
                            "sourcesDirWithoutDriveLetter": {
                              "type": "string"
                            },
                            "shortcutDriveRoot": {
                              "type": "string"
                            },
                            "toolsRoot": {
                              "type": "string"
                            },
                            "credentialProvider": {
                              "type": "object"
                            },
                            "repos": {
                              "type": "array",
                              "defaultValue": []
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "reposWithDefaults",
                                "count": "[length(parameters('repos'))]",
                                "input": {
                                  "Url": "[parameters('repos')[copyIndex('reposWithDefaults')].Url]",
                                  "SourceControl": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'SourceControl'), 'git')]",
                                  "Branch": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'Branch'), '')]",
                                  "Commit": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'Commit'), '')]",
                                  "Kind": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'Kind'), 'Data')]",
                                  "RestoreScriptEnvVars": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'RestoreScriptEnvVars'), createObject())]",
                                  "RestoreScript": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'RestoreScript'), '')]",
                                  "AdditionalRepoFeeds": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'AdditionalRepoFeeds'), createArray())]",
                                  "Build": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'Build'), createObject())]",
                                  "HistoryDepth": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'HistoryDepth'), 0)]",
                                  "DesktopShortcutEnableStr": "[if(contains(parameters('repos')[copyIndex('reposWithDefaults')], 'DesktopShortcutEnable'), format('{0}', parameters('repos')[copyIndex('reposWithDefaults')].DesktopShortcutEnable), '')]",
                                  "DesktopShortcutScriptPath": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'DesktopShortcutScriptPath'), '')]",
                                  "DesktopShortcutRunAsAdmin": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'DesktopShortcutRunAsAdmin'), false())]",
                                  "DesktopShortcutIconPath": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'DesktopShortcutIconPath'), '')]",
                                  "DesktopShortcutName": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'DesktopShortcutName'), '')]",
                                  "EnableGitCommitGraph": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'EnableGitCommitGraph'), true())]",
                                  "SparseCheckoutFolders": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'SparseCheckoutFolders'), createArray())]",
                                  "RecurseSubmodules": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'RecurseSubmodules'), false())]",
                                  "AvoidDevDrive": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'AvoidDevDrive'), false())]",
                                  "RepoRootWithoutDriveLetter": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'RepoRootWithoutDriveLetter'), '')]",
                                  "CustomScript": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'CustomScript'), '')]",
                                  "PackagesFeed": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'PackagesFeed'), '')]"
                                }
                              }
                            ],
                            "avoidDevDriveRepos": "[filter(variables('reposWithDefaults'), lambda('repo', equals(lambdaVariables('repo').AvoidDevDrive, true())))]"
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "modules",
                                "count": "[length(variables('reposWithDefaults'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('artifacts-repo-{0}-{1}', copyIndex(), uniqueString(deployment().name, resourceGroup().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "sourcesDriveRoot": {
                                    "value": "[parameters('sourcesDriveRoot')]"
                                  },
                                  "sourcesDirWithoutDriveLetter": {
                                    "value": "[parameters('sourcesDirWithoutDriveLetter')]"
                                  },
                                  "shortcutDriveRoot": {
                                    "value": "[parameters('shortcutDriveRoot')]"
                                  },
                                  "ntfsDriveRoot": {
                                    "value": "[parameters('ntfsDriveRoot')]"
                                  },
                                  "avoidDevDrive": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].AvoidDevDrive]"
                                  },
                                  "repoRootWithoutDriveLetter": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].RepoRootWithoutDriveLetter]"
                                  },
                                  "repoUrl": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].Url]"
                                  },
                                  "repoSourceControl": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].SourceControl]"
                                  },
                                  "repoBranch": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].Branch]"
                                  },
                                  "repoCommit": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].Commit]"
                                  },
                                  "repoKind": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].Kind]"
                                  },
                                  "customScript": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].CustomScript]"
                                  },
                                  "restoreScriptEnvVars": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].RestoreScriptEnvVars]"
                                  },
                                  "restoreScript": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].RestoreScript]"
                                  },
                                  "packagesFeed": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].PackagesFeed]"
                                  },
                                  "additionalRepoFeeds": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].AdditionalRepoFeeds]"
                                  },
                                  "build": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].Build]"
                                  },
                                  "historyDepth": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].HistoryDepth]"
                                  },
                                  "desktopShortcutEnable": "[if(empty(variables('reposWithDefaults')[copyIndex()].DesktopShortcutEnableStr), createObject('value', not(equals(variables('reposWithDefaults')[copyIndex()].Kind, 'Data'))), createObject('value', bool(variables('reposWithDefaults')[copyIndex()].DesktopShortcutEnableStr)))]",
                                  "desktopShortcutScriptPath": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].DesktopShortcutScriptPath]"
                                  },
                                  "desktopShortcutRunAsAdmin": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].DesktopShortcutRunAsAdmin]"
                                  },
                                  "desktopShortcutIconPath": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].DesktopShortcutIconPath]"
                                  },
                                  "desktopShortcutName": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].DesktopShortcutName]"
                                  },
                                  "enableGitCommitGraph": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].EnableGitCommitGraph]"
                                  },
                                  "recurseSubmodules": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].RecurseSubmodules]"
                                  },
                                  "sparseCheckoutFolders": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].SparseCheckoutFolders]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.31.92.45157",
                                      "templateHash": "1673860177138827114"
                                    }
                                  },
                                  "definitions": {
                                    "SourceControl": {
                                      "type": "string",
                                      "allowedValues": [
                                        "git",
                                        "gvfs"
                                      ]
                                    }
                                  },
                                  "parameters": {
                                    "sourcesDriveRoot": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "C:\\ or Q:\\ - drive where by default cloned repos are placed"
                                      }
                                    },
                                    "sourcesDirWithoutDriveLetter": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Always \"src\" - root where by default cloned repos are placed, without drive letter and leading or trailing slashes"
                                      }
                                    },
                                    "shortcutDriveRoot": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "C:\\ or Q:\\ - drive where by default cloned repos will be located when user logs in"
                                      }
                                    },
                                    "avoidDevDrive": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Always place the repo on NTFS - used when the repo doesn't support Dev Drive"
                                      }
                                    },
                                    "ntfsDriveRoot": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Always C:\\ - drive where to clone a repo if the code drive should be avoided"
                                      }
                                    },
                                    "repoRootWithoutDriveLetter": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Repo root path without drive letter and leading or trailing slashes."
                                      }
                                    },
                                    "repoUrl": {
                                      "type": "string"
                                    },
                                    "repoSourceControl": {
                                      "$ref": "#/definitions/SourceControl",
                                      "metadata": {
                                        "description": "The source control system of the repository."
                                      }
                                    },
                                    "repoBranch": {
                                      "type": "string"
                                    },
                                    "repoCommit": {
                                      "type": "string"
                                    },
                                    "restoreScriptEnvVars": {
                                      "type": "object"
                                    },
                                    "restoreScript": {
                                      "type": "string"
                                    },
                                    "additionalRepoFeeds": {
                                      "type": "array"
                                    },
                                    "build": {
                                      "type": "object"
                                    },
                                    "historyDepth": {
                                      "type": "int"
                                    },
                                    "desktopShortcutEnable": {
                                      "type": "bool"
                                    },
                                    "desktopShortcutScriptPath": {
                                      "type": "string"
                                    },
                                    "desktopShortcutRunAsAdmin": {
                                      "type": "bool"
                                    },
                                    "desktopShortcutIconPath": {
                                      "type": "string"
                                    },
                                    "desktopShortcutName": {
                                      "type": "string"
                                    },
                                    "recurseSubmodules": {
                                      "type": "bool"
                                    },
                                    "enableGitCommitGraph": {
                                      "type": "bool"
                                    },
                                    "sparseCheckoutFolders": {
                                      "type": "array"
                                    },
                                    "packagesFeed": {
                                      "type": "string"
                                    },
                                    "customScript": {
                                      "type": "string"
                                    },
                                    "repoKind": {
                                      "type": "string",
                                      "allowedValues": [
                                        "MSBuild",
                                        "Custom",
                                        "Data"
                                      ],
                                      "metadata": {
                                        "description": " Supported repository types:\n- MSBuild - Microsoft public build engine that is integrated with Nuget ecosystem.\n- Custom - any other build environment that doesn't fit into either of the two above.\n- Data - the repo should be simply cloned but no other processing for it is needed.\n"
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "setTempEnvVars",
                                        "count": "[length(items(parameters('restoreScriptEnvVars')))]",
                                        "input": {
                                          "name": "windows-setenvvar",
                                          "parameters": {
                                            "Variable": "[items(parameters('restoreScriptEnvVars'))[copyIndex('setTempEnvVars')].key]",
                                            "Value": "[items(parameters('restoreScriptEnvVars'))[copyIndex('setTempEnvVars')].value]",
                                            "PrintValue": "true"
                                          }
                                        }
                                      },
                                      {
                                        "name": "unsetTempEnvVars",
                                        "count": "[length(items(parameters('restoreScriptEnvVars')))]",
                                        "input": {
                                          "name": "windows-unsetenvvar",
                                          "parameters": {
                                            "Variable": "[items(parameters('restoreScriptEnvVars'))[copyIndex('unsetTempEnvVars')].key]"
                                          }
                                        }
                                      }
                                    ],
                                    "repoName": "[last(split(parameters('repoUrl'), '/'))]",
                                    "repoDriveRoot": "[if(parameters('avoidDevDrive'), parameters('ntfsDriveRoot'), parameters('sourcesDriveRoot'))]",
                                    "repoRootDir": "[if(empty(parameters('repoRootWithoutDriveLetter')), format('{0}{1}\\{2}', variables('repoDriveRoot'), parameters('sourcesDirWithoutDriveLetter'), variables('repoName')), format('{0}{1}', variables('repoDriveRoot'), parameters('repoRootWithoutDriveLetter')))]",
                                    "repoShortcutDriveRoot": "[if(parameters('avoidDevDrive'), parameters('ntfsDriveRoot'), parameters('shortcutDriveRoot'))]",
                                    "repoShortcutDir": "[if(empty(parameters('repoRootWithoutDriveLetter')), format('{0}{1}\\{2}', variables('repoShortcutDriveRoot'), parameters('sourcesDirWithoutDriveLetter'), variables('repoName')), format('{0}{1}', variables('repoShortcutDriveRoot'), parameters('repoRootWithoutDriveLetter')))]",
                                    "codeRepoArtifacts": [
                                      {
                                        "name": "windows-dotnetcore-sdk",
                                        "parameters": {
                                          "globalJsonFilePath": "[format('{0}\\global.json', variables('repoRootDir'))]"
                                        }
                                      },
                                      {
                                        "name": "windows-install-dotnet-sdk",
                                        "parameters": {
                                          "globalJsonPath": "[format('{0}\\global.json', variables('repoRootDir'))]"
                                        }
                                      }
                                    ],
                                    "cloneSubmodulesArg": "[if(parameters('recurseSubmodules'), '--recurse-submodules --shallow-submodules', '')]",
                                    "optionalCloningParameters": "[if(greater(parameters('historyDepth'), 0), format('--depth {0} --no-single-branch --no-tags {1}', parameters('historyDepth'), variables('cloneSubmodulesArg')), format('{0}', variables('cloneSubmodulesArg')))]",
                                    "fetchSubmodulesArg": "[if(parameters('recurseSubmodules'), '--recurse-submodules', '')]",
                                    "optionalFetchParameters": "[if(greater(parameters('historyDepth'), 0), format('--no-tags {0}', variables('fetchSubmodulesArg')), format('{0}', variables('fetchSubmodulesArg')))]",
                                    "syncRepo": {
                                      "name": "windows-clone-update-repo",
                                      "parameters": "[union(createObject('RepoUrl', parameters('repoUrl'), 'Repository_SourceControl', parameters('repoSourceControl'), 'Repository_TargetDirectory', variables('repoRootDir'), 'Repository_cloneIfNotExists', 'true', 'Repository_optionalCloningParameters', variables('optionalCloningParameters'), 'Repository_optionalFetchParameters', variables('optionalFetchParameters'), 'CommitId', if(not(empty(parameters('repoCommit'))), parameters('repoCommit'), 'latest'), 'EnableGitCommitGraph', parameters('enableGitCommitGraph')), if(not(empty(parameters('repoBranch'))), createObject('BranchName', parameters('repoBranch')), createObject()), if(not(empty(parameters('sparseCheckoutFolders'))), createObject('SparseCheckoutFolders', join(parameters('sparseCheckoutFolders'), ',')), createObject()))]"
                                    },
                                    "buildRepoArtifact": "[if(and(equals(parameters('repoKind'), 'MSBuild'), or(not(contains(parameters('build'), 'Disable')), not(parameters('build').Disable))), createArray(createObject('name', 'windows-build-repo', 'parameters', union(createObject('RepoRoot', variables('repoRootDir')), if(not(empty(parameters('additionalRepoFeeds'))), createObject('AdditionalRepoFeeds', join(parameters('additionalRepoFeeds'), ',')), createObject()), if(contains(parameters('build'), 'InitBuildScript'), createObject('InitBuildScript', parameters('build').InitBuildScript), createObject()), if(contains(parameters('build'), 'RunBuildScript'), createObject('RunBuildScript', parameters('build').RunBuildScript), createObject()), if(contains(parameters('build'), 'AdditionalBuildArguments'), createObject('AdditionalBuildArguments', parameters('build').AdditionalBuildArguments), createObject()), if(contains(parameters('build'), 'Dirs'), createObject('Dirs', join(parameters('build').Dirs, ',')), createObject())))), createArray())]",
                                    "createDevEnvShortCut": [
                                      {
                                        "name": "windows-create-devenv-shortcut",
                                        "parameters": "[union(createObject('RepoRoot', variables('repoShortcutDir'), 'RepoKind', parameters('repoKind'), 'ShortcutRunAsAdmin', parameters('desktopShortcutRunAsAdmin')), if(not(empty(parameters('desktopShortcutScriptPath'))), createObject('DesktopShortcutScriptPath', parameters('desktopShortcutScriptPath')), createObject()), if(not(empty(parameters('desktopShortcutIconPath'))), createObject('DesktopShortcutIconPath', parameters('desktopShortcutIconPath')), createObject()), if(not(empty(parameters('desktopShortcutName'))), createObject('DesktopShortcutName', parameters('desktopShortcutName')), createObject()))]"
                                      }
                                    ]
                                  },
                                  "resources": {
                                    "msbuildRepo": {
                                      "condition": "[equals(parameters('repoKind'), 'MSBuild')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('msbuildRepo-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "repoRootDir": {
                                            "value": "[variables('repoRootDir')]"
                                          },
                                          "restoreScript": {
                                            "value": "[parameters('restoreScript')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.31.92.45157",
                                              "templateHash": "11638459210006134548"
                                            }
                                          },
                                          "parameters": {
                                            "repoRootDir": {
                                              "type": "string"
                                            },
                                            "restoreScript": {
                                              "type": "string"
                                            }
                                          },
                                          "variables": {
                                            "restorePackages": [
                                              {
                                                "name": "windows-msbuild-env-invokecommand",
                                                "parameters": {
                                                  "RepoRoot": "[parameters('repoRootDir')]",
                                                  "Script": "[if(empty(parameters('restoreScript')), 'msbuild /t:restore', parameters('restoreScript'))]"
                                                }
                                              }
                                            ]
                                          },
                                          "resources": [],
                                          "outputs": {
                                            "artifacts": {
                                              "type": "array",
                                              "value": "[variables('restorePackages')]"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "customBuildRepo": {
                                      "condition": "[equals(parameters('repoKind'), 'Custom')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('customBuildRepo-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "repoRootDir": {
                                            "value": "[variables('repoRootDir')]"
                                          },
                                          "packagesFeed": {
                                            "value": "[parameters('packagesFeed')]"
                                          },
                                          "additionalRepoFeeds": {
                                            "value": "[parameters('additionalRepoFeeds')]"
                                          },
                                          "customScript": {
                                            "value": "[parameters('customScript')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.31.92.45157",
                                              "templateHash": "7832605977688924268"
                                            }
                                          },
                                          "parameters": {
                                            "repoRootDir": {
                                              "type": "string"
                                            },
                                            "packagesFeed": {
                                              "type": "string"
                                            },
                                            "additionalRepoFeeds": {
                                              "type": "array"
                                            },
                                            "customScript": {
                                              "type": "string"
                                            }
                                          },
                                          "resources": [],
                                          "outputs": {
                                            "artifacts": {
                                              "type": "array",
                                              "value": [
                                                {
                                                  "name": "windows-custom-build-env-invokecommand",
                                                  "parameters": "[union(createObject('RepoRoot', parameters('repoRootDir'), 'RepoPackagesFeed', parameters('packagesFeed'), 'Script', parameters('customScript')), if(not(empty(parameters('additionalRepoFeeds'))), createObject('AdditionalRepoFeeds', join(parameters('additionalRepoFeeds'), ',')), createObject()))]"
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "setupSources": {
                                      "type": "array",
                                      "value": [
                                        "[variables('syncRepo')]"
                                      ]
                                    },
                                    "warmup": {
                                      "type": "array",
                                      "value": "[concat(if(equals(parameters('repoKind'), 'MSBuild'), variables('codeRepoArtifacts'), createArray()), variables('setTempEnvVars'), if(equals(parameters('repoKind'), 'MSBuild'), reference('msbuildRepo').outputs.artifacts.value, createArray()), if(parameters('desktopShortcutEnable'), variables('createDevEnvShortCut'), createArray()), if(equals(parameters('repoKind'), 'Custom'), reference('customBuildRepo').outputs.artifacts.value, createArray()), variables('buildRepoArtifact'), variables('unsetTempEnvVars'))]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('packagesConfig-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "toolsRoot": {
                                    "value": "[parameters('toolsRoot')]"
                                  },
                                  "credentialProvider": {
                                    "value": "[parameters('credentialProvider')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.31.92.45157",
                                      "templateHash": "2688611092292562478"
                                    }
                                  },
                                  "parameters": {
                                    "toolsRoot": {
                                      "type": "string"
                                    },
                                    "credentialProvider": {
                                      "type": "object"
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "setEnvVars",
                                        "count": "[length(items(variables('envVarsToSet')))]",
                                        "input": {
                                          "name": "windows-setenvvar",
                                          "parameters": {
                                            "Variable": "[items(variables('envVarsToSet'))[copyIndex('setEnvVars')].key]",
                                            "Value": "[items(variables('envVarsToSet'))[copyIndex('setEnvVars')].value]",
                                            "PrintValue": "true"
                                          }
                                        }
                                      }
                                    ],
                                    "nugetRoot": "[format('{0}\\.nuget', parameters('toolsRoot'))]",
                                    "npmGlobalTools": "[format('{0}\\.npm-global', parameters('toolsRoot'))]",
                                    "envVarsToSet": {
                                      "NUGET_PLUGIN_PATHS": "[format('{0}\\plugins\\netfx\\CredentialProvider.Microsoft\\CredentialProvider.Microsoft.exe', variables('nugetRoot'))]",
                                      "NUGET_NETFX_PLUGIN_PATHS": "[format('{0}\\plugins\\netfx\\CredentialProvider.Microsoft\\CredentialProvider.Microsoft.exe', variables('nugetRoot'))]",
                                      "NUGET_NETCORE_PLUGIN_PATHS": "[format('{0}\\plugins\\netcore\\CredentialProvider.Microsoft\\CredentialProvider.Microsoft.dll', variables('nugetRoot'))]",
                                      "NUGET_CREDENTIALPROVIDER_MSAL_ENABLED": "[if(parameters('credentialProvider').msal, 'true', '')]",
                                      "NUGET_CREDENTIALPROVIDER_FORCE_CANSHOWDIALOG_TO": "[if(parameters('credentialProvider').canShowDialog, 'true', '')]",
                                      "NUGET_PACKAGES": "[format('{0}\\packages\\', variables('nugetRoot'))]",
                                      "NUGET_HTTP_CACHE_PATH": "[format('{0}\\v3-cache', variables('nugetRoot'))]",
                                      "NUGET_PLUGINS_CACHE_PATH": "[format('{0}\\plugins-cache', variables('nugetRoot'))]",
                                      "YARN_CACHE_FOLDER": "[format('{0}\\.yarn', parameters('toolsRoot'))]",
                                      "NPM_CONFIG_CACHE": "[format('{0}\\.npm', parameters('toolsRoot'))]",
                                      "NPM_CONFIG_PREFIX": "[variables('npmGlobalTools')]"
                                    }
                                  },
                                  "resources": [],
                                  "outputs": {
                                    "setStableEnvVars": {
                                      "type": "array",
                                      "value": "[concat(variables('setEnvVars'), createArray(createObject('name', 'windows-add-to-path', 'parameters', createObject('newPath', variables('npmGlobalTools')))))]"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "repoSetupSourcesObjects": {
                              "type": "array",
                              "copy": {
                                "count": "[length(range(0, length(parameters('repos'))))]",
                                "input": {
                                  "Artifacts": "[reference(resourceId('Microsoft.Resources/deployments', format('artifacts-repo-{0}-{1}', range(0, length(parameters('repos')))[copyIndex()], uniqueString(deployment().name, resourceGroup().name))), '2022-09-01').outputs.setupSources.value]"
                                }
                              }
                            },
                            "repoWarmupObjects": {
                              "type": "array",
                              "copy": {
                                "count": "[length(range(0, length(parameters('repos'))))]",
                                "input": {
                                  "Artifacts": "[reference(resourceId('Microsoft.Resources/deployments', format('artifacts-repo-{0}-{1}', range(0, length(parameters('repos')))[copyIndex()], uniqueString(deployment().name, resourceGroup().name))), '2022-09-01').outputs.warmup.value]"
                                }
                              }
                            },
                            "commonArtifacts": {
                              "type": "array",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('packagesConfig-{0}', uniqueString(deployment().name, resourceGroup().name))), '2022-09-01').outputs.setStableEnvVars.value]"
                            },
                            "anyAvoidDevDriveRepos": {
                              "type": "bool",
                              "value": "[greater(length(variables('avoidDevDriveRepos')), 0)]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "config"
                      ]
                    },
                    "common": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('common-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "toolsRoot": {
                            "value": "[reference('config').outputs.toolsRoot.value]"
                          },
                          "defenderExclusions": {
                            "value": "[parameters('defenderExclusions')]"
                          },
                          "userDefenderExclusions": {
                            "value": "[parameters('userDefenderExclusions')]"
                          },
                          "createDevDrive": {
                            "value": "[parameters('createDevDrive')]"
                          },
                          "devDriveOptions": {
                            "value": "[parameters('devDriveOptions')]"
                          },
                          "osDriveMinSizeGB": {
                            "value": "[parameters('osDriveMinSizeGB')]"
                          },
                          "sourcesDriveRoot": {
                            "value": "[reference('config').outputs.sourcesDriveRoot.value]"
                          },
                          "defenderExclusionPathList": "[if(and(variables('createSeparateSourcesDrive'), reference('repoArtifacts').outputs.anyAvoidDevDriveRepos.value), createObject('value', format('{0},{1}', reference('config').outputs.defenderExclusionPathList.value, reference('config').outputs.ntfsSourcesDirExclusionPath.value)), createObject('value', reference('config').outputs.defenderExclusionPathList.value))]",
                          "allParamsForLogging": {
                            "value": "[variables('allParamsForLogging')]"
                          },
                          "credentialProvider": {
                            "value": "[variables('credentialProviderWithDefaults')]"
                          },
                          "disableAllDiskWriteCacheFlushing": {
                            "value": "[parameters('disableAllDiskWriteCacheFlushing')]"
                          },
                          "installLatestWinGet": {
                            "value": "[parameters('installLatestWinGet')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.92.45157",
                              "templateHash": "10435682501394810500"
                            }
                          },
                          "parameters": {
                            "toolsRoot": {
                              "type": "string"
                            },
                            "sourcesDriveRoot": {
                              "type": "string"
                            },
                            "defenderExclusions": {
                              "type": "bool"
                            },
                            "userDefenderExclusions": {
                              "type": "array"
                            },
                            "defenderExclusionPathList": {
                              "type": "string"
                            },
                            "allParamsForLogging": {
                              "type": "object"
                            },
                            "credentialProvider": {
                              "type": "object"
                            },
                            "osDriveMinSizeGB": {
                              "type": "int"
                            },
                            "disableAllDiskWriteCacheFlushing": {
                              "type": "bool"
                            },
                            "installLatestWinGet": {
                              "type": "bool"
                            },
                            "createDevDrive": {
                              "type": "bool",
                              "metadata": {
                                "description": "This will create a separate volume, format it with Dev Drive and place all repos and caches to that volume. Requires October 2023 patched Win11-22H2 or Win11-23H2 base image."
                              }
                            },
                            "devDriveOptions": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "variables": {
                            "updateWindowsArtifact": {
                              "name": "WindowsUpdate"
                            },
                            "defaultDevDriveOptions": {
                              "EnableGVFS": false,
                              "EnableContainers": false
                            },
                            "devDriveWithDefaults": "[union(variables('defaultDevDriveOptions'), parameters('devDriveOptions'))]",
                            "optionalSetDevDriveConfiguration": "[if(and(parameters('createDevDrive'), or(variables('devDriveWithDefaults').EnableGVFS, variables('devDriveWithDefaults').EnableContainers)), createArray(createObject('name', 'windows-set-DevDriveConfiguration', 'parameters', createObject('EnableGVFS', variables('devDriveWithDefaults').EnableGVFS, 'EnableContainers', variables('devDriveWithDefaults').EnableContainers))), createArray())]",
                            "optionalInstallLatestWinGet": "[if(parameters('installLatestWinGet'), createArray(createObject('name', 'windows-install-winget')), createArray())]",
                            "optionalConfigureWinGetForUser": "[if(parameters('installLatestWinGet'), createArray(createObject('Task', 'configure-winget')), createArray())]",
                            "runBeforeAll": "[concat(createArray(createObject('name', 'windows-expandOSdisk')), createArray(variables('updateWindowsArtifact')), variables('optionalSetDevDriveConfiguration'), variables('optionalInstallLatestWinGet'), createArray(createObject('name', 'windows-disable-reservedstorage'), createObject('name', 'windows-update-settings'), createObject('Name', 'windows-powershell-invokecommand', 'Parameters', createObject('Script', 'Set-Content -Path `$env:USERPROFILE\\.curlrc -Value `\"--retry 7`\"; Get-Content -Path `$env:USERPROFILE\\.curlrc')), createObject('Name', 'windows-enable-long-paths'), createObject('Name', 'WindowsRestart')))]",
                            "optionalCreateDevDrive": "[if(parameters('createDevDrive'), createArray(createObject('Name', 'windows-create-ReFS', 'Parameters', createObject('DevBoxRefsDrive', substring(parameters('sourcesDriveRoot'), 0, 1), 'OsDriveMinSizeGB', parameters('osDriveMinSizeGB'), 'IsDevDrive', parameters('createDevDrive')))), createArray())]",
                            "optionalDisableAllDiskWriteCacheFlushing": "[if(parameters('disableAllDiskWriteCacheFlushing'), createArray(createObject('Name', 'windows-disable-write-cache-flushing')), createArray())]",
                            "runInstalls": [
                              {
                                "name": "windows-gitinstall",
                                "parameters": {
                                  "SetCredHelper": "true"
                                }
                              },
                              {
                                "name": "windows-install-artifacts-credprovider",
                                "parameters": {
                                  "addNetFx": "true",
                                  "installNet6": "[parameters('credentialProvider').installNet6]",
                                  "version": "[parameters('credentialProvider').version]",
                                  "optionalCopyNugetPluginsRoot": "[parameters('toolsRoot')]"
                                }
                              }
                            ],
                            "optionalDefenderExclusions": "[if(parameters('defenderExclusions'), createArray(createObject('name', 'windows-defender-exclusions', 'parameters', createObject('ExclusionPaths', parameters('defenderExclusionPathList')))), createArray())]",
                            "userDefenderTaskId": "[uniqueString(reduce(parameters('userDefenderExclusions'), '', lambda('cur', 'next', format('{0}{1}', lambdaVariables('cur'), lambdaVariables('next')))))]",
                            "userDefenderLogonTasks": "[if(empty(parameters('userDefenderExclusions')), createArray(), createArray(createObject('Task', 'add-defender-exclusions', 'UniqueID', format('defender-exclusions-{0}', variables('userDefenderTaskId')), 'Parameters', createObject('DirsToExclude', parameters('userDefenderExclusions')))))]",
                            "codeDriveUserLogonTasksAssignUnallocatedSpaceAndReassignDriveLetter": "[if(parameters('createDevDrive'), createArray(createObject('Task', 'assign-unallocated-space', 'Parameters', createObject('DriveLetter', 'D')), createObject('Task', 'remap-code-drive', 'Parameters', createObject('ToDriveLetter', substring(parameters('sourcesDriveRoot'), 0, 1)))), createArray())]",
                            "addUserProfileDefenderExclusionsTask": "[if(parameters('defenderExclusions'), createArray(createObject('Task', 'add-defender-exclusions', 'UniqueID', 'defender-exclusions-msbuild', 'Parameters', createObject('DirsToExclude', createArray('%TEMP%\\NuGetScratch', '%TEMP%\\MSBuildTemp%USERNAME%')))), createArray())]",
                            "firstLogonTasks": "[concat(variables('codeDriveUserLogonTasksAssignUnallocatedSpaceAndReassignDriveLetter'), variables('userDefenderLogonTasks'), variables('addUserProfileDefenderExclusionsTask'), variables('optionalConfigureWinGetForUser'))]",
                            "disableOneDriveDesktopSync": [
                              {
                                "name": "windows-configure-onedrive-sync"
                              }
                            ],
                            "runAfterAll": "[concat(createArray(createObject('name', 'windows-imagelog', 'Parameters', createObject('BicepInfo', base64(string(parameters('allParamsForLogging'))))), createObject('name', 'windows-enable-optionalfeatures', 'Parameters', createObject('FeatureName', 'VirtualMachinePlatform')), createObject('name', 'windows-configure-user-tasks', 'parameters', createObject('FirstLogonTasksBase64', base64(string(variables('firstLogonTasks'))))), variables('updateWindowsArtifact')), variables('disableOneDriveDesktopSync'), createArray(createObject('name', 'windows-prepare-for-sysprep')))]"
                          },
                          "resources": [],
                          "outputs": {
                            "artifacts": {
                              "type": "object",
                              "value": {
                                "runBeforeAll": "[variables('runBeforeAll')]",
                                "optionalCreateDevDrive": "[variables('optionalCreateDevDrive')]",
                                "optionalDisableAllDiskWriteCacheFlushing": "[variables('optionalDisableAllDiskWriteCacheFlushing')]",
                                "runInstalls": "[variables('runInstalls')]",
                                "optionalDefenderExclusions": "[variables('optionalDefenderExclusions')]",
                                "runAfterAll": "[variables('runAfterAll')]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "config",
                        "repoArtifacts"
                      ]
                    },
                    "publishProfile": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('publishProfile-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "imageName": {
                            "value": "[parameters('imageName')]"
                          },
                          "galleryName": {
                            "value": "[parameters('galleryName')]"
                          },
                          "galleryResourceGroup": {
                            "value": "[parameters('galleryResourceGroup')]"
                          },
                          "gallerySubscriptionId": {
                            "value": "[parameters('gallerySubscriptionId')]"
                          },
                          "imageGalleries": {
                            "value": "[parameters('imageGalleries')]"
                          },
                          "targetRegions": {
                            "value": "[parameters('targetRegions')]"
                          },
                          "imagePublishingProfile": {
                            "value": "[parameters('imagePublishingProfile')]"
                          },
                          "isBaseImage": {
                            "value": "[parameters('isBaseImage')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.92.45157",
                              "templateHash": "5528598909137715190"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "imageName": {
                              "type": "string"
                            },
                            "isBaseImage": {
                              "type": "bool"
                            },
                            "galleryName": {
                              "type": "string"
                            },
                            "galleryResourceGroup": {
                              "type": "string"
                            },
                            "gallerySubscriptionId": {
                              "type": "string"
                            },
                            "imageGalleries": {
                              "type": "array"
                            },
                            "targetRegions": {
                              "type": "array"
                            },
                            "imagePublishingProfile": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "imageGalleriesFinal",
                                "count": "[length(variables('imageGalleriesRaw'))]",
                                "input": {
                                  "galleryName": "[variables('imageGalleriesRaw')[copyIndex('imageGalleriesFinal')].galleryName]",
                                  "gallerySubscriptionId": "[coalesce(tryGet(variables('imageGalleriesRaw')[copyIndex('imageGalleriesFinal')], 'gallerySubscriptionId'), parameters('gallerySubscriptionId'))]",
                                  "galleryResourceGroup": "[coalesce(tryGet(variables('imageGalleriesRaw')[copyIndex('imageGalleriesFinal')], 'galleryResourceGroup'), parameters('galleryResourceGroup'))]"
                                }
                              }
                            ],
                            "imageGalleriesRaw": "[if(not(empty(parameters('imageGalleries'))), parameters('imageGalleries'), createArray(createObject('galleryName', parameters('galleryName'), 'gallerySubscriptionId', parameters('gallerySubscriptionId'), 'galleryResourceGroup', parameters('galleryResourceGroup'))))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('publishGalleries-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "imageGalleries": {
                                    "value": "[variables('imageGalleriesFinal')]"
                                  },
                                  "imageName": {
                                    "value": "[parameters('imageName')]"
                                  },
                                  "isBaseImage": {
                                    "value": "[parameters('isBaseImage')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.31.92.45157",
                                      "templateHash": "7441545288708978846"
                                    }
                                  },
                                  "parameters": {
                                    "imageName": {
                                      "type": "string"
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]"
                                    },
                                    "isBaseImage": {
                                      "type": "bool"
                                    },
                                    "imageGalleries": {
                                      "type": "array",
                                      "defaultValue": []
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "modules",
                                        "count": "[length(parameters('imageGalleries'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('publish-gallery-{0}-{1}', copyIndex(), uniqueString(deployment().name, resourceGroup().name))]",
                                      "subscriptionId": "[parameters('imageGalleries')[copyIndex()].gallerySubscriptionId]",
                                      "resourceGroup": "[parameters('imageGalleries')[copyIndex()].galleryResourceGroup]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "galleryName": {
                                            "value": "[parameters('imageGalleries')[copyIndex()].galleryName]"
                                          },
                                          "imageName": {
                                            "value": "[parameters('imageName')]"
                                          },
                                          "isBaseImage": {
                                            "value": "[parameters('isBaseImage')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.31.92.45157",
                                              "templateHash": "7351638362435420561"
                                            }
                                          },
                                          "parameters": {
                                            "galleryName": {
                                              "type": "string"
                                            },
                                            "imageName": {
                                              "type": "string"
                                            },
                                            "isBaseImage": {
                                              "type": "bool"
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]"
                                            }
                                          },
                                          "variables": {
                                            "imageDefinitionProperties": {
                                              "hyperVGeneration": "V2",
                                              "architecture": "x64",
                                              "features": [
                                                {
                                                  "name": "SecurityType",
                                                  "value": "[if(parameters('isBaseImage'), 'TrustedLaunchSupported', 'TrustedLaunch')]"
                                                },
                                                {
                                                  "name": "IsHibernateSupported",
                                                  "value": "true"
                                                }
                                              ],
                                              "osType": "Windows",
                                              "osState": "Generalized",
                                              "identifier": {
                                                "publisher": "AzureQuickstarts",
                                                "offer": "DevBox",
                                                "sku": "[parameters('imageName')]"
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "condition": "[not(empty(parameters('galleryName')))]",
                                              "type": "Microsoft.Compute/galleries/images",
                                              "apiVersion": "2023-07-03",
                                              "name": "[format('{0}/{1}', parameters('galleryName'), parameters('imageName'))]",
                                              "location": "[parameters('location')]",
                                              "properties": "[variables('imageDefinitionProperties')]"
                                            }
                                          ],
                                          "outputs": {
                                            "computeGalleryId": {
                                              "type": "string",
                                              "value": "[if(empty(parameters('galleryName')), '', resourceId('Microsoft.Compute/galleries/images', parameters('galleryName'), parameters('imageName')))]"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "galleryIds": {
                                      "type": "array",
                                      "copy": {
                                        "count": "[length(range(0, length(parameters('imageGalleries'))))]",
                                        "input": {
                                          "Id": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('imageGalleries')[copyIndex()].gallerySubscriptionId, parameters('imageGalleries')[copyIndex()].galleryResourceGroup), 'Microsoft.Resources/deployments', format('publish-gallery-{0}-{1}', range(0, length(parameters('imageGalleries')))[copyIndex()], uniqueString(deployment().name, resourceGroup().name))), '2022-09-01').outputs.computeGalleryId.value]"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "publishingProfile": {
                              "type": "object",
                              "value": "[union(union(createObject('targetRegions', if(empty(parameters('targetRegions')), createArray(createObject('name', parameters('location'), 'replicas', 1)), map(parameters('targetRegions'), lambda('targetRegion', createObject('name', lambdaVariables('targetRegion'), 'replicas', 1))))), if(not(empty(map(filter(map(reference(resourceId('Microsoft.Resources/deployments', format('publishGalleries-{0}', uniqueString(deployment().name, resourceGroup().name))), '2022-09-01').outputs.galleryIds.value, lambda('obj', lambdaVariables('obj').Id)), lambda('id', not(empty(lambdaVariables('id'))))), lambda('id', createObject('computeGalleryId', lambdaVariables('id')))))), createObject('computeGalleries', map(filter(map(reference(resourceId('Microsoft.Resources/deployments', format('publishGalleries-{0}', uniqueString(deployment().name, resourceGroup().name))), '2022-09-01').outputs.galleryIds.value, lambda('obj', lambdaVariables('obj').Id)), lambda('id', not(empty(lambdaVariables('id'))))), lambda('id', createObject('computeGalleryId', lambdaVariables('id'))))), createObject())), parameters('imagePublishingProfile'))]"
                            }
                          }
                        }
                      }
                    },
                    "aibImage": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('aibImage-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "imageName": {
                            "value": "[parameters('imageName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "builderIdentity": {
                            "value": "[parameters('builderIdentity')]"
                          },
                          "imageIdentity": {
                            "value": "[parameters('imageIdentity')]"
                          },
                          "baseImage": {
                            "value": "[reference('config').outputs.baseImageFull.value]"
                          },
                          "buildProfile": {
                            "value": "[reference('config').outputs.imageBuildProfile.value]"
                          },
                          "imageBuildTimeoutInMinutes": {
                            "value": "[parameters('imageBuildTimeoutInMinutes')]"
                          },
                          "artifacts": {
                            "value": "[concat(reference('common').outputs.artifacts.value.runBeforeAll, reference('common').outputs.artifacts.value.optionalCreateDevDrive, reference('common').outputs.artifacts.value.optionalDefenderExclusions, reference('common').outputs.artifacts.value.optionalDisableAllDiskWriteCacheFlushing, if(not(contains(reference('config').outputs.baseImageFull.value, '/providers/Microsoft.Compute/galleries/')), concat(reference('common').outputs.artifacts.value.runInstalls, reference('devtools').outputs.installOnce.value), createArray()), parameters('beforeReposSetupArtifacts'), reference('repoArtifacts').outputs.commonArtifacts.value, flatten(map(reference('repoArtifacts').outputs.repoSetupSourcesObjects.value, lambda('obj', lambdaVariables('obj').Artifacts))), parameters('afterReposClonedArtifacts'), flatten(map(reference('repoArtifacts').outputs.repoWarmupObjects.value, lambda('obj', lambdaVariables('obj').Artifacts))), parameters('additionalArtifacts'), reference('common').outputs.artifacts.value.runAfterAll)]"
                          },
                          "publishingProfile": {
                            "value": "[reference('publishProfile').outputs.publishingProfile.value]"
                          },
                          "imageVersion": {
                            "value": "[parameters('imageVersion')]"
                          },
                          "artifactSource": {
                            "value": "[parameters('artifactSource')]"
                          },
                          "printCustomizationLogLastLines": {
                            "value": "[parameters('printCustomizationLogLastLines')]"
                          },
                          "ignoreBuildFailure": {
                            "value": "[parameters('ignoreBuildFailure')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.92.45157",
                              "templateHash": "15703279216536729417"
                            }
                          },
                          "definitions": {
                            "_1.artifactSource": {
                              "type": "object",
                              "properties": {
                                "Url": {
                                  "type": "string"
                                },
                                "Branch": {
                                  "type": "string"
                                },
                                "Path": {
                                  "type": "string"
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "../exports.bicep"
                                }
                              }
                            },
                            "_1.imageResult": {
                              "type": "object",
                              "properties": {
                                "buildLog": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "stagingResourceGroupName": {
                                  "type": "string",
                                  "nullable": true
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "../exports.bicep"
                                }
                              }
                            },
                            "_1.images": {
                              "type": "object",
                              "properties": {
                                "eShop": {
                                  "$ref": "#/definitions/_1.imageSettings",
                                  "nullable": true
                                },
                                "axios": {
                                  "$ref": "#/definitions/_1.imageSettings",
                                  "nullable": true
                                },
                                "MSBuildSdks": {
                                  "$ref": "#/definitions/_1.imageSettings",
                                  "nullable": true
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "../exports.bicep"
                                }
                              }
                            },
                            "_1.imageSettings": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "baseImage": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "shouldBuild": {
                                  "type": "bool"
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "../exports.bicep"
                                }
                              }
                            },
                            "_1.results": {
                              "type": "object",
                              "properties": {
                                "eShop": {
                                  "$ref": "#/definitions/_1.imageResult"
                                },
                                "axios": {
                                  "$ref": "#/definitions/_1.imageResult"
                                },
                                "MSBuildSdks": {
                                  "$ref": "#/definitions/_1.imageResult"
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "../exports.bicep"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "guidId": {
                              "type": "string",
                              "defaultValue": "[newGuid()]"
                            },
                            "imageName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "imageVersion": {
                              "type": "string"
                            },
                            "builderIdentity": {
                              "type": "string"
                            },
                            "imageIdentity": {
                              "type": "string"
                            },
                            "baseImage": {
                              "type": "string"
                            },
                            "artifacts": {
                              "type": "array"
                            },
                            "buildProfile": {
                              "type": "object"
                            },
                            "imageBuildTimeoutInMinutes": {
                              "type": "int"
                            },
                            "publishingProfile": {
                              "type": "object"
                            },
                            "artifactSource": {
                              "$ref": "#/definitions/_1.artifactSource"
                            },
                            "printCustomizationLogLastLines": {
                              "type": "int"
                            },
                            "ignoreBuildFailure": {
                              "type": "bool"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "artifactsWithEncodedParams",
                                "count": "[length(parameters('artifacts'))]",
                                "input": {
                                  "name": "[parameters('artifacts')[copyIndex('artifactsWithEncodedParams')].name]",
                                  "runAsSystem": "[coalesce(tryGet(parameters('artifacts')[copyIndex('artifactsWithEncodedParams')], 'runAsSystem'), false())]",
                                  "paramsBase64": "[if(and(contains(parameters('artifacts')[copyIndex('artifactsWithEncodedParams')], 'parameters'), not(empty(parameters('artifacts')[copyIndex('artifactsWithEncodedParams')].parameters))), base64(string(parameters('artifacts')[copyIndex('artifactsWithEncodedParams')].parameters)), '')]"
                                }
                              },
                              {
                                "name": "artifactCustomizers",
                                "count": "[length(variables('artifactsWithEncodedParams'))]",
                                "input": "[if(equals(variables('artifactsWithEncodedParams')[copyIndex('artifactCustomizers')].name, 'WindowsUpdate'), createObject('type', 'WindowsUpdate'), if(equals(variables('artifactsWithEncodedParams')[copyIndex('artifactCustomizers')].name, 'WindowsRestart'), createObject('type', 'WindowsRestart'), createObject('type', 'PowerShell', 'runAsSystem', if(variables('artifactsWithEncodedParams')[copyIndex('artifactCustomizers')].runAsSystem, true(), null()), 'runElevated', if(variables('artifactsWithEncodedParams')[copyIndex('artifactCustomizers')].runAsSystem, true(), null()), 'name', format('RunArtifact-{0}', variables('artifactsWithEncodedParams')[copyIndex('artifactCustomizers')].name), 'validExitCodes', createArray(0), 'inline', createArray('. C:/.tools/Setup/artifacts/run-artifact.ps1', format('____Invoke-Artifact -____ArtifactName {0} -____ParamsBase64 ''{1}''', variables('artifactsWithEncodedParams')[copyIndex('artifactCustomizers')].name, variables('artifactsWithEncodedParams')[copyIndex('artifactCustomizers')].paramsBase64)))))]"
                              },
                              {
                                "name": "distribute",
                                "count": "[length(parameters('publishingProfile').computeGalleries)]",
                                "input": {
                                  "type": "SharedImage",
                                  "runOutputName": "[parameters('imageName')]",
                                  "galleryImageId": "[format('{0}/versions/{1}', parameters('publishingProfile').computeGalleries[copyIndex('distribute')].computeGalleryId, parameters('imageVersion'))]",
                                  "replicationRegions": "[variables('replicationRegions')]",
                                  "artifactTags": "[variables('tags')]"
                                }
                              }
                            ],
                            "$fxv#0": "$ErrorActionPreference = \"Stop\"\r\nSet-StrictMode -Version Latest\r\n$ProgressPreference = 'SilentlyContinue'\r\n\r\nfunction Get-ManagedIdentityAccessToken {\r\n    param(\r\n        [Parameter(Mandatory = $true)][ValidateNotNullOrEmpty()][String] $resource\r\n    )\r\n\r\n    $resourceEscaped = [uri]::EscapeDataString($resource)\r\n    $requestUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$resourceEscaped\"\r\n    Write-Host \"Retrieving access token from $requestUri\"\r\n    $response = Invoke-WebRequest -Uri $requestUri -Headers @{Metadata = \"true\" } -UseBasicParsing\r\n\r\n    if ($response.Content -imatch \"access_token\") {\r\n        $jsonContent = $response.Content | ConvertFrom-Json\r\n        $accessToken = $jsonContent.access_token\r\n    }\r\n    else {\r\n        throw \"Failed to obtain access token from $requestUri, aborting\"\r\n    }\r\n\r\n    return $accessToken\r\n}\r\n\r\nfunction Get-AzureDevOpsAccessToken {\r\n    return (Get-ManagedIdentityAccessToken '499b84ac-1321-427f-aa17-267ca6975798')\r\n}\r\n\r\n$toolsRoot = \"C:\\.tools\\Setup\"\r\nmkdir $toolsRoot -Force | Out-Null\r\n$zip = \"$toolsRoot\\artifacts.zip\"\r\n\r\nif ($scriptsRepoUrl.StartsWith('https://github.com/')) {\r\n    Write-Host \"=== Downloading artifacts from branch $scriptsRepoBranch of repo $scriptsRepoUrl\"\r\n    $requestUri = \"$scriptsRepoUrl/archive/refs/heads/$scriptsRepoBranch.zip\"\r\n    Invoke-RestMethod -Uri $requestUri -Method Get -OutFile $zip\r\n\r\n    $expandedArchiveRoot = \"$toolsRoot\\tmp\"\r\n    Write-Host \"-- Extracting to $expandedArchiveRoot\"\r\n    mkdir $expandedArchiveRoot -Force | Out-Null\r\n    Expand-Archive -Path $zip -DestinationPath $expandedArchiveRoot\r\n\r\n    $expandedScriptsPath = [IO.Path]::GetFullPath($(Join-Path $((Get-ChildItem $expandedArchiveRoot)[0].FullName) $scriptsRepoPath))\r\n    Write-Host \"-- Moving $expandedScriptsPath to $toolsRoot\"\r\n    Move-Item -Path $expandedScriptsPath -Destination $toolsRoot\r\n\r\n    Write-Host \"-- Deleting temp files\"\r\n    Remove-Item -Path $expandedArchiveRoot -Recurse -Force\r\n\r\n}\r\nelseif ($scriptsRepoUrl.StartsWith('https://dev.azure.com/')) {\r\n    Write-Host \"=== Downloading artifacts from $scriptsRepoPath of branch $scriptsRepoBranch in repo $scriptsRepoUrl\"\r\n    $requestUri = \"$scriptsRepoUrl/items?path=$scriptsRepoPath&`$format=zip&versionDescriptor.version=$scriptsRepoBranch&versionDescriptor.versionType=branch&api-version=5.0-preview.1\"\r\n    $aadToken = Get-AzureDevOpsAccessToken\r\n    Invoke-RestMethod -Uri $requestUri -Method Get -Headers @{\"Authorization\" = \"Bearer $aadToken\" } -OutFile $zip\r\n\r\n    Write-Host \"-- Extracting to $toolsRoot\"\r\n    Expand-Archive -Path $zip -DestinationPath $toolsRoot\r\n    Remove-Item -Path $zip -Force\r\n}\r\nelse {\r\n    throw \"Don't know how to download files from repo $scriptsRepoUrl\"\r\n}\r\n\r\nWrite-Host \"-- Content of $toolsRoot\"\r\nGet-ChildItem $toolsRoot -Recurse\r\n\r\nWrite-Host \"=== Completed downloading artifacts\"\r\n",
                            "$fxv#1": "$ErrorActionPreference = \"Stop\"\r\nSet-StrictMode -Version Latest\r\n$ProgressPreference = 'SilentlyContinue'\r\n\r\nfunction RunWithRetries(\r\n    [ScriptBlock] $runBlock, \r\n    [ScriptBlock] $onFailureBlock = {}, \r\n    [int] $retryAttempts = 5, \r\n    [int] $waitBeforeRetrySeconds = 5,\r\n    [bool] $ignoreFailure = $false,\r\n    [bool] $exponentialBackoff = $true\r\n) {\r\n    [int] $retriesLeft = $retryAttempts\r\n\r\n    while ($retriesLeft -ge 0) {\r\n        try {\r\n            & $runBlock\r\n            break\r\n        }\r\n        catch {\r\n            if ($retriesLeft -le 0) {\r\n                if ($onFailureBlock) {\r\n                    & $onFailureBlock\r\n                }\r\n                if ($ignoreFailure) {\r\n                    Write-Host \"[WARN] Ignoring the failure:`n$_`n$($_.ScriptStackTrace)\"\r\n                    break\r\n                }\r\n                else {\r\n                    throw\r\n                }\r\n            }\r\n            else {\r\n                if ($exponentialBackoff) {\r\n                    $totalDelay = [Math]::Pow(2, $retryAttempts - $retriesLeft) * $waitBeforeRetrySeconds\r\n                }\r\n                else {\r\n                    $totalDelay = $waitBeforeRetrySeconds\r\n                }\r\n                Write-Host \"[WARN] Attempt failed: $_. Retrying in $totalDelay seconds. Retries left: $retriesLeft\"\r\n                $retriesLeft--\r\n                Start-Sleep -Seconds $totalDelay\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                            "$fxv#2": "$ErrorActionPreference = \"Stop\"\r\nSet-StrictMode -Version Latest\r\n$ProgressPreference = 'SilentlyContinue'\r\n\r\nRunWithRetries { Connect-AzAccount -Identity | Out-Null }\r\nRunWithRetries { Install-Module -Name Az.ImageBuilder -AllowPrerelease -Force | Out-Null }\r\n\r\nWrite-Host \"=== Starting the image build\"\r\nRunWithRetries {\r\n    Invoke-AzResourceAction -ResourceName \"${env:imageTemplateName}\" -ResourceGroupName \"${env:resourceGroupName}\" -ResourceType \"Microsoft.VirtualMachineImages/imageTemplates\" -ApiVersion \"2020-02-14\" -Action Run -Force\r\n}\r\n\r\nWrite-Host \"=== Waiting for the image build to complete\"\r\n\r\n# https://learn.microsoft.com/en-us/dotnet/api/microsoft.azure.powershell.cmdlets.imagebuilder.support.runstate?view=az-ps-latest\r\n$global:status = 'UNKNOWN'\r\nwhile ($global:status -ne 'Succeeded' -and $global:status -ne 'Failed' -and $global:status -ne 'Canceled') { \r\n    Start-Sleep -Seconds 15\r\n    RunWithRetries {\r\n        $global:info = Get-AzImageBuilderTemplate -ImageTemplateName ${env:imageTemplateName} -ResourceGroupName ${env:resourceGroupName}\r\n        $global:status = $info.LastRunStatusRunState\r\n    }\r\n}\r\n\r\n$buildStatusShort = \"status '$global:status', message '$($global:info.LastRunStatusMessage)'\"\r\nWrite-Host \"=== Image build completed with $buildStatusShort\"\r\n\r\n$ignoreBuildFailure = [bool]::Parse(\"${env:ignoreBuildFailure}\")\r\nif ( (!$ignoreBuildFailure) -and ($global:status -ne 'Succeeded')) {\r\n    Start-Sleep -Seconds 15 # Appears to help with the script output being captured in full\r\n    Write-Error \"!!! [ERROR] Image build failed with $buildStatusShort\"\r\n}\r\n\r\n$printCustomizationLogLastLines = [int]::Parse(\"${env:printCustomizationLogLastLines}\")\r\nif ($printCustomizationLogLastLines -ne 0) {\r\n\r\n    $stagingResourceGroupName = ${env:stagingResourceGroupName}\r\n    $logsFile = 'customization.log'\r\n    Write-Host \"=== Looking for storage account in staging RG '$stagingResourceGroupName'\"\r\n    $stagingStorageAccountName = (Get-AzResource -ResourceGroupName $stagingResourceGroupName -ResourceType \"Microsoft.Storage/storageAccounts\")[0].Name\r\n\r\n    $stagingStorageAccountKey = $(Get-AzStorageAccountKey -StorageAccountName $stagingStorageAccountName -ResourceGroupName $stagingResourceGroupName)[0].value\r\n    $ctx = New-AzStorageContext -StorageAccountName $stagingStorageAccountName -StorageAccountKey $stagingStorageAccountKey\r\n    $logsBlob = Get-AzStorageBlob -Context $ctx -Container packerlogs | Where-Object { $_.Name -like \"*/$logsFile\" }\r\n    if ($logsBlob) {\r\n        Write-Host \"=== Downloading $logsFile from storage account '$stagingStorageAccountName'\"\r\n        Get-AzStorageBlobContent -Context $ctx -CloudBlob $logsBlob.ICloudBlob -Destination $logsFile -Force | Format-List\r\n\r\n        if ($printCustomizationLogLastLines -gt 0) {\r\n            Write-Host \"=== Last $printCustomizationLogLastLines lines of $logsFile :`n\"\r\n            Write-Host \"$(Get-Content $logsFile -Tail $printCustomizationLogLastLines | Out-String)\"\r\n        }\r\n        else {\r\n            Write-Host \"=== Content of $logsFile :`n\"\r\n            Write-Host \"$(Get-Content $logsFile | Out-String)\"\r\n        }\r\n    }\r\n    else {\r\n        Write-Host \"Could not find customization.log in storage account: $stagingStorageAccountName\"\r\n    }\r\n}\r\n\r\nWrite-Host \"=== DONE\"\r\nStart-Sleep -Seconds 15 # Appears to help with the script output being captured in full\r\n",
                            "downloadArtifactsScriptText": "[replace(variables('$fxv#0'), '\r\n', '\n')]",
                            "downloadArtifactsScriptLines": "[concat(createArray(format('$scriptsRepoUrl = ''{0}''', parameters('artifactSource').Url), format('$scriptsRepoBranch = ''{0}''', parameters('artifactSource').Branch), format('$scriptsRepoPath = ''{0}''', parameters('artifactSource').Path)), split(variables('downloadArtifactsScriptText'), '\n'))]",
                            "customizers": "[concat(createArray(createObject('type', 'PowerShell', 'name', 'EnvVarsOnStart', 'runAsSystem', false(), 'runElevated', false(), 'inline', createArray('Write-Host \"=== Environment variables on start:\"', 'Get-ChildItem Env: | Sort-Object -Property name | ForEach-Object { \"$($_.Name)=$($_.Value)\" }')), createObject('type', 'PowerShell', 'name', 'DownloadArtifacts', 'inline', variables('downloadArtifactsScriptLines'))), variables('artifactCustomizers'))]",
                            "tags": {
                              "imageName": "[parameters('imageName')]",
                              "imageTemplate": "[parameters('imageVersion')]",
                              "deploymentName": "[deployment().name]"
                            },
                            "imageTemplateName": "[format('{0}-{1}', parameters('imageName'), parameters('imageVersion'))]",
                            "stagingResourceGroupName": "[format('{0}-stg', variables('imageTemplateName'))]",
                            "baseUrnImageParts": "[split(parameters('baseImage'), ':')]",
                            "imageSource": "[if(startsWith(parameters('baseImage'), '/subscriptions/'), createObject('type', 'SharedImageVersion', 'imageVersionId', parameters('baseImage')), createObject('type', 'PlatformImage', 'publisher', variables('baseUrnImageParts')[0], 'offer', variables('baseUrnImageParts')[1], 'sku', variables('baseUrnImageParts')[2], 'version', variables('baseUrnImageParts')[3]))]",
                            "replicationRegions": "[map(parameters('publishingProfile').targetRegions, lambda('targetRegion', lambdaVariables('targetRegion').name))]",
                            "scripts": [
                              "[variables('$fxv#1')]",
                              "[variables('$fxv#2')]"
                            ]
                          },
                          "resources": {
                            "imageTemplate": {
                              "type": "Microsoft.VirtualMachineImages/imageTemplates",
                              "apiVersion": "2022-02-14",
                              "name": "[variables('imageTemplateName')]",
                              "location": "[parameters('location')]",
                              "tags": "[variables('tags')]",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', parameters('builderIdentity'))]": {}
                                }
                              },
                              "properties": {
                                "buildTimeoutInMinutes": "[parameters('imageBuildTimeoutInMinutes')]",
                                "stagingResourceGroup": "[format('{0}/resourceGroups/{1}', subscription().id, variables('stagingResourceGroupName'))]",
                                "vmProfile": {
                                  "userAssignedIdentities": [
                                    "[parameters('imageIdentity')]"
                                  ],
                                  "vmSize": "[parameters('buildProfile').sku]",
                                  "osDiskSizeGB": "[parameters('buildProfile').diskSize]"
                                },
                                "source": "[variables('imageSource')]",
                                "customize": "[variables('customizers')]",
                                "distribute": "[variables('distribute')]"
                              }
                            },
                            "buildImageTemplateScript": {
                              "type": "Microsoft.Resources/deploymentScripts",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-build', parameters('imageName'))]",
                              "location": "[parameters('location')]",
                              "tags": "[variables('tags')]",
                              "kind": "AzurePowerShell",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', parameters('builderIdentity'))]": {}
                                }
                              },
                              "properties": {
                                "forceUpdateTag": "[parameters('guidId')]",
                                "azPowerShellVersion": "9.7",
                                "environmentVariables": [
                                  {
                                    "name": "imageTemplateName",
                                    "value": "[variables('imageTemplateName')]"
                                  },
                                  {
                                    "name": "resourceGroupName",
                                    "value": "[resourceGroup().name]"
                                  },
                                  {
                                    "name": "stagingResourceGroupName",
                                    "value": "[variables('stagingResourceGroupName')]"
                                  },
                                  {
                                    "name": "ignoreBuildFailure",
                                    "value": "[format('{0}', parameters('ignoreBuildFailure'))]"
                                  },
                                  {
                                    "name": "printCustomizationLogLastLines",
                                    "value": "[format('{0}', parameters('printCustomizationLogLastLines'))]"
                                  }
                                ],
                                "scriptContent": "[join(variables('scripts'), '\n\n')]",
                                "cleanupPreference": "OnSuccess",
                                "retentionInterval": "P1D"
                              },
                              "dependsOn": [
                                "imageTemplate"
                              ]
                            },
                            "logs": {
                              "existing": true,
                              "type": "Microsoft.Resources/deploymentScripts/logs",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}/{1}', format('{0}-build', parameters('imageName')), 'default')]",
                              "dependsOn": [
                                "buildImageTemplateScript"
                              ]
                            }
                          },
                          "outputs": {
                            "imageBuildLog": {
                              "type": "string",
                              "value": "[reference('logs').log]"
                            },
                            "stagingResourceGroupName": {
                              "type": "string",
                              "value": "[variables('stagingResourceGroupName')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "common",
                        "config",
                        "devtools",
                        "publishProfile",
                        "repoArtifacts"
                      ]
                    }
                  },
                  "outputs": {
                    "imageBuildLog": {
                      "type": "string",
                      "value": "[reference('aibImage').outputs.imageBuildLog.value]"
                    },
                    "stagingResourceGroupName": {
                      "type": "string",
                      "value": "[reference('aibImage').outputs.stagingResourceGroupName.value]"
                    }
                  }
                }
              }
            }
          },
          "outputs": {
            "imageBuildLog": {
              "type": "string",
              "value": "[reference('devBoxImage').outputs.imageBuildLog.value]"
            },
            "stagingResourceGroupName": {
              "type": "string",
              "value": "[reference('devBoxImage').outputs.stagingResourceGroupName.value]"
            }
          }
        }
      }
    },
    "axios": {
      "condition": "[variables('imagesWithDefaults').axios.shouldBuild]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('axiosImg-{0}', uniqueString(deployment().name, resourceGroup().name))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "imageName": {
            "value": "[variables('imagesWithDefaults').axios.name]"
          },
          "isBaseImage": {
            "value": "[parameters('isBaseImage')]"
          },
          "baseImage": {
            "value": "[coalesce(tryGet(variables('imagesWithDefaults').axios, 'baseImage'), '')]"
          },
          "builderIdentity": {
            "value": "[parameters('builderIdentity')]"
          },
          "imageIdentity": {
            "value": "[parameters('imageIdentity')]"
          },
          "galleryName": {
            "value": "[parameters('galleryName')]"
          },
          "galleryResourceGroup": {
            "value": "[parameters('galleryResourceGroup')]"
          },
          "gallerySubscriptionId": {
            "value": "[parameters('gallerySubscriptionId')]"
          },
          "artifactSource": {
            "value": "[variables('artifactSourceWithDefaults')]"
          },
          "ignoreBuildFailure": {
            "value": "[parameters('ignoreBuildFailure')]"
          },
          "createDevDrive": {
            "value": "[parameters('createDevDrive')]"
          },
          "osDriveMinSizeGB": {
            "value": "[parameters('osDriveMinSizeGB')]"
          },
          "imageBuildProfile": {
            "value": "[parameters('imageBuildProfile')]"
          },
          "imageBuildTimeoutInMinutes": {
            "value": "[parameters('imageBuildTimeoutInMinutes')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.92.45157",
              "templateHash": "9723299501563051542"
            }
          },
          "definitions": {
            "_1.artifactSource": {
              "type": "object",
              "properties": {
                "Url": {
                  "type": "string"
                },
                "Branch": {
                  "type": "string"
                },
                "Path": {
                  "type": "string"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../exports.bicep"
                }
              }
            },
            "_1.imageResult": {
              "type": "object",
              "properties": {
                "buildLog": {
                  "type": "string",
                  "nullable": true
                },
                "stagingResourceGroupName": {
                  "type": "string",
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../exports.bicep"
                }
              }
            },
            "_1.images": {
              "type": "object",
              "properties": {
                "eShop": {
                  "$ref": "#/definitions/_1.imageSettings",
                  "nullable": true
                },
                "axios": {
                  "$ref": "#/definitions/_1.imageSettings",
                  "nullable": true
                },
                "MSBuildSdks": {
                  "$ref": "#/definitions/_1.imageSettings",
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../exports.bicep"
                }
              }
            },
            "_1.imageSettings": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true
                },
                "baseImage": {
                  "type": "string",
                  "nullable": true
                },
                "shouldBuild": {
                  "type": "bool"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../exports.bicep"
                }
              }
            },
            "_1.results": {
              "type": "object",
              "properties": {
                "eShop": {
                  "$ref": "#/definitions/_1.imageResult"
                },
                "axios": {
                  "$ref": "#/definitions/_1.imageResult"
                },
                "MSBuildSdks": {
                  "$ref": "#/definitions/_1.imageResult"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../exports.bicep"
                }
              }
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "imageName": {
              "type": "string"
            },
            "isBaseImage": {
              "type": "bool"
            },
            "builderIdentity": {
              "type": "string"
            },
            "imageIdentity": {
              "type": "string"
            },
            "galleryName": {
              "type": "string"
            },
            "galleryResourceGroup": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]"
            },
            "gallerySubscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]"
            },
            "createDevDrive": {
              "type": "bool"
            },
            "osDriveMinSizeGB": {
              "type": "int"
            },
            "imageBuildProfile": {
              "type": "object"
            },
            "imageBuildTimeoutInMinutes": {
              "type": "int"
            },
            "baseImage": {
              "type": "string",
              "defaultValue": ""
            },
            "ignoreBuildFailure": {
              "type": "bool",
              "defaultValue": false
            },
            "artifactSource": {
              "$ref": "#/definitions/_1.artifactSource"
            }
          },
          "variables": {
            "repos": [
              {
                "Url": "https://github.com/axios/axios",
                "Kind": "Custom",
                "HistoryDepth": 100,
                "CustomScript": "npm install && npm run build",
                "DesktopShortcutName": "axios repo"
              },
              {
                "Url": "https://github.com/Azure/azure-quickstart-templates",
                "DesktopShortcutEnable": true
              }
            ],
            "afterReposClonedArtifacts": [
              {
                "Name": "windows-NodeJS",
                "Parameters": {
                  "Version": "20.14.0"
                }
              },
              {
                "name": "windows-npm-global",
                "Parameters": {
                  "packages": "gulp-cli,vsts-npm-auth",
                  "addToPath": "true"
                }
              }
            ],
            "winGetPackageIds": [
              "Helm.Helm",
              "Kubernetes.kubectl",
              "Microsoft.Azure.Kubelogin",
              "Microsoft.Azure.AZCopy.10"
            ],
            "additionalArtifacts": [
              {
                "name": "windows-install-winget-packages",
                "parameters": {
                  "packages": "[join(variables('winGetPackageIds'), ',')]"
                }
              }
            ]
          },
          "resources": {
            "devBoxImage": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('axios-{0}', uniqueString(deployment().name, resourceGroup().name))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "imageName": {
                    "value": "[parameters('imageName')]"
                  },
                  "isBaseImage": {
                    "value": "[parameters('isBaseImage')]"
                  },
                  "baseImage": {
                    "value": "[parameters('baseImage')]"
                  },
                  "galleryName": {
                    "value": "[parameters('galleryName')]"
                  },
                  "galleryResourceGroup": {
                    "value": "[parameters('galleryResourceGroup')]"
                  },
                  "gallerySubscriptionId": {
                    "value": "[parameters('gallerySubscriptionId')]"
                  },
                  "repos": {
                    "value": "[variables('repos')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "imageIdentity": {
                    "value": "[parameters('imageIdentity')]"
                  },
                  "builderIdentity": {
                    "value": "[parameters('builderIdentity')]"
                  },
                  "createDevDrive": {
                    "value": "[parameters('createDevDrive')]"
                  },
                  "osDriveMinSizeGB": {
                    "value": "[parameters('osDriveMinSizeGB')]"
                  },
                  "artifactSource": {
                    "value": "[parameters('artifactSource')]"
                  },
                  "afterReposClonedArtifacts": {
                    "value": "[variables('afterReposClonedArtifacts')]"
                  },
                  "additionalArtifacts": {
                    "value": "[variables('additionalArtifacts')]"
                  },
                  "ignoreBuildFailure": {
                    "value": "[parameters('ignoreBuildFailure')]"
                  },
                  "imageBuildProfile": {
                    "value": "[parameters('imageBuildProfile')]"
                  },
                  "imageBuildTimeoutInMinutes": {
                    "value": "[parameters('imageBuildTimeoutInMinutes')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.31.92.45157",
                      "templateHash": "3662675939873031723"
                    }
                  },
                  "definitions": {
                    "_1.artifactSource": {
                      "type": "object",
                      "properties": {
                        "Url": {
                          "type": "string"
                        },
                        "Branch": {
                          "type": "string"
                        },
                        "Path": {
                          "type": "string"
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "../exports.bicep"
                        }
                      }
                    },
                    "_1.imageResult": {
                      "type": "object",
                      "properties": {
                        "buildLog": {
                          "type": "string",
                          "nullable": true
                        },
                        "stagingResourceGroupName": {
                          "type": "string",
                          "nullable": true
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "../exports.bicep"
                        }
                      }
                    },
                    "_1.images": {
                      "type": "object",
                      "properties": {
                        "eShop": {
                          "$ref": "#/definitions/_1.imageSettings",
                          "nullable": true
                        },
                        "axios": {
                          "$ref": "#/definitions/_1.imageSettings",
                          "nullable": true
                        },
                        "MSBuildSdks": {
                          "$ref": "#/definitions/_1.imageSettings",
                          "nullable": true
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "../exports.bicep"
                        }
                      }
                    },
                    "_1.imageSettings": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true
                        },
                        "baseImage": {
                          "type": "string",
                          "nullable": true
                        },
                        "shouldBuild": {
                          "type": "bool"
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "../exports.bicep"
                        }
                      }
                    },
                    "_1.results": {
                      "type": "object",
                      "properties": {
                        "eShop": {
                          "$ref": "#/definitions/_1.imageResult"
                        },
                        "axios": {
                          "$ref": "#/definitions/_1.imageResult"
                        },
                        "MSBuildSdks": {
                          "$ref": "#/definitions/_1.imageResult"
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "../exports.bicep"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "imageName": {
                      "type": "string",
                      "metadata": {
                        "description": "Used to name \"VM image definition\" and some other Azure resources."
                      }
                    },
                    "isBaseImage": {
                      "type": "bool",
                      "metadata": {
                        "description": "Specifies whether the image is a base image, i.e. that is not meant to be used directly by users but as a base for other images. Base images cannot be used with Dev Box service at the moment."
                      }
                    },
                    "galleryName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Name of the Compute Gallery where to publish the resulting image. The gallery is assumed to be in the same resource group as the resulting image.\nThis parameter is ignored if imagePublishingProfile explicitly defines the list of Compute Galleries via its computeGalleries property.\n"
                      }
                    },
                    "galleryResourceGroup": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]",
                      "metadata": {
                        "description": "Compute Gallery resource group. Ignored if galleryName is not provided."
                      }
                    },
                    "gallerySubscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().subscriptionId]",
                      "metadata": {
                        "description": "Compute Gallery subscription id. Ignored if galleryName is not provided."
                      }
                    },
                    "imagePublishingProfile": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Custom image Publishing Profile that can be partially specified with the rest of the properties filled in with the following defaults:\n- targetRegions : one replica in the same region as the target image;\n- computeGalleries : single gallery but only if galleryName parameter is provided.\n"
                      }
                    },
                    "imageGalleries": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Publish image to multiple image galleries"
                      }
                    },
                    "targetRegions": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Replicate image to multiple regions"
                      }
                    },
                    "builderIdentity": {
                      "type": "string",
                      "metadata": {
                        "description": "Full resource ID of Azure Managed Identity to be associated with Azure Image Builder Template and helper deployment scripts"
                      }
                    },
                    "imageIdentity": {
                      "type": "string",
                      "metadata": {
                        "description": "Full resource ID of Azure Managed Identity to use when accessing Azure and Azure DevOps resources during image creation"
                      }
                    },
                    "repos": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Git repositories to clone/update and warm up"
                      }
                    },
                    "afterReposClonedArtifacts": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Artifacts to run after all repos are cloned/updated but before packages are restored and repos are built"
                      }
                    },
                    "beforeReposSetupArtifacts": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Artifacts to run before setting up repositories"
                      }
                    },
                    "additionalArtifacts": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Artifacts to run after setting up repositories"
                      }
                    },
                    "imageVersion": {
                      "type": "string",
                      "defaultValue": "[utcNow('yyyy.MMdd.HHmmss')]"
                    },
                    "baseImage": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "When this parameter is not specified, the default base image used is https://azuremarketplace.microsoft.com/en-us/marketplace/apps/microsoftvisualstudio.visualstudioplustools.\nWhen this parameter is specified, the base image is expected to be in one of the following formats:\n1) Azure Marketplace image URN in the format <publisher>:<offer>:sku>:<version> (https://learn.microsoft.com/en-us/azure/virtual-machines/windows/cli-ps-findimage#terminology)\n2) Azure Compute Gallery image resource id (see https://learn.microsoft.com/en-us/azure/virtual-machines/linux/image-builder-json?tabs=bicep%2Cazure-powershell#sharedimageversion-source)\n3) Azure Compute Gallery image name by default is assumed to be in the same resource group as the deployment\n"
                      }
                    },
                    "defenderExclusions": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Whether to add recommended Windows defender exclusions"
                      }
                    },
                    "userDefenderExclusions": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "List of directories to add to Windows Defender exclutions when user logs in for the first time. The entries can reference user specific environment variables like %USERPROFILE%, %LOCALAPPDATA%, etc"
                      }
                    },
                    "createDevDrive": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Whether to create a separate volume, format it with Dev Drive and use the volume for all repos, caches and related tools.\nRequires a compatible Win11 22H2 October 2023 or later base image.\n"
                      }
                    },
                    "devDriveOptions": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional configuration for Dev Drive."
                      }
                    },
                    "osDriveMinSizeGB": {
                      "type": "int",
                      "defaultValue": 160,
                      "metadata": {
                        "description": "The required minimum size of NTFS C: drive when a Dev Drive volume is created.\nDefaults to 160 GB. The Dev Drive will consume the rest of the space on the machine's\nmain virtual disk. This size must be 50GB or greater to contain the OS and apps.\n\nParameters osDriveMinSizeGB and imageBuildProfile.diskSize allow full control over the sizes of C: and Q: drives.\n\nNote that because the disk image's linear partition space will now contain two partitions,\nthe size of C: cannot later be expanded. This means if you are deriving your Dev Box image\nfrom one with a smaller OS drive size than you need, you need to change the base image to a\nlarger size, or create a new base image with the size you want.\nNote: This is only applicable if createDevDrive is set to true.\n"
                      }
                    },
                    "imageBuildProfile": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Custom VS SKU to use when allocating the VM for image creation"
                      }
                    },
                    "imageBuildTimeoutInMinutes": {
                      "type": "int",
                      "defaultValue": 180,
                      "metadata": {
                        "description": "Timeout in minutes for the image build process"
                      }
                    },
                    "devTools": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Configuration of developer tools. See defaultDevTools for defaults."
                      }
                    },
                    "credentialProvider": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Configuration of Azure Artifact credential providers. See defaultCredentialProvider for defaults."
                      }
                    },
                    "customMetadata": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Custom metadata for the image to write into ImageBuildReport.txt on the desktop and report in telemetry. A proposed use case is to add information about image owners, support contacts, etc."
                      }
                    },
                    "disableAllDiskWriteCacheFlushing": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Turns off disk write cache buffer flushing for 3-5% faster builds and 20-30% faster cache downloads."
                      }
                    },
                    "installLatestWinGet": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Pre-install winget during image creation and make it available to the user right away on logging in. \nBy default, winget is installed lazily after user is logged in for the first time.\nMore at https://learn.microsoft.com/en-us/windows/package-manager/winget/#install-winget\n"
                      }
                    },
                    "artifactSource": {
                      "$ref": "#/definitions/_1.artifactSource",
                      "metadata": {
                        "description": "Git repository containing artifacts to be used in the image build"
                      }
                    },
                    "printCustomizationLogLastLines": {
                      "type": "int",
                      "defaultValue": 1000,
                      "metadata": {
                        "description": "Number of lines to print from the end of the customization log. Value of -1 will print the entire log. Value of 0 will print nothing."
                      }
                    },
                    "ignoreBuildFailure": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Set to true to ignore image build failure and return through imageBuildLog the tail of the build customization log as defined by printCustomizationLogLastLines. Useful for debugging build failures."
                      }
                    }
                  },
                  "variables": {
                    "allParamsForLogging": {
                      "imageName": "[parameters('imageName')]",
                      "isBaseImage": "[parameters('isBaseImage')]",
                      "baseImage": "[parameters('baseImage')]",
                      "deploymentName": "[deployment().name]",
                      "galleryName": "[parameters('galleryName')]",
                      "galleryResourceGroup": "[parameters('galleryResourceGroup')]",
                      "gallerySubscriptionId": "[parameters('gallerySubscriptionId')]",
                      "imagePublishingProfile": "[parameters('imagePublishingProfile')]",
                      "imageGalleries": "[parameters('imageGalleries')]",
                      "targetRegions": "[parameters('targetRegions')]",
                      "builderIdentity": "[parameters('builderIdentity')]",
                      "imageIdentity": "[parameters('imageIdentity')]",
                      "repos": "[parameters('repos')]",
                      "afterReposClonedArtifacts": "[parameters('afterReposClonedArtifacts')]",
                      "beforeReposSetupArtifacts": "[parameters('beforeReposSetupArtifacts')]",
                      "additionalArtifacts": "[parameters('additionalArtifacts')]",
                      "imageVersion": "[parameters('imageVersion')]",
                      "defenderExclusions": "[parameters('defenderExclusions')]",
                      "userDefenderExclusions": "[parameters('userDefenderExclusions')]",
                      "createDevDrive": "[parameters('createDevDrive')]",
                      "devDriveOptions": "[parameters('devDriveOptions')]",
                      "osDriveMinSizeGB": "[parameters('osDriveMinSizeGB')]",
                      "imageBuildProfile": "[parameters('imageBuildProfile')]",
                      "devTools": "[parameters('devTools')]",
                      "installLatestWinGet": "[parameters('installLatestWinGet')]",
                      "credentialProvider": "[parameters('credentialProvider')]",
                      "customMetadata": "[parameters('customMetadata')]",
                      "disableAllDiskWriteCacheFlushing": "[parameters('disableAllDiskWriteCacheFlushing')]",
                      "artifactSource": "[parameters('artifactSource')]",
                      "printCustomizationLogLastLines": "[parameters('printCustomizationLogLastLines')]",
                      "ignoreBuildFailure": "[parameters('ignoreBuildFailure')]"
                    },
                    "defaultDevTools": {
                      "VisualStudioSKU": "Enterprise",
                      "VisualStudioWorkloads": "minimal",
                      "VisualStudioBootstrapperURL": "https://aka.ms/vs/17/release/vs_Enterprise.exe",
                      "AlwaysInstallVisualStudio": false
                    },
                    "defaultCredentialProvider": {
                      "version": "",
                      "installNet6": true,
                      "msal": true,
                      "canShowDialog": true
                    },
                    "createSeparateSourcesDrive": "[parameters('createDevDrive')]",
                    "devToolsWithDefaults": "[union(variables('defaultDevTools'), parameters('devTools'))]",
                    "credentialProviderWithDefaults": "[union(variables('defaultCredentialProvider'), parameters('credentialProvider'))]"
                  },
                  "resources": {
                    "config": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('config-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "createSeparateSourcesDrive": {
                            "value": "[variables('createSeparateSourcesDrive')]"
                          },
                          "imageBuildProfile": {
                            "value": "[parameters('imageBuildProfile')]"
                          },
                          "baseImage": {
                            "value": "[parameters('baseImage')]"
                          },
                          "galleryName": {
                            "value": "[parameters('galleryName')]"
                          },
                          "galleryResourceGroup": {
                            "value": "[parameters('galleryResourceGroup')]"
                          },
                          "gallerySubscriptionId": {
                            "value": "[parameters('gallerySubscriptionId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.92.45157",
                              "templateHash": "17857372973883463269"
                            }
                          },
                          "parameters": {
                            "imageBuildProfile": {
                              "type": "object"
                            },
                            "createSeparateSourcesDrive": {
                              "type": "bool"
                            },
                            "baseImage": {
                              "type": "string"
                            },
                            "galleryName": {
                              "type": "string"
                            },
                            "galleryResourceGroup": {
                              "type": "string"
                            },
                            "gallerySubscriptionId": {
                              "type": "string"
                            },
                            "ntfsDriveRoot": {
                              "type": "string",
                              "defaultValue": "C:\\"
                            },
                            "sourcesDriveRoot": {
                              "type": "string",
                              "defaultValue": "[if(parameters('createSeparateSourcesDrive'), 'Q:\\', parameters('ntfsDriveRoot'))]"
                            }
                          },
                          "variables": {
                            "sourcesDirWithoutDriveLetter": "src",
                            "sourcesDir": "[format('{0}{1}', parameters('sourcesDriveRoot'), variables('sourcesDirWithoutDriveLetter'))]",
                            "shortcutDriveRoot": "[parameters('sourcesDriveRoot')]",
                            "baseImageDefault": "MicrosoftVisualStudio:visualstudioplustools:vs-2022-ent-general-win11-m365-gen2:latest",
                            "defaultImageBuildProfile": {
                              "diskSize": 512,
                              "sku": "Standard_D2_v4"
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "ntfsDriveRoot": {
                              "type": "string",
                              "value": "[parameters('ntfsDriveRoot')]"
                            },
                            "sourcesDriveRoot": {
                              "type": "string",
                              "value": "[parameters('sourcesDriveRoot')]"
                            },
                            "shortcutDriveRoot": {
                              "type": "string",
                              "value": "[variables('shortcutDriveRoot')]"
                            },
                            "sourcesDirWithoutDriveLetter": {
                              "type": "string",
                              "value": "[variables('sourcesDirWithoutDriveLetter')]"
                            },
                            "defenderExclusionPathList": {
                              "type": "string",
                              "value": "[variables('sourcesDir')]"
                            },
                            "ntfsSourcesDirExclusionPath": {
                              "type": "string",
                              "value": "[format('{0}{1}', parameters('ntfsDriveRoot'), variables('sourcesDirWithoutDriveLetter'))]"
                            },
                            "toolsRoot": {
                              "type": "string",
                              "value": "[format('{0}.tools', parameters('sourcesDriveRoot'))]"
                            },
                            "baseImageFull": {
                              "type": "string",
                              "value": "[if(empty(parameters('baseImage')), variables('baseImageDefault'), if(or(contains(parameters('baseImage'), '/'), contains(parameters('baseImage'), ':')), parameters('baseImage'), format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Compute/galleries/{2}/images/{3}/versions/latest', parameters('gallerySubscriptionId'), parameters('galleryResourceGroup'), parameters('galleryName'), parameters('baseImage'))))]"
                            },
                            "imageBuildProfile": {
                              "type": "object",
                              "value": "[union(variables('defaultImageBuildProfile'), parameters('imageBuildProfile'))]"
                            }
                          }
                        }
                      }
                    },
                    "devtools": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('devtools-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "devTools": {
                            "value": "[variables('devToolsWithDefaults')]"
                          },
                          "imageContainsLatestVisualStudio": {
                            "value": "[or(startsWith(reference('config').outputs.baseImageFull.value, 'MicrosoftVisualStudio:visualstudio2022:'), startsWith(reference('config').outputs.baseImageFull.value, 'MicrosoftVisualStudio:visualstudioplustools:vs-2022'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.92.45157",
                              "templateHash": "1599127666886005263"
                            }
                          },
                          "parameters": {
                            "devTools": {
                              "type": "object"
                            },
                            "imageContainsLatestVisualStudio": {
                              "type": "bool"
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "installOnce": {
                              "type": "array",
                              "value": "[concat(createArray(createObject('name', 'windows-vscodeinstall'), createObject('name', 'windows-sysinternals-suite', 'Parameters', createObject('AddShortcuts', true()))), if(or(parameters('devTools').AlwaysInstallVisualStudio, not(parameters('imageContainsLatestVisualStudio'))), createArray(createObject('Name', 'windows-visualstudio-bootstrapper', 'Parameters', union(createObject('Workloads', parameters('devTools').VisualStudioWorkloads, 'SKU', parameters('devTools').VisualStudioSKU, 'VSBootstrapperURL', parameters('devTools').VisualStudioBootstrapperURL), if(not(empty(tryGet(parameters('devTools'), 'VisualStudioInstallationDirectory'))), createObject('InstallationDirectory', parameters('devTools').VisualStudioInstallationDirectory), createObject()))), createObject('name', 'WindowsRestart')), createArray()))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "config"
                      ]
                    },
                    "repoArtifacts": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('repoArtifacts-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "ntfsDriveRoot": {
                            "value": "[reference('config').outputs.ntfsDriveRoot.value]"
                          },
                          "sourcesDriveRoot": {
                            "value": "[reference('config').outputs.sourcesDriveRoot.value]"
                          },
                          "sourcesDirWithoutDriveLetter": {
                            "value": "[reference('config').outputs.sourcesDirWithoutDriveLetter.value]"
                          },
                          "toolsRoot": {
                            "value": "[reference('config').outputs.toolsRoot.value]"
                          },
                          "credentialProvider": {
                            "value": "[variables('credentialProviderWithDefaults')]"
                          },
                          "repos": {
                            "value": "[parameters('repos')]"
                          },
                          "shortcutDriveRoot": {
                            "value": "[reference('config').outputs.shortcutDriveRoot.value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.92.45157",
                              "templateHash": "9198691132934965703"
                            }
                          },
                          "parameters": {
                            "ntfsDriveRoot": {
                              "type": "string"
                            },
                            "sourcesDriveRoot": {
                              "type": "string"
                            },
                            "sourcesDirWithoutDriveLetter": {
                              "type": "string"
                            },
                            "shortcutDriveRoot": {
                              "type": "string"
                            },
                            "toolsRoot": {
                              "type": "string"
                            },
                            "credentialProvider": {
                              "type": "object"
                            },
                            "repos": {
                              "type": "array",
                              "defaultValue": []
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "reposWithDefaults",
                                "count": "[length(parameters('repos'))]",
                                "input": {
                                  "Url": "[parameters('repos')[copyIndex('reposWithDefaults')].Url]",
                                  "SourceControl": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'SourceControl'), 'git')]",
                                  "Branch": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'Branch'), '')]",
                                  "Commit": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'Commit'), '')]",
                                  "Kind": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'Kind'), 'Data')]",
                                  "RestoreScriptEnvVars": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'RestoreScriptEnvVars'), createObject())]",
                                  "RestoreScript": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'RestoreScript'), '')]",
                                  "AdditionalRepoFeeds": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'AdditionalRepoFeeds'), createArray())]",
                                  "Build": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'Build'), createObject())]",
                                  "HistoryDepth": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'HistoryDepth'), 0)]",
                                  "DesktopShortcutEnableStr": "[if(contains(parameters('repos')[copyIndex('reposWithDefaults')], 'DesktopShortcutEnable'), format('{0}', parameters('repos')[copyIndex('reposWithDefaults')].DesktopShortcutEnable), '')]",
                                  "DesktopShortcutScriptPath": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'DesktopShortcutScriptPath'), '')]",
                                  "DesktopShortcutRunAsAdmin": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'DesktopShortcutRunAsAdmin'), false())]",
                                  "DesktopShortcutIconPath": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'DesktopShortcutIconPath'), '')]",
                                  "DesktopShortcutName": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'DesktopShortcutName'), '')]",
                                  "EnableGitCommitGraph": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'EnableGitCommitGraph'), true())]",
                                  "SparseCheckoutFolders": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'SparseCheckoutFolders'), createArray())]",
                                  "RecurseSubmodules": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'RecurseSubmodules'), false())]",
                                  "AvoidDevDrive": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'AvoidDevDrive'), false())]",
                                  "RepoRootWithoutDriveLetter": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'RepoRootWithoutDriveLetter'), '')]",
                                  "CustomScript": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'CustomScript'), '')]",
                                  "PackagesFeed": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'PackagesFeed'), '')]"
                                }
                              }
                            ],
                            "avoidDevDriveRepos": "[filter(variables('reposWithDefaults'), lambda('repo', equals(lambdaVariables('repo').AvoidDevDrive, true())))]"
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "modules",
                                "count": "[length(variables('reposWithDefaults'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('artifacts-repo-{0}-{1}', copyIndex(), uniqueString(deployment().name, resourceGroup().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "sourcesDriveRoot": {
                                    "value": "[parameters('sourcesDriveRoot')]"
                                  },
                                  "sourcesDirWithoutDriveLetter": {
                                    "value": "[parameters('sourcesDirWithoutDriveLetter')]"
                                  },
                                  "shortcutDriveRoot": {
                                    "value": "[parameters('shortcutDriveRoot')]"
                                  },
                                  "ntfsDriveRoot": {
                                    "value": "[parameters('ntfsDriveRoot')]"
                                  },
                                  "avoidDevDrive": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].AvoidDevDrive]"
                                  },
                                  "repoRootWithoutDriveLetter": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].RepoRootWithoutDriveLetter]"
                                  },
                                  "repoUrl": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].Url]"
                                  },
                                  "repoSourceControl": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].SourceControl]"
                                  },
                                  "repoBranch": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].Branch]"
                                  },
                                  "repoCommit": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].Commit]"
                                  },
                                  "repoKind": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].Kind]"
                                  },
                                  "customScript": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].CustomScript]"
                                  },
                                  "restoreScriptEnvVars": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].RestoreScriptEnvVars]"
                                  },
                                  "restoreScript": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].RestoreScript]"
                                  },
                                  "packagesFeed": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].PackagesFeed]"
                                  },
                                  "additionalRepoFeeds": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].AdditionalRepoFeeds]"
                                  },
                                  "build": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].Build]"
                                  },
                                  "historyDepth": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].HistoryDepth]"
                                  },
                                  "desktopShortcutEnable": "[if(empty(variables('reposWithDefaults')[copyIndex()].DesktopShortcutEnableStr), createObject('value', not(equals(variables('reposWithDefaults')[copyIndex()].Kind, 'Data'))), createObject('value', bool(variables('reposWithDefaults')[copyIndex()].DesktopShortcutEnableStr)))]",
                                  "desktopShortcutScriptPath": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].DesktopShortcutScriptPath]"
                                  },
                                  "desktopShortcutRunAsAdmin": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].DesktopShortcutRunAsAdmin]"
                                  },
                                  "desktopShortcutIconPath": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].DesktopShortcutIconPath]"
                                  },
                                  "desktopShortcutName": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].DesktopShortcutName]"
                                  },
                                  "enableGitCommitGraph": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].EnableGitCommitGraph]"
                                  },
                                  "recurseSubmodules": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].RecurseSubmodules]"
                                  },
                                  "sparseCheckoutFolders": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].SparseCheckoutFolders]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.31.92.45157",
                                      "templateHash": "1673860177138827114"
                                    }
                                  },
                                  "definitions": {
                                    "SourceControl": {
                                      "type": "string",
                                      "allowedValues": [
                                        "git",
                                        "gvfs"
                                      ]
                                    }
                                  },
                                  "parameters": {
                                    "sourcesDriveRoot": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "C:\\ or Q:\\ - drive where by default cloned repos are placed"
                                      }
                                    },
                                    "sourcesDirWithoutDriveLetter": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Always \"src\" - root where by default cloned repos are placed, without drive letter and leading or trailing slashes"
                                      }
                                    },
                                    "shortcutDriveRoot": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "C:\\ or Q:\\ - drive where by default cloned repos will be located when user logs in"
                                      }
                                    },
                                    "avoidDevDrive": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Always place the repo on NTFS - used when the repo doesn't support Dev Drive"
                                      }
                                    },
                                    "ntfsDriveRoot": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Always C:\\ - drive where to clone a repo if the code drive should be avoided"
                                      }
                                    },
                                    "repoRootWithoutDriveLetter": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Repo root path without drive letter and leading or trailing slashes."
                                      }
                                    },
                                    "repoUrl": {
                                      "type": "string"
                                    },
                                    "repoSourceControl": {
                                      "$ref": "#/definitions/SourceControl",
                                      "metadata": {
                                        "description": "The source control system of the repository."
                                      }
                                    },
                                    "repoBranch": {
                                      "type": "string"
                                    },
                                    "repoCommit": {
                                      "type": "string"
                                    },
                                    "restoreScriptEnvVars": {
                                      "type": "object"
                                    },
                                    "restoreScript": {
                                      "type": "string"
                                    },
                                    "additionalRepoFeeds": {
                                      "type": "array"
                                    },
                                    "build": {
                                      "type": "object"
                                    },
                                    "historyDepth": {
                                      "type": "int"
                                    },
                                    "desktopShortcutEnable": {
                                      "type": "bool"
                                    },
                                    "desktopShortcutScriptPath": {
                                      "type": "string"
                                    },
                                    "desktopShortcutRunAsAdmin": {
                                      "type": "bool"
                                    },
                                    "desktopShortcutIconPath": {
                                      "type": "string"
                                    },
                                    "desktopShortcutName": {
                                      "type": "string"
                                    },
                                    "recurseSubmodules": {
                                      "type": "bool"
                                    },
                                    "enableGitCommitGraph": {
                                      "type": "bool"
                                    },
                                    "sparseCheckoutFolders": {
                                      "type": "array"
                                    },
                                    "packagesFeed": {
                                      "type": "string"
                                    },
                                    "customScript": {
                                      "type": "string"
                                    },
                                    "repoKind": {
                                      "type": "string",
                                      "allowedValues": [
                                        "MSBuild",
                                        "Custom",
                                        "Data"
                                      ],
                                      "metadata": {
                                        "description": " Supported repository types:\n- MSBuild - Microsoft public build engine that is integrated with Nuget ecosystem.\n- Custom - any other build environment that doesn't fit into either of the two above.\n- Data - the repo should be simply cloned but no other processing for it is needed.\n"
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "setTempEnvVars",
                                        "count": "[length(items(parameters('restoreScriptEnvVars')))]",
                                        "input": {
                                          "name": "windows-setenvvar",
                                          "parameters": {
                                            "Variable": "[items(parameters('restoreScriptEnvVars'))[copyIndex('setTempEnvVars')].key]",
                                            "Value": "[items(parameters('restoreScriptEnvVars'))[copyIndex('setTempEnvVars')].value]",
                                            "PrintValue": "true"
                                          }
                                        }
                                      },
                                      {
                                        "name": "unsetTempEnvVars",
                                        "count": "[length(items(parameters('restoreScriptEnvVars')))]",
                                        "input": {
                                          "name": "windows-unsetenvvar",
                                          "parameters": {
                                            "Variable": "[items(parameters('restoreScriptEnvVars'))[copyIndex('unsetTempEnvVars')].key]"
                                          }
                                        }
                                      }
                                    ],
                                    "repoName": "[last(split(parameters('repoUrl'), '/'))]",
                                    "repoDriveRoot": "[if(parameters('avoidDevDrive'), parameters('ntfsDriveRoot'), parameters('sourcesDriveRoot'))]",
                                    "repoRootDir": "[if(empty(parameters('repoRootWithoutDriveLetter')), format('{0}{1}\\{2}', variables('repoDriveRoot'), parameters('sourcesDirWithoutDriveLetter'), variables('repoName')), format('{0}{1}', variables('repoDriveRoot'), parameters('repoRootWithoutDriveLetter')))]",
                                    "repoShortcutDriveRoot": "[if(parameters('avoidDevDrive'), parameters('ntfsDriveRoot'), parameters('shortcutDriveRoot'))]",
                                    "repoShortcutDir": "[if(empty(parameters('repoRootWithoutDriveLetter')), format('{0}{1}\\{2}', variables('repoShortcutDriveRoot'), parameters('sourcesDirWithoutDriveLetter'), variables('repoName')), format('{0}{1}', variables('repoShortcutDriveRoot'), parameters('repoRootWithoutDriveLetter')))]",
                                    "codeRepoArtifacts": [
                                      {
                                        "name": "windows-dotnetcore-sdk",
                                        "parameters": {
                                          "globalJsonFilePath": "[format('{0}\\global.json', variables('repoRootDir'))]"
                                        }
                                      },
                                      {
                                        "name": "windows-install-dotnet-sdk",
                                        "parameters": {
                                          "globalJsonPath": "[format('{0}\\global.json', variables('repoRootDir'))]"
                                        }
                                      }
                                    ],
                                    "cloneSubmodulesArg": "[if(parameters('recurseSubmodules'), '--recurse-submodules --shallow-submodules', '')]",
                                    "optionalCloningParameters": "[if(greater(parameters('historyDepth'), 0), format('--depth {0} --no-single-branch --no-tags {1}', parameters('historyDepth'), variables('cloneSubmodulesArg')), format('{0}', variables('cloneSubmodulesArg')))]",
                                    "fetchSubmodulesArg": "[if(parameters('recurseSubmodules'), '--recurse-submodules', '')]",
                                    "optionalFetchParameters": "[if(greater(parameters('historyDepth'), 0), format('--no-tags {0}', variables('fetchSubmodulesArg')), format('{0}', variables('fetchSubmodulesArg')))]",
                                    "syncRepo": {
                                      "name": "windows-clone-update-repo",
                                      "parameters": "[union(createObject('RepoUrl', parameters('repoUrl'), 'Repository_SourceControl', parameters('repoSourceControl'), 'Repository_TargetDirectory', variables('repoRootDir'), 'Repository_cloneIfNotExists', 'true', 'Repository_optionalCloningParameters', variables('optionalCloningParameters'), 'Repository_optionalFetchParameters', variables('optionalFetchParameters'), 'CommitId', if(not(empty(parameters('repoCommit'))), parameters('repoCommit'), 'latest'), 'EnableGitCommitGraph', parameters('enableGitCommitGraph')), if(not(empty(parameters('repoBranch'))), createObject('BranchName', parameters('repoBranch')), createObject()), if(not(empty(parameters('sparseCheckoutFolders'))), createObject('SparseCheckoutFolders', join(parameters('sparseCheckoutFolders'), ',')), createObject()))]"
                                    },
                                    "buildRepoArtifact": "[if(and(equals(parameters('repoKind'), 'MSBuild'), or(not(contains(parameters('build'), 'Disable')), not(parameters('build').Disable))), createArray(createObject('name', 'windows-build-repo', 'parameters', union(createObject('RepoRoot', variables('repoRootDir')), if(not(empty(parameters('additionalRepoFeeds'))), createObject('AdditionalRepoFeeds', join(parameters('additionalRepoFeeds'), ',')), createObject()), if(contains(parameters('build'), 'InitBuildScript'), createObject('InitBuildScript', parameters('build').InitBuildScript), createObject()), if(contains(parameters('build'), 'RunBuildScript'), createObject('RunBuildScript', parameters('build').RunBuildScript), createObject()), if(contains(parameters('build'), 'AdditionalBuildArguments'), createObject('AdditionalBuildArguments', parameters('build').AdditionalBuildArguments), createObject()), if(contains(parameters('build'), 'Dirs'), createObject('Dirs', join(parameters('build').Dirs, ',')), createObject())))), createArray())]",
                                    "createDevEnvShortCut": [
                                      {
                                        "name": "windows-create-devenv-shortcut",
                                        "parameters": "[union(createObject('RepoRoot', variables('repoShortcutDir'), 'RepoKind', parameters('repoKind'), 'ShortcutRunAsAdmin', parameters('desktopShortcutRunAsAdmin')), if(not(empty(parameters('desktopShortcutScriptPath'))), createObject('DesktopShortcutScriptPath', parameters('desktopShortcutScriptPath')), createObject()), if(not(empty(parameters('desktopShortcutIconPath'))), createObject('DesktopShortcutIconPath', parameters('desktopShortcutIconPath')), createObject()), if(not(empty(parameters('desktopShortcutName'))), createObject('DesktopShortcutName', parameters('desktopShortcutName')), createObject()))]"
                                      }
                                    ]
                                  },
                                  "resources": {
                                    "msbuildRepo": {
                                      "condition": "[equals(parameters('repoKind'), 'MSBuild')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('msbuildRepo-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "repoRootDir": {
                                            "value": "[variables('repoRootDir')]"
                                          },
                                          "restoreScript": {
                                            "value": "[parameters('restoreScript')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.31.92.45157",
                                              "templateHash": "11638459210006134548"
                                            }
                                          },
                                          "parameters": {
                                            "repoRootDir": {
                                              "type": "string"
                                            },
                                            "restoreScript": {
                                              "type": "string"
                                            }
                                          },
                                          "variables": {
                                            "restorePackages": [
                                              {
                                                "name": "windows-msbuild-env-invokecommand",
                                                "parameters": {
                                                  "RepoRoot": "[parameters('repoRootDir')]",
                                                  "Script": "[if(empty(parameters('restoreScript')), 'msbuild /t:restore', parameters('restoreScript'))]"
                                                }
                                              }
                                            ]
                                          },
                                          "resources": [],
                                          "outputs": {
                                            "artifacts": {
                                              "type": "array",
                                              "value": "[variables('restorePackages')]"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "customBuildRepo": {
                                      "condition": "[equals(parameters('repoKind'), 'Custom')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('customBuildRepo-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "repoRootDir": {
                                            "value": "[variables('repoRootDir')]"
                                          },
                                          "packagesFeed": {
                                            "value": "[parameters('packagesFeed')]"
                                          },
                                          "additionalRepoFeeds": {
                                            "value": "[parameters('additionalRepoFeeds')]"
                                          },
                                          "customScript": {
                                            "value": "[parameters('customScript')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.31.92.45157",
                                              "templateHash": "7832605977688924268"
                                            }
                                          },
                                          "parameters": {
                                            "repoRootDir": {
                                              "type": "string"
                                            },
                                            "packagesFeed": {
                                              "type": "string"
                                            },
                                            "additionalRepoFeeds": {
                                              "type": "array"
                                            },
                                            "customScript": {
                                              "type": "string"
                                            }
                                          },
                                          "resources": [],
                                          "outputs": {
                                            "artifacts": {
                                              "type": "array",
                                              "value": [
                                                {
                                                  "name": "windows-custom-build-env-invokecommand",
                                                  "parameters": "[union(createObject('RepoRoot', parameters('repoRootDir'), 'RepoPackagesFeed', parameters('packagesFeed'), 'Script', parameters('customScript')), if(not(empty(parameters('additionalRepoFeeds'))), createObject('AdditionalRepoFeeds', join(parameters('additionalRepoFeeds'), ',')), createObject()))]"
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "setupSources": {
                                      "type": "array",
                                      "value": [
                                        "[variables('syncRepo')]"
                                      ]
                                    },
                                    "warmup": {
                                      "type": "array",
                                      "value": "[concat(if(equals(parameters('repoKind'), 'MSBuild'), variables('codeRepoArtifacts'), createArray()), variables('setTempEnvVars'), if(equals(parameters('repoKind'), 'MSBuild'), reference('msbuildRepo').outputs.artifacts.value, createArray()), if(parameters('desktopShortcutEnable'), variables('createDevEnvShortCut'), createArray()), if(equals(parameters('repoKind'), 'Custom'), reference('customBuildRepo').outputs.artifacts.value, createArray()), variables('buildRepoArtifact'), variables('unsetTempEnvVars'))]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('packagesConfig-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "toolsRoot": {
                                    "value": "[parameters('toolsRoot')]"
                                  },
                                  "credentialProvider": {
                                    "value": "[parameters('credentialProvider')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.31.92.45157",
                                      "templateHash": "2688611092292562478"
                                    }
                                  },
                                  "parameters": {
                                    "toolsRoot": {
                                      "type": "string"
                                    },
                                    "credentialProvider": {
                                      "type": "object"
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "setEnvVars",
                                        "count": "[length(items(variables('envVarsToSet')))]",
                                        "input": {
                                          "name": "windows-setenvvar",
                                          "parameters": {
                                            "Variable": "[items(variables('envVarsToSet'))[copyIndex('setEnvVars')].key]",
                                            "Value": "[items(variables('envVarsToSet'))[copyIndex('setEnvVars')].value]",
                                            "PrintValue": "true"
                                          }
                                        }
                                      }
                                    ],
                                    "nugetRoot": "[format('{0}\\.nuget', parameters('toolsRoot'))]",
                                    "npmGlobalTools": "[format('{0}\\.npm-global', parameters('toolsRoot'))]",
                                    "envVarsToSet": {
                                      "NUGET_PLUGIN_PATHS": "[format('{0}\\plugins\\netfx\\CredentialProvider.Microsoft\\CredentialProvider.Microsoft.exe', variables('nugetRoot'))]",
                                      "NUGET_NETFX_PLUGIN_PATHS": "[format('{0}\\plugins\\netfx\\CredentialProvider.Microsoft\\CredentialProvider.Microsoft.exe', variables('nugetRoot'))]",
                                      "NUGET_NETCORE_PLUGIN_PATHS": "[format('{0}\\plugins\\netcore\\CredentialProvider.Microsoft\\CredentialProvider.Microsoft.dll', variables('nugetRoot'))]",
                                      "NUGET_CREDENTIALPROVIDER_MSAL_ENABLED": "[if(parameters('credentialProvider').msal, 'true', '')]",
                                      "NUGET_CREDENTIALPROVIDER_FORCE_CANSHOWDIALOG_TO": "[if(parameters('credentialProvider').canShowDialog, 'true', '')]",
                                      "NUGET_PACKAGES": "[format('{0}\\packages\\', variables('nugetRoot'))]",
                                      "NUGET_HTTP_CACHE_PATH": "[format('{0}\\v3-cache', variables('nugetRoot'))]",
                                      "NUGET_PLUGINS_CACHE_PATH": "[format('{0}\\plugins-cache', variables('nugetRoot'))]",
                                      "YARN_CACHE_FOLDER": "[format('{0}\\.yarn', parameters('toolsRoot'))]",
                                      "NPM_CONFIG_CACHE": "[format('{0}\\.npm', parameters('toolsRoot'))]",
                                      "NPM_CONFIG_PREFIX": "[variables('npmGlobalTools')]"
                                    }
                                  },
                                  "resources": [],
                                  "outputs": {
                                    "setStableEnvVars": {
                                      "type": "array",
                                      "value": "[concat(variables('setEnvVars'), createArray(createObject('name', 'windows-add-to-path', 'parameters', createObject('newPath', variables('npmGlobalTools')))))]"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "repoSetupSourcesObjects": {
                              "type": "array",
                              "copy": {
                                "count": "[length(range(0, length(parameters('repos'))))]",
                                "input": {
                                  "Artifacts": "[reference(resourceId('Microsoft.Resources/deployments', format('artifacts-repo-{0}-{1}', range(0, length(parameters('repos')))[copyIndex()], uniqueString(deployment().name, resourceGroup().name))), '2022-09-01').outputs.setupSources.value]"
                                }
                              }
                            },
                            "repoWarmupObjects": {
                              "type": "array",
                              "copy": {
                                "count": "[length(range(0, length(parameters('repos'))))]",
                                "input": {
                                  "Artifacts": "[reference(resourceId('Microsoft.Resources/deployments', format('artifacts-repo-{0}-{1}', range(0, length(parameters('repos')))[copyIndex()], uniqueString(deployment().name, resourceGroup().name))), '2022-09-01').outputs.warmup.value]"
                                }
                              }
                            },
                            "commonArtifacts": {
                              "type": "array",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('packagesConfig-{0}', uniqueString(deployment().name, resourceGroup().name))), '2022-09-01').outputs.setStableEnvVars.value]"
                            },
                            "anyAvoidDevDriveRepos": {
                              "type": "bool",
                              "value": "[greater(length(variables('avoidDevDriveRepos')), 0)]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "config"
                      ]
                    },
                    "common": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('common-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "toolsRoot": {
                            "value": "[reference('config').outputs.toolsRoot.value]"
                          },
                          "defenderExclusions": {
                            "value": "[parameters('defenderExclusions')]"
                          },
                          "userDefenderExclusions": {
                            "value": "[parameters('userDefenderExclusions')]"
                          },
                          "createDevDrive": {
                            "value": "[parameters('createDevDrive')]"
                          },
                          "devDriveOptions": {
                            "value": "[parameters('devDriveOptions')]"
                          },
                          "osDriveMinSizeGB": {
                            "value": "[parameters('osDriveMinSizeGB')]"
                          },
                          "sourcesDriveRoot": {
                            "value": "[reference('config').outputs.sourcesDriveRoot.value]"
                          },
                          "defenderExclusionPathList": "[if(and(variables('createSeparateSourcesDrive'), reference('repoArtifacts').outputs.anyAvoidDevDriveRepos.value), createObject('value', format('{0},{1}', reference('config').outputs.defenderExclusionPathList.value, reference('config').outputs.ntfsSourcesDirExclusionPath.value)), createObject('value', reference('config').outputs.defenderExclusionPathList.value))]",
                          "allParamsForLogging": {
                            "value": "[variables('allParamsForLogging')]"
                          },
                          "credentialProvider": {
                            "value": "[variables('credentialProviderWithDefaults')]"
                          },
                          "disableAllDiskWriteCacheFlushing": {
                            "value": "[parameters('disableAllDiskWriteCacheFlushing')]"
                          },
                          "installLatestWinGet": {
                            "value": "[parameters('installLatestWinGet')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.92.45157",
                              "templateHash": "10435682501394810500"
                            }
                          },
                          "parameters": {
                            "toolsRoot": {
                              "type": "string"
                            },
                            "sourcesDriveRoot": {
                              "type": "string"
                            },
                            "defenderExclusions": {
                              "type": "bool"
                            },
                            "userDefenderExclusions": {
                              "type": "array"
                            },
                            "defenderExclusionPathList": {
                              "type": "string"
                            },
                            "allParamsForLogging": {
                              "type": "object"
                            },
                            "credentialProvider": {
                              "type": "object"
                            },
                            "osDriveMinSizeGB": {
                              "type": "int"
                            },
                            "disableAllDiskWriteCacheFlushing": {
                              "type": "bool"
                            },
                            "installLatestWinGet": {
                              "type": "bool"
                            },
                            "createDevDrive": {
                              "type": "bool",
                              "metadata": {
                                "description": "This will create a separate volume, format it with Dev Drive and place all repos and caches to that volume. Requires October 2023 patched Win11-22H2 or Win11-23H2 base image."
                              }
                            },
                            "devDriveOptions": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "variables": {
                            "updateWindowsArtifact": {
                              "name": "WindowsUpdate"
                            },
                            "defaultDevDriveOptions": {
                              "EnableGVFS": false,
                              "EnableContainers": false
                            },
                            "devDriveWithDefaults": "[union(variables('defaultDevDriveOptions'), parameters('devDriveOptions'))]",
                            "optionalSetDevDriveConfiguration": "[if(and(parameters('createDevDrive'), or(variables('devDriveWithDefaults').EnableGVFS, variables('devDriveWithDefaults').EnableContainers)), createArray(createObject('name', 'windows-set-DevDriveConfiguration', 'parameters', createObject('EnableGVFS', variables('devDriveWithDefaults').EnableGVFS, 'EnableContainers', variables('devDriveWithDefaults').EnableContainers))), createArray())]",
                            "optionalInstallLatestWinGet": "[if(parameters('installLatestWinGet'), createArray(createObject('name', 'windows-install-winget')), createArray())]",
                            "optionalConfigureWinGetForUser": "[if(parameters('installLatestWinGet'), createArray(createObject('Task', 'configure-winget')), createArray())]",
                            "runBeforeAll": "[concat(createArray(createObject('name', 'windows-expandOSdisk')), createArray(variables('updateWindowsArtifact')), variables('optionalSetDevDriveConfiguration'), variables('optionalInstallLatestWinGet'), createArray(createObject('name', 'windows-disable-reservedstorage'), createObject('name', 'windows-update-settings'), createObject('Name', 'windows-powershell-invokecommand', 'Parameters', createObject('Script', 'Set-Content -Path `$env:USERPROFILE\\.curlrc -Value `\"--retry 7`\"; Get-Content -Path `$env:USERPROFILE\\.curlrc')), createObject('Name', 'windows-enable-long-paths'), createObject('Name', 'WindowsRestart')))]",
                            "optionalCreateDevDrive": "[if(parameters('createDevDrive'), createArray(createObject('Name', 'windows-create-ReFS', 'Parameters', createObject('DevBoxRefsDrive', substring(parameters('sourcesDriveRoot'), 0, 1), 'OsDriveMinSizeGB', parameters('osDriveMinSizeGB'), 'IsDevDrive', parameters('createDevDrive')))), createArray())]",
                            "optionalDisableAllDiskWriteCacheFlushing": "[if(parameters('disableAllDiskWriteCacheFlushing'), createArray(createObject('Name', 'windows-disable-write-cache-flushing')), createArray())]",
                            "runInstalls": [
                              {
                                "name": "windows-gitinstall",
                                "parameters": {
                                  "SetCredHelper": "true"
                                }
                              },
                              {
                                "name": "windows-install-artifacts-credprovider",
                                "parameters": {
                                  "addNetFx": "true",
                                  "installNet6": "[parameters('credentialProvider').installNet6]",
                                  "version": "[parameters('credentialProvider').version]",
                                  "optionalCopyNugetPluginsRoot": "[parameters('toolsRoot')]"
                                }
                              }
                            ],
                            "optionalDefenderExclusions": "[if(parameters('defenderExclusions'), createArray(createObject('name', 'windows-defender-exclusions', 'parameters', createObject('ExclusionPaths', parameters('defenderExclusionPathList')))), createArray())]",
                            "userDefenderTaskId": "[uniqueString(reduce(parameters('userDefenderExclusions'), '', lambda('cur', 'next', format('{0}{1}', lambdaVariables('cur'), lambdaVariables('next')))))]",
                            "userDefenderLogonTasks": "[if(empty(parameters('userDefenderExclusions')), createArray(), createArray(createObject('Task', 'add-defender-exclusions', 'UniqueID', format('defender-exclusions-{0}', variables('userDefenderTaskId')), 'Parameters', createObject('DirsToExclude', parameters('userDefenderExclusions')))))]",
                            "codeDriveUserLogonTasksAssignUnallocatedSpaceAndReassignDriveLetter": "[if(parameters('createDevDrive'), createArray(createObject('Task', 'assign-unallocated-space', 'Parameters', createObject('DriveLetter', 'D')), createObject('Task', 'remap-code-drive', 'Parameters', createObject('ToDriveLetter', substring(parameters('sourcesDriveRoot'), 0, 1)))), createArray())]",
                            "addUserProfileDefenderExclusionsTask": "[if(parameters('defenderExclusions'), createArray(createObject('Task', 'add-defender-exclusions', 'UniqueID', 'defender-exclusions-msbuild', 'Parameters', createObject('DirsToExclude', createArray('%TEMP%\\NuGetScratch', '%TEMP%\\MSBuildTemp%USERNAME%')))), createArray())]",
                            "firstLogonTasks": "[concat(variables('codeDriveUserLogonTasksAssignUnallocatedSpaceAndReassignDriveLetter'), variables('userDefenderLogonTasks'), variables('addUserProfileDefenderExclusionsTask'), variables('optionalConfigureWinGetForUser'))]",
                            "disableOneDriveDesktopSync": [
                              {
                                "name": "windows-configure-onedrive-sync"
                              }
                            ],
                            "runAfterAll": "[concat(createArray(createObject('name', 'windows-imagelog', 'Parameters', createObject('BicepInfo', base64(string(parameters('allParamsForLogging'))))), createObject('name', 'windows-enable-optionalfeatures', 'Parameters', createObject('FeatureName', 'VirtualMachinePlatform')), createObject('name', 'windows-configure-user-tasks', 'parameters', createObject('FirstLogonTasksBase64', base64(string(variables('firstLogonTasks'))))), variables('updateWindowsArtifact')), variables('disableOneDriveDesktopSync'), createArray(createObject('name', 'windows-prepare-for-sysprep')))]"
                          },
                          "resources": [],
                          "outputs": {
                            "artifacts": {
                              "type": "object",
                              "value": {
                                "runBeforeAll": "[variables('runBeforeAll')]",
                                "optionalCreateDevDrive": "[variables('optionalCreateDevDrive')]",
                                "optionalDisableAllDiskWriteCacheFlushing": "[variables('optionalDisableAllDiskWriteCacheFlushing')]",
                                "runInstalls": "[variables('runInstalls')]",
                                "optionalDefenderExclusions": "[variables('optionalDefenderExclusions')]",
                                "runAfterAll": "[variables('runAfterAll')]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "config",
                        "repoArtifacts"
                      ]
                    },
                    "publishProfile": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('publishProfile-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "imageName": {
                            "value": "[parameters('imageName')]"
                          },
                          "galleryName": {
                            "value": "[parameters('galleryName')]"
                          },
                          "galleryResourceGroup": {
                            "value": "[parameters('galleryResourceGroup')]"
                          },
                          "gallerySubscriptionId": {
                            "value": "[parameters('gallerySubscriptionId')]"
                          },
                          "imageGalleries": {
                            "value": "[parameters('imageGalleries')]"
                          },
                          "targetRegions": {
                            "value": "[parameters('targetRegions')]"
                          },
                          "imagePublishingProfile": {
                            "value": "[parameters('imagePublishingProfile')]"
                          },
                          "isBaseImage": {
                            "value": "[parameters('isBaseImage')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.92.45157",
                              "templateHash": "5528598909137715190"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "imageName": {
                              "type": "string"
                            },
                            "isBaseImage": {
                              "type": "bool"
                            },
                            "galleryName": {
                              "type": "string"
                            },
                            "galleryResourceGroup": {
                              "type": "string"
                            },
                            "gallerySubscriptionId": {
                              "type": "string"
                            },
                            "imageGalleries": {
                              "type": "array"
                            },
                            "targetRegions": {
                              "type": "array"
                            },
                            "imagePublishingProfile": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "imageGalleriesFinal",
                                "count": "[length(variables('imageGalleriesRaw'))]",
                                "input": {
                                  "galleryName": "[variables('imageGalleriesRaw')[copyIndex('imageGalleriesFinal')].galleryName]",
                                  "gallerySubscriptionId": "[coalesce(tryGet(variables('imageGalleriesRaw')[copyIndex('imageGalleriesFinal')], 'gallerySubscriptionId'), parameters('gallerySubscriptionId'))]",
                                  "galleryResourceGroup": "[coalesce(tryGet(variables('imageGalleriesRaw')[copyIndex('imageGalleriesFinal')], 'galleryResourceGroup'), parameters('galleryResourceGroup'))]"
                                }
                              }
                            ],
                            "imageGalleriesRaw": "[if(not(empty(parameters('imageGalleries'))), parameters('imageGalleries'), createArray(createObject('galleryName', parameters('galleryName'), 'gallerySubscriptionId', parameters('gallerySubscriptionId'), 'galleryResourceGroup', parameters('galleryResourceGroup'))))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('publishGalleries-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "imageGalleries": {
                                    "value": "[variables('imageGalleriesFinal')]"
                                  },
                                  "imageName": {
                                    "value": "[parameters('imageName')]"
                                  },
                                  "isBaseImage": {
                                    "value": "[parameters('isBaseImage')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.31.92.45157",
                                      "templateHash": "7441545288708978846"
                                    }
                                  },
                                  "parameters": {
                                    "imageName": {
                                      "type": "string"
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]"
                                    },
                                    "isBaseImage": {
                                      "type": "bool"
                                    },
                                    "imageGalleries": {
                                      "type": "array",
                                      "defaultValue": []
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "modules",
                                        "count": "[length(parameters('imageGalleries'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('publish-gallery-{0}-{1}', copyIndex(), uniqueString(deployment().name, resourceGroup().name))]",
                                      "subscriptionId": "[parameters('imageGalleries')[copyIndex()].gallerySubscriptionId]",
                                      "resourceGroup": "[parameters('imageGalleries')[copyIndex()].galleryResourceGroup]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "galleryName": {
                                            "value": "[parameters('imageGalleries')[copyIndex()].galleryName]"
                                          },
                                          "imageName": {
                                            "value": "[parameters('imageName')]"
                                          },
                                          "isBaseImage": {
                                            "value": "[parameters('isBaseImage')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.31.92.45157",
                                              "templateHash": "7351638362435420561"
                                            }
                                          },
                                          "parameters": {
                                            "galleryName": {
                                              "type": "string"
                                            },
                                            "imageName": {
                                              "type": "string"
                                            },
                                            "isBaseImage": {
                                              "type": "bool"
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]"
                                            }
                                          },
                                          "variables": {
                                            "imageDefinitionProperties": {
                                              "hyperVGeneration": "V2",
                                              "architecture": "x64",
                                              "features": [
                                                {
                                                  "name": "SecurityType",
                                                  "value": "[if(parameters('isBaseImage'), 'TrustedLaunchSupported', 'TrustedLaunch')]"
                                                },
                                                {
                                                  "name": "IsHibernateSupported",
                                                  "value": "true"
                                                }
                                              ],
                                              "osType": "Windows",
                                              "osState": "Generalized",
                                              "identifier": {
                                                "publisher": "AzureQuickstarts",
                                                "offer": "DevBox",
                                                "sku": "[parameters('imageName')]"
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "condition": "[not(empty(parameters('galleryName')))]",
                                              "type": "Microsoft.Compute/galleries/images",
                                              "apiVersion": "2023-07-03",
                                              "name": "[format('{0}/{1}', parameters('galleryName'), parameters('imageName'))]",
                                              "location": "[parameters('location')]",
                                              "properties": "[variables('imageDefinitionProperties')]"
                                            }
                                          ],
                                          "outputs": {
                                            "computeGalleryId": {
                                              "type": "string",
                                              "value": "[if(empty(parameters('galleryName')), '', resourceId('Microsoft.Compute/galleries/images', parameters('galleryName'), parameters('imageName')))]"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "galleryIds": {
                                      "type": "array",
                                      "copy": {
                                        "count": "[length(range(0, length(parameters('imageGalleries'))))]",
                                        "input": {
                                          "Id": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('imageGalleries')[copyIndex()].gallerySubscriptionId, parameters('imageGalleries')[copyIndex()].galleryResourceGroup), 'Microsoft.Resources/deployments', format('publish-gallery-{0}-{1}', range(0, length(parameters('imageGalleries')))[copyIndex()], uniqueString(deployment().name, resourceGroup().name))), '2022-09-01').outputs.computeGalleryId.value]"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "publishingProfile": {
                              "type": "object",
                              "value": "[union(union(createObject('targetRegions', if(empty(parameters('targetRegions')), createArray(createObject('name', parameters('location'), 'replicas', 1)), map(parameters('targetRegions'), lambda('targetRegion', createObject('name', lambdaVariables('targetRegion'), 'replicas', 1))))), if(not(empty(map(filter(map(reference(resourceId('Microsoft.Resources/deployments', format('publishGalleries-{0}', uniqueString(deployment().name, resourceGroup().name))), '2022-09-01').outputs.galleryIds.value, lambda('obj', lambdaVariables('obj').Id)), lambda('id', not(empty(lambdaVariables('id'))))), lambda('id', createObject('computeGalleryId', lambdaVariables('id')))))), createObject('computeGalleries', map(filter(map(reference(resourceId('Microsoft.Resources/deployments', format('publishGalleries-{0}', uniqueString(deployment().name, resourceGroup().name))), '2022-09-01').outputs.galleryIds.value, lambda('obj', lambdaVariables('obj').Id)), lambda('id', not(empty(lambdaVariables('id'))))), lambda('id', createObject('computeGalleryId', lambdaVariables('id'))))), createObject())), parameters('imagePublishingProfile'))]"
                            }
                          }
                        }
                      }
                    },
                    "aibImage": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('aibImage-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "imageName": {
                            "value": "[parameters('imageName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "builderIdentity": {
                            "value": "[parameters('builderIdentity')]"
                          },
                          "imageIdentity": {
                            "value": "[parameters('imageIdentity')]"
                          },
                          "baseImage": {
                            "value": "[reference('config').outputs.baseImageFull.value]"
                          },
                          "buildProfile": {
                            "value": "[reference('config').outputs.imageBuildProfile.value]"
                          },
                          "imageBuildTimeoutInMinutes": {
                            "value": "[parameters('imageBuildTimeoutInMinutes')]"
                          },
                          "artifacts": {
                            "value": "[concat(reference('common').outputs.artifacts.value.runBeforeAll, reference('common').outputs.artifacts.value.optionalCreateDevDrive, reference('common').outputs.artifacts.value.optionalDefenderExclusions, reference('common').outputs.artifacts.value.optionalDisableAllDiskWriteCacheFlushing, if(not(contains(reference('config').outputs.baseImageFull.value, '/providers/Microsoft.Compute/galleries/')), concat(reference('common').outputs.artifacts.value.runInstalls, reference('devtools').outputs.installOnce.value), createArray()), parameters('beforeReposSetupArtifacts'), reference('repoArtifacts').outputs.commonArtifacts.value, flatten(map(reference('repoArtifacts').outputs.repoSetupSourcesObjects.value, lambda('obj', lambdaVariables('obj').Artifacts))), parameters('afterReposClonedArtifacts'), flatten(map(reference('repoArtifacts').outputs.repoWarmupObjects.value, lambda('obj', lambdaVariables('obj').Artifacts))), parameters('additionalArtifacts'), reference('common').outputs.artifacts.value.runAfterAll)]"
                          },
                          "publishingProfile": {
                            "value": "[reference('publishProfile').outputs.publishingProfile.value]"
                          },
                          "imageVersion": {
                            "value": "[parameters('imageVersion')]"
                          },
                          "artifactSource": {
                            "value": "[parameters('artifactSource')]"
                          },
                          "printCustomizationLogLastLines": {
                            "value": "[parameters('printCustomizationLogLastLines')]"
                          },
                          "ignoreBuildFailure": {
                            "value": "[parameters('ignoreBuildFailure')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.92.45157",
                              "templateHash": "15703279216536729417"
                            }
                          },
                          "definitions": {
                            "_1.artifactSource": {
                              "type": "object",
                              "properties": {
                                "Url": {
                                  "type": "string"
                                },
                                "Branch": {
                                  "type": "string"
                                },
                                "Path": {
                                  "type": "string"
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "../exports.bicep"
                                }
                              }
                            },
                            "_1.imageResult": {
                              "type": "object",
                              "properties": {
                                "buildLog": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "stagingResourceGroupName": {
                                  "type": "string",
                                  "nullable": true
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "../exports.bicep"
                                }
                              }
                            },
                            "_1.images": {
                              "type": "object",
                              "properties": {
                                "eShop": {
                                  "$ref": "#/definitions/_1.imageSettings",
                                  "nullable": true
                                },
                                "axios": {
                                  "$ref": "#/definitions/_1.imageSettings",
                                  "nullable": true
                                },
                                "MSBuildSdks": {
                                  "$ref": "#/definitions/_1.imageSettings",
                                  "nullable": true
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "../exports.bicep"
                                }
                              }
                            },
                            "_1.imageSettings": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "baseImage": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "shouldBuild": {
                                  "type": "bool"
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "../exports.bicep"
                                }
                              }
                            },
                            "_1.results": {
                              "type": "object",
                              "properties": {
                                "eShop": {
                                  "$ref": "#/definitions/_1.imageResult"
                                },
                                "axios": {
                                  "$ref": "#/definitions/_1.imageResult"
                                },
                                "MSBuildSdks": {
                                  "$ref": "#/definitions/_1.imageResult"
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "../exports.bicep"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "guidId": {
                              "type": "string",
                              "defaultValue": "[newGuid()]"
                            },
                            "imageName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "imageVersion": {
                              "type": "string"
                            },
                            "builderIdentity": {
                              "type": "string"
                            },
                            "imageIdentity": {
                              "type": "string"
                            },
                            "baseImage": {
                              "type": "string"
                            },
                            "artifacts": {
                              "type": "array"
                            },
                            "buildProfile": {
                              "type": "object"
                            },
                            "imageBuildTimeoutInMinutes": {
                              "type": "int"
                            },
                            "publishingProfile": {
                              "type": "object"
                            },
                            "artifactSource": {
                              "$ref": "#/definitions/_1.artifactSource"
                            },
                            "printCustomizationLogLastLines": {
                              "type": "int"
                            },
                            "ignoreBuildFailure": {
                              "type": "bool"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "artifactsWithEncodedParams",
                                "count": "[length(parameters('artifacts'))]",
                                "input": {
                                  "name": "[parameters('artifacts')[copyIndex('artifactsWithEncodedParams')].name]",
                                  "runAsSystem": "[coalesce(tryGet(parameters('artifacts')[copyIndex('artifactsWithEncodedParams')], 'runAsSystem'), false())]",
                                  "paramsBase64": "[if(and(contains(parameters('artifacts')[copyIndex('artifactsWithEncodedParams')], 'parameters'), not(empty(parameters('artifacts')[copyIndex('artifactsWithEncodedParams')].parameters))), base64(string(parameters('artifacts')[copyIndex('artifactsWithEncodedParams')].parameters)), '')]"
                                }
                              },
                              {
                                "name": "artifactCustomizers",
                                "count": "[length(variables('artifactsWithEncodedParams'))]",
                                "input": "[if(equals(variables('artifactsWithEncodedParams')[copyIndex('artifactCustomizers')].name, 'WindowsUpdate'), createObject('type', 'WindowsUpdate'), if(equals(variables('artifactsWithEncodedParams')[copyIndex('artifactCustomizers')].name, 'WindowsRestart'), createObject('type', 'WindowsRestart'), createObject('type', 'PowerShell', 'runAsSystem', if(variables('artifactsWithEncodedParams')[copyIndex('artifactCustomizers')].runAsSystem, true(), null()), 'runElevated', if(variables('artifactsWithEncodedParams')[copyIndex('artifactCustomizers')].runAsSystem, true(), null()), 'name', format('RunArtifact-{0}', variables('artifactsWithEncodedParams')[copyIndex('artifactCustomizers')].name), 'validExitCodes', createArray(0), 'inline', createArray('. C:/.tools/Setup/artifacts/run-artifact.ps1', format('____Invoke-Artifact -____ArtifactName {0} -____ParamsBase64 ''{1}''', variables('artifactsWithEncodedParams')[copyIndex('artifactCustomizers')].name, variables('artifactsWithEncodedParams')[copyIndex('artifactCustomizers')].paramsBase64)))))]"
                              },
                              {
                                "name": "distribute",
                                "count": "[length(parameters('publishingProfile').computeGalleries)]",
                                "input": {
                                  "type": "SharedImage",
                                  "runOutputName": "[parameters('imageName')]",
                                  "galleryImageId": "[format('{0}/versions/{1}', parameters('publishingProfile').computeGalleries[copyIndex('distribute')].computeGalleryId, parameters('imageVersion'))]",
                                  "replicationRegions": "[variables('replicationRegions')]",
                                  "artifactTags": "[variables('tags')]"
                                }
                              }
                            ],
                            "$fxv#0": "$ErrorActionPreference = \"Stop\"\r\nSet-StrictMode -Version Latest\r\n$ProgressPreference = 'SilentlyContinue'\r\n\r\nfunction Get-ManagedIdentityAccessToken {\r\n    param(\r\n        [Parameter(Mandatory = $true)][ValidateNotNullOrEmpty()][String] $resource\r\n    )\r\n\r\n    $resourceEscaped = [uri]::EscapeDataString($resource)\r\n    $requestUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$resourceEscaped\"\r\n    Write-Host \"Retrieving access token from $requestUri\"\r\n    $response = Invoke-WebRequest -Uri $requestUri -Headers @{Metadata = \"true\" } -UseBasicParsing\r\n\r\n    if ($response.Content -imatch \"access_token\") {\r\n        $jsonContent = $response.Content | ConvertFrom-Json\r\n        $accessToken = $jsonContent.access_token\r\n    }\r\n    else {\r\n        throw \"Failed to obtain access token from $requestUri, aborting\"\r\n    }\r\n\r\n    return $accessToken\r\n}\r\n\r\nfunction Get-AzureDevOpsAccessToken {\r\n    return (Get-ManagedIdentityAccessToken '499b84ac-1321-427f-aa17-267ca6975798')\r\n}\r\n\r\n$toolsRoot = \"C:\\.tools\\Setup\"\r\nmkdir $toolsRoot -Force | Out-Null\r\n$zip = \"$toolsRoot\\artifacts.zip\"\r\n\r\nif ($scriptsRepoUrl.StartsWith('https://github.com/')) {\r\n    Write-Host \"=== Downloading artifacts from branch $scriptsRepoBranch of repo $scriptsRepoUrl\"\r\n    $requestUri = \"$scriptsRepoUrl/archive/refs/heads/$scriptsRepoBranch.zip\"\r\n    Invoke-RestMethod -Uri $requestUri -Method Get -OutFile $zip\r\n\r\n    $expandedArchiveRoot = \"$toolsRoot\\tmp\"\r\n    Write-Host \"-- Extracting to $expandedArchiveRoot\"\r\n    mkdir $expandedArchiveRoot -Force | Out-Null\r\n    Expand-Archive -Path $zip -DestinationPath $expandedArchiveRoot\r\n\r\n    $expandedScriptsPath = [IO.Path]::GetFullPath($(Join-Path $((Get-ChildItem $expandedArchiveRoot)[0].FullName) $scriptsRepoPath))\r\n    Write-Host \"-- Moving $expandedScriptsPath to $toolsRoot\"\r\n    Move-Item -Path $expandedScriptsPath -Destination $toolsRoot\r\n\r\n    Write-Host \"-- Deleting temp files\"\r\n    Remove-Item -Path $expandedArchiveRoot -Recurse -Force\r\n\r\n}\r\nelseif ($scriptsRepoUrl.StartsWith('https://dev.azure.com/')) {\r\n    Write-Host \"=== Downloading artifacts from $scriptsRepoPath of branch $scriptsRepoBranch in repo $scriptsRepoUrl\"\r\n    $requestUri = \"$scriptsRepoUrl/items?path=$scriptsRepoPath&`$format=zip&versionDescriptor.version=$scriptsRepoBranch&versionDescriptor.versionType=branch&api-version=5.0-preview.1\"\r\n    $aadToken = Get-AzureDevOpsAccessToken\r\n    Invoke-RestMethod -Uri $requestUri -Method Get -Headers @{\"Authorization\" = \"Bearer $aadToken\" } -OutFile $zip\r\n\r\n    Write-Host \"-- Extracting to $toolsRoot\"\r\n    Expand-Archive -Path $zip -DestinationPath $toolsRoot\r\n    Remove-Item -Path $zip -Force\r\n}\r\nelse {\r\n    throw \"Don't know how to download files from repo $scriptsRepoUrl\"\r\n}\r\n\r\nWrite-Host \"-- Content of $toolsRoot\"\r\nGet-ChildItem $toolsRoot -Recurse\r\n\r\nWrite-Host \"=== Completed downloading artifacts\"\r\n",
                            "$fxv#1": "$ErrorActionPreference = \"Stop\"\r\nSet-StrictMode -Version Latest\r\n$ProgressPreference = 'SilentlyContinue'\r\n\r\nfunction RunWithRetries(\r\n    [ScriptBlock] $runBlock, \r\n    [ScriptBlock] $onFailureBlock = {}, \r\n    [int] $retryAttempts = 5, \r\n    [int] $waitBeforeRetrySeconds = 5,\r\n    [bool] $ignoreFailure = $false,\r\n    [bool] $exponentialBackoff = $true\r\n) {\r\n    [int] $retriesLeft = $retryAttempts\r\n\r\n    while ($retriesLeft -ge 0) {\r\n        try {\r\n            & $runBlock\r\n            break\r\n        }\r\n        catch {\r\n            if ($retriesLeft -le 0) {\r\n                if ($onFailureBlock) {\r\n                    & $onFailureBlock\r\n                }\r\n                if ($ignoreFailure) {\r\n                    Write-Host \"[WARN] Ignoring the failure:`n$_`n$($_.ScriptStackTrace)\"\r\n                    break\r\n                }\r\n                else {\r\n                    throw\r\n                }\r\n            }\r\n            else {\r\n                if ($exponentialBackoff) {\r\n                    $totalDelay = [Math]::Pow(2, $retryAttempts - $retriesLeft) * $waitBeforeRetrySeconds\r\n                }\r\n                else {\r\n                    $totalDelay = $waitBeforeRetrySeconds\r\n                }\r\n                Write-Host \"[WARN] Attempt failed: $_. Retrying in $totalDelay seconds. Retries left: $retriesLeft\"\r\n                $retriesLeft--\r\n                Start-Sleep -Seconds $totalDelay\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                            "$fxv#2": "$ErrorActionPreference = \"Stop\"\r\nSet-StrictMode -Version Latest\r\n$ProgressPreference = 'SilentlyContinue'\r\n\r\nRunWithRetries { Connect-AzAccount -Identity | Out-Null }\r\nRunWithRetries { Install-Module -Name Az.ImageBuilder -AllowPrerelease -Force | Out-Null }\r\n\r\nWrite-Host \"=== Starting the image build\"\r\nRunWithRetries {\r\n    Invoke-AzResourceAction -ResourceName \"${env:imageTemplateName}\" -ResourceGroupName \"${env:resourceGroupName}\" -ResourceType \"Microsoft.VirtualMachineImages/imageTemplates\" -ApiVersion \"2020-02-14\" -Action Run -Force\r\n}\r\n\r\nWrite-Host \"=== Waiting for the image build to complete\"\r\n\r\n# https://learn.microsoft.com/en-us/dotnet/api/microsoft.azure.powershell.cmdlets.imagebuilder.support.runstate?view=az-ps-latest\r\n$global:status = 'UNKNOWN'\r\nwhile ($global:status -ne 'Succeeded' -and $global:status -ne 'Failed' -and $global:status -ne 'Canceled') { \r\n    Start-Sleep -Seconds 15\r\n    RunWithRetries {\r\n        $global:info = Get-AzImageBuilderTemplate -ImageTemplateName ${env:imageTemplateName} -ResourceGroupName ${env:resourceGroupName}\r\n        $global:status = $info.LastRunStatusRunState\r\n    }\r\n}\r\n\r\n$buildStatusShort = \"status '$global:status', message '$($global:info.LastRunStatusMessage)'\"\r\nWrite-Host \"=== Image build completed with $buildStatusShort\"\r\n\r\n$ignoreBuildFailure = [bool]::Parse(\"${env:ignoreBuildFailure}\")\r\nif ( (!$ignoreBuildFailure) -and ($global:status -ne 'Succeeded')) {\r\n    Start-Sleep -Seconds 15 # Appears to help with the script output being captured in full\r\n    Write-Error \"!!! [ERROR] Image build failed with $buildStatusShort\"\r\n}\r\n\r\n$printCustomizationLogLastLines = [int]::Parse(\"${env:printCustomizationLogLastLines}\")\r\nif ($printCustomizationLogLastLines -ne 0) {\r\n\r\n    $stagingResourceGroupName = ${env:stagingResourceGroupName}\r\n    $logsFile = 'customization.log'\r\n    Write-Host \"=== Looking for storage account in staging RG '$stagingResourceGroupName'\"\r\n    $stagingStorageAccountName = (Get-AzResource -ResourceGroupName $stagingResourceGroupName -ResourceType \"Microsoft.Storage/storageAccounts\")[0].Name\r\n\r\n    $stagingStorageAccountKey = $(Get-AzStorageAccountKey -StorageAccountName $stagingStorageAccountName -ResourceGroupName $stagingResourceGroupName)[0].value\r\n    $ctx = New-AzStorageContext -StorageAccountName $stagingStorageAccountName -StorageAccountKey $stagingStorageAccountKey\r\n    $logsBlob = Get-AzStorageBlob -Context $ctx -Container packerlogs | Where-Object { $_.Name -like \"*/$logsFile\" }\r\n    if ($logsBlob) {\r\n        Write-Host \"=== Downloading $logsFile from storage account '$stagingStorageAccountName'\"\r\n        Get-AzStorageBlobContent -Context $ctx -CloudBlob $logsBlob.ICloudBlob -Destination $logsFile -Force | Format-List\r\n\r\n        if ($printCustomizationLogLastLines -gt 0) {\r\n            Write-Host \"=== Last $printCustomizationLogLastLines lines of $logsFile :`n\"\r\n            Write-Host \"$(Get-Content $logsFile -Tail $printCustomizationLogLastLines | Out-String)\"\r\n        }\r\n        else {\r\n            Write-Host \"=== Content of $logsFile :`n\"\r\n            Write-Host \"$(Get-Content $logsFile | Out-String)\"\r\n        }\r\n    }\r\n    else {\r\n        Write-Host \"Could not find customization.log in storage account: $stagingStorageAccountName\"\r\n    }\r\n}\r\n\r\nWrite-Host \"=== DONE\"\r\nStart-Sleep -Seconds 15 # Appears to help with the script output being captured in full\r\n",
                            "downloadArtifactsScriptText": "[replace(variables('$fxv#0'), '\r\n', '\n')]",
                            "downloadArtifactsScriptLines": "[concat(createArray(format('$scriptsRepoUrl = ''{0}''', parameters('artifactSource').Url), format('$scriptsRepoBranch = ''{0}''', parameters('artifactSource').Branch), format('$scriptsRepoPath = ''{0}''', parameters('artifactSource').Path)), split(variables('downloadArtifactsScriptText'), '\n'))]",
                            "customizers": "[concat(createArray(createObject('type', 'PowerShell', 'name', 'EnvVarsOnStart', 'runAsSystem', false(), 'runElevated', false(), 'inline', createArray('Write-Host \"=== Environment variables on start:\"', 'Get-ChildItem Env: | Sort-Object -Property name | ForEach-Object { \"$($_.Name)=$($_.Value)\" }')), createObject('type', 'PowerShell', 'name', 'DownloadArtifacts', 'inline', variables('downloadArtifactsScriptLines'))), variables('artifactCustomizers'))]",
                            "tags": {
                              "imageName": "[parameters('imageName')]",
                              "imageTemplate": "[parameters('imageVersion')]",
                              "deploymentName": "[deployment().name]"
                            },
                            "imageTemplateName": "[format('{0}-{1}', parameters('imageName'), parameters('imageVersion'))]",
                            "stagingResourceGroupName": "[format('{0}-stg', variables('imageTemplateName'))]",
                            "baseUrnImageParts": "[split(parameters('baseImage'), ':')]",
                            "imageSource": "[if(startsWith(parameters('baseImage'), '/subscriptions/'), createObject('type', 'SharedImageVersion', 'imageVersionId', parameters('baseImage')), createObject('type', 'PlatformImage', 'publisher', variables('baseUrnImageParts')[0], 'offer', variables('baseUrnImageParts')[1], 'sku', variables('baseUrnImageParts')[2], 'version', variables('baseUrnImageParts')[3]))]",
                            "replicationRegions": "[map(parameters('publishingProfile').targetRegions, lambda('targetRegion', lambdaVariables('targetRegion').name))]",
                            "scripts": [
                              "[variables('$fxv#1')]",
                              "[variables('$fxv#2')]"
                            ]
                          },
                          "resources": {
                            "imageTemplate": {
                              "type": "Microsoft.VirtualMachineImages/imageTemplates",
                              "apiVersion": "2022-02-14",
                              "name": "[variables('imageTemplateName')]",
                              "location": "[parameters('location')]",
                              "tags": "[variables('tags')]",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', parameters('builderIdentity'))]": {}
                                }
                              },
                              "properties": {
                                "buildTimeoutInMinutes": "[parameters('imageBuildTimeoutInMinutes')]",
                                "stagingResourceGroup": "[format('{0}/resourceGroups/{1}', subscription().id, variables('stagingResourceGroupName'))]",
                                "vmProfile": {
                                  "userAssignedIdentities": [
                                    "[parameters('imageIdentity')]"
                                  ],
                                  "vmSize": "[parameters('buildProfile').sku]",
                                  "osDiskSizeGB": "[parameters('buildProfile').diskSize]"
                                },
                                "source": "[variables('imageSource')]",
                                "customize": "[variables('customizers')]",
                                "distribute": "[variables('distribute')]"
                              }
                            },
                            "buildImageTemplateScript": {
                              "type": "Microsoft.Resources/deploymentScripts",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-build', parameters('imageName'))]",
                              "location": "[parameters('location')]",
                              "tags": "[variables('tags')]",
                              "kind": "AzurePowerShell",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', parameters('builderIdentity'))]": {}
                                }
                              },
                              "properties": {
                                "forceUpdateTag": "[parameters('guidId')]",
                                "azPowerShellVersion": "9.7",
                                "environmentVariables": [
                                  {
                                    "name": "imageTemplateName",
                                    "value": "[variables('imageTemplateName')]"
                                  },
                                  {
                                    "name": "resourceGroupName",
                                    "value": "[resourceGroup().name]"
                                  },
                                  {
                                    "name": "stagingResourceGroupName",
                                    "value": "[variables('stagingResourceGroupName')]"
                                  },
                                  {
                                    "name": "ignoreBuildFailure",
                                    "value": "[format('{0}', parameters('ignoreBuildFailure'))]"
                                  },
                                  {
                                    "name": "printCustomizationLogLastLines",
                                    "value": "[format('{0}', parameters('printCustomizationLogLastLines'))]"
                                  }
                                ],
                                "scriptContent": "[join(variables('scripts'), '\n\n')]",
                                "cleanupPreference": "OnSuccess",
                                "retentionInterval": "P1D"
                              },
                              "dependsOn": [
                                "imageTemplate"
                              ]
                            },
                            "logs": {
                              "existing": true,
                              "type": "Microsoft.Resources/deploymentScripts/logs",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}/{1}', format('{0}-build', parameters('imageName')), 'default')]",
                              "dependsOn": [
                                "buildImageTemplateScript"
                              ]
                            }
                          },
                          "outputs": {
                            "imageBuildLog": {
                              "type": "string",
                              "value": "[reference('logs').log]"
                            },
                            "stagingResourceGroupName": {
                              "type": "string",
                              "value": "[variables('stagingResourceGroupName')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "common",
                        "config",
                        "devtools",
                        "publishProfile",
                        "repoArtifacts"
                      ]
                    }
                  },
                  "outputs": {
                    "imageBuildLog": {
                      "type": "string",
                      "value": "[reference('aibImage').outputs.imageBuildLog.value]"
                    },
                    "stagingResourceGroupName": {
                      "type": "string",
                      "value": "[reference('aibImage').outputs.stagingResourceGroupName.value]"
                    }
                  }
                }
              }
            }
          },
          "outputs": {
            "imageBuildLog": {
              "type": "string",
              "value": "[reference('devBoxImage').outputs.imageBuildLog.value]"
            },
            "stagingResourceGroupName": {
              "type": "string",
              "value": "[reference('devBoxImage').outputs.stagingResourceGroupName.value]"
            }
          }
        }
      }
    },
    "MSBuildSdks": {
      "condition": "[variables('imagesWithDefaults').MSBuildSdks.shouldBuild]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('MSBuildSdksImg-{0}', uniqueString(deployment().name, resourceGroup().name))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "imageName": {
            "value": "[variables('imagesWithDefaults').MSBuildSdks.name]"
          },
          "builderIdentity": {
            "value": "[parameters('builderIdentity')]"
          },
          "imageIdentity": {
            "value": "[parameters('imageIdentity')]"
          },
          "galleryName": {
            "value": "[parameters('galleryName')]"
          },
          "artifactSource": {
            "value": "[variables('artifactSourceWithDefaults')]"
          },
          "ignoreBuildFailure": {
            "value": "[parameters('ignoreBuildFailure')]"
          },
          "imageBuildProfile": {
            "value": "[parameters('imageBuildProfile')]"
          },
          "imageBuildTimeoutInMinutes": {
            "value": "[parameters('imageBuildTimeoutInMinutes')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.92.45157",
              "templateHash": "3074550060154812790"
            }
          },
          "definitions": {
            "_1.artifactSource": {
              "type": "object",
              "properties": {
                "Url": {
                  "type": "string"
                },
                "Branch": {
                  "type": "string"
                },
                "Path": {
                  "type": "string"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../exports.bicep"
                }
              }
            },
            "_1.imageResult": {
              "type": "object",
              "properties": {
                "buildLog": {
                  "type": "string",
                  "nullable": true
                },
                "stagingResourceGroupName": {
                  "type": "string",
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../exports.bicep"
                }
              }
            },
            "_1.images": {
              "type": "object",
              "properties": {
                "eShop": {
                  "$ref": "#/definitions/_1.imageSettings",
                  "nullable": true
                },
                "axios": {
                  "$ref": "#/definitions/_1.imageSettings",
                  "nullable": true
                },
                "MSBuildSdks": {
                  "$ref": "#/definitions/_1.imageSettings",
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../exports.bicep"
                }
              }
            },
            "_1.imageSettings": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true
                },
                "baseImage": {
                  "type": "string",
                  "nullable": true
                },
                "shouldBuild": {
                  "type": "bool"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../exports.bicep"
                }
              }
            },
            "_1.results": {
              "type": "object",
              "properties": {
                "eShop": {
                  "$ref": "#/definitions/_1.imageResult"
                },
                "axios": {
                  "$ref": "#/definitions/_1.imageResult"
                },
                "MSBuildSdks": {
                  "$ref": "#/definitions/_1.imageResult"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../exports.bicep"
                }
              }
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "imageName": {
              "type": "string"
            },
            "builderIdentity": {
              "type": "string"
            },
            "imageIdentity": {
              "type": "string"
            },
            "galleryName": {
              "type": "string"
            },
            "imageBuildProfile": {
              "type": "object"
            },
            "imageBuildTimeoutInMinutes": {
              "type": "int"
            },
            "ignoreBuildFailure": {
              "type": "bool",
              "defaultValue": false
            },
            "artifactSource": {
              "$ref": "#/definitions/_1.artifactSource"
            }
          },
          "resources": {
            "devBoxImage": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('MSBuildSdks-{0}', uniqueString(deployment().name, resourceGroup().name))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "imageName": {
                    "value": "[parameters('imageName')]"
                  },
                  "isBaseImage": {
                    "value": false
                  },
                  "galleryName": {
                    "value": "[parameters('galleryName')]"
                  },
                  "repos": {
                    "value": [
                      {
                        "Url": "https://github.com/microsoft/MSBuildSdks",
                        "Kind": "MSBuild"
                      }
                    ]
                  },
                  "imageIdentity": {
                    "value": "[parameters('imageIdentity')]"
                  },
                  "builderIdentity": {
                    "value": "[parameters('builderIdentity')]"
                  },
                  "artifactSource": {
                    "value": "[parameters('artifactSource')]"
                  },
                  "ignoreBuildFailure": {
                    "value": "[parameters('ignoreBuildFailure')]"
                  },
                  "imageBuildProfile": {
                    "value": "[parameters('imageBuildProfile')]"
                  },
                  "imageBuildTimeoutInMinutes": {
                    "value": "[parameters('imageBuildTimeoutInMinutes')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.31.92.45157",
                      "templateHash": "3662675939873031723"
                    }
                  },
                  "definitions": {
                    "_1.artifactSource": {
                      "type": "object",
                      "properties": {
                        "Url": {
                          "type": "string"
                        },
                        "Branch": {
                          "type": "string"
                        },
                        "Path": {
                          "type": "string"
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "../exports.bicep"
                        }
                      }
                    },
                    "_1.imageResult": {
                      "type": "object",
                      "properties": {
                        "buildLog": {
                          "type": "string",
                          "nullable": true
                        },
                        "stagingResourceGroupName": {
                          "type": "string",
                          "nullable": true
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "../exports.bicep"
                        }
                      }
                    },
                    "_1.images": {
                      "type": "object",
                      "properties": {
                        "eShop": {
                          "$ref": "#/definitions/_1.imageSettings",
                          "nullable": true
                        },
                        "axios": {
                          "$ref": "#/definitions/_1.imageSettings",
                          "nullable": true
                        },
                        "MSBuildSdks": {
                          "$ref": "#/definitions/_1.imageSettings",
                          "nullable": true
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "../exports.bicep"
                        }
                      }
                    },
                    "_1.imageSettings": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true
                        },
                        "baseImage": {
                          "type": "string",
                          "nullable": true
                        },
                        "shouldBuild": {
                          "type": "bool"
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "../exports.bicep"
                        }
                      }
                    },
                    "_1.results": {
                      "type": "object",
                      "properties": {
                        "eShop": {
                          "$ref": "#/definitions/_1.imageResult"
                        },
                        "axios": {
                          "$ref": "#/definitions/_1.imageResult"
                        },
                        "MSBuildSdks": {
                          "$ref": "#/definitions/_1.imageResult"
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "../exports.bicep"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "imageName": {
                      "type": "string",
                      "metadata": {
                        "description": "Used to name \"VM image definition\" and some other Azure resources."
                      }
                    },
                    "isBaseImage": {
                      "type": "bool",
                      "metadata": {
                        "description": "Specifies whether the image is a base image, i.e. that is not meant to be used directly by users but as a base for other images. Base images cannot be used with Dev Box service at the moment."
                      }
                    },
                    "galleryName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Name of the Compute Gallery where to publish the resulting image. The gallery is assumed to be in the same resource group as the resulting image.\nThis parameter is ignored if imagePublishingProfile explicitly defines the list of Compute Galleries via its computeGalleries property.\n"
                      }
                    },
                    "galleryResourceGroup": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]",
                      "metadata": {
                        "description": "Compute Gallery resource group. Ignored if galleryName is not provided."
                      }
                    },
                    "gallerySubscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().subscriptionId]",
                      "metadata": {
                        "description": "Compute Gallery subscription id. Ignored if galleryName is not provided."
                      }
                    },
                    "imagePublishingProfile": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Custom image Publishing Profile that can be partially specified with the rest of the properties filled in with the following defaults:\n- targetRegions : one replica in the same region as the target image;\n- computeGalleries : single gallery but only if galleryName parameter is provided.\n"
                      }
                    },
                    "imageGalleries": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Publish image to multiple image galleries"
                      }
                    },
                    "targetRegions": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Replicate image to multiple regions"
                      }
                    },
                    "builderIdentity": {
                      "type": "string",
                      "metadata": {
                        "description": "Full resource ID of Azure Managed Identity to be associated with Azure Image Builder Template and helper deployment scripts"
                      }
                    },
                    "imageIdentity": {
                      "type": "string",
                      "metadata": {
                        "description": "Full resource ID of Azure Managed Identity to use when accessing Azure and Azure DevOps resources during image creation"
                      }
                    },
                    "repos": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Git repositories to clone/update and warm up"
                      }
                    },
                    "afterReposClonedArtifacts": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Artifacts to run after all repos are cloned/updated but before packages are restored and repos are built"
                      }
                    },
                    "beforeReposSetupArtifacts": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Artifacts to run before setting up repositories"
                      }
                    },
                    "additionalArtifacts": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Artifacts to run after setting up repositories"
                      }
                    },
                    "imageVersion": {
                      "type": "string",
                      "defaultValue": "[utcNow('yyyy.MMdd.HHmmss')]"
                    },
                    "baseImage": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "When this parameter is not specified, the default base image used is https://azuremarketplace.microsoft.com/en-us/marketplace/apps/microsoftvisualstudio.visualstudioplustools.\nWhen this parameter is specified, the base image is expected to be in one of the following formats:\n1) Azure Marketplace image URN in the format <publisher>:<offer>:sku>:<version> (https://learn.microsoft.com/en-us/azure/virtual-machines/windows/cli-ps-findimage#terminology)\n2) Azure Compute Gallery image resource id (see https://learn.microsoft.com/en-us/azure/virtual-machines/linux/image-builder-json?tabs=bicep%2Cazure-powershell#sharedimageversion-source)\n3) Azure Compute Gallery image name by default is assumed to be in the same resource group as the deployment\n"
                      }
                    },
                    "defenderExclusions": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Whether to add recommended Windows defender exclusions"
                      }
                    },
                    "userDefenderExclusions": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "List of directories to add to Windows Defender exclutions when user logs in for the first time. The entries can reference user specific environment variables like %USERPROFILE%, %LOCALAPPDATA%, etc"
                      }
                    },
                    "createDevDrive": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Whether to create a separate volume, format it with Dev Drive and use the volume for all repos, caches and related tools.\nRequires a compatible Win11 22H2 October 2023 or later base image.\n"
                      }
                    },
                    "devDriveOptions": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional configuration for Dev Drive."
                      }
                    },
                    "osDriveMinSizeGB": {
                      "type": "int",
                      "defaultValue": 160,
                      "metadata": {
                        "description": "The required minimum size of NTFS C: drive when a Dev Drive volume is created.\nDefaults to 160 GB. The Dev Drive will consume the rest of the space on the machine's\nmain virtual disk. This size must be 50GB or greater to contain the OS and apps.\n\nParameters osDriveMinSizeGB and imageBuildProfile.diskSize allow full control over the sizes of C: and Q: drives.\n\nNote that because the disk image's linear partition space will now contain two partitions,\nthe size of C: cannot later be expanded. This means if you are deriving your Dev Box image\nfrom one with a smaller OS drive size than you need, you need to change the base image to a\nlarger size, or create a new base image with the size you want.\nNote: This is only applicable if createDevDrive is set to true.\n"
                      }
                    },
                    "imageBuildProfile": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Custom VS SKU to use when allocating the VM for image creation"
                      }
                    },
                    "imageBuildTimeoutInMinutes": {
                      "type": "int",
                      "defaultValue": 180,
                      "metadata": {
                        "description": "Timeout in minutes for the image build process"
                      }
                    },
                    "devTools": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Configuration of developer tools. See defaultDevTools for defaults."
                      }
                    },
                    "credentialProvider": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Configuration of Azure Artifact credential providers. See defaultCredentialProvider for defaults."
                      }
                    },
                    "customMetadata": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Custom metadata for the image to write into ImageBuildReport.txt on the desktop and report in telemetry. A proposed use case is to add information about image owners, support contacts, etc."
                      }
                    },
                    "disableAllDiskWriteCacheFlushing": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Turns off disk write cache buffer flushing for 3-5% faster builds and 20-30% faster cache downloads."
                      }
                    },
                    "installLatestWinGet": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Pre-install winget during image creation and make it available to the user right away on logging in. \nBy default, winget is installed lazily after user is logged in for the first time.\nMore at https://learn.microsoft.com/en-us/windows/package-manager/winget/#install-winget\n"
                      }
                    },
                    "artifactSource": {
                      "$ref": "#/definitions/_1.artifactSource",
                      "metadata": {
                        "description": "Git repository containing artifacts to be used in the image build"
                      }
                    },
                    "printCustomizationLogLastLines": {
                      "type": "int",
                      "defaultValue": 1000,
                      "metadata": {
                        "description": "Number of lines to print from the end of the customization log. Value of -1 will print the entire log. Value of 0 will print nothing."
                      }
                    },
                    "ignoreBuildFailure": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Set to true to ignore image build failure and return through imageBuildLog the tail of the build customization log as defined by printCustomizationLogLastLines. Useful for debugging build failures."
                      }
                    }
                  },
                  "variables": {
                    "allParamsForLogging": {
                      "imageName": "[parameters('imageName')]",
                      "isBaseImage": "[parameters('isBaseImage')]",
                      "baseImage": "[parameters('baseImage')]",
                      "deploymentName": "[deployment().name]",
                      "galleryName": "[parameters('galleryName')]",
                      "galleryResourceGroup": "[parameters('galleryResourceGroup')]",
                      "gallerySubscriptionId": "[parameters('gallerySubscriptionId')]",
                      "imagePublishingProfile": "[parameters('imagePublishingProfile')]",
                      "imageGalleries": "[parameters('imageGalleries')]",
                      "targetRegions": "[parameters('targetRegions')]",
                      "builderIdentity": "[parameters('builderIdentity')]",
                      "imageIdentity": "[parameters('imageIdentity')]",
                      "repos": "[parameters('repos')]",
                      "afterReposClonedArtifacts": "[parameters('afterReposClonedArtifacts')]",
                      "beforeReposSetupArtifacts": "[parameters('beforeReposSetupArtifacts')]",
                      "additionalArtifacts": "[parameters('additionalArtifacts')]",
                      "imageVersion": "[parameters('imageVersion')]",
                      "defenderExclusions": "[parameters('defenderExclusions')]",
                      "userDefenderExclusions": "[parameters('userDefenderExclusions')]",
                      "createDevDrive": "[parameters('createDevDrive')]",
                      "devDriveOptions": "[parameters('devDriveOptions')]",
                      "osDriveMinSizeGB": "[parameters('osDriveMinSizeGB')]",
                      "imageBuildProfile": "[parameters('imageBuildProfile')]",
                      "devTools": "[parameters('devTools')]",
                      "installLatestWinGet": "[parameters('installLatestWinGet')]",
                      "credentialProvider": "[parameters('credentialProvider')]",
                      "customMetadata": "[parameters('customMetadata')]",
                      "disableAllDiskWriteCacheFlushing": "[parameters('disableAllDiskWriteCacheFlushing')]",
                      "artifactSource": "[parameters('artifactSource')]",
                      "printCustomizationLogLastLines": "[parameters('printCustomizationLogLastLines')]",
                      "ignoreBuildFailure": "[parameters('ignoreBuildFailure')]"
                    },
                    "defaultDevTools": {
                      "VisualStudioSKU": "Enterprise",
                      "VisualStudioWorkloads": "minimal",
                      "VisualStudioBootstrapperURL": "https://aka.ms/vs/17/release/vs_Enterprise.exe",
                      "AlwaysInstallVisualStudio": false
                    },
                    "defaultCredentialProvider": {
                      "version": "",
                      "installNet6": true,
                      "msal": true,
                      "canShowDialog": true
                    },
                    "createSeparateSourcesDrive": "[parameters('createDevDrive')]",
                    "devToolsWithDefaults": "[union(variables('defaultDevTools'), parameters('devTools'))]",
                    "credentialProviderWithDefaults": "[union(variables('defaultCredentialProvider'), parameters('credentialProvider'))]"
                  },
                  "resources": {
                    "config": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('config-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "createSeparateSourcesDrive": {
                            "value": "[variables('createSeparateSourcesDrive')]"
                          },
                          "imageBuildProfile": {
                            "value": "[parameters('imageBuildProfile')]"
                          },
                          "baseImage": {
                            "value": "[parameters('baseImage')]"
                          },
                          "galleryName": {
                            "value": "[parameters('galleryName')]"
                          },
                          "galleryResourceGroup": {
                            "value": "[parameters('galleryResourceGroup')]"
                          },
                          "gallerySubscriptionId": {
                            "value": "[parameters('gallerySubscriptionId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.92.45157",
                              "templateHash": "17857372973883463269"
                            }
                          },
                          "parameters": {
                            "imageBuildProfile": {
                              "type": "object"
                            },
                            "createSeparateSourcesDrive": {
                              "type": "bool"
                            },
                            "baseImage": {
                              "type": "string"
                            },
                            "galleryName": {
                              "type": "string"
                            },
                            "galleryResourceGroup": {
                              "type": "string"
                            },
                            "gallerySubscriptionId": {
                              "type": "string"
                            },
                            "ntfsDriveRoot": {
                              "type": "string",
                              "defaultValue": "C:\\"
                            },
                            "sourcesDriveRoot": {
                              "type": "string",
                              "defaultValue": "[if(parameters('createSeparateSourcesDrive'), 'Q:\\', parameters('ntfsDriveRoot'))]"
                            }
                          },
                          "variables": {
                            "sourcesDirWithoutDriveLetter": "src",
                            "sourcesDir": "[format('{0}{1}', parameters('sourcesDriveRoot'), variables('sourcesDirWithoutDriveLetter'))]",
                            "shortcutDriveRoot": "[parameters('sourcesDriveRoot')]",
                            "baseImageDefault": "MicrosoftVisualStudio:visualstudioplustools:vs-2022-ent-general-win11-m365-gen2:latest",
                            "defaultImageBuildProfile": {
                              "diskSize": 512,
                              "sku": "Standard_D2_v4"
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "ntfsDriveRoot": {
                              "type": "string",
                              "value": "[parameters('ntfsDriveRoot')]"
                            },
                            "sourcesDriveRoot": {
                              "type": "string",
                              "value": "[parameters('sourcesDriveRoot')]"
                            },
                            "shortcutDriveRoot": {
                              "type": "string",
                              "value": "[variables('shortcutDriveRoot')]"
                            },
                            "sourcesDirWithoutDriveLetter": {
                              "type": "string",
                              "value": "[variables('sourcesDirWithoutDriveLetter')]"
                            },
                            "defenderExclusionPathList": {
                              "type": "string",
                              "value": "[variables('sourcesDir')]"
                            },
                            "ntfsSourcesDirExclusionPath": {
                              "type": "string",
                              "value": "[format('{0}{1}', parameters('ntfsDriveRoot'), variables('sourcesDirWithoutDriveLetter'))]"
                            },
                            "toolsRoot": {
                              "type": "string",
                              "value": "[format('{0}.tools', parameters('sourcesDriveRoot'))]"
                            },
                            "baseImageFull": {
                              "type": "string",
                              "value": "[if(empty(parameters('baseImage')), variables('baseImageDefault'), if(or(contains(parameters('baseImage'), '/'), contains(parameters('baseImage'), ':')), parameters('baseImage'), format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Compute/galleries/{2}/images/{3}/versions/latest', parameters('gallerySubscriptionId'), parameters('galleryResourceGroup'), parameters('galleryName'), parameters('baseImage'))))]"
                            },
                            "imageBuildProfile": {
                              "type": "object",
                              "value": "[union(variables('defaultImageBuildProfile'), parameters('imageBuildProfile'))]"
                            }
                          }
                        }
                      }
                    },
                    "devtools": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('devtools-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "devTools": {
                            "value": "[variables('devToolsWithDefaults')]"
                          },
                          "imageContainsLatestVisualStudio": {
                            "value": "[or(startsWith(reference('config').outputs.baseImageFull.value, 'MicrosoftVisualStudio:visualstudio2022:'), startsWith(reference('config').outputs.baseImageFull.value, 'MicrosoftVisualStudio:visualstudioplustools:vs-2022'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.92.45157",
                              "templateHash": "1599127666886005263"
                            }
                          },
                          "parameters": {
                            "devTools": {
                              "type": "object"
                            },
                            "imageContainsLatestVisualStudio": {
                              "type": "bool"
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "installOnce": {
                              "type": "array",
                              "value": "[concat(createArray(createObject('name', 'windows-vscodeinstall'), createObject('name', 'windows-sysinternals-suite', 'Parameters', createObject('AddShortcuts', true()))), if(or(parameters('devTools').AlwaysInstallVisualStudio, not(parameters('imageContainsLatestVisualStudio'))), createArray(createObject('Name', 'windows-visualstudio-bootstrapper', 'Parameters', union(createObject('Workloads', parameters('devTools').VisualStudioWorkloads, 'SKU', parameters('devTools').VisualStudioSKU, 'VSBootstrapperURL', parameters('devTools').VisualStudioBootstrapperURL), if(not(empty(tryGet(parameters('devTools'), 'VisualStudioInstallationDirectory'))), createObject('InstallationDirectory', parameters('devTools').VisualStudioInstallationDirectory), createObject()))), createObject('name', 'WindowsRestart')), createArray()))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "config"
                      ]
                    },
                    "repoArtifacts": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('repoArtifacts-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "ntfsDriveRoot": {
                            "value": "[reference('config').outputs.ntfsDriveRoot.value]"
                          },
                          "sourcesDriveRoot": {
                            "value": "[reference('config').outputs.sourcesDriveRoot.value]"
                          },
                          "sourcesDirWithoutDriveLetter": {
                            "value": "[reference('config').outputs.sourcesDirWithoutDriveLetter.value]"
                          },
                          "toolsRoot": {
                            "value": "[reference('config').outputs.toolsRoot.value]"
                          },
                          "credentialProvider": {
                            "value": "[variables('credentialProviderWithDefaults')]"
                          },
                          "repos": {
                            "value": "[parameters('repos')]"
                          },
                          "shortcutDriveRoot": {
                            "value": "[reference('config').outputs.shortcutDriveRoot.value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.92.45157",
                              "templateHash": "9198691132934965703"
                            }
                          },
                          "parameters": {
                            "ntfsDriveRoot": {
                              "type": "string"
                            },
                            "sourcesDriveRoot": {
                              "type": "string"
                            },
                            "sourcesDirWithoutDriveLetter": {
                              "type": "string"
                            },
                            "shortcutDriveRoot": {
                              "type": "string"
                            },
                            "toolsRoot": {
                              "type": "string"
                            },
                            "credentialProvider": {
                              "type": "object"
                            },
                            "repos": {
                              "type": "array",
                              "defaultValue": []
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "reposWithDefaults",
                                "count": "[length(parameters('repos'))]",
                                "input": {
                                  "Url": "[parameters('repos')[copyIndex('reposWithDefaults')].Url]",
                                  "SourceControl": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'SourceControl'), 'git')]",
                                  "Branch": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'Branch'), '')]",
                                  "Commit": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'Commit'), '')]",
                                  "Kind": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'Kind'), 'Data')]",
                                  "RestoreScriptEnvVars": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'RestoreScriptEnvVars'), createObject())]",
                                  "RestoreScript": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'RestoreScript'), '')]",
                                  "AdditionalRepoFeeds": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'AdditionalRepoFeeds'), createArray())]",
                                  "Build": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'Build'), createObject())]",
                                  "HistoryDepth": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'HistoryDepth'), 0)]",
                                  "DesktopShortcutEnableStr": "[if(contains(parameters('repos')[copyIndex('reposWithDefaults')], 'DesktopShortcutEnable'), format('{0}', parameters('repos')[copyIndex('reposWithDefaults')].DesktopShortcutEnable), '')]",
                                  "DesktopShortcutScriptPath": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'DesktopShortcutScriptPath'), '')]",
                                  "DesktopShortcutRunAsAdmin": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'DesktopShortcutRunAsAdmin'), false())]",
                                  "DesktopShortcutIconPath": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'DesktopShortcutIconPath'), '')]",
                                  "DesktopShortcutName": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'DesktopShortcutName'), '')]",
                                  "EnableGitCommitGraph": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'EnableGitCommitGraph'), true())]",
                                  "SparseCheckoutFolders": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'SparseCheckoutFolders'), createArray())]",
                                  "RecurseSubmodules": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'RecurseSubmodules'), false())]",
                                  "AvoidDevDrive": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'AvoidDevDrive'), false())]",
                                  "RepoRootWithoutDriveLetter": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'RepoRootWithoutDriveLetter'), '')]",
                                  "CustomScript": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'CustomScript'), '')]",
                                  "PackagesFeed": "[coalesce(tryGet(parameters('repos')[copyIndex('reposWithDefaults')], 'PackagesFeed'), '')]"
                                }
                              }
                            ],
                            "avoidDevDriveRepos": "[filter(variables('reposWithDefaults'), lambda('repo', equals(lambdaVariables('repo').AvoidDevDrive, true())))]"
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "modules",
                                "count": "[length(variables('reposWithDefaults'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('artifacts-repo-{0}-{1}', copyIndex(), uniqueString(deployment().name, resourceGroup().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "sourcesDriveRoot": {
                                    "value": "[parameters('sourcesDriveRoot')]"
                                  },
                                  "sourcesDirWithoutDriveLetter": {
                                    "value": "[parameters('sourcesDirWithoutDriveLetter')]"
                                  },
                                  "shortcutDriveRoot": {
                                    "value": "[parameters('shortcutDriveRoot')]"
                                  },
                                  "ntfsDriveRoot": {
                                    "value": "[parameters('ntfsDriveRoot')]"
                                  },
                                  "avoidDevDrive": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].AvoidDevDrive]"
                                  },
                                  "repoRootWithoutDriveLetter": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].RepoRootWithoutDriveLetter]"
                                  },
                                  "repoUrl": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].Url]"
                                  },
                                  "repoSourceControl": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].SourceControl]"
                                  },
                                  "repoBranch": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].Branch]"
                                  },
                                  "repoCommit": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].Commit]"
                                  },
                                  "repoKind": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].Kind]"
                                  },
                                  "customScript": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].CustomScript]"
                                  },
                                  "restoreScriptEnvVars": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].RestoreScriptEnvVars]"
                                  },
                                  "restoreScript": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].RestoreScript]"
                                  },
                                  "packagesFeed": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].PackagesFeed]"
                                  },
                                  "additionalRepoFeeds": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].AdditionalRepoFeeds]"
                                  },
                                  "build": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].Build]"
                                  },
                                  "historyDepth": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].HistoryDepth]"
                                  },
                                  "desktopShortcutEnable": "[if(empty(variables('reposWithDefaults')[copyIndex()].DesktopShortcutEnableStr), createObject('value', not(equals(variables('reposWithDefaults')[copyIndex()].Kind, 'Data'))), createObject('value', bool(variables('reposWithDefaults')[copyIndex()].DesktopShortcutEnableStr)))]",
                                  "desktopShortcutScriptPath": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].DesktopShortcutScriptPath]"
                                  },
                                  "desktopShortcutRunAsAdmin": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].DesktopShortcutRunAsAdmin]"
                                  },
                                  "desktopShortcutIconPath": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].DesktopShortcutIconPath]"
                                  },
                                  "desktopShortcutName": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].DesktopShortcutName]"
                                  },
                                  "enableGitCommitGraph": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].EnableGitCommitGraph]"
                                  },
                                  "recurseSubmodules": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].RecurseSubmodules]"
                                  },
                                  "sparseCheckoutFolders": {
                                    "value": "[variables('reposWithDefaults')[copyIndex()].SparseCheckoutFolders]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.31.92.45157",
                                      "templateHash": "1673860177138827114"
                                    }
                                  },
                                  "definitions": {
                                    "SourceControl": {
                                      "type": "string",
                                      "allowedValues": [
                                        "git",
                                        "gvfs"
                                      ]
                                    }
                                  },
                                  "parameters": {
                                    "sourcesDriveRoot": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "C:\\ or Q:\\ - drive where by default cloned repos are placed"
                                      }
                                    },
                                    "sourcesDirWithoutDriveLetter": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Always \"src\" - root where by default cloned repos are placed, without drive letter and leading or trailing slashes"
                                      }
                                    },
                                    "shortcutDriveRoot": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "C:\\ or Q:\\ - drive where by default cloned repos will be located when user logs in"
                                      }
                                    },
                                    "avoidDevDrive": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Always place the repo on NTFS - used when the repo doesn't support Dev Drive"
                                      }
                                    },
                                    "ntfsDriveRoot": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Always C:\\ - drive where to clone a repo if the code drive should be avoided"
                                      }
                                    },
                                    "repoRootWithoutDriveLetter": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Repo root path without drive letter and leading or trailing slashes."
                                      }
                                    },
                                    "repoUrl": {
                                      "type": "string"
                                    },
                                    "repoSourceControl": {
                                      "$ref": "#/definitions/SourceControl",
                                      "metadata": {
                                        "description": "The source control system of the repository."
                                      }
                                    },
                                    "repoBranch": {
                                      "type": "string"
                                    },
                                    "repoCommit": {
                                      "type": "string"
                                    },
                                    "restoreScriptEnvVars": {
                                      "type": "object"
                                    },
                                    "restoreScript": {
                                      "type": "string"
                                    },
                                    "additionalRepoFeeds": {
                                      "type": "array"
                                    },
                                    "build": {
                                      "type": "object"
                                    },
                                    "historyDepth": {
                                      "type": "int"
                                    },
                                    "desktopShortcutEnable": {
                                      "type": "bool"
                                    },
                                    "desktopShortcutScriptPath": {
                                      "type": "string"
                                    },
                                    "desktopShortcutRunAsAdmin": {
                                      "type": "bool"
                                    },
                                    "desktopShortcutIconPath": {
                                      "type": "string"
                                    },
                                    "desktopShortcutName": {
                                      "type": "string"
                                    },
                                    "recurseSubmodules": {
                                      "type": "bool"
                                    },
                                    "enableGitCommitGraph": {
                                      "type": "bool"
                                    },
                                    "sparseCheckoutFolders": {
                                      "type": "array"
                                    },
                                    "packagesFeed": {
                                      "type": "string"
                                    },
                                    "customScript": {
                                      "type": "string"
                                    },
                                    "repoKind": {
                                      "type": "string",
                                      "allowedValues": [
                                        "MSBuild",
                                        "Custom",
                                        "Data"
                                      ],
                                      "metadata": {
                                        "description": " Supported repository types:\n- MSBuild - Microsoft public build engine that is integrated with Nuget ecosystem.\n- Custom - any other build environment that doesn't fit into either of the two above.\n- Data - the repo should be simply cloned but no other processing for it is needed.\n"
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "setTempEnvVars",
                                        "count": "[length(items(parameters('restoreScriptEnvVars')))]",
                                        "input": {
                                          "name": "windows-setenvvar",
                                          "parameters": {
                                            "Variable": "[items(parameters('restoreScriptEnvVars'))[copyIndex('setTempEnvVars')].key]",
                                            "Value": "[items(parameters('restoreScriptEnvVars'))[copyIndex('setTempEnvVars')].value]",
                                            "PrintValue": "true"
                                          }
                                        }
                                      },
                                      {
                                        "name": "unsetTempEnvVars",
                                        "count": "[length(items(parameters('restoreScriptEnvVars')))]",
                                        "input": {
                                          "name": "windows-unsetenvvar",
                                          "parameters": {
                                            "Variable": "[items(parameters('restoreScriptEnvVars'))[copyIndex('unsetTempEnvVars')].key]"
                                          }
                                        }
                                      }
                                    ],
                                    "repoName": "[last(split(parameters('repoUrl'), '/'))]",
                                    "repoDriveRoot": "[if(parameters('avoidDevDrive'), parameters('ntfsDriveRoot'), parameters('sourcesDriveRoot'))]",
                                    "repoRootDir": "[if(empty(parameters('repoRootWithoutDriveLetter')), format('{0}{1}\\{2}', variables('repoDriveRoot'), parameters('sourcesDirWithoutDriveLetter'), variables('repoName')), format('{0}{1}', variables('repoDriveRoot'), parameters('repoRootWithoutDriveLetter')))]",
                                    "repoShortcutDriveRoot": "[if(parameters('avoidDevDrive'), parameters('ntfsDriveRoot'), parameters('shortcutDriveRoot'))]",
                                    "repoShortcutDir": "[if(empty(parameters('repoRootWithoutDriveLetter')), format('{0}{1}\\{2}', variables('repoShortcutDriveRoot'), parameters('sourcesDirWithoutDriveLetter'), variables('repoName')), format('{0}{1}', variables('repoShortcutDriveRoot'), parameters('repoRootWithoutDriveLetter')))]",
                                    "codeRepoArtifacts": [
                                      {
                                        "name": "windows-dotnetcore-sdk",
                                        "parameters": {
                                          "globalJsonFilePath": "[format('{0}\\global.json', variables('repoRootDir'))]"
                                        }
                                      },
                                      {
                                        "name": "windows-install-dotnet-sdk",
                                        "parameters": {
                                          "globalJsonPath": "[format('{0}\\global.json', variables('repoRootDir'))]"
                                        }
                                      }
                                    ],
                                    "cloneSubmodulesArg": "[if(parameters('recurseSubmodules'), '--recurse-submodules --shallow-submodules', '')]",
                                    "optionalCloningParameters": "[if(greater(parameters('historyDepth'), 0), format('--depth {0} --no-single-branch --no-tags {1}', parameters('historyDepth'), variables('cloneSubmodulesArg')), format('{0}', variables('cloneSubmodulesArg')))]",
                                    "fetchSubmodulesArg": "[if(parameters('recurseSubmodules'), '--recurse-submodules', '')]",
                                    "optionalFetchParameters": "[if(greater(parameters('historyDepth'), 0), format('--no-tags {0}', variables('fetchSubmodulesArg')), format('{0}', variables('fetchSubmodulesArg')))]",
                                    "syncRepo": {
                                      "name": "windows-clone-update-repo",
                                      "parameters": "[union(createObject('RepoUrl', parameters('repoUrl'), 'Repository_SourceControl', parameters('repoSourceControl'), 'Repository_TargetDirectory', variables('repoRootDir'), 'Repository_cloneIfNotExists', 'true', 'Repository_optionalCloningParameters', variables('optionalCloningParameters'), 'Repository_optionalFetchParameters', variables('optionalFetchParameters'), 'CommitId', if(not(empty(parameters('repoCommit'))), parameters('repoCommit'), 'latest'), 'EnableGitCommitGraph', parameters('enableGitCommitGraph')), if(not(empty(parameters('repoBranch'))), createObject('BranchName', parameters('repoBranch')), createObject()), if(not(empty(parameters('sparseCheckoutFolders'))), createObject('SparseCheckoutFolders', join(parameters('sparseCheckoutFolders'), ',')), createObject()))]"
                                    },
                                    "buildRepoArtifact": "[if(and(equals(parameters('repoKind'), 'MSBuild'), or(not(contains(parameters('build'), 'Disable')), not(parameters('build').Disable))), createArray(createObject('name', 'windows-build-repo', 'parameters', union(createObject('RepoRoot', variables('repoRootDir')), if(not(empty(parameters('additionalRepoFeeds'))), createObject('AdditionalRepoFeeds', join(parameters('additionalRepoFeeds'), ',')), createObject()), if(contains(parameters('build'), 'InitBuildScript'), createObject('InitBuildScript', parameters('build').InitBuildScript), createObject()), if(contains(parameters('build'), 'RunBuildScript'), createObject('RunBuildScript', parameters('build').RunBuildScript), createObject()), if(contains(parameters('build'), 'AdditionalBuildArguments'), createObject('AdditionalBuildArguments', parameters('build').AdditionalBuildArguments), createObject()), if(contains(parameters('build'), 'Dirs'), createObject('Dirs', join(parameters('build').Dirs, ',')), createObject())))), createArray())]",
                                    "createDevEnvShortCut": [
                                      {
                                        "name": "windows-create-devenv-shortcut",
                                        "parameters": "[union(createObject('RepoRoot', variables('repoShortcutDir'), 'RepoKind', parameters('repoKind'), 'ShortcutRunAsAdmin', parameters('desktopShortcutRunAsAdmin')), if(not(empty(parameters('desktopShortcutScriptPath'))), createObject('DesktopShortcutScriptPath', parameters('desktopShortcutScriptPath')), createObject()), if(not(empty(parameters('desktopShortcutIconPath'))), createObject('DesktopShortcutIconPath', parameters('desktopShortcutIconPath')), createObject()), if(not(empty(parameters('desktopShortcutName'))), createObject('DesktopShortcutName', parameters('desktopShortcutName')), createObject()))]"
                                      }
                                    ]
                                  },
                                  "resources": {
                                    "msbuildRepo": {
                                      "condition": "[equals(parameters('repoKind'), 'MSBuild')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('msbuildRepo-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "repoRootDir": {
                                            "value": "[variables('repoRootDir')]"
                                          },
                                          "restoreScript": {
                                            "value": "[parameters('restoreScript')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.31.92.45157",
                                              "templateHash": "11638459210006134548"
                                            }
                                          },
                                          "parameters": {
                                            "repoRootDir": {
                                              "type": "string"
                                            },
                                            "restoreScript": {
                                              "type": "string"
                                            }
                                          },
                                          "variables": {
                                            "restorePackages": [
                                              {
                                                "name": "windows-msbuild-env-invokecommand",
                                                "parameters": {
                                                  "RepoRoot": "[parameters('repoRootDir')]",
                                                  "Script": "[if(empty(parameters('restoreScript')), 'msbuild /t:restore', parameters('restoreScript'))]"
                                                }
                                              }
                                            ]
                                          },
                                          "resources": [],
                                          "outputs": {
                                            "artifacts": {
                                              "type": "array",
                                              "value": "[variables('restorePackages')]"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "customBuildRepo": {
                                      "condition": "[equals(parameters('repoKind'), 'Custom')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('customBuildRepo-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "repoRootDir": {
                                            "value": "[variables('repoRootDir')]"
                                          },
                                          "packagesFeed": {
                                            "value": "[parameters('packagesFeed')]"
                                          },
                                          "additionalRepoFeeds": {
                                            "value": "[parameters('additionalRepoFeeds')]"
                                          },
                                          "customScript": {
                                            "value": "[parameters('customScript')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.31.92.45157",
                                              "templateHash": "7832605977688924268"
                                            }
                                          },
                                          "parameters": {
                                            "repoRootDir": {
                                              "type": "string"
                                            },
                                            "packagesFeed": {
                                              "type": "string"
                                            },
                                            "additionalRepoFeeds": {
                                              "type": "array"
                                            },
                                            "customScript": {
                                              "type": "string"
                                            }
                                          },
                                          "resources": [],
                                          "outputs": {
                                            "artifacts": {
                                              "type": "array",
                                              "value": [
                                                {
                                                  "name": "windows-custom-build-env-invokecommand",
                                                  "parameters": "[union(createObject('RepoRoot', parameters('repoRootDir'), 'RepoPackagesFeed', parameters('packagesFeed'), 'Script', parameters('customScript')), if(not(empty(parameters('additionalRepoFeeds'))), createObject('AdditionalRepoFeeds', join(parameters('additionalRepoFeeds'), ',')), createObject()))]"
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "setupSources": {
                                      "type": "array",
                                      "value": [
                                        "[variables('syncRepo')]"
                                      ]
                                    },
                                    "warmup": {
                                      "type": "array",
                                      "value": "[concat(if(equals(parameters('repoKind'), 'MSBuild'), variables('codeRepoArtifacts'), createArray()), variables('setTempEnvVars'), if(equals(parameters('repoKind'), 'MSBuild'), reference('msbuildRepo').outputs.artifacts.value, createArray()), if(parameters('desktopShortcutEnable'), variables('createDevEnvShortCut'), createArray()), if(equals(parameters('repoKind'), 'Custom'), reference('customBuildRepo').outputs.artifacts.value, createArray()), variables('buildRepoArtifact'), variables('unsetTempEnvVars'))]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('packagesConfig-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "toolsRoot": {
                                    "value": "[parameters('toolsRoot')]"
                                  },
                                  "credentialProvider": {
                                    "value": "[parameters('credentialProvider')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.31.92.45157",
                                      "templateHash": "2688611092292562478"
                                    }
                                  },
                                  "parameters": {
                                    "toolsRoot": {
                                      "type": "string"
                                    },
                                    "credentialProvider": {
                                      "type": "object"
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "setEnvVars",
                                        "count": "[length(items(variables('envVarsToSet')))]",
                                        "input": {
                                          "name": "windows-setenvvar",
                                          "parameters": {
                                            "Variable": "[items(variables('envVarsToSet'))[copyIndex('setEnvVars')].key]",
                                            "Value": "[items(variables('envVarsToSet'))[copyIndex('setEnvVars')].value]",
                                            "PrintValue": "true"
                                          }
                                        }
                                      }
                                    ],
                                    "nugetRoot": "[format('{0}\\.nuget', parameters('toolsRoot'))]",
                                    "npmGlobalTools": "[format('{0}\\.npm-global', parameters('toolsRoot'))]",
                                    "envVarsToSet": {
                                      "NUGET_PLUGIN_PATHS": "[format('{0}\\plugins\\netfx\\CredentialProvider.Microsoft\\CredentialProvider.Microsoft.exe', variables('nugetRoot'))]",
                                      "NUGET_NETFX_PLUGIN_PATHS": "[format('{0}\\plugins\\netfx\\CredentialProvider.Microsoft\\CredentialProvider.Microsoft.exe', variables('nugetRoot'))]",
                                      "NUGET_NETCORE_PLUGIN_PATHS": "[format('{0}\\plugins\\netcore\\CredentialProvider.Microsoft\\CredentialProvider.Microsoft.dll', variables('nugetRoot'))]",
                                      "NUGET_CREDENTIALPROVIDER_MSAL_ENABLED": "[if(parameters('credentialProvider').msal, 'true', '')]",
                                      "NUGET_CREDENTIALPROVIDER_FORCE_CANSHOWDIALOG_TO": "[if(parameters('credentialProvider').canShowDialog, 'true', '')]",
                                      "NUGET_PACKAGES": "[format('{0}\\packages\\', variables('nugetRoot'))]",
                                      "NUGET_HTTP_CACHE_PATH": "[format('{0}\\v3-cache', variables('nugetRoot'))]",
                                      "NUGET_PLUGINS_CACHE_PATH": "[format('{0}\\plugins-cache', variables('nugetRoot'))]",
                                      "YARN_CACHE_FOLDER": "[format('{0}\\.yarn', parameters('toolsRoot'))]",
                                      "NPM_CONFIG_CACHE": "[format('{0}\\.npm', parameters('toolsRoot'))]",
                                      "NPM_CONFIG_PREFIX": "[variables('npmGlobalTools')]"
                                    }
                                  },
                                  "resources": [],
                                  "outputs": {
                                    "setStableEnvVars": {
                                      "type": "array",
                                      "value": "[concat(variables('setEnvVars'), createArray(createObject('name', 'windows-add-to-path', 'parameters', createObject('newPath', variables('npmGlobalTools')))))]"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "repoSetupSourcesObjects": {
                              "type": "array",
                              "copy": {
                                "count": "[length(range(0, length(parameters('repos'))))]",
                                "input": {
                                  "Artifacts": "[reference(resourceId('Microsoft.Resources/deployments', format('artifacts-repo-{0}-{1}', range(0, length(parameters('repos')))[copyIndex()], uniqueString(deployment().name, resourceGroup().name))), '2022-09-01').outputs.setupSources.value]"
                                }
                              }
                            },
                            "repoWarmupObjects": {
                              "type": "array",
                              "copy": {
                                "count": "[length(range(0, length(parameters('repos'))))]",
                                "input": {
                                  "Artifacts": "[reference(resourceId('Microsoft.Resources/deployments', format('artifacts-repo-{0}-{1}', range(0, length(parameters('repos')))[copyIndex()], uniqueString(deployment().name, resourceGroup().name))), '2022-09-01').outputs.warmup.value]"
                                }
                              }
                            },
                            "commonArtifacts": {
                              "type": "array",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('packagesConfig-{0}', uniqueString(deployment().name, resourceGroup().name))), '2022-09-01').outputs.setStableEnvVars.value]"
                            },
                            "anyAvoidDevDriveRepos": {
                              "type": "bool",
                              "value": "[greater(length(variables('avoidDevDriveRepos')), 0)]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "config"
                      ]
                    },
                    "common": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('common-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "toolsRoot": {
                            "value": "[reference('config').outputs.toolsRoot.value]"
                          },
                          "defenderExclusions": {
                            "value": "[parameters('defenderExclusions')]"
                          },
                          "userDefenderExclusions": {
                            "value": "[parameters('userDefenderExclusions')]"
                          },
                          "createDevDrive": {
                            "value": "[parameters('createDevDrive')]"
                          },
                          "devDriveOptions": {
                            "value": "[parameters('devDriveOptions')]"
                          },
                          "osDriveMinSizeGB": {
                            "value": "[parameters('osDriveMinSizeGB')]"
                          },
                          "sourcesDriveRoot": {
                            "value": "[reference('config').outputs.sourcesDriveRoot.value]"
                          },
                          "defenderExclusionPathList": "[if(and(variables('createSeparateSourcesDrive'), reference('repoArtifacts').outputs.anyAvoidDevDriveRepos.value), createObject('value', format('{0},{1}', reference('config').outputs.defenderExclusionPathList.value, reference('config').outputs.ntfsSourcesDirExclusionPath.value)), createObject('value', reference('config').outputs.defenderExclusionPathList.value))]",
                          "allParamsForLogging": {
                            "value": "[variables('allParamsForLogging')]"
                          },
                          "credentialProvider": {
                            "value": "[variables('credentialProviderWithDefaults')]"
                          },
                          "disableAllDiskWriteCacheFlushing": {
                            "value": "[parameters('disableAllDiskWriteCacheFlushing')]"
                          },
                          "installLatestWinGet": {
                            "value": "[parameters('installLatestWinGet')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.92.45157",
                              "templateHash": "10435682501394810500"
                            }
                          },
                          "parameters": {
                            "toolsRoot": {
                              "type": "string"
                            },
                            "sourcesDriveRoot": {
                              "type": "string"
                            },
                            "defenderExclusions": {
                              "type": "bool"
                            },
                            "userDefenderExclusions": {
                              "type": "array"
                            },
                            "defenderExclusionPathList": {
                              "type": "string"
                            },
                            "allParamsForLogging": {
                              "type": "object"
                            },
                            "credentialProvider": {
                              "type": "object"
                            },
                            "osDriveMinSizeGB": {
                              "type": "int"
                            },
                            "disableAllDiskWriteCacheFlushing": {
                              "type": "bool"
                            },
                            "installLatestWinGet": {
                              "type": "bool"
                            },
                            "createDevDrive": {
                              "type": "bool",
                              "metadata": {
                                "description": "This will create a separate volume, format it with Dev Drive and place all repos and caches to that volume. Requires October 2023 patched Win11-22H2 or Win11-23H2 base image."
                              }
                            },
                            "devDriveOptions": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "variables": {
                            "updateWindowsArtifact": {
                              "name": "WindowsUpdate"
                            },
                            "defaultDevDriveOptions": {
                              "EnableGVFS": false,
                              "EnableContainers": false
                            },
                            "devDriveWithDefaults": "[union(variables('defaultDevDriveOptions'), parameters('devDriveOptions'))]",
                            "optionalSetDevDriveConfiguration": "[if(and(parameters('createDevDrive'), or(variables('devDriveWithDefaults').EnableGVFS, variables('devDriveWithDefaults').EnableContainers)), createArray(createObject('name', 'windows-set-DevDriveConfiguration', 'parameters', createObject('EnableGVFS', variables('devDriveWithDefaults').EnableGVFS, 'EnableContainers', variables('devDriveWithDefaults').EnableContainers))), createArray())]",
                            "optionalInstallLatestWinGet": "[if(parameters('installLatestWinGet'), createArray(createObject('name', 'windows-install-winget')), createArray())]",
                            "optionalConfigureWinGetForUser": "[if(parameters('installLatestWinGet'), createArray(createObject('Task', 'configure-winget')), createArray())]",
                            "runBeforeAll": "[concat(createArray(createObject('name', 'windows-expandOSdisk')), createArray(variables('updateWindowsArtifact')), variables('optionalSetDevDriveConfiguration'), variables('optionalInstallLatestWinGet'), createArray(createObject('name', 'windows-disable-reservedstorage'), createObject('name', 'windows-update-settings'), createObject('Name', 'windows-powershell-invokecommand', 'Parameters', createObject('Script', 'Set-Content -Path `$env:USERPROFILE\\.curlrc -Value `\"--retry 7`\"; Get-Content -Path `$env:USERPROFILE\\.curlrc')), createObject('Name', 'windows-enable-long-paths'), createObject('Name', 'WindowsRestart')))]",
                            "optionalCreateDevDrive": "[if(parameters('createDevDrive'), createArray(createObject('Name', 'windows-create-ReFS', 'Parameters', createObject('DevBoxRefsDrive', substring(parameters('sourcesDriveRoot'), 0, 1), 'OsDriveMinSizeGB', parameters('osDriveMinSizeGB'), 'IsDevDrive', parameters('createDevDrive')))), createArray())]",
                            "optionalDisableAllDiskWriteCacheFlushing": "[if(parameters('disableAllDiskWriteCacheFlushing'), createArray(createObject('Name', 'windows-disable-write-cache-flushing')), createArray())]",
                            "runInstalls": [
                              {
                                "name": "windows-gitinstall",
                                "parameters": {
                                  "SetCredHelper": "true"
                                }
                              },
                              {
                                "name": "windows-install-artifacts-credprovider",
                                "parameters": {
                                  "addNetFx": "true",
                                  "installNet6": "[parameters('credentialProvider').installNet6]",
                                  "version": "[parameters('credentialProvider').version]",
                                  "optionalCopyNugetPluginsRoot": "[parameters('toolsRoot')]"
                                }
                              }
                            ],
                            "optionalDefenderExclusions": "[if(parameters('defenderExclusions'), createArray(createObject('name', 'windows-defender-exclusions', 'parameters', createObject('ExclusionPaths', parameters('defenderExclusionPathList')))), createArray())]",
                            "userDefenderTaskId": "[uniqueString(reduce(parameters('userDefenderExclusions'), '', lambda('cur', 'next', format('{0}{1}', lambdaVariables('cur'), lambdaVariables('next')))))]",
                            "userDefenderLogonTasks": "[if(empty(parameters('userDefenderExclusions')), createArray(), createArray(createObject('Task', 'add-defender-exclusions', 'UniqueID', format('defender-exclusions-{0}', variables('userDefenderTaskId')), 'Parameters', createObject('DirsToExclude', parameters('userDefenderExclusions')))))]",
                            "codeDriveUserLogonTasksAssignUnallocatedSpaceAndReassignDriveLetter": "[if(parameters('createDevDrive'), createArray(createObject('Task', 'assign-unallocated-space', 'Parameters', createObject('DriveLetter', 'D')), createObject('Task', 'remap-code-drive', 'Parameters', createObject('ToDriveLetter', substring(parameters('sourcesDriveRoot'), 0, 1)))), createArray())]",
                            "addUserProfileDefenderExclusionsTask": "[if(parameters('defenderExclusions'), createArray(createObject('Task', 'add-defender-exclusions', 'UniqueID', 'defender-exclusions-msbuild', 'Parameters', createObject('DirsToExclude', createArray('%TEMP%\\NuGetScratch', '%TEMP%\\MSBuildTemp%USERNAME%')))), createArray())]",
                            "firstLogonTasks": "[concat(variables('codeDriveUserLogonTasksAssignUnallocatedSpaceAndReassignDriveLetter'), variables('userDefenderLogonTasks'), variables('addUserProfileDefenderExclusionsTask'), variables('optionalConfigureWinGetForUser'))]",
                            "disableOneDriveDesktopSync": [
                              {
                                "name": "windows-configure-onedrive-sync"
                              }
                            ],
                            "runAfterAll": "[concat(createArray(createObject('name', 'windows-imagelog', 'Parameters', createObject('BicepInfo', base64(string(parameters('allParamsForLogging'))))), createObject('name', 'windows-enable-optionalfeatures', 'Parameters', createObject('FeatureName', 'VirtualMachinePlatform')), createObject('name', 'windows-configure-user-tasks', 'parameters', createObject('FirstLogonTasksBase64', base64(string(variables('firstLogonTasks'))))), variables('updateWindowsArtifact')), variables('disableOneDriveDesktopSync'), createArray(createObject('name', 'windows-prepare-for-sysprep')))]"
                          },
                          "resources": [],
                          "outputs": {
                            "artifacts": {
                              "type": "object",
                              "value": {
                                "runBeforeAll": "[variables('runBeforeAll')]",
                                "optionalCreateDevDrive": "[variables('optionalCreateDevDrive')]",
                                "optionalDisableAllDiskWriteCacheFlushing": "[variables('optionalDisableAllDiskWriteCacheFlushing')]",
                                "runInstalls": "[variables('runInstalls')]",
                                "optionalDefenderExclusions": "[variables('optionalDefenderExclusions')]",
                                "runAfterAll": "[variables('runAfterAll')]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "config",
                        "repoArtifacts"
                      ]
                    },
                    "publishProfile": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('publishProfile-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "imageName": {
                            "value": "[parameters('imageName')]"
                          },
                          "galleryName": {
                            "value": "[parameters('galleryName')]"
                          },
                          "galleryResourceGroup": {
                            "value": "[parameters('galleryResourceGroup')]"
                          },
                          "gallerySubscriptionId": {
                            "value": "[parameters('gallerySubscriptionId')]"
                          },
                          "imageGalleries": {
                            "value": "[parameters('imageGalleries')]"
                          },
                          "targetRegions": {
                            "value": "[parameters('targetRegions')]"
                          },
                          "imagePublishingProfile": {
                            "value": "[parameters('imagePublishingProfile')]"
                          },
                          "isBaseImage": {
                            "value": "[parameters('isBaseImage')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.92.45157",
                              "templateHash": "5528598909137715190"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "imageName": {
                              "type": "string"
                            },
                            "isBaseImage": {
                              "type": "bool"
                            },
                            "galleryName": {
                              "type": "string"
                            },
                            "galleryResourceGroup": {
                              "type": "string"
                            },
                            "gallerySubscriptionId": {
                              "type": "string"
                            },
                            "imageGalleries": {
                              "type": "array"
                            },
                            "targetRegions": {
                              "type": "array"
                            },
                            "imagePublishingProfile": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "imageGalleriesFinal",
                                "count": "[length(variables('imageGalleriesRaw'))]",
                                "input": {
                                  "galleryName": "[variables('imageGalleriesRaw')[copyIndex('imageGalleriesFinal')].galleryName]",
                                  "gallerySubscriptionId": "[coalesce(tryGet(variables('imageGalleriesRaw')[copyIndex('imageGalleriesFinal')], 'gallerySubscriptionId'), parameters('gallerySubscriptionId'))]",
                                  "galleryResourceGroup": "[coalesce(tryGet(variables('imageGalleriesRaw')[copyIndex('imageGalleriesFinal')], 'galleryResourceGroup'), parameters('galleryResourceGroup'))]"
                                }
                              }
                            ],
                            "imageGalleriesRaw": "[if(not(empty(parameters('imageGalleries'))), parameters('imageGalleries'), createArray(createObject('galleryName', parameters('galleryName'), 'gallerySubscriptionId', parameters('gallerySubscriptionId'), 'galleryResourceGroup', parameters('galleryResourceGroup'))))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('publishGalleries-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "imageGalleries": {
                                    "value": "[variables('imageGalleriesFinal')]"
                                  },
                                  "imageName": {
                                    "value": "[parameters('imageName')]"
                                  },
                                  "isBaseImage": {
                                    "value": "[parameters('isBaseImage')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.31.92.45157",
                                      "templateHash": "7441545288708978846"
                                    }
                                  },
                                  "parameters": {
                                    "imageName": {
                                      "type": "string"
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]"
                                    },
                                    "isBaseImage": {
                                      "type": "bool"
                                    },
                                    "imageGalleries": {
                                      "type": "array",
                                      "defaultValue": []
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "modules",
                                        "count": "[length(parameters('imageGalleries'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('publish-gallery-{0}-{1}', copyIndex(), uniqueString(deployment().name, resourceGroup().name))]",
                                      "subscriptionId": "[parameters('imageGalleries')[copyIndex()].gallerySubscriptionId]",
                                      "resourceGroup": "[parameters('imageGalleries')[copyIndex()].galleryResourceGroup]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "galleryName": {
                                            "value": "[parameters('imageGalleries')[copyIndex()].galleryName]"
                                          },
                                          "imageName": {
                                            "value": "[parameters('imageName')]"
                                          },
                                          "isBaseImage": {
                                            "value": "[parameters('isBaseImage')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.31.92.45157",
                                              "templateHash": "7351638362435420561"
                                            }
                                          },
                                          "parameters": {
                                            "galleryName": {
                                              "type": "string"
                                            },
                                            "imageName": {
                                              "type": "string"
                                            },
                                            "isBaseImage": {
                                              "type": "bool"
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]"
                                            }
                                          },
                                          "variables": {
                                            "imageDefinitionProperties": {
                                              "hyperVGeneration": "V2",
                                              "architecture": "x64",
                                              "features": [
                                                {
                                                  "name": "SecurityType",
                                                  "value": "[if(parameters('isBaseImage'), 'TrustedLaunchSupported', 'TrustedLaunch')]"
                                                },
                                                {
                                                  "name": "IsHibernateSupported",
                                                  "value": "true"
                                                }
                                              ],
                                              "osType": "Windows",
                                              "osState": "Generalized",
                                              "identifier": {
                                                "publisher": "AzureQuickstarts",
                                                "offer": "DevBox",
                                                "sku": "[parameters('imageName')]"
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "condition": "[not(empty(parameters('galleryName')))]",
                                              "type": "Microsoft.Compute/galleries/images",
                                              "apiVersion": "2023-07-03",
                                              "name": "[format('{0}/{1}', parameters('galleryName'), parameters('imageName'))]",
                                              "location": "[parameters('location')]",
                                              "properties": "[variables('imageDefinitionProperties')]"
                                            }
                                          ],
                                          "outputs": {
                                            "computeGalleryId": {
                                              "type": "string",
                                              "value": "[if(empty(parameters('galleryName')), '', resourceId('Microsoft.Compute/galleries/images', parameters('galleryName'), parameters('imageName')))]"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "galleryIds": {
                                      "type": "array",
                                      "copy": {
                                        "count": "[length(range(0, length(parameters('imageGalleries'))))]",
                                        "input": {
                                          "Id": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('imageGalleries')[copyIndex()].gallerySubscriptionId, parameters('imageGalleries')[copyIndex()].galleryResourceGroup), 'Microsoft.Resources/deployments', format('publish-gallery-{0}-{1}', range(0, length(parameters('imageGalleries')))[copyIndex()], uniqueString(deployment().name, resourceGroup().name))), '2022-09-01').outputs.computeGalleryId.value]"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "publishingProfile": {
                              "type": "object",
                              "value": "[union(union(createObject('targetRegions', if(empty(parameters('targetRegions')), createArray(createObject('name', parameters('location'), 'replicas', 1)), map(parameters('targetRegions'), lambda('targetRegion', createObject('name', lambdaVariables('targetRegion'), 'replicas', 1))))), if(not(empty(map(filter(map(reference(resourceId('Microsoft.Resources/deployments', format('publishGalleries-{0}', uniqueString(deployment().name, resourceGroup().name))), '2022-09-01').outputs.galleryIds.value, lambda('obj', lambdaVariables('obj').Id)), lambda('id', not(empty(lambdaVariables('id'))))), lambda('id', createObject('computeGalleryId', lambdaVariables('id')))))), createObject('computeGalleries', map(filter(map(reference(resourceId('Microsoft.Resources/deployments', format('publishGalleries-{0}', uniqueString(deployment().name, resourceGroup().name))), '2022-09-01').outputs.galleryIds.value, lambda('obj', lambdaVariables('obj').Id)), lambda('id', not(empty(lambdaVariables('id'))))), lambda('id', createObject('computeGalleryId', lambdaVariables('id'))))), createObject())), parameters('imagePublishingProfile'))]"
                            }
                          }
                        }
                      }
                    },
                    "aibImage": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('aibImage-{0}', uniqueString(deployment().name, resourceGroup().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "imageName": {
                            "value": "[parameters('imageName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "builderIdentity": {
                            "value": "[parameters('builderIdentity')]"
                          },
                          "imageIdentity": {
                            "value": "[parameters('imageIdentity')]"
                          },
                          "baseImage": {
                            "value": "[reference('config').outputs.baseImageFull.value]"
                          },
                          "buildProfile": {
                            "value": "[reference('config').outputs.imageBuildProfile.value]"
                          },
                          "imageBuildTimeoutInMinutes": {
                            "value": "[parameters('imageBuildTimeoutInMinutes')]"
                          },
                          "artifacts": {
                            "value": "[concat(reference('common').outputs.artifacts.value.runBeforeAll, reference('common').outputs.artifacts.value.optionalCreateDevDrive, reference('common').outputs.artifacts.value.optionalDefenderExclusions, reference('common').outputs.artifacts.value.optionalDisableAllDiskWriteCacheFlushing, if(not(contains(reference('config').outputs.baseImageFull.value, '/providers/Microsoft.Compute/galleries/')), concat(reference('common').outputs.artifacts.value.runInstalls, reference('devtools').outputs.installOnce.value), createArray()), parameters('beforeReposSetupArtifacts'), reference('repoArtifacts').outputs.commonArtifacts.value, flatten(map(reference('repoArtifacts').outputs.repoSetupSourcesObjects.value, lambda('obj', lambdaVariables('obj').Artifacts))), parameters('afterReposClonedArtifacts'), flatten(map(reference('repoArtifacts').outputs.repoWarmupObjects.value, lambda('obj', lambdaVariables('obj').Artifacts))), parameters('additionalArtifacts'), reference('common').outputs.artifacts.value.runAfterAll)]"
                          },
                          "publishingProfile": {
                            "value": "[reference('publishProfile').outputs.publishingProfile.value]"
                          },
                          "imageVersion": {
                            "value": "[parameters('imageVersion')]"
                          },
                          "artifactSource": {
                            "value": "[parameters('artifactSource')]"
                          },
                          "printCustomizationLogLastLines": {
                            "value": "[parameters('printCustomizationLogLastLines')]"
                          },
                          "ignoreBuildFailure": {
                            "value": "[parameters('ignoreBuildFailure')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.92.45157",
                              "templateHash": "15703279216536729417"
                            }
                          },
                          "definitions": {
                            "_1.artifactSource": {
                              "type": "object",
                              "properties": {
                                "Url": {
                                  "type": "string"
                                },
                                "Branch": {
                                  "type": "string"
                                },
                                "Path": {
                                  "type": "string"
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "../exports.bicep"
                                }
                              }
                            },
                            "_1.imageResult": {
                              "type": "object",
                              "properties": {
                                "buildLog": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "stagingResourceGroupName": {
                                  "type": "string",
                                  "nullable": true
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "../exports.bicep"
                                }
                              }
                            },
                            "_1.images": {
                              "type": "object",
                              "properties": {
                                "eShop": {
                                  "$ref": "#/definitions/_1.imageSettings",
                                  "nullable": true
                                },
                                "axios": {
                                  "$ref": "#/definitions/_1.imageSettings",
                                  "nullable": true
                                },
                                "MSBuildSdks": {
                                  "$ref": "#/definitions/_1.imageSettings",
                                  "nullable": true
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "../exports.bicep"
                                }
                              }
                            },
                            "_1.imageSettings": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "baseImage": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "shouldBuild": {
                                  "type": "bool"
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "../exports.bicep"
                                }
                              }
                            },
                            "_1.results": {
                              "type": "object",
                              "properties": {
                                "eShop": {
                                  "$ref": "#/definitions/_1.imageResult"
                                },
                                "axios": {
                                  "$ref": "#/definitions/_1.imageResult"
                                },
                                "MSBuildSdks": {
                                  "$ref": "#/definitions/_1.imageResult"
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "../exports.bicep"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "guidId": {
                              "type": "string",
                              "defaultValue": "[newGuid()]"
                            },
                            "imageName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "imageVersion": {
                              "type": "string"
                            },
                            "builderIdentity": {
                              "type": "string"
                            },
                            "imageIdentity": {
                              "type": "string"
                            },
                            "baseImage": {
                              "type": "string"
                            },
                            "artifacts": {
                              "type": "array"
                            },
                            "buildProfile": {
                              "type": "object"
                            },
                            "imageBuildTimeoutInMinutes": {
                              "type": "int"
                            },
                            "publishingProfile": {
                              "type": "object"
                            },
                            "artifactSource": {
                              "$ref": "#/definitions/_1.artifactSource"
                            },
                            "printCustomizationLogLastLines": {
                              "type": "int"
                            },
                            "ignoreBuildFailure": {
                              "type": "bool"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "artifactsWithEncodedParams",
                                "count": "[length(parameters('artifacts'))]",
                                "input": {
                                  "name": "[parameters('artifacts')[copyIndex('artifactsWithEncodedParams')].name]",
                                  "runAsSystem": "[coalesce(tryGet(parameters('artifacts')[copyIndex('artifactsWithEncodedParams')], 'runAsSystem'), false())]",
                                  "paramsBase64": "[if(and(contains(parameters('artifacts')[copyIndex('artifactsWithEncodedParams')], 'parameters'), not(empty(parameters('artifacts')[copyIndex('artifactsWithEncodedParams')].parameters))), base64(string(parameters('artifacts')[copyIndex('artifactsWithEncodedParams')].parameters)), '')]"
                                }
                              },
                              {
                                "name": "artifactCustomizers",
                                "count": "[length(variables('artifactsWithEncodedParams'))]",
                                "input": "[if(equals(variables('artifactsWithEncodedParams')[copyIndex('artifactCustomizers')].name, 'WindowsUpdate'), createObject('type', 'WindowsUpdate'), if(equals(variables('artifactsWithEncodedParams')[copyIndex('artifactCustomizers')].name, 'WindowsRestart'), createObject('type', 'WindowsRestart'), createObject('type', 'PowerShell', 'runAsSystem', if(variables('artifactsWithEncodedParams')[copyIndex('artifactCustomizers')].runAsSystem, true(), null()), 'runElevated', if(variables('artifactsWithEncodedParams')[copyIndex('artifactCustomizers')].runAsSystem, true(), null()), 'name', format('RunArtifact-{0}', variables('artifactsWithEncodedParams')[copyIndex('artifactCustomizers')].name), 'validExitCodes', createArray(0), 'inline', createArray('. C:/.tools/Setup/artifacts/run-artifact.ps1', format('____Invoke-Artifact -____ArtifactName {0} -____ParamsBase64 ''{1}''', variables('artifactsWithEncodedParams')[copyIndex('artifactCustomizers')].name, variables('artifactsWithEncodedParams')[copyIndex('artifactCustomizers')].paramsBase64)))))]"
                              },
                              {
                                "name": "distribute",
                                "count": "[length(parameters('publishingProfile').computeGalleries)]",
                                "input": {
                                  "type": "SharedImage",
                                  "runOutputName": "[parameters('imageName')]",
                                  "galleryImageId": "[format('{0}/versions/{1}', parameters('publishingProfile').computeGalleries[copyIndex('distribute')].computeGalleryId, parameters('imageVersion'))]",
                                  "replicationRegions": "[variables('replicationRegions')]",
                                  "artifactTags": "[variables('tags')]"
                                }
                              }
                            ],
                            "$fxv#0": "$ErrorActionPreference = \"Stop\"\r\nSet-StrictMode -Version Latest\r\n$ProgressPreference = 'SilentlyContinue'\r\n\r\nfunction Get-ManagedIdentityAccessToken {\r\n    param(\r\n        [Parameter(Mandatory = $true)][ValidateNotNullOrEmpty()][String] $resource\r\n    )\r\n\r\n    $resourceEscaped = [uri]::EscapeDataString($resource)\r\n    $requestUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$resourceEscaped\"\r\n    Write-Host \"Retrieving access token from $requestUri\"\r\n    $response = Invoke-WebRequest -Uri $requestUri -Headers @{Metadata = \"true\" } -UseBasicParsing\r\n\r\n    if ($response.Content -imatch \"access_token\") {\r\n        $jsonContent = $response.Content | ConvertFrom-Json\r\n        $accessToken = $jsonContent.access_token\r\n    }\r\n    else {\r\n        throw \"Failed to obtain access token from $requestUri, aborting\"\r\n    }\r\n\r\n    return $accessToken\r\n}\r\n\r\nfunction Get-AzureDevOpsAccessToken {\r\n    return (Get-ManagedIdentityAccessToken '499b84ac-1321-427f-aa17-267ca6975798')\r\n}\r\n\r\n$toolsRoot = \"C:\\.tools\\Setup\"\r\nmkdir $toolsRoot -Force | Out-Null\r\n$zip = \"$toolsRoot\\artifacts.zip\"\r\n\r\nif ($scriptsRepoUrl.StartsWith('https://github.com/')) {\r\n    Write-Host \"=== Downloading artifacts from branch $scriptsRepoBranch of repo $scriptsRepoUrl\"\r\n    $requestUri = \"$scriptsRepoUrl/archive/refs/heads/$scriptsRepoBranch.zip\"\r\n    Invoke-RestMethod -Uri $requestUri -Method Get -OutFile $zip\r\n\r\n    $expandedArchiveRoot = \"$toolsRoot\\tmp\"\r\n    Write-Host \"-- Extracting to $expandedArchiveRoot\"\r\n    mkdir $expandedArchiveRoot -Force | Out-Null\r\n    Expand-Archive -Path $zip -DestinationPath $expandedArchiveRoot\r\n\r\n    $expandedScriptsPath = [IO.Path]::GetFullPath($(Join-Path $((Get-ChildItem $expandedArchiveRoot)[0].FullName) $scriptsRepoPath))\r\n    Write-Host \"-- Moving $expandedScriptsPath to $toolsRoot\"\r\n    Move-Item -Path $expandedScriptsPath -Destination $toolsRoot\r\n\r\n    Write-Host \"-- Deleting temp files\"\r\n    Remove-Item -Path $expandedArchiveRoot -Recurse -Force\r\n\r\n}\r\nelseif ($scriptsRepoUrl.StartsWith('https://dev.azure.com/')) {\r\n    Write-Host \"=== Downloading artifacts from $scriptsRepoPath of branch $scriptsRepoBranch in repo $scriptsRepoUrl\"\r\n    $requestUri = \"$scriptsRepoUrl/items?path=$scriptsRepoPath&`$format=zip&versionDescriptor.version=$scriptsRepoBranch&versionDescriptor.versionType=branch&api-version=5.0-preview.1\"\r\n    $aadToken = Get-AzureDevOpsAccessToken\r\n    Invoke-RestMethod -Uri $requestUri -Method Get -Headers @{\"Authorization\" = \"Bearer $aadToken\" } -OutFile $zip\r\n\r\n    Write-Host \"-- Extracting to $toolsRoot\"\r\n    Expand-Archive -Path $zip -DestinationPath $toolsRoot\r\n    Remove-Item -Path $zip -Force\r\n}\r\nelse {\r\n    throw \"Don't know how to download files from repo $scriptsRepoUrl\"\r\n}\r\n\r\nWrite-Host \"-- Content of $toolsRoot\"\r\nGet-ChildItem $toolsRoot -Recurse\r\n\r\nWrite-Host \"=== Completed downloading artifacts\"\r\n",
                            "$fxv#1": "$ErrorActionPreference = \"Stop\"\r\nSet-StrictMode -Version Latest\r\n$ProgressPreference = 'SilentlyContinue'\r\n\r\nfunction RunWithRetries(\r\n    [ScriptBlock] $runBlock, \r\n    [ScriptBlock] $onFailureBlock = {}, \r\n    [int] $retryAttempts = 5, \r\n    [int] $waitBeforeRetrySeconds = 5,\r\n    [bool] $ignoreFailure = $false,\r\n    [bool] $exponentialBackoff = $true\r\n) {\r\n    [int] $retriesLeft = $retryAttempts\r\n\r\n    while ($retriesLeft -ge 0) {\r\n        try {\r\n            & $runBlock\r\n            break\r\n        }\r\n        catch {\r\n            if ($retriesLeft -le 0) {\r\n                if ($onFailureBlock) {\r\n                    & $onFailureBlock\r\n                }\r\n                if ($ignoreFailure) {\r\n                    Write-Host \"[WARN] Ignoring the failure:`n$_`n$($_.ScriptStackTrace)\"\r\n                    break\r\n                }\r\n                else {\r\n                    throw\r\n                }\r\n            }\r\n            else {\r\n                if ($exponentialBackoff) {\r\n                    $totalDelay = [Math]::Pow(2, $retryAttempts - $retriesLeft) * $waitBeforeRetrySeconds\r\n                }\r\n                else {\r\n                    $totalDelay = $waitBeforeRetrySeconds\r\n                }\r\n                Write-Host \"[WARN] Attempt failed: $_. Retrying in $totalDelay seconds. Retries left: $retriesLeft\"\r\n                $retriesLeft--\r\n                Start-Sleep -Seconds $totalDelay\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                            "$fxv#2": "$ErrorActionPreference = \"Stop\"\r\nSet-StrictMode -Version Latest\r\n$ProgressPreference = 'SilentlyContinue'\r\n\r\nRunWithRetries { Connect-AzAccount -Identity | Out-Null }\r\nRunWithRetries { Install-Module -Name Az.ImageBuilder -AllowPrerelease -Force | Out-Null }\r\n\r\nWrite-Host \"=== Starting the image build\"\r\nRunWithRetries {\r\n    Invoke-AzResourceAction -ResourceName \"${env:imageTemplateName}\" -ResourceGroupName \"${env:resourceGroupName}\" -ResourceType \"Microsoft.VirtualMachineImages/imageTemplates\" -ApiVersion \"2020-02-14\" -Action Run -Force\r\n}\r\n\r\nWrite-Host \"=== Waiting for the image build to complete\"\r\n\r\n# https://learn.microsoft.com/en-us/dotnet/api/microsoft.azure.powershell.cmdlets.imagebuilder.support.runstate?view=az-ps-latest\r\n$global:status = 'UNKNOWN'\r\nwhile ($global:status -ne 'Succeeded' -and $global:status -ne 'Failed' -and $global:status -ne 'Canceled') { \r\n    Start-Sleep -Seconds 15\r\n    RunWithRetries {\r\n        $global:info = Get-AzImageBuilderTemplate -ImageTemplateName ${env:imageTemplateName} -ResourceGroupName ${env:resourceGroupName}\r\n        $global:status = $info.LastRunStatusRunState\r\n    }\r\n}\r\n\r\n$buildStatusShort = \"status '$global:status', message '$($global:info.LastRunStatusMessage)'\"\r\nWrite-Host \"=== Image build completed with $buildStatusShort\"\r\n\r\n$ignoreBuildFailure = [bool]::Parse(\"${env:ignoreBuildFailure}\")\r\nif ( (!$ignoreBuildFailure) -and ($global:status -ne 'Succeeded')) {\r\n    Start-Sleep -Seconds 15 # Appears to help with the script output being captured in full\r\n    Write-Error \"!!! [ERROR] Image build failed with $buildStatusShort\"\r\n}\r\n\r\n$printCustomizationLogLastLines = [int]::Parse(\"${env:printCustomizationLogLastLines}\")\r\nif ($printCustomizationLogLastLines -ne 0) {\r\n\r\n    $stagingResourceGroupName = ${env:stagingResourceGroupName}\r\n    $logsFile = 'customization.log'\r\n    Write-Host \"=== Looking for storage account in staging RG '$stagingResourceGroupName'\"\r\n    $stagingStorageAccountName = (Get-AzResource -ResourceGroupName $stagingResourceGroupName -ResourceType \"Microsoft.Storage/storageAccounts\")[0].Name\r\n\r\n    $stagingStorageAccountKey = $(Get-AzStorageAccountKey -StorageAccountName $stagingStorageAccountName -ResourceGroupName $stagingResourceGroupName)[0].value\r\n    $ctx = New-AzStorageContext -StorageAccountName $stagingStorageAccountName -StorageAccountKey $stagingStorageAccountKey\r\n    $logsBlob = Get-AzStorageBlob -Context $ctx -Container packerlogs | Where-Object { $_.Name -like \"*/$logsFile\" }\r\n    if ($logsBlob) {\r\n        Write-Host \"=== Downloading $logsFile from storage account '$stagingStorageAccountName'\"\r\n        Get-AzStorageBlobContent -Context $ctx -CloudBlob $logsBlob.ICloudBlob -Destination $logsFile -Force | Format-List\r\n\r\n        if ($printCustomizationLogLastLines -gt 0) {\r\n            Write-Host \"=== Last $printCustomizationLogLastLines lines of $logsFile :`n\"\r\n            Write-Host \"$(Get-Content $logsFile -Tail $printCustomizationLogLastLines | Out-String)\"\r\n        }\r\n        else {\r\n            Write-Host \"=== Content of $logsFile :`n\"\r\n            Write-Host \"$(Get-Content $logsFile | Out-String)\"\r\n        }\r\n    }\r\n    else {\r\n        Write-Host \"Could not find customization.log in storage account: $stagingStorageAccountName\"\r\n    }\r\n}\r\n\r\nWrite-Host \"=== DONE\"\r\nStart-Sleep -Seconds 15 # Appears to help with the script output being captured in full\r\n",
                            "downloadArtifactsScriptText": "[replace(variables('$fxv#0'), '\r\n', '\n')]",
                            "downloadArtifactsScriptLines": "[concat(createArray(format('$scriptsRepoUrl = ''{0}''', parameters('artifactSource').Url), format('$scriptsRepoBranch = ''{0}''', parameters('artifactSource').Branch), format('$scriptsRepoPath = ''{0}''', parameters('artifactSource').Path)), split(variables('downloadArtifactsScriptText'), '\n'))]",
                            "customizers": "[concat(createArray(createObject('type', 'PowerShell', 'name', 'EnvVarsOnStart', 'runAsSystem', false(), 'runElevated', false(), 'inline', createArray('Write-Host \"=== Environment variables on start:\"', 'Get-ChildItem Env: | Sort-Object -Property name | ForEach-Object { \"$($_.Name)=$($_.Value)\" }')), createObject('type', 'PowerShell', 'name', 'DownloadArtifacts', 'inline', variables('downloadArtifactsScriptLines'))), variables('artifactCustomizers'))]",
                            "tags": {
                              "imageName": "[parameters('imageName')]",
                              "imageTemplate": "[parameters('imageVersion')]",
                              "deploymentName": "[deployment().name]"
                            },
                            "imageTemplateName": "[format('{0}-{1}', parameters('imageName'), parameters('imageVersion'))]",
                            "stagingResourceGroupName": "[format('{0}-stg', variables('imageTemplateName'))]",
                            "baseUrnImageParts": "[split(parameters('baseImage'), ':')]",
                            "imageSource": "[if(startsWith(parameters('baseImage'), '/subscriptions/'), createObject('type', 'SharedImageVersion', 'imageVersionId', parameters('baseImage')), createObject('type', 'PlatformImage', 'publisher', variables('baseUrnImageParts')[0], 'offer', variables('baseUrnImageParts')[1], 'sku', variables('baseUrnImageParts')[2], 'version', variables('baseUrnImageParts')[3]))]",
                            "replicationRegions": "[map(parameters('publishingProfile').targetRegions, lambda('targetRegion', lambdaVariables('targetRegion').name))]",
                            "scripts": [
                              "[variables('$fxv#1')]",
                              "[variables('$fxv#2')]"
                            ]
                          },
                          "resources": {
                            "imageTemplate": {
                              "type": "Microsoft.VirtualMachineImages/imageTemplates",
                              "apiVersion": "2022-02-14",
                              "name": "[variables('imageTemplateName')]",
                              "location": "[parameters('location')]",
                              "tags": "[variables('tags')]",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', parameters('builderIdentity'))]": {}
                                }
                              },
                              "properties": {
                                "buildTimeoutInMinutes": "[parameters('imageBuildTimeoutInMinutes')]",
                                "stagingResourceGroup": "[format('{0}/resourceGroups/{1}', subscription().id, variables('stagingResourceGroupName'))]",
                                "vmProfile": {
                                  "userAssignedIdentities": [
                                    "[parameters('imageIdentity')]"
                                  ],
                                  "vmSize": "[parameters('buildProfile').sku]",
                                  "osDiskSizeGB": "[parameters('buildProfile').diskSize]"
                                },
                                "source": "[variables('imageSource')]",
                                "customize": "[variables('customizers')]",
                                "distribute": "[variables('distribute')]"
                              }
                            },
                            "buildImageTemplateScript": {
                              "type": "Microsoft.Resources/deploymentScripts",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-build', parameters('imageName'))]",
                              "location": "[parameters('location')]",
                              "tags": "[variables('tags')]",
                              "kind": "AzurePowerShell",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', parameters('builderIdentity'))]": {}
                                }
                              },
                              "properties": {
                                "forceUpdateTag": "[parameters('guidId')]",
                                "azPowerShellVersion": "9.7",
                                "environmentVariables": [
                                  {
                                    "name": "imageTemplateName",
                                    "value": "[variables('imageTemplateName')]"
                                  },
                                  {
                                    "name": "resourceGroupName",
                                    "value": "[resourceGroup().name]"
                                  },
                                  {
                                    "name": "stagingResourceGroupName",
                                    "value": "[variables('stagingResourceGroupName')]"
                                  },
                                  {
                                    "name": "ignoreBuildFailure",
                                    "value": "[format('{0}', parameters('ignoreBuildFailure'))]"
                                  },
                                  {
                                    "name": "printCustomizationLogLastLines",
                                    "value": "[format('{0}', parameters('printCustomizationLogLastLines'))]"
                                  }
                                ],
                                "scriptContent": "[join(variables('scripts'), '\n\n')]",
                                "cleanupPreference": "OnSuccess",
                                "retentionInterval": "P1D"
                              },
                              "dependsOn": [
                                "imageTemplate"
                              ]
                            },
                            "logs": {
                              "existing": true,
                              "type": "Microsoft.Resources/deploymentScripts/logs",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}/{1}', format('{0}-build', parameters('imageName')), 'default')]",
                              "dependsOn": [
                                "buildImageTemplateScript"
                              ]
                            }
                          },
                          "outputs": {
                            "imageBuildLog": {
                              "type": "string",
                              "value": "[reference('logs').log]"
                            },
                            "stagingResourceGroupName": {
                              "type": "string",
                              "value": "[variables('stagingResourceGroupName')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "common",
                        "config",
                        "devtools",
                        "publishProfile",
                        "repoArtifacts"
                      ]
                    }
                  },
                  "outputs": {
                    "imageBuildLog": {
                      "type": "string",
                      "value": "[reference('aibImage').outputs.imageBuildLog.value]"
                    },
                    "stagingResourceGroupName": {
                      "type": "string",
                      "value": "[reference('aibImage').outputs.stagingResourceGroupName.value]"
                    }
                  }
                }
              }
            }
          },
          "outputs": {
            "imageBuildLog": {
              "type": "string",
              "value": "[reference('devBoxImage').outputs.imageBuildLog.value]"
            },
            "stagingResourceGroupName": {
              "type": "string",
              "value": "[reference('devBoxImage').outputs.stagingResourceGroupName.value]"
            }
          }
        }
      }
    }
  },
  "outputs": {
    "imageResults": {
      "$ref": "#/definitions/_1.results",
      "value": {
        "eShop": "[if(variables('imagesWithDefaults').eShop.shouldBuild, createObject('buildLog', reference('eShop').outputs.imageBuildLog.value, 'stagingResourceGroupName', reference('eShop').outputs.stagingResourceGroupName.value), createObject())]",
        "axios": "[if(variables('imagesWithDefaults').axios.shouldBuild, createObject('buildLog', reference('axios').outputs.imageBuildLog.value, 'stagingResourceGroupName', reference('axios').outputs.stagingResourceGroupName.value), createObject())]",
        "MSBuildSdks": "[if(variables('imagesWithDefaults').MSBuildSdks.shouldBuild, createObject('buildLog', reference('MSBuildSdks').outputs.imageBuildLog.value, 'stagingResourceGroupName', reference('MSBuildSdks').outputs.stagingResourceGroupName.value), createObject())]"
      }
    }
  }
}