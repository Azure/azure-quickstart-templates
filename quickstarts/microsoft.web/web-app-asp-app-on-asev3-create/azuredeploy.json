{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "virtualNetworkName": {
      "type": "string",
      "defaultValue": "vnet-asev3",
      "metadata": {
        "description": "Required. The Virtual Network (vNet) Name."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Required. Location for all resources."
      }
    },
    "vNetAddressPrefixes": {
      "type": "array",
      "defaultValue": [
        "172.16.0.0/16"
      ],
      "metadata": {
        "description": "Required. An Array of 1 or more IP Address Prefixes for the Virtual Network."
      }
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "snet-asev3-ilb",
      "metadata": {
        "description": "Required. The subnet Name of ASEv3."
      }
    },
    "subnets": {
      "type": "array",
      "defaultValue": [
        {
          "name": "snet-asev3-ilb",
          "addressPrefix": "172.16.0.0/24",
          "delegations": [
            {
              "name": "asev3",
              "properties": {
                "serviceName": "Microsoft.Web/hostingEnvironments"
              }
            }
          ],
          "privateEndpointNetworkPolicies": "Enabled",
          "privateLinkServiceNetworkPolicies": "Enabled",
          "networkSecurityGroupName": "nsg-asev3-ilb"
        }
      ],
      "metadata": {
        "description": "Required. The subnet properties."
      }
    },
    "aseNamePrefix": {
      "type": "string",
      "defaultValue": "asev3-ilb",
      "metadata": {
        "description": "Required. Name of ASEv3."
      }
    },
    "dedicatedHostCount": {
      "type": "string",
      "defaultValue": "0",
      "metadata": {
        "description": "Required. Dedicated host count of ASEv3."
      }
    },
    "zoneRedundant": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Required. Zone redundant of ASEv3."
      }
    },
    "createPrivateDNS": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Create a private DNS zone for ASEv3."
      }
    },
    "internalLoadBalancingMode": {
      "type": "int",
      "defaultValue": 3,
      "allowedValues": [
        0,
        3
      ],
      "metadata": {
        "description": "Required. Load balancer mode: 0-external load balancer, 3-internal load balancer for ASEv3."
      }
    },
    "networkSecurityGroupName": {
      "type": "string",
      "defaultValue": "nsg-asev3-ilb",
      "minLength": 1,
      "metadata": {
        "description": "Required. Name of the Network Security Group."
      }
    },
    "networkSecurityGroupSecurityRules": {
      "type": "array",
      "metadata": {
        "description": "Required. Array of Security Rules to deploy to the Network Security Group."
      }
    },
    "timeStamp": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "Optional. It is only for unique string generation base on timestamp."
      }
    }
  },
  "functions": [],
  "variables": {
    "uniStr": "[substring(uniqueString(resourceGroup().id, parameters('timeStamp')), 0, 4)]",
    "aseName": "[format('{0}-{1}', parameters('aseNamePrefix'), variables('uniStr'))]",
    "privateZoneName": "[format('{0}.appserviceenvironment.net', variables('aseName'))]",
    "virtualNetworkId": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
    "subnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName'))]",
    "aseNetworkConfiguration": "[format('{0}/configurations/networking', resourceId('Microsoft.Web/hostingEnvironments', variables('aseName')))]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-11-01",
      "name": "[parameters('networkSecurityGroupName')]",
      "location": "[parameters('location')]",
      "properties": {
        "copy": [
          {
            "name": "securityRules",
            "count": "[length(parameters('networkSecurityGroupSecurityRules'))]",
            "input": {
              "name": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].name]",
              "properties": {
                "description": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.description]",
                "access": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.access]",
                "destinationAddressPrefix": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix, ''), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix)]",
                "destinationAddressPrefixes": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes), 0), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes)]",
                "destinationPortRanges": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRanges), 0), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRanges)]",
                "destinationPortRange": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRange, ''), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRange)]",
                "direction": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.direction]",
                "priority": "[int(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.priority)]",
                "protocol": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.protocol]",
                "sourceAddressPrefix": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix, ''), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix)]",
                "sourcePortRanges": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRanges), 0), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRanges)]",
                "sourcePortRange": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRange]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-11-01",
      "name": "[parameters('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "properties": {
        "copy": [
          {
            "name": "subnets",
            "count": "[length(parameters('subnets'))]",
            "input": {
              "name": "[parameters('subnets')[copyIndex('subnets')].name]",
              "properties": {
                "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].addressPrefix]",
                "networkSecurityGroup": "[if(empty(parameters('subnets')[copyIndex('subnets')].networkSecurityGroupName), json('null'), json(format('{{\"id\": \"{0}\"}}', resourceId('Microsoft.Network/networkSecurityGroups', parameters('subnets')[copyIndex('subnets')].networkSecurityGroupName))))]",
                "delegations": "[parameters('subnets')[copyIndex('subnets')].delegations]"
              }
            }
          }
        ],
        "addressSpace": {
          "addressPrefixes": "[parameters('vNetAddressPrefixes')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/hostingEnvironments",
      "apiVersion": "2020-12-01",
      "name": "[variables('aseName')]",
      "location": "[parameters('location')]",
      "kind": "ASEV3",
      "properties": {
        "dedicatedHostCount": "[parameters('dedicatedHostCount')]",
        "zoneRedundant": "[parameters('zoneRedundant')]",
        "internalLoadBalancingMode": "[parameters('internalLoadBalancingMode')]",
        "virtualNetwork": {
          "id": "[variables('subnetId')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
      ]
    },
    {
      "condition": "[and(parameters('createPrivateDNS'), equals(parameters('internalLoadBalancingMode'), 3))]",
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "[variables('privateZoneName')]",
      "location": "global",
      "properties": {},
      "dependsOn": [
        "[resourceId('Microsoft.Web/hostingEnvironments', variables('aseName'))]"
      ]
    },
    {
      "condition": "[and(parameters('createPrivateDNS'), equals(parameters('internalLoadBalancingMode'), 3))]",
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('privateZoneName'), 'vnetLink')]",
      "location": "global",
      "properties": {
        "virtualNetwork": {
          "id": "[variables('virtualNetworkId')]"
        },
        "registrationEnabled": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateZoneName'))]"
      ]
    },
    {
      "condition": "[and(parameters('createPrivateDNS'), equals(parameters('internalLoadBalancingMode'), 3))]",
      "type": "Microsoft.Network/privateDnsZones/A",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('privateZoneName'), '*')]",
      "properties": {
        "ttl": 3600,
        "aRecords": [
          {
            "ipv4Address": "[reference(variables('aseNetworkConfiguration'), '2018-09-01').internalInboundIpAddresses[0]]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/hostingEnvironments', variables('aseName'))]",
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateZoneName'))]"
      ]
    },
    {
      "condition": "[and(parameters('createPrivateDNS'), equals(parameters('internalLoadBalancingMode'), 3))]",
      "type": "Microsoft.Network/privateDnsZones/A",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('privateZoneName'), '*.scm')]",
      "properties": {
        "ttl": 3600,
        "aRecords": [
          {
            "ipv4Address": "[reference(variables('aseNetworkConfiguration'), '2018-09-01').internalInboundIpAddresses[0]]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/hostingEnvironments', variables('aseName'))]",
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateZoneName'))]"
      ]
    },
    {
      "condition": "[and(parameters('createPrivateDNS'), equals(parameters('internalLoadBalancingMode'), 3))]",
      "type": "Microsoft.Network/privateDnsZones/A",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('privateZoneName'), '@')]",
      "properties": {
        "ttl": 3600,
        "aRecords": [
          {
            "ipv4Address": "[reference(variables('aseNetworkConfiguration'), '2018-09-01').internalInboundIpAddresses[0]]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/hostingEnvironments', variables('aseName'))]",
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateZoneName'))]"
      ]
    }
  ]
}