{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
<<<<<<< HEAD
      "version": "0.4.613.9944",
      "templateHash": "1384395472666794117"
=======
      "version": "0.4.451.19169",
      "templateHash": "3546669079227550413"
>>>>>>> 47fa0752ac9dab815aac182015325980bc987074
    }
  },
  "parameters": {
    "virtualNetworkName": {
      "type": "string",
      "defaultValue": "vnet-asev3",
      "metadata": {
        "description": "Required. The Virtual Network (vNet) Name."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "eastasia",
      "metadata": {
        "description": "Required. Location for all resources."
      }
    },
    "vNetAddressPrefixes": {
      "type": "array",
      "defaultValue": [
        "172.16.0.0/16"
      ],
      "metadata": {
        "description": "Required. An Array of 1 or more IP Address Prefixes for the Virtual Network."
      }
    },
    "networkSecurityGroupName": {
      "type": "string",
      "defaultValue": "nsg-asev3-ilb",
      "minLength": 1,
      "metadata": {
        "description": "Required. Name of the Network Security Group."
      }
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "snet-asev3-ilb",
      "metadata": {
        "description": "Required. The subnet Name of ASEv3."
      }
    },
    "subnets": {
      "type": "array",
      "defaultValue": [
        {
          "name": "snet-asev3-ilb",
          "addressPrefix": "172.16.0.0/24",
          "delegations": [
            {
              "name": "asev3",
              "properties": {
                "serviceName": "Microsoft.Web/hostingEnvironments"
              }
            }
          ],
          "privateEndpointNetworkPolicies": "Enabled",
          "privateLinkServiceNetworkPolicies": "Enabled",
          "networkSecurityGroupName": "nsg-asev3-ilb"
        }
      ],
      "minLength": 1,
      "metadata": {
        "description": "Required. An Array of subnets to deploy to the Virual Network."
      }
    },
    "aseNamePrefix": {
      "type": "string",
      "defaultValue": "asev3-ilb",
      "metadata": {
        "description": "Required. Name of ASEv3."
      }
    },
    "dedicatedHostCount": {
      "type": "string",
      "defaultValue": "0",
      "metadata": {
        "description": "Required. Dedicated host count of ASEv3."
      }
    },
    "zoneRedundant": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Required. Zone redundant of ASEv3."
      }
    },
    "createPrivateDNS": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Create a private DNS zone for ASEv3."
      }
    },
    "internalLoadBalancingMode": {
      "type": "int",
      "defaultValue": 3,
      "allowedValues": [
        0,
        3
      ],
      "metadata": {
        "description": "Required. Load balancer mode: 0-external load balancer, 3-internal load balancer for ASEv3."
      }
    },
    "timeStamp": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "Optional. It is only for unique string generation base on timestamp."
      }
    }
  },
  "functions": [],
  "variables": {
    "uniStr": "[substring(uniqueString(resourceGroup().id, parameters('timeStamp')), 0, 4)]",
    "aseName": "[format('{0}-{1}', parameters('aseNamePrefix'), variables('uniStr'))]",
    "privateZoneName": "[format('{0}.appserviceenvironment.net', variables('aseName'))]",
    "virtualNetworkId": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
    "subnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Web/hostingEnvironments",
      "apiVersion": "2021-01-15",
      "name": "[variables('aseName')]",
      "location": "[parameters('location')]",
      "kind": "ASEV3",
      "properties": {
        "dedicatedHostCount": "[parameters('dedicatedHostCount')]",
        "zoneRedundant": "[parameters('zoneRedundant')]",
        "internalLoadBalancingMode": "[parameters('internalLoadBalancingMode')]",
        "virtualNetwork": {
          "id": "[variables('subnetId')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}-{1}', parameters('virtualNetworkName'), variables('uniStr')))]"
      ]
    },
    {
      "condition": "[and(parameters('createPrivateDNS'), equals(parameters('internalLoadBalancingMode'), 3))]",
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "[variables('privateZoneName')]",
      "location": "global",
      "properties": {},
      "dependsOn": [
        "[resourceId('Microsoft.Web/hostingEnvironments', variables('aseName'))]"
      ]
    },
    {
      "condition": "[and(parameters('createPrivateDNS'), equals(parameters('internalLoadBalancingMode'), 3))]",
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('privateZoneName'), 'vnetLink')]",
      "location": "global",
      "properties": {
        "virtualNetwork": {
          "id": "[variables('virtualNetworkId')]"
        },
        "registrationEnabled": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateZoneName'))]"
      ]
    },
    {
      "condition": "[and(parameters('createPrivateDNS'), equals(parameters('internalLoadBalancingMode'), 3))]",
      "type": "Microsoft.Network/privateDnsZones/A",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('privateZoneName'), '*')]",
      "properties": {
        "ttl": 3600,
        "aRecords": [
          {
            "ipv4Address": "[reference(format('{0}/configurations/networking', resourceId('Microsoft.Web/hostingEnvironments', variables('aseName'))), '2020-06-01').internalInboundIpAddresses[0]]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/hostingEnvironments', variables('aseName'))]",
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateZoneName'))]"
      ]
    },
    {
      "condition": "[and(parameters('createPrivateDNS'), equals(parameters('internalLoadBalancingMode'), 3))]",
      "type": "Microsoft.Network/privateDnsZones/A",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('privateZoneName'), '*.scm')]",
      "properties": {
        "ttl": 3600,
        "aRecords": [
          {
            "ipv4Address": "[reference(format('{0}/configurations/networking', resourceId('Microsoft.Web/hostingEnvironments', variables('aseName'))), '2020-06-01').internalInboundIpAddresses[0]]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/hostingEnvironments', variables('aseName'))]",
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateZoneName'))]"
      ]
    },
    {
      "condition": "[and(parameters('createPrivateDNS'), equals(parameters('internalLoadBalancingMode'), 3))]",
      "type": "Microsoft.Network/privateDnsZones/A",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('privateZoneName'), '@')]",
      "properties": {
        "ttl": 3600,
        "aRecords": [
          {
            "ipv4Address": "[reference(format('{0}/configurations/networking', resourceId('Microsoft.Web/hostingEnvironments', variables('aseName'))), '2020-06-01').internalInboundIpAddresses[0]]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/hostingEnvironments', variables('aseName'))]",
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateZoneName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "[format('{0}-{1}', parameters('virtualNetworkName'), variables('uniStr'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualNetworkName": {
            "value": "[parameters('virtualNetworkName')]"
          },
          "networkSecurityGroupName": {
            "value": "[parameters('networkSecurityGroupName')]"
          },
          "vNetAddressPrefixes": {
            "value": "[parameters('vNetAddressPrefixes')]"
          },
          "subnets": {
            "value": "[parameters('subnets')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.613.9944",
              "templateHash": "375015381266980528"
            }
          },
          "parameters": {
            "virtualNetworkName": {
              "type": "string",
              "metadata": {
                "description": "Required. The Virtual Network (vNet) Name."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "vNetAddressPrefixes": {
              "type": "array",
              "metadata": {
                "description": "Required. An Array of 1 or more IP Address Prefixes for the Virtual Network."
              }
            },
            "networkSecurityGroupName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Required. Name of the Network Security Group."
              }
            },
            "networkSecurityGroupSecurityRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Required. Array of Security Rules to deploy to the Network Security Group."
              }
            },
            "subnets": {
              "type": "array",
              "minLength": 1,
              "metadata": {
                "description": "Required. An Array of subnets to deploy to the Virual Network."
              }
            },
            "dnsServers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. DNS Servers associated to the Virtual Network."
              }
            },
            "ddosProtectionPlanId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource Id of the DDoS protection plan to assign the VNET to. If it's left blank, DDoS protection will not be configured. If it's provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription."
              }
            }
          },
          "functions": [],
          "variables": {
            "varDnsServers": {
              "dnsServers": "[parameters('dnsServers')]"
            },
            "ddosProtectionPlan": {
              "id": "[parameters('ddosProtectionPlanId')]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2021-02-01",
              "name": "[parameters('virtualNetworkName')]",
              "location": "[parameters('location')]",
              "properties": {
                "copy": [
                  {
                    "name": "subnets",
                    "count": "[length(parameters('subnets'))]",
                    "input": {
                      "name": "[parameters('subnets')[copyIndex('subnets')].name]",
                      "properties": {
                        "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].addressPrefix]",
                        "networkSecurityGroup": "[if(empty(parameters('subnets')[copyIndex('subnets')].networkSecurityGroupName), json('null'), json(format('{{\"id\": \"{0}\"}}', resourceId('Microsoft.Network/networkSecurityGroups', parameters('subnets')[copyIndex('subnets')].networkSecurityGroupName))))]",
                        "routeTable": "[if(empty(parameters('subnets')[copyIndex('subnets')].routeTableName), json('null'), json(format('{{\"id\": \"{0}\"}}', resourceId('Microsoft.Network/routeTables', parameters('subnets')[copyIndex('subnets')].routeTableName))))]",
                        "serviceEndpoints": "[if(empty(parameters('subnets')[copyIndex('subnets')].serviceEndpoints), json('null'), parameters('subnets')[copyIndex('subnets')].serviceEndpoints)]",
                        "delegations": "[parameters('subnets')[copyIndex('subnets')].delegations]"
                      }
                    }
                  }
                ],
                "addressSpace": {
                  "addressPrefixes": "[parameters('vNetAddressPrefixes')]"
                },
                "ddosProtectionPlan": "[if(not(empty(parameters('ddosProtectionPlanId'))), variables('ddosProtectionPlan'), json('null'))]",
                "dhcpOptions": "[if(empty(parameters('dnsServers')), json('null'), variables('varDnsServers'))]",
                "enableDdosProtection": "[not(empty(parameters('ddosProtectionPlanId')))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', parameters('networkSecurityGroupName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "[parameters('networkSecurityGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "networkSecurityGroupName": {
                    "value": "[parameters('networkSecurityGroupName')]"
                  },
                  "networkSecurityGroupSecurityRules": {
                    "value": "[parameters('networkSecurityGroupSecurityRules')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.613.9944",
                      "templateHash": "9413545957360862465"
                    }
                  },
                  "parameters": {
                    "networkSecurityGroupName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "Required. Name of the Network Security Group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "networkSecurityGroupSecurityRules": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. Array of Security Rules to deploy to the Network Security Group."
                      }
                    }
                  },
                  "functions": [],
                  "variables": {
                    "emptyArray": []
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2021-01-01",
                      "name": "[parameters('networkSecurityGroupName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "securityRules",
                            "count": "[length(parameters('networkSecurityGroupSecurityRules'))]",
                            "input": {
                              "name": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].name]",
                              "properties": {
                                "description": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.description]",
                                "access": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.access]",
                                "destinationAddressPrefix": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix, ''), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix)]",
                                "destinationAddressPrefixes": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes), 0), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes)]",
                                "destinationApplicationSecurityGroups": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationApplicationSecurityGroups), 0), json('null'), concat(variables('emptyArray'), array(json(format('{{{{\"id\": \"{0}\",\"location\": \"{1}\"}}}}', resourceId('Microsoft.Network/applicationSecurityGroups', parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationApplicationSecurityGroups[0].name), parameters('location'))))))]",
                                "destinationPortRanges": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRanges), 0), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRanges)]",
                                "destinationPortRange": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRange, ''), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRange)]",
                                "direction": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.direction]",
                                "priority": "[int(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.priority)]",
                                "protocol": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.protocol]",
                                "sourceAddressPrefix": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix, ''), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix)]",
                                "sourceApplicationSecurityGroups": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceApplicationSecurityGroups), 0), json('null'), concat(variables('emptyArray'), array(json(format('{{{{\"id\": \"{0}\",\"location\": \"{1}\"}}}}', resourceId('Microsoft.Network/applicationSecurityGroups', parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceApplicationSecurityGroups[0].name), parameters('location'))))))]",
                                "sourcePortRanges": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRanges), 0), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRanges)]",
                                "sourcePortRange": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRange]"
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  ]
}