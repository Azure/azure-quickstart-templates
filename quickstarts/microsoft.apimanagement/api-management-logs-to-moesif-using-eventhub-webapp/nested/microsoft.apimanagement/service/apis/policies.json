{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "existingApiManagementResourceName": {
            "type": "string",
            "metadata": {
                "description": "Name of existing Api Management service"
            }
        },
        "apiName": {
            "type": "string",
            "metadata": {
                "description": "The Api Name within the Api Management to apply policy to. eg: 'my-billing-apis'. This template does not apply policy globally"
            }
        },
        "logToEventhubLoggerName": {
            "type": "string",
            "metadata": {
                "description": "The name of 'log-to-eventhub' logger"
            }
        },
        "log2EHPolicyXml": {
            "type": "string",
            "defaultValue": "[concat('<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-variable name=\"moesif-message-id\" value=\"@(Guid.NewGuid())\" />\r\n    <log-to-eventhub logger-id=\"', parameters('logToEventhubLoggerName'), '\" partition-id=\"0\">@{\r\nvar body = context.Request.Body?.As&lt;string&gt;(true);\r\nvar MAX_BODY_EH = 145000;\r\nvar origBodyLen = (null != body) ? body.Length : 0;\r\nif (MAX_BODY_EH &lt; origBodyLen){ body = body.Remove(MAX_BODY_EH); }\r\nvar headers = context.Request.Headers\r\n    .Where(h =&gt; h.Key != \"Ocp-Apim-Subscription-Key\")\r\n    .Select(h =&gt; string.Format(\"{0}: {1}\", h.Key, String.Join(\", \", h.Value).Replace(\"\\\"\", \"\\\\\\\"\"))).ToArray&lt;string&gt;();\r\nvar jwtToken = context.Request.Headers.GetValueOrDefault(\"Authorization\",\"\").AsJwt();\r\nvar userId = (context.User != null &amp;&amp; context.User.Id != null) ? context.User.Id : (jwtToken != null &amp;&amp; jwtToken.Subject != null ? jwtToken.Subject : string.Empty);\r\nvar cru = new JObject();\r\nif (context.User != null) {\r\n  cru.Add(\"Email\", context.User.Email);\r\n  cru.Add(\"Id\", context.User.Id);\r\n  cru.Add(\"FirstName\", context.User.FirstName);\r\n  cru.Add(\"LastName\", context.User.LastName);}\r\nvar crus = System.Convert.ToBase64String(Encoding.UTF8.GetBytes(cru.ToString()));\r\nvar requestBody = (body != null ? System.Convert.ToBase64String(Encoding.UTF8.GetBytes(body)) : string.Empty);\r\nreturn new JObject(\r\n  new JProperty(\"event_type\", \"request\"),\r\n  new JProperty(\"message-id\", context.Variables[\"moesif-message-id\"]),\r\n  new JProperty(\"method\", context.Request.Method),\r\n  new JProperty(\"ip_address\", context.Request.IpAddress),\r\n  new JProperty(\"uri\", context.Request.OriginalUrl.ToString()),\r\n  new JProperty(\"user_id\", userId),\r\n  new JProperty(\"contextRequestUser\", crus),\r\n  new JProperty(\"company_id\", \"\"),\r\n  new JProperty(\"request_headers\", string.Join(\";;\", headers)),\r\n  new JProperty(\"request_body\", requestBody),\r\n  new JProperty(\"contextTimestamp\", context.Timestamp.ToString(\"o\")),\r\n  new JProperty(\"metadata\", $@\"\")\r\n  ).ToString();}</log-to-eventhub>\r\n    <set-variable name=\"sent-moesif-request\" value=\"@(true)\" />\r\n  </inbound>\r\n  <backend>\r\n    <forward-request follow-redirects=\"true\" />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n    <choose>\r\n      <when condition=\"@(context.Variables.ContainsKey(&quot;sent-moesif-request&quot;) &amp;&amp; !context.Variables.ContainsKey(&quot;sent-moesif-response&quot;))\">\r\n        <log-to-eventhub logger-id=\"', parameters('logToEventhubLoggerName'), '\" partition-id=\"1\">@{\r\nvar body = context.Response.Body?.As&lt;string&gt;(true);\r\nvar MAX_BODY_EH = 145000;\r\nvar origBodyLen = (null != body) ? body.Length : 0;\r\nif (MAX_BODY_EH &lt; origBodyLen){ body = body.Remove(MAX_BODY_EH);}\r\nvar headers = context.Response.Headers.Select(h =&gt; string.Format(\"{0}: {1}\", h.Key, String.Join(\", \", h.Value).Replace(\"\\\"\", \"\\\\\\\"\"))).ToArray&lt;string&gt;();\r\nvar responseBody = (body != null ? System.Convert.ToBase64String(Encoding.UTF8.GetBytes(body)) : string.Empty);\r\nreturn new JObject(\r\n  new JProperty(\"event_type\", \"response\"),\r\n  new JProperty(\"orig_body_len\", origBodyLen),\r\n  new JProperty(\"message-id\", context.Variables[\"moesif-message-id\"]),\r\n  new JProperty(\"status_code\", context.Response.StatusCode),\r\n  new JProperty(\"response_headers\", string.Join(\";;\", headers)),\r\n  new JProperty(\"contextTimestamp\", context.Timestamp.Add(context.Elapsed).ToString(\"o\")),\r\n  new JProperty(\"response_body\", responseBody)\r\n  ).ToString();}</log-to-eventhub>\r\n        <set-variable name=\"sent-moesif-response\" value=\"@(true)\" />\r\n      </when>\r\n    </choose>\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n    <choose>\r\n      <when condition=\"@(context.Variables.ContainsKey(&quot;sent-moesif-request&quot;) &amp;&amp; !context.Variables.ContainsKey(&quot;sent-moesif-response&quot;))\">\r\n        <log-to-eventhub logger-id=\"', parameters('logToEventhubLoggerName'), '\" partition-id=\"1\">@{\r\nvar body = context.Response.Body?.As&lt;string&gt;(true);\r\nvar MAX_BODY_EH = 145000;\r\nvar origBodyLen = (null != body) ? body.Length : 0;\r\nif (MAX_BODY_EH &lt; origBodyLen){ body = body.Remove(MAX_BODY_EH);}\r\nvar headers = context.Response.Headers.Select(h =&gt; string.Format(\"{0}: {1}\", h.Key, String.Join(\", \", h.Value).Replace(\"\\\"\", \"\\\\\\\"\"))).ToArray&lt;string&gt;();\r\nvar responseBody = (body != null ? System.Convert.ToBase64String(Encoding.UTF8.GetBytes(body)) : string.Empty);\r\nreturn new JObject(\r\n  new JProperty(\"event_type\", \"response\"),\r\n  new JProperty(\"orig_body_len\", origBodyLen),\r\n  new JProperty(\"message-id\", context.Variables[\"moesif-message-id\"]),\r\n  new JProperty(\"status_code\", context.Response.StatusCode),\r\n  new JProperty(\"response_headers\", string.Join(\";;\", headers)),\r\n  new JProperty(\"contextTimestamp\", context.Timestamp.Add(context.Elapsed).ToString(\"o\")),\r\n  new JProperty(\"response_body\", responseBody)\r\n  ).ToString();}</log-to-eventhub>\r\n        <set-variable name=\"sent-moesif-response\" value=\"@(true)\" />\r\n      </when>\r\n    </choose>\r\n  </on-error>\r\n</policies>')]",
            "metadata": {
                "description": "The <policies> xml blob that will completely overwrite existing value"
            }
        },
        "tags": {
            "type": "Object"
        }
    },
    "variables": {},
    "resources": [
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-04-01-preview",
            "name": "[concat(parameters('existingApiManagementResourceName'), '/', parameters('apiName'), '/policy')]",
            "tags": "[parameters('tags')]",
            "properties": {
                "value": "[parameters('log2EHPolicyXml')]",
                "format": "xml"
            }
        }
    ]
}
