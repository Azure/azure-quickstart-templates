{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.26.54.24096",
      "templateHash": "17046717519507322655"
    }
  },
  "parameters": {
    "watcherName": {
      "type": "string",
      "metadata": {
        "description": "Database watcher name"
      }
    },
    "identityType": {
      "type": "string",
      "metadata": {
        "description": "The type of managed identity to assign to a watcher"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location (Azure region) of the watcher"
      }
    },
    "createNewDatastore": {
      "type": "bool",
      "metadata": {
        "description": "Set to true to create a new Azure Data Explorer cluster and database as the data store for the watcher"
      }
    },
    "kustoOfferingType": {
      "type": "string",
      "defaultValue": "adx",
      "metadata": {
        "description": "The Kusto offering type of the data store. Supported values are: adx, free, fabric."
      }
    },
    "clusterName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure Data Explorer cluster"
      }
    },
    "databaseName": {
      "type": "string",
      "defaultValue": "database-watcher-data-store",
      "metadata": {
        "description": "The name of the Azure Data Explorer database"
      }
    },
    "clusterSkuName": {
      "type": "string",
      "metadata": {
        "description": "The SKU of the Azure Data Explorer cluster"
      }
    },
    "clusterSkuTier": {
      "type": "string",
      "metadata": {
        "description": "The SKU tier of the Azure Data Explorer cluster"
      }
    },
    "targetCount": {
      "type": "int",
      "metadata": {
        "description": "The total number of SQL targets to add to a watcher"
      }
    },
    "targetProperties": {
      "type": "array",
      "metadata": {
        "description": "The array of SQL target properties. Each element of the array defines a SQL target."
      }
    },
    "privateLinkCount": {
      "type": "int",
      "metadata": {
        "description": "The total number of managed private links to add to a watcher"
      }
    },
    "privateLinkProperties": {
      "type": "array",
      "metadata": {
        "description": "The array of managed private link properties. Each element of the array defines a managed private link to an Azure resource."
      }
    }
  },
  "resources": [
    {
      "condition": "[equals(parameters('createNewDatastore'), bool('true'))]",
      "type": "Microsoft.Kusto/clusters",
      "apiVersion": "2023-05-02",
      "name": "[parameters('clusterName')]",
      "location": "[parameters('location')]",
      "tags": {},
      "sku": {
        "capacity": 2,
        "name": "[parameters('clusterSkuName')]",
        "tier": "[parameters('clusterSkuTier')]"
      },
      "identity": {
        "type": "None"
      },
      "properties": {
        "enableAutoStop": false,
        "enableDiskEncryption": true,
        "enableDoubleEncryption": false,
        "enableStreamingIngest": true,
        "enablePurge": true,
        "engineType": "V3",
        "optimizedAutoscale": {
          "isEnabled": false,
          "minimum": 2,
          "maximum": 2,
          "version": 1
        },
        "publicIPType": "IPv4",
        "publicNetworkAccess": "Enabled",
        "restrictOutboundNetworkAccess": "Disabled"
      }
    },
    {
      "type": "Microsoft.DatabaseWatcher/watchers",
      "apiVersion": "2023-09-01-preview",
      "name": "[parameters('watcherName')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "[parameters('identityType')]"
      },
      "properties": {
        "datastore": {
          "adxClusterResourceId": "[resourceId('Microsoft.Kusto/Clusters', parameters('clusterName'))]",
          "kustoClusterDisplayName": "[parameters('clusterName')]",
          "kustoDatabaseName": "[parameters('databaseName')]",
          "kustoClusterUri": "[reference(resourceId('Microsoft.Kusto/clusters', parameters('clusterName')), '2023-05-02').uri]",
          "kustoDataIngestionUri": "[reference(resourceId('Microsoft.Kusto/clusters', parameters('clusterName')), '2023-05-02').dataIngestionUri]",
          "kustoManagementUrl": "[format('{0}/resource/subscriptions{1}/overview', environment().portal, resourceId('Microsoft.Kusto/Clusters', parameters('clusterName')))]",
          "kustoOfferingType": "[parameters('kustoOfferingType')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Kusto/clusters', parameters('clusterName'))]"
      ]
    },
    {
      "type": "Microsoft.Kusto/clusters/databases",
      "apiVersion": "2023-05-02",
      "name": "[format('{0}/{1}', parameters('clusterName'), parameters('databaseName'))]",
      "location": "[parameters('location')]",
      "kind": "ReadWrite",
      "properties": {},
      "dependsOn": [
        "[resourceId('Microsoft.Kusto/clusters', parameters('clusterName'))]"
      ]
    },
    {
      "type": "Microsoft.Kusto/clusters/databases/principalAssignments",
      "apiVersion": "2023-05-02",
      "name": "[format('{0}/{1}/{2}', parameters('clusterName'), parameters('databaseName'), guid(resourceGroup().id))]",
      "properties": {
        "tenantId": "[reference(resourceId('Microsoft.DatabaseWatcher/watchers', parameters('watcherName')), '2023-09-01-preview', 'full').identity.tenantId]",
        "principalId": "[reference(resourceId('Microsoft.DatabaseWatcher/watchers', parameters('watcherName')), '2023-09-01-preview', 'full').identity.principalId]",
        "role": "Admin",
        "principalType": "App"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Kusto/clusters/databases', parameters('clusterName'), parameters('databaseName'))]",
        "[resourceId('Microsoft.DatabaseWatcher/watchers', parameters('watcherName'))]"
      ]
    },
    {
      "copy": {
        "name": "name_id_name_sqlDbAadTargetCopy",
        "count": "[length(range(0, length(range(0, parameters('targetCount')))))]"
      },
      "condition": "[and(equals(parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetType, 'SqlDb'), equals(parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetAuthenticationType, 'Aad'))]",
      "type": "Microsoft.DatabaseWatcher/watchers/targets",
      "apiVersion": "2023-09-01-preview",
      "name": "[format('{0}/{1}', parameters('watcherName'), guid(resourceGroup().id, parameters('watcherName'), string(range(0, length(range(0, parameters('targetCount'))))[copyIndex()])))]",
      "properties": {
        "targetType": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetType]",
        "sqlDbResourceId": "[resourceId(parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetLogicalServerSubscriptionId, parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetLogicalServerResourceGroupName, 'Microsoft.Sql/servers/databases', parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetLogicalServerName, parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetDatabaseName)]",
        "connectionServerName": "[concat(parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetLogicalServerName, parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetServerDnsSuffix)]",
        "readIntent": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].readIntent]",
        "targetAuthenticationType": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetAuthenticationType]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DatabaseWatcher/watchers', parameters('watcherName'))]"
      ]
    },
    {
      "copy": {
        "name": "name_id_name_sqlDbSqlTargetCopy",
        "count": "[length(range(0, length(range(0, parameters('targetCount')))))]"
      },
      "condition": "[and(equals(parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetType, 'SqlDb'), equals(parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetAuthenticationType, 'Sql'))]",
      "type": "Microsoft.DatabaseWatcher/watchers/targets",
      "apiVersion": "2023-09-01-preview",
      "name": "[format('{0}/{1}', parameters('watcherName'), guid(resourceGroup().id, parameters('watcherName'), string(range(0, length(range(0, parameters('targetCount'))))[copyIndex()])))]",
      "properties": {
        "targetType": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetType]",
        "sqlDbResourceId": "[resourceId(parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetLogicalServerSubscriptionId, parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetLogicalServerResourceGroupName, 'Microsoft.Sql/servers/databases', parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetLogicalServerName, parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetDatabaseName)]",
        "connectionServerName": "[concat(parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetLogicalServerName, parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetServerDnsSuffix)]",
        "readIntent": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].readIntent]",
        "targetAuthenticationType": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetAuthenticationType]",
        "targetVault": {
          "akvResourceId": "[resourceId(parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetVaultSubscriptionId, parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetVaultResourceGroup, 'Microsoft.KeyVault/vaults', parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetVaultName)]",
          "akvTargetUser": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].akvTargetUser]",
          "akvTargetPassword": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].akvTargetPassword]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DatabaseWatcher/watchers', parameters('watcherName'))]"
      ]
    },
    {
      "copy": {
        "name": "name_id_name_sqlEpAadTargetCopy",
        "count": "[length(range(0, length(range(0, parameters('targetCount')))))]"
      },
      "condition": "[and(equals(parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetType, 'SqlEp'), equals(parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetAuthenticationType, 'Aad'))]",
      "type": "Microsoft.DatabaseWatcher/watchers/targets",
      "apiVersion": "2023-09-01-preview",
      "name": "[format('{0}/{1}', parameters('watcherName'), guid(resourceGroup().id, parameters('watcherName'), string(range(0, length(range(0, parameters('targetCount'))))[copyIndex()])))]",
      "properties": {
        "targetType": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetType]",
        "sqlEpResourceId": "[resourceId(parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetLogicalServerSubscriptionId, parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetLogicalServerResourceGroupName, 'Microsoft.Sql/servers/elasticPools', parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetLogicalServerName, parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetElasticPoolName)]",
        "anchorDatabaseResourceId": "[resourceId('Microsoft.Sql/servers/databases', parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetLogicalServerName, parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetAnchorDatabaseName)]",
        "connectionServerName": "[concat(parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetLogicalServerName, parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetServerDnsSuffix)]",
        "readIntent": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].readIntent]",
        "targetAuthenticationType": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetAuthenticationType]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DatabaseWatcher/watchers', parameters('watcherName'))]"
      ]
    },
    {
      "copy": {
        "name": "name_id_name_sqlEpSqlTargetCopy",
        "count": "[length(range(0, length(range(0, parameters('targetCount')))))]"
      },
      "condition": "[and(equals(parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetType, 'SqlEp'), equals(parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetAuthenticationType, 'Sql'))]",
      "type": "Microsoft.DatabaseWatcher/watchers/targets",
      "apiVersion": "2023-09-01-preview",
      "name": "[format('{0}/{1}', parameters('watcherName'), guid(resourceGroup().id, parameters('watcherName'), string(range(0, length(range(0, parameters('targetCount'))))[copyIndex()])))]",
      "properties": {
        "targetType": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetType]",
        "sqlEpResourceId": "[resourceId(parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetLogicalServerSubscriptionId, parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetLogicalServerResourceGroupName, 'Microsoft.Sql/servers/elasticPools', parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetLogicalServerName, parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetElasticPoolName)]",
        "anchorDatabaseResourceId": "[resourceId('Microsoft.Sql/servers/databases', parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetLogicalServerName, parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetAnchorDatabaseName)]",
        "connectionServerName": "[concat(parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetLogicalServerName, parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetServerDnsSuffix)]",
        "readIntent": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].readIntent]",
        "targetAuthenticationType": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetAuthenticationType]",
        "targetVault": {
          "akvResourceId": "[resourceId(parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetVaultSubscriptionId, parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetVaultResourceGroup, 'Microsoft.KeyVault/vaults', parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetVaultName)]",
          "akvTargetUser": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].akvTargetUser]",
          "akvTargetPassword": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].akvTargetPassword]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DatabaseWatcher/watchers', parameters('watcherName'))]"
      ]
    },
    {
      "copy": {
        "name": "name_id_name_sqlMiAadTargetCopy",
        "count": "[length(range(0, length(range(0, parameters('targetCount')))))]"
      },
      "condition": "[and(equals(parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetType, 'SqlMi'), equals(parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetAuthenticationType, 'Aad'))]",
      "type": "Microsoft.DatabaseWatcher/watchers/targets",
      "apiVersion": "2023-09-01-preview",
      "name": "[format('{0}/{1}', parameters('watcherName'), guid(resourceGroup().id, parameters('watcherName'), string(range(0, length(range(0, parameters('targetCount'))))[copyIndex()])))]",
      "properties": {
        "targetType": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetType]",
        "sqlMiResourceId": "[resourceId(parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetManagedInstanceSubscriptionId, parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetManagedInstanceResourceGroupName, 'Microsoft.Sql/managedInstances', parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetManagedInstanceName)]",
        "connectionServerName": "[format('{0}.{1}{2}', parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetManagedInstanceName, parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetManagedInstanceDnsZone, parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetManagedInstanceDnsSuffix)]",
        "connectionTcpPort": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].connectionTcpPort]",
        "readIntent": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].readIntent]",
        "targetAuthenticationType": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetAuthenticationType]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DatabaseWatcher/watchers', parameters('watcherName'))]"
      ]
    },
    {
      "copy": {
        "name": "name_id_name_sqlMiSqlTargetCopy",
        "count": "[length(range(0, length(range(0, parameters('targetCount')))))]"
      },
      "condition": "[and(equals(parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetType, 'SqlMi'), equals(parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetAuthenticationType, 'Sql'))]",
      "type": "Microsoft.DatabaseWatcher/watchers/targets",
      "apiVersion": "2023-09-01-preview",
      "name": "[format('{0}/{1}', parameters('watcherName'), guid(resourceGroup().id, parameters('watcherName'), string(range(0, length(range(0, parameters('targetCount'))))[copyIndex()])))]",
      "properties": {
        "targetType": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetType]",
        "sqlMiResourceId": "[resourceId(parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetManagedInstanceSubscriptionId, parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetManagedInstanceResourceGroupName, 'Microsoft.Sql/managedInstances', parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetManagedInstanceName)]",
        "connectionServerName": "[format('{0}.{1}{2}', parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetManagedInstanceName, parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetManagedInstanceDnsZone, parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetManagedInstanceDnsSuffix)]",
        "connectionTcpPort": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].connectionTcpPort]",
        "readIntent": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].readIntent]",
        "targetAuthenticationType": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetAuthenticationType]",
        "targetVault": {
          "akvResourceId": "[resourceId(parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetVaultSubscriptionId, parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetVaultResourceGroup, 'Microsoft.KeyVault/vaults', parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].targetVaultName)]",
          "akvTargetUser": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].akvTargetUser]",
          "akvTargetPassword": "[parameters('targetProperties')[range(0, length(range(0, parameters('targetCount'))))[copyIndex()]].akvTargetPassword]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DatabaseWatcher/watchers', parameters('watcherName'))]"
      ]
    },
    {
      "copy": {
        "name": "name_privateLinkProperties_managedSqlDbPrivateLinkCopy_privateLink",
        "count": "[length(range(0, length(range(0, parameters('privateLinkCount')))))]"
      },
      "condition": "[equals(parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].groupId, 'sqlServer')]",
      "type": "Microsoft.DatabaseWatcher/watchers/sharedPrivateLinkResources",
      "apiVersion": "2023-09-01-preview",
      "name": "[format('{0}/{1}', parameters('watcherName'), format('{0}', parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].privateLinkName))]",
      "properties": {
        "privateLinkResourceId": "[resourceId(parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].logicalServerSubscriptionId, parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].logicalServerResourceGroupName, 'Microsoft.Sql/servers', parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].logicalServerName)]",
        "groupId": "[parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].groupId]",
        "requestMessage": "[parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].requestMessage]",
        "dnsZone": "[parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].dnsZone]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DatabaseWatcher/watchers', parameters('watcherName'))]"
      ]
    },
    {
      "copy": {
        "name": "name_privateLinkProperties_managedSqlMiPrivateLinkCopy_privateLink",
        "count": "[length(range(0, length(range(0, parameters('privateLinkCount')))))]"
      },
      "condition": "[equals(parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].groupId, 'managedInstance')]",
      "type": "Microsoft.DatabaseWatcher/watchers/sharedPrivateLinkResources",
      "apiVersion": "2023-09-01-preview",
      "name": "[format('{0}/{1}', parameters('watcherName'), format('{0}', parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].privateLinkName))]",
      "properties": {
        "privateLinkResourceId": "[resourceId(parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].managedInstanceSubscriptionId, parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].managedInstanceResourceGroupName, 'Microsoft.Sql/managedInstances', parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].managedInstanceName)]",
        "groupId": "[parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].groupId]",
        "requestMessage": "[parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].requestMessage]",
        "dnsZone": "[parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].dnsZone]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DatabaseWatcher/watchers', parameters('watcherName'))]"
      ]
    },
    {
      "copy": {
        "name": "name_privateLinkProperties_managedAdxPrivateLinkCopy_privateLink",
        "count": "[length(range(0, length(range(0, parameters('privateLinkCount')))))]"
      },
      "condition": "[equals(parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].groupId, 'cluster')]",
      "type": "Microsoft.DatabaseWatcher/watchers/sharedPrivateLinkResources",
      "apiVersion": "2023-09-01-preview",
      "name": "[format('{0}/{1}', parameters('watcherName'), format('{0}', parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].privateLinkName))]",
      "properties": {
        "privateLinkResourceId": "[resourceId(parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].adxClusterSubscriptionId, parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].adxClusterResourceGroupName, 'Microsoft.Kusto/clusters', parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].adxClusterName)]",
        "groupId": "[parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].groupId]",
        "requestMessage": "[parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].requestMessage]",
        "dnsZone": "[parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].dnsZone]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DatabaseWatcher/watchers', parameters('watcherName'))]"
      ]
    },
    {
      "copy": {
        "name": "name_privateLinkProperties_managedAkvPrivateLinkCopy_privateLink",
        "count": "[length(range(0, length(range(0, parameters('privateLinkCount')))))]"
      },
      "condition": "[equals(parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].groupId, 'vault')]",
      "type": "Microsoft.DatabaseWatcher/watchers/sharedPrivateLinkResources",
      "apiVersion": "2023-09-01-preview",
      "name": "[format('{0}/{1}', parameters('watcherName'), format('{0}', parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].privateLinkName))]",
      "properties": {
        "privateLinkResourceId": "[resourceId(parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].vaultSubscriptionId, parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].vaultResourceGroupName, 'Microsoft.KeyVault/vaults', parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].vaultName)]",
        "groupId": "[parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].groupId]",
        "requestMessage": "[parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].requestMessage]",
        "dnsZone": "[parameters('privateLinkProperties')[range(0, length(range(0, parameters('privateLinkCount'))))[copyIndex()]].dnsZone]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DatabaseWatcher/watchers', parameters('watcherName'))]"
      ]
    }
  ],
  "outputs": {
    "watcherName": {
      "type": "string",
      "value": "[parameters('watcherName')]"
    },
    "watcherId": {
      "type": "string",
      "value": "[resourceId('Microsoft.DatabaseWatcher/watchers', parameters('watcherName'))]"
    },
    "location": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.DatabaseWatcher/watchers', parameters('watcherName')), '2023-09-01-preview', 'full').location]"
    },
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]"
    }
  }
}