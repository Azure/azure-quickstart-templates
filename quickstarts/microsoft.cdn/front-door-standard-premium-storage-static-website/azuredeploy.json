{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.5.6.12127",
      "templateHash": "10343215178647549369"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location into which regionally scoped resources should be deployed. Note that Front Door is a global resource."
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[format('stor{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "The name of the Azure Storage account to create. This must be globally unique."
      }
    },
    "storageSkuName": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS",
        "Standard_GZRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "The name of the SKU to use when creating the Azure Storage account."
      }
    },
    "storageStaticWebsiteIndexDocument": {
      "type": "string",
      "defaultValue": "index.html",
      "metadata": {
        "description": "The name of the page to display when a user navigates to the root of your static website."
      }
    },
    "storageStaticWebsiteErrorDocument404Path": {
      "type": "string",
      "defaultValue": "error.html",
      "metadata": {
        "description": "The name of the page to display when a user attempts to navigate to a page that does not exist in your static website."
      }
    },
    "frontDoorEndpointName": {
      "type": "string",
      "defaultValue": "[format('afd-{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "The name of the Front Door endpoint to create. This must be globally unique."
      }
    },
    "frontDoorSkuName": {
      "type": "string",
      "defaultValue": "Standard_AzureFrontDoor",
      "allowedValues": [
        "Standard_AzureFrontDoor",
        "Premium_AzureFrontDoor"
      ],
      "metadata": {
        "description": "The name of the SKU to use when creating the Front Door profile."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "storage",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "accountName": {
            "value": "[parameters('storageAccountName')]"
          },
          "skuName": {
            "value": "[parameters('storageSkuName')]"
          },
          "indexDocument": {
            "value": "[parameters('storageStaticWebsiteIndexDocument')]"
          },
          "errorDocument404Path": {
            "value": "[parameters('storageStaticWebsiteErrorDocument404Path')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.5.6.12127",
              "templateHash": "11978400243371286847"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location into which the Azure Storage resources should be deployed."
              }
            },
            "accountName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Storage account to create. This must be globally unique."
              }
            },
            "skuName": {
              "type": "string",
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_ZRS",
                "Standard_GZRS",
                "Premium_LRS"
              ],
              "metadata": {
                "description": "The name of the SKU to use when creating the Azure Storage account."
              }
            },
            "indexDocument": {
              "type": "string",
              "metadata": {
                "description": "The name of the page to display when a user navigates to the root of your static website."
              }
            },
            "errorDocument404Path": {
              "type": "string",
              "metadata": {
                "description": "The name of the page to display when a user attempts to navigate to a page that does not exist in your static website."
              }
            }
          },
          "variables": {
            "storageAccountContributorRoleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
            "storageAccountStorageBlobDataContributorRoleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
            "managedIdentityName": "StorageStaticWebsiteEnabler",
            "deploymentScriptName": "EnableStorageStaticWebsite"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-04-01",
              "name": "[parameters('accountName')]",
              "location": "[parameters('location')]",
              "kind": "StorageV2",
              "sku": {
                "name": "[parameters('skuName')]"
              }
            },
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[variables('managedIdentityName')]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('accountName'))]",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), variables('storageAccountContributorRoleDefinitionId'))]",
              "properties": {
                "roleDefinitionId": "[variables('storageAccountContributorRoleDefinitionId')]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))).principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('accountName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('accountName'))]",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), variables('storageAccountStorageBlobDataContributorRoleDefinitionId'))]",
              "properties": {
                "roleDefinitionId": "[variables('storageAccountStorageBlobDataContributorRoleDefinitionId')]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))).principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('accountName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[variables('deploymentScriptName')]",
              "location": "[parameters('location')]",
              "kind": "AzurePowerShell",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')))]": {}
                }
              },
              "properties": {
                "azPowerShellVersion": "5.4",
                "scriptContent": "param (\n    [string] $ResourceGroupName,\n    [string] $StorageAccountName,\n    [string] $IndexDocument,\n    [string] $ErrorDocument404Path\n)\n\n$ErrorActionPreference = 'Stop'\n\n$storageAccount = Get-AzStorageAccount -ResourceGroupName $ResourceGroupName -AccountName $StorageAccountName\n$ctx = $storageAccount.Context\nEnable-AzStorageStaticWebsite -Context $ctx -IndexDocument $IndexDocument -ErrorDocument404Path $ErrorDocument404Path\n\nNew-Item $IndexDocument -Force\nSet-Content $IndexDocument '<h1>Welcome</h1>'\nSet-AzStorageBlobContent -Context $ctx -Container '$web' -File $IndexDocument -Blob $IndexDocument -Properties @{'ContentType' = 'text/html'}\n\nNew-Item $ErrorDocument404Path -Force\nSet-Content $ErrorDocument404Path '<h1>Error: 404 Not Found</h1>'\nSet-AzStorageBlobContent -Context $ctx -Container '$web' -File $ErrorDocument404Path -Blob $ErrorDocument404Path -Properties @{'ContentType' = 'text/html'}\n",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "PT4H",
                "arguments": "[format('-ResourceGroupName {0} -StorageAccountName {1} -IndexDocument {2} -ErrorDocument404Path {3}', resourceGroup().name, parameters('accountName'), parameters('indexDocument'), parameters('errorDocument404Path'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]",
                "[extensionResourceId(resourceId('Microsoft.Storage/storageAccounts', parameters('accountName')), 'Microsoft.Authorization/roleAssignments', guid(resourceGroup().id, resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), variables('storageAccountContributorRoleDefinitionId')))]",
                "[extensionResourceId(resourceId('Microsoft.Storage/storageAccounts', parameters('accountName')), 'Microsoft.Authorization/roleAssignments', guid(resourceGroup().id, resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), variables('storageAccountStorageBlobDataContributorRoleDefinitionId')))]"
              ]
            }
          ],
          "outputs": {
            "staticWebsiteHostName": {
              "type": "string",
              "value": "[replace(replace(reference(resourceId('Microsoft.Storage/storageAccounts', parameters('accountName'))).primaryEndpoints.web, 'https://', ''), '/', '')]"
            },
            "storageResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('accountName'))]"
            },
            "storageLocation": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('accountName')), '2021-04-01', 'full').location]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "front-door",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "skuName": {
            "value": "[parameters('frontDoorSkuName')]"
          },
          "endpointName": {
            "value": "[parameters('frontDoorEndpointName')]"
          },
          "originHostName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage')).outputs.staticWebsiteHostName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.5.6.12127",
              "templateHash": "18368595200016723679"
            }
          },
          "parameters": {
            "originHostName": {
              "type": "string",
              "metadata": {
                "description": "The host name that should be used when connecting to the origin."
              }
            },
            "originPath": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The path that should be used when connecting to the origin."
              }
            },
            "endpointName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Front Door endpoint to create. This must be globally unique."
              }
            },
            "skuName": {
              "type": "string",
              "allowedValues": [
                "Standard_AzureFrontDoor",
                "Premium_AzureFrontDoor"
              ],
              "metadata": {
                "description": "The name of the SKU to use when creating the Front Door profile. If you use Private Link this must be set to `Premium_AzureFrontDoor`."
              }
            },
            "originForwardingProtocol": {
              "type": "string",
              "defaultValue": "HttpsOnly",
              "allowedValues": [
                "HttpOnly",
                "HttpsOnly",
                "MatchRequest"
              ],
              "metadata": {
                "description": "The protocol that should be used when connecting from Front Door to the origin."
              }
            },
            "privateEndpointResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "If you are using Private Link to connect to the origin, this should specify the resource ID of the Private Link resource (e.g. an App Service application, Azure Storage account, etc). If you are not using Private Link then this should be empty."
              }
            },
            "privateLinkResourceType": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "If you are using Private Link to connect to the origin, this should specify the resource type of the Private Link resource. The allowed value will depend on the specific Private Link resource type you are using. If you are not using Private Link then this should be empty."
              }
            },
            "privateEndpointLocation": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "If you are using Private Link to connect to the origin, this should specify the location of the Private Link resource. If you are not using Private Link then this should be empty."
              }
            }
          },
          "variables": {
            "isPrivateLinkOrigin": "[not(equals(parameters('privateEndpointResourceId'), ''))]",
            "privateLinkOriginDetails": {
              "privateLink": {
                "id": "[parameters('privateEndpointResourceId')]"
              },
              "groupId": "[if(not(equals(parameters('privateLinkResourceType'), '')), parameters('privateLinkResourceType'), null())]",
              "privateLinkLocation": "[parameters('privateEndpointLocation')]",
              "requestMessage": "Please approve this connection."
            },
            "profileName": "MyFrontDoor",
            "originGroupName": "MyOriginGroup",
            "originName": "MyOrigin",
            "routeName": "MyRoute"
          },
          "resources": [
            {
              "type": "Microsoft.Cdn/profiles",
              "apiVersion": "2021-06-01",
              "name": "[variables('profileName')]",
              "location": "global",
              "sku": {
                "name": "[parameters('skuName')]"
              }
            },
            {
              "type": "Microsoft.Cdn/profiles/afdEndpoints",
              "apiVersion": "2021-06-01",
              "name": "[format('{0}/{1}', variables('profileName'), parameters('endpointName'))]",
              "location": "global",
              "properties": {
                "enabledState": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cdn/profiles', variables('profileName'))]"
              ]
            },
            {
              "type": "Microsoft.Cdn/profiles/originGroups",
              "apiVersion": "2021-06-01",
              "name": "[format('{0}/{1}', variables('profileName'), variables('originGroupName'))]",
              "properties": {
                "loadBalancingSettings": {
                  "sampleSize": 4,
                  "successfulSamplesRequired": 3
                },
                "healthProbeSettings": {
                  "probePath": "/",
                  "probeRequestType": "HEAD",
                  "probeProtocol": "Http",
                  "probeIntervalInSeconds": 100
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cdn/profiles', variables('profileName'))]"
              ]
            },
            {
              "type": "Microsoft.Cdn/profiles/originGroups/origins",
              "apiVersion": "2021-06-01",
              "name": "[format('{0}/{1}/{2}', variables('profileName'), variables('originGroupName'), variables('originName'))]",
              "properties": {
                "hostName": "[parameters('originHostName')]",
                "httpPort": 80,
                "httpsPort": 443,
                "originHostHeader": "[parameters('originHostName')]",
                "priority": 1,
                "weight": 1000,
                "sharedPrivateLinkResource": "[if(variables('isPrivateLinkOrigin'), variables('privateLinkOriginDetails'), null())]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cdn/profiles/originGroups', variables('profileName'), variables('originGroupName'))]"
              ]
            },
            {
              "type": "Microsoft.Cdn/profiles/afdEndpoints/routes",
              "apiVersion": "2021-06-01",
              "name": "[format('{0}/{1}/{2}', variables('profileName'), parameters('endpointName'), variables('routeName'))]",
              "properties": {
                "originGroup": {
                  "id": "[resourceId('Microsoft.Cdn/profiles/originGroups', variables('profileName'), variables('originGroupName'))]"
                },
                "originPath": "[if(not(equals(parameters('originPath'), '')), parameters('originPath'), null())]",
                "supportedProtocols": [
                  "Http",
                  "Https"
                ],
                "patternsToMatch": [
                  "/*"
                ],
                "forwardingProtocol": "[parameters('originForwardingProtocol')]",
                "linkToDefaultDomain": "Enabled",
                "httpsRedirect": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('profileName'), parameters('endpointName'))]",
                "[resourceId('Microsoft.Cdn/profiles/originGroups/origins', variables('profileName'), variables('originGroupName'), variables('originName'))]",
                "[resourceId('Microsoft.Cdn/profiles/originGroups', variables('profileName'), variables('originGroupName'))]"
              ]
            }
          ],
          "outputs": {
            "frontDoorEndpointHostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('profileName'), parameters('endpointName'))).hostName]"
            },
            "frontDoorId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Cdn/profiles', variables('profileName'))).frontDoorId]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'storage')]"
      ]
    }
  ],
  "outputs": {
    "frontDoorEndpointHostName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'front-door')).outputs.frontDoorEndpointHostName.value]"
    },
    "storageStaticWebsiteHostName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage')).outputs.staticWebsiteHostName.value]"
    }
  }
}