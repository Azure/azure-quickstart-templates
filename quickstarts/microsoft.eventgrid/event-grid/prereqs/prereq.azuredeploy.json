{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.6.1.6515",
      "templateHash": "1490062128727691181"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location into which the Azure Functions resources should be deployed."
      }
    },
    "appName": {
      "type": "string",
      "defaultValue": "[format('fn-{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "The name of the Azure Functions application to create. This must be globally unique."
      }
    },
    "functionRuntime": {
      "type": "string",
      "defaultValue": "dotnet",
      "metadata": {
        "description": "The runtime to deploy onto the Azure Functions application."
      }
    },
    "functionPlanSkuName": {
      "type": "string",
      "defaultValue": "Y1",
      "metadata": {
        "description": "The name of the SKU to use when creating the Azure Functions plan. Common SKUs include Y1 (consumption) and EP1, EP2, and EP3 (premium)."
      }
    }
  },
  "variables": {
    "appServicePlanName": "FunctionPlan",
    "appInsightsName": "AppInsights",
    "storageAccountName": "[format('fnstor{0}', uniqueString(resourceGroup().id, parameters('appName')))]",
    "functionPlanKind": "[if(equals(parameters('functionPlanSkuName'), 'Y1'), 'functionapp', 'elastic')]",
    "functionName": "MyHttpTriggeredFunction",
    "contributorRoleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
    "managedIdentityName": "EventGridFunctionEnabler",
    "deploymentScriptName": "GetFunctionAppEventGridKey"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-09-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('appInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2020-06-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[parameters('location')]",
      "kind": "[variables('functionPlanKind')]",
      "sku": {
        "name": "[parameters('functionPlanSkuName')]"
      },
      "properties": {}
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2020-06-01",
      "name": "[parameters('appName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-09-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-09-01').keys[0].value)]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[format('InstrumentationKey={0}', reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey)]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "[parameters('functionRuntime')]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "AzureWebJobsDisableHomepage",
              "value": "true"
            }
          ]
        },
        "httpsOnly": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/functions",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', parameters('appName'), variables('functionName'))]",
      "properties": {
        "config": {
          "disabled": false,
          "bindings": [
            {
              "name": "eventGridEvent",
              "type": "eventGridTrigger",
              "direction": "in"
            }
          ]
        },
        "files": {
          "run.csx": "      #r \"Microsoft.Azure.EventGrid\"\r\n      using Microsoft.Azure.EventGrid.Models;\r\n      using Microsoft.Extensions.Logging;\r\n\r\n      public static void Run(EventGridEvent eventGridEvent, ILogger log)\r\n      {\r\n          log.LogInformation(eventGridEvent.Data.ToString());\r\n      }\r\n      "
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('appName'))]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "[variables('managedIdentityName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-04-01-preview",
      "scope": "[format('Microsoft.Web/sites/{0}', parameters('appName'))]",
      "name": "[guid(resourceGroup().id, resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), variables('contributorRoleDefinitionId'))]",
      "properties": {
        "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))).principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('appName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[variables('deploymentScriptName')]",
      "location": "[parameters('location')]",
      "kind": "AzurePowerShell",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')))]": {}
        }
      },
      "properties": {
        "azPowerShellVersion": "5.4",
        "scriptContent": "    param([string] $FunctionHostResourceId)\r\n\r\n    $ErrorActionPreference = 'Stop'\r\n\r\n    # Try to get the key. If this fails, retry up to 5 times.\r\n    $loopAttempts = 0\r\n    while ($loopAttempts -lt 5)\r\n    {\r\n      $listKeysOutput = Invoke-AzResourceAction -ResourceId $FunctionHostResourceId -Action listKeys -ApiVersion 2020-06-01 -Force\r\n      $eventGridKey = $listKeysOutput.systemKeys.eventgrid_extension\r\n      if ($null -ne $eventGridKey)\r\n      {\r\n        break\r\n      }\r\n\r\n      $loopAttempts += 1\r\n      Write-Output 'Event Grid key is not included in response. Sleeping for 5 seconds.'\r\n      Start-Sleep -Seconds 5\r\n    }\r\n\r\n    if ($null -eq $eventGridKey)\r\n    {\r\n      Write-Error 'Event Grid key could not be obtained.'\r\n      return 1\r\n    }\r\n\r\n    # Propagate to the deployment script output.\r\n    $DeploymentScriptOutputs = @{}\r\n    $DeploymentScriptOutputs['eventGridExtensionSystemKey'] = $eventGridKey\r\n    ",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "PT4H",
        "arguments": "[format('-FunctionHostResourceId {0}/host/default', resourceId('Microsoft.Web/sites', parameters('appName')))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('appName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]",
        "[extensionResourceId(resourceId('Microsoft.Web/sites', parameters('appName')), 'Microsoft.Authorization/roleAssignments', guid(resourceGroup().id, resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), variables('contributorRoleDefinitionId')))]"
      ]
    }
  ],
  "outputs": {
    "functionUrl": {
      "type": "string",
      "value": "[format('https://{0}/runtime/webhooks/EventGrid?functionName={1}&code={2}', reference(resourceId('Microsoft.Web/sites', parameters('appName'))).defaultHostName, variables('functionName'), reference(resourceId('Microsoft.Resources/deploymentScripts', variables('deploymentScriptName'))).outputs.eventGridExtensionSystemKey)]"
    }
  }
}