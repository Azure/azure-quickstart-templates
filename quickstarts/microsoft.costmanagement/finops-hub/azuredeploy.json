{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.30.23.60470",
      "templateHash": "5391928913029500628"
    }
  },
  "parameters": {
    "hubName": {
      "type": "string",
      "metadata": {
        "description": "Optional. Name of the hub. Used to ensure unique resource names. Default: \"finops-hub\"."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Azure location where all resources should be created. See https://aka.ms/azureregions. Default: Same as deployment."
      }
    },
    "storageSku": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Premium_ZRS"
      ],
      "metadata": {
        "description": "Optional. Storage SKU to use. LRS = Lowest cost, ZRS = High availability. Note Standard SKUs are not available for Data Lake gen2 storage. Allowed: Premium_LRS, Premium_ZRS. Default: Premium_LRS."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Tags to apply to all resources. We will also add the cm-resource-parent tag for improved cost roll-ups in Cost Management."
      }
    },
    "tagsByResource": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Tags to apply to resources based on their resource type. Resource type specific tags will be merged with tags for all resources."
      }
    },
    "scopesToMonitor": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. List of scope IDs to monitor and ingest cost for."
      }
    },
    "exportRetentionInDays": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Optional. Number of days of cost data to retain in the ms-cm-exports container. Default: 0."
      }
    },
    "ingestionRetentionInMonths": {
      "type": "int",
      "defaultValue": 13,
      "metadata": {
        "description": "Optional. Number of months of cost data to retain in the ingestion container. Default: 13."
      }
    },
    "remoteHubStorageUri": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Storage account to push data to for ingestion into a remote hub."
      }
    },
    "remoteHubStorageKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Storage account key to use when pushing data to a remote hub."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "hub",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "hubName": {
            "value": "[parameters('hubName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "storageSku": {
            "value": "[parameters('storageSku')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "tagsByResource": {
            "value": "[parameters('tagsByResource')]"
          },
          "scopesToMonitor": {
            "value": "[parameters('scopesToMonitor')]"
          },
          "exportRetentionInDays": {
            "value": "[parameters('exportRetentionInDays')]"
          },
          "ingestionRetentionInMonths": {
            "value": "[parameters('ingestionRetentionInMonths')]"
          },
          "remoteHubStorageUri": {
            "value": "[parameters('remoteHubStorageUri')]"
          },
          "remoteHubStorageKey": {
            "value": "[parameters('remoteHubStorageKey')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "8393847679918058442"
            }
          },
          "parameters": {
            "hubName": {
              "type": "string",
              "metadata": {
                "description": "Optional. Name of the hub. Used to ensure unique resource names. Default: \"finops-hub\"."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Azure location where all resources should be created. See https://aka.ms/azureregions. Default: (resource group location)."
              }
            },
            "storageSku": {
              "type": "string",
              "defaultValue": "Premium_LRS",
              "allowedValues": [
                "Premium_LRS",
                "Premium_ZRS"
              ],
              "metadata": {
                "description": "Optional. Storage SKU to use. LRS = Lowest cost, ZRS = High availability. Note Standard SKUs are not available for Data Lake gen2 storage. Allowed: Premium_LRS, Premium_ZRS. Default: Premium_LRS."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to apply to all resources. We will also add the cm-resource-parent tag for improved cost roll-ups in Cost Management."
              }
            },
            "tagsByResource": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to apply to resources based on their resource type. Resource type specific tags will be merged with tags for all resources."
              }
            },
            "scopesToMonitor": {
              "type": "array",
              "metadata": {
                "description": "Optional. List of scope IDs to monitor and ingest cost for."
              }
            },
            "exportRetentionInDays": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. Number of days of cost data to retain in the ms-cm-exports container. Default: 0."
              }
            },
            "ingestionRetentionInMonths": {
              "type": "int",
              "defaultValue": 13,
              "metadata": {
                "description": "Optional. Number of months of cost data to retain in the ingestion container. Default: 13."
              }
            },
            "remoteHubStorageUri": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Remote storage account for ingestion dataset."
              }
            },
            "remoteHubStorageKey": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Storage account key for remote storage account."
              }
            },
            "enableDefaultTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable telemetry to track anonymous module usage trends, monitor for bugs, and improve future releases."
              }
            }
          },
          "variables": {
            "finOpsToolkitVersion": "0.6",
            "resourceTags": "[union(parameters('tags'), createObject('cm-resource-parent', format('{0}/providers/Microsoft.Cloud/hubs/{1}', resourceGroup().id, parameters('hubName')), 'ftk-version', variables('finOpsToolkitVersion'), 'ftk-tool', 'FinOps hubs'))]",
            "uniqueSuffix": "[uniqueString(parameters('hubName'), resourceGroup().id)]",
            "dataFactoryPrefix": "[format('{0}-engine', replace(parameters('hubName'), '_', '-'))]",
            "dataFactorySuffix": "[format('-{0}', variables('uniqueSuffix'))]",
            "dataFactoryName": "[replace(format('{0}{1}', take(variables('dataFactoryPrefix'), sub(63, length(variables('dataFactorySuffix')))), variables('dataFactorySuffix')), '--', '-')]",
            "telemetryId": "00f120b5-2007-6120-0000-40b000000000"
          },
          "resources": [
            {
              "condition": "[parameters('enableDefaultTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('pid-{0}-{1}', variables('telemetryId'), uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "FinOps toolkit",
                      "version": "[variables('finOpsToolkitVersion')]"
                    }
                  },
                  "resources": []
                }
              }
            },
            {
              "type": "Microsoft.DataFactory/factories",
              "apiVersion": "2018-06-01",
              "name": "[variables('dataFactoryName')]",
              "location": "[parameters('location')]",
              "tags": "[union(variables('resourceTags'), if(contains(parameters('tagsByResource'), 'Microsoft.DataFactory/factories'), parameters('tagsByResource')['Microsoft.DataFactory/factories'], createObject()))]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "globalConfigurations": {
                  "PipelineBillingEnabled": "true"
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "storage",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "hubName": {
                    "value": "[parameters('hubName')]"
                  },
                  "uniqueSuffix": {
                    "value": "[variables('uniqueSuffix')]"
                  },
                  "sku": {
                    "value": "[parameters('storageSku')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[variables('resourceTags')]"
                  },
                  "tagsByResource": {
                    "value": "[parameters('tagsByResource')]"
                  },
                  "scopesToMonitor": {
                    "value": "[parameters('scopesToMonitor')]"
                  },
                  "msexportRetentionInDays": {
                    "value": "[parameters('exportRetentionInDays')]"
                  },
                  "ingestionRetentionInMonths": {
                    "value": "[parameters('ingestionRetentionInMonths')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "13154546136857545907"
                    }
                  },
                  "parameters": {
                    "hubName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the hub. Used to ensure unique resource names."
                      }
                    },
                    "uniqueSuffix": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Suffix to add to the storage account name to ensure uniqueness."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Azure location where all resources should be created. See https://aka.ms/azureregions. Default: (resource group location)."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "Premium_LRS",
                      "allowedValues": [
                        "Premium_LRS",
                        "Premium_ZRS"
                      ],
                      "metadata": {
                        "description": "Optional. Storage SKU to use. LRS = Lowest cost, ZRS = High availability. Note Standard SKUs are not available for Data Lake gen2 storage. Allowed: Premium_LRS, Premium_ZRS. Default: Premium_LRS."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to apply to all resources. We will also add the cm-resource-parent tag for improved cost roll-ups in Cost Management."
                      }
                    },
                    "tagsByResource": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to apply to resources based on their resource type. Resource type specific tags will be merged with tags for all resources."
                      }
                    },
                    "scopesToMonitor": {
                      "type": "array",
                      "metadata": {
                        "description": "Optional. List of scope IDs to monitor and ingest cost for."
                      }
                    },
                    "msexportRetentionInDays": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. Number of days of cost data to retain in the ms-cm-exports container. Default: 0."
                      }
                    },
                    "ingestionRetentionInMonths": {
                      "type": "int",
                      "defaultValue": 13,
                      "metadata": {
                        "description": "Optional. Number of months of cost data to retain in the ingestion container. Default: 13."
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "{\r\n  \"additionalColumns\": [],\r\n  \"translator\": {\r\n    \"type\": \"TabularTranslator\",\r\n    \"mappings\": [\r\n      {\r\n        \"source\": { \"name\": \"BilledCost\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"BilledCost\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingAccountId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingAccountId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingAccountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingAccountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingAccountType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingAccountType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingCurrency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingCurrency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingPeriodEnd\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"BillingPeriodEnd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingPeriodStart\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"BillingPeriodStart\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargeCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ChargeCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargeClass\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ChargeClass\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargeDescription\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ChargeDescription\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargeFrequency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ChargeFrequency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargePeriodEnd\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"ChargePeriodEnd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargePeriodStart\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"ChargePeriodStart\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CommitmentDiscountCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CommitmentDiscountCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CommitmentDiscountId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CommitmentDiscountId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CommitmentDiscountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CommitmentDiscountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CommitmentDiscountStatus\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CommitmentDiscountStatus\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CommitmentDiscountType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CommitmentDiscountType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ConsumedQuantity\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"ConsumedQuantity\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ConsumedUnit\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ConsumedUnit\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ContractedCost\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"ContractedCost\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ContractedUnitPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"ContractedUnitPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"EffectiveCost\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"EffectiveCost\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"InvoiceIssuerName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"InvoiceIssuerName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ListCost\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"ListCost\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ListUnitPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"ListUnitPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PricingCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PricingCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PricingQuantity\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"PricingQuantity\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PricingUnit\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PricingUnit\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ProviderName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ProviderName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PublisherName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PublisherName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"RegionId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"RegionId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"RegionName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"RegionName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ResourceId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ResourceId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ResourceName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ResourceName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ResourceType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ResourceType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ServiceCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ServiceCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ServiceName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ServiceName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SkuId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SkuId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SkuPriceId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SkuPriceId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SubAccountId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SubAccountId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SubAccountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SubAccountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SubAccountType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SubAccountType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Tags\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Tags\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_AccountId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_AccountId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_AccountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_AccountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_AccountOwnerId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_AccountOwnerId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BilledCostInUsd\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_BilledCostInUsd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BilledUnitPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_BilledUnitPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingAccountId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_BillingAccountId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingAccountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_BillingAccountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingExchangeRate\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_BillingExchangeRate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingExchangeRateDate\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"x_BillingExchangeRateDate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingProfileId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_BillingProfileId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingProfileName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_BillingProfileName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ContractedCostInUsd\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_ContractedCostInUsd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_CostAllocationRuleName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_CostAllocationRuleName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_CostCenter\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_CostCenter\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_CustomerId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_CustomerId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_CustomerName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_CustomerName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_EffectiveCostInUsd\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_EffectiveCostInUsd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_EffectiveUnitPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_EffectiveUnitPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_InvoiceId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_InvoiceId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_InvoiceIssuerId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_InvoiceIssuerId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_InvoiceSectionId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_InvoiceSectionId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_InvoiceSectionName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_InvoiceSectionName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ListCostInUsd\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_ListCostInUsd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PartnerCreditApplied\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PartnerCreditApplied\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PartnerCreditRate\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PartnerCreditRate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PricingBlockSize\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_PricingBlockSize\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PricingCurrency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PricingCurrency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PricingSubcategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PricingSubcategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PricingUnitDescription\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PricingUnitDescription\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PublisherCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PublisherCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PublisherId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PublisherId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ResellerId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_ResellerId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ResellerName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_ResellerName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ResourceGroupName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_ResourceGroupName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ResourceType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_ResourceType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ServicePeriodEnd\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"x_ServicePeriodEnd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ServicePeriodStart\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"x_ServicePeriodStart\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuDescription\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuDescription\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuDetails\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuDetails\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuIsCreditEligible\", \"type\": \"Boolean\" },\r\n        \"sink\": { \"name\": \"x_SkuIsCreditEligible\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuMeterCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuMeterCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuMeterId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuMeterId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuMeterName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuMeterName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuMeterSubcategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuMeterSubcategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuOfferId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuOfferId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuOrderId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuOrderId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuOrderName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuOrderName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuPartNumber\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuPartNumber\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuRegion\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuRegion\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuServiceFamily\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuServiceFamily\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuTerm\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuTerm\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuTier\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuTier\" }\r\n      }\r\n    ]\r\n  }\r\n}\r\n",
                    "$fxv#1": "{\r\n  \"additionalColumns\": [],\r\n  \"translator\": {\r\n    \"type\": \"TabularTranslator\",\r\n    \"mappings\": [\r\n      {\r\n        \"source\": { \"name\": \"AvailabilityZone\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"AvailabilityZone\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BilledCost\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"BilledCost\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingAccountId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingAccountId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingAccountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingAccountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingAccountType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingAccountType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingCurrency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingCurrency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingPeriodEnd\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"BillingPeriodEnd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingPeriodStart\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"BillingPeriodStart\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargeCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ChargeCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargeDescription\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ChargeDescription\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargeFrequency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ChargeFrequency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargePeriodEnd\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"ChargePeriodEnd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargePeriodStart\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"ChargePeriodStart\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargeSubcategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ChargeSubcategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CommitmentDiscountCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CommitmentDiscountCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CommitmentDiscountId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CommitmentDiscountId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CommitmentDiscountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CommitmentDiscountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CommitmentDiscountType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CommitmentDiscountType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"EffectiveCost\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"EffectiveCost\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"InvoiceIssuerName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"InvoiceIssuerName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ListCost\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"ListCost\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ListUnitPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"ListUnitPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PricingCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PricingCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PricingQuantity\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"PricingQuantity\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PricingUnit\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PricingUnit\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ProviderName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ProviderName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PublisherName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PublisherName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Region\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Region\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ResourceId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ResourceId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ResourceName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ResourceName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ResourceType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ResourceType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ServiceCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ServiceCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ServiceName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ServiceName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SkuId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SkuId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SkuPriceId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SkuPriceId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SubAccountId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SubAccountId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SubAccountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SubAccountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SubAccountType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SubAccountType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Tags\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Tags\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"UsageQuantity\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"UsageQuantity\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"UsageUnit\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"UsageUnit\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_AccountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_AccountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_AccountOwnerId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_AccountOwnerId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BilledCostInUsd\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_BilledCostInUsd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BilledUnitPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_BilledUnitPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingAccountId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_BillingAccountId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingAccountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_BillingAccountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingExchangeRate\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_BillingExchangeRate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingExchangeRateDate\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"x_BillingExchangeRateDate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingProfileId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_BillingProfileId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingProfileName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_BillingProfileName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ChargeId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_ChargeId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_CostAllocationRuleName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_CostAllocationRuleName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_CostCenter\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_CostCenter\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_CustomerId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_CustomerId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_CustomerName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_CustomerName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_EffectiveCostInUsd\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_EffectiveCostInUsd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_EffectiveUnitPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_EffectiveUnitPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_InvoiceId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_InvoiceId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_InvoiceIssuerId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_InvoiceIssuerId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_InvoiceSectionId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_InvoiceSectionId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_InvoiceSectionName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_InvoiceSectionName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_OnDemandCost\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_OnDemandCost\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_OnDemandCostInUsd\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_OnDemandCostInUsd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_OnDemandUnitPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_OnDemandUnitPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PartnerCreditApplied\", \"type\": \"Boolean\" },\r\n        \"sink\": { \"name\": \"x_PartnerCreditApplied\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PartnerCreditRate\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_PartnerCreditRate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PricingBlockSize\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_PricingBlockSize\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PricingCurrency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PricingCurrency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PricingSubcategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PricingSubcategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PricingUnitDescription\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PricingUnitDescription\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PublisherCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PublisherCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PublisherId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PublisherId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ResellerId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_ResellerId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ResellerName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_ResellerName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ResourceGroupName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_ResourceGroupName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ResourceType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_ResourceType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ServicePeriodEnd\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"x_ServicePeriodEnd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ServicePeriodStart\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"x_ServicePeriodStart\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuDescription\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuDescription\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuDetails\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuDetails\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuIsCreditEligible\", \"type\": \"Boolean\" },\r\n        \"sink\": { \"name\": \"x_SkuIsCreditEligible\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuMeterCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuMeterCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuMeterId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuMeterId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuMeterName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuMeterName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuMeterSubcategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuMeterSubcategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuOfferId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuOfferId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuOrderId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuOrderId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuOrderName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuOrderName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuPartNumber\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuPartNumber\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuRegion\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuRegion\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuServiceFamily\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuServiceFamily\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuTerm\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuTerm\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuTier\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuTier\" }\r\n      }\r\n    ]\r\n  }\r\n}\r\n",
                    "$fxv#10": "# Copyright (c) Microsoft Corporation.\r\n# Licensed under the MIT License.\r\n\r\nWrite-Output \"Updating settings.json file...\"\r\nWrite-Output \"  Storage account: $env:storageAccountName\"\r\nWrite-Output \"  Container: $env:containerName\"\r\n\r\n$validateScopes = { $_.Length -gt 45 }\r\n\r\n# Initialize variables\r\n$fileName = 'settings.json'\r\n$filePath = Join-Path -Path . -ChildPath $fileName\r\n$newScopes = $env:scopes.Split('|') | Where-Object $validateScopes | ForEach-Object { @{ scope = $_ } }\r\n\r\n# Get storage context\r\n$storageContext = @{\r\n    Context   = New-AzStorageContext -StorageAccountName $env:storageAccountName -UseConnectedAccount\r\n    Container = $env:containerName\r\n}\r\n\r\n# Download existing settings, if they exist\r\n$blob = Get-AzStorageBlobContent @storageContext -Blob $fileName -Destination $filePath -Force\r\nif ($blob)\r\n{\r\n    \r\n    $text = Get-Content $filePath -Raw\r\n    Write-Output \"---------\"\r\n    Write-Output $text\r\n    Write-Output \"---------\"\r\n    $json = $text | ConvertFrom-Json\r\n    Write-Output \"Existing settings.json file found. Updating...\"\r\n    # Rename exportScopes to scopes + convert to object array\r\n    if ($json.exportScopes)\r\n    {\r\n        Write-Output \"  Updating exportScopes...\"\r\n        if ($json.exportScopes[0] -is [string])\r\n        {\r\n            Write-Output \"    Converting string array to object array...\"\r\n            $json.exportScopes = $json.exportScopes | Where-Object $validateScopes | ForEach-Object { @{ scope = $_ } }\r\n            if (-not ($json.exportScopes -is [array]))\r\n            {\r\n                Write-Output \"    Converting single object to object array...\"\r\n                $json.exportScopes = @($json.exportScopes)\r\n            }\r\n        }\r\n\r\n        Write-Output \"    Renaming to 'scopes'...\"\r\n        $json | Add-Member -MemberType NoteProperty -Name scopes -Value $json.exportScopes\r\n        $json.PSObject.Properties.Remove('exportScopes')\r\n    }\r\n}\r\n\r\n# Set default if not found\r\nif (!$json)\r\n{\r\n    Write-Output \"No existing settings.json file found. Creating new file...\"\r\n    $json = [ordered]@{\r\n        '$schema' = 'https://aka.ms/finops/hubs/settings-schema'\r\n        type      = 'HubInstance'\r\n        version   = ''\r\n        learnMore = 'https://aka.ms/finops/hubs'\r\n        scopes    = @()\r\n        retention = @{\r\n            'msexports' = @{\r\n                days = 0\r\n            }\r\n            'ingestion' = @{\r\n                months = 13\r\n            }\r\n        }\r\n    }\r\n\r\n    $text = $json | ConvertTo-Json\r\n    Write-Output \"---------\"\r\n    Write-Output $text\r\n    Write-Output \"---------\"\r\n}\r\n\r\n# Set values from inputs\r\n$json.scopes = $env:scopes.Split('|') | ForEach-Object { @{ 'scope' = $_ } }\r\nif (!($json.retention))\r\n{\r\n    # In case the retention object is not present in the settings.json file (versions before 0.4), add it with default values\r\n    $retention = @\"\r\n    {\r\n        \"msexports\": {\r\n            \"days\": 0\r\n        },\r\n        \"ingestion\": {\r\n            \"months\": 13\r\n        }\r\n    }\r\n\"@\r\n    $json | Add-Member -Name retention -Value (ConvertFrom-Json $retention) -MemberType NoteProperty\r\n}\r\n$json.retention.msexports.days = [Int32]::Parse($env:msexportRetentionInDays)\r\n$json.retention.ingestion.months = [Int32]::Parse($env:ingestionRetentionInMonths)\r\n\r\n# Updating settings\r\nWrite-Output \"Updating version to $env:ftkVersion...\"\r\n$json.version = $env:ftkVersion\r\nif ($newScopes)\r\n{\r\n    Write-Output \"Merging $($newScopes.Count) scopes...\"\r\n    $json.scopes = Compare-Object -ReferenceObject $json.scopes -DifferenceObject $newScopes -Property scope -PassThru -IncludeEqual\r\n\r\n    # Remove the SideIndicator property from the Compare-Object output\r\n    $json.scopes | ForEach-Object { $_.PSObject.Properties.Remove('SideIndicator') } | ConvertTo-Json\r\n\r\n    if (-not ($json.scopes -is [array]))\r\n    {\r\n        $json.scopes = @($json.scopes)\r\n    }\r\n    Write-Output \"$($json.scopes.Count) scopes found.\"\r\n}\r\n$text = $json | ConvertTo-Json\r\nWrite-Output \"---------\"\r\nWrite-Output $text\r\nWrite-Output \"---------\"\r\n$text | Out-File $filePath\r\n\r\n# Upload new/updated settings\r\nWrite-Output \"Uploading settings.json file...\"\r\nSet-AzStorageBlobContent @storageContext -File $filePath -Force | Out-Null\r\n\r\n# Save focusSchemaFile file to storage\r\n$schemaFiles = $env:schemaFiles | ConvertFrom-Json -Depth 10\r\nWrite-Output \"Uploading ${$schemaFiles.PSObject.Properties.Count} schema files...\"\r\n$schemaFiles.PSObject.Properties | ForEach-Object {\r\n    $fileName = \"$($_.Name).json\"\r\n    $tempPath = \"./$fileName\"\r\n    Write-Output \"  Uploading $($_.Name).json...\"\r\n    $_.Value | Out-File $tempPath\r\n    Set-AzStorageBlobContent @storageContext -File $tempPath -Blob \"schemas/$fileName\" -Force | Out-Null\r\n}\r\n",
                    "$fxv#2": "{\r\n  \"additionalColumns\": [],\r\n  \"translator\": {\r\n    \"type\": \"TabularTranslator\",\r\n    \"mappings\": [\r\n      {\r\n        \"source\": { \"name\": \"EnrollmentNumber\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"EnrollmentNumber\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterID\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterID\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterSubCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterSubCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ServiceFamily\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ServiceFamily\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Product\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Product\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SkuID\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SkuID\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ProductID\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ProductID\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterRegion\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterRegion\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"UnitOfMeasure\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"UnitOfMeasure\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PartNumber\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PartNumber\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"EffectiveStartDate\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"EffectiveStartDate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"EffectiveEndDate\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"EffectiveEndDate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"UnitPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"UnitPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BasePrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"BasePrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MarketPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"MarketPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CurrencyCode\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CurrencyCode\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"IncludedQuantity\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"IncludedQuantity\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"OfferID\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"OfferID\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Term\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Term\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PriceType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PriceType\" }\r\n      }\r\n    ]\r\n  }\r\n}\r\n",
                    "$fxv#3": "{\r\n  \"additionalColumns\": [],\r\n  \"translator\": {\r\n    \"type\": \"TabularTranslator\",\r\n    \"mappings\": [\r\n      {\r\n        \"source\": { \"name\": \"BillingAccountId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingAccountId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingAccountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingAccountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingProfileId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingProfileId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingProfileName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingProfileName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ServiceFamily\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ServiceFamily\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Product\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Product\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ProductId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ProductId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SkuId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SkuId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"UnitOfMeasure\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"UnitOfMeasure\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterSubCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterSubCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterRegion\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterRegion\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"TierMinimumUnits\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"TierMinimumUnits\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"EffectiveStartDate\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"EffectiveStartDate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"EffectiveEndDate\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"EffectiveEndDate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"UnitPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"UnitPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BasePrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"BasePrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MarketPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"MarketPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Currency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Currency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingCurrency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingCurrency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Term\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Term\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PriceType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PriceType\" }\r\n      }\r\n    ]\r\n  }\r\n}\r\n",
                    "$fxv#4": "{\r\n  \"additionalColumns\": [],\r\n  \"translator\": {\r\n    \"type\": \"TabularTranslator\",\r\n    \"mappings\": [\r\n      {\r\n        \"source\": { \"name\": \"InstanceFlexibilityGroup\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"InstanceFlexibilityGroup\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"InstanceFlexibilityRatio\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"InstanceFlexibilityRatio\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"InstanceId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"InstanceId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Kind\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Kind\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ReservationOrderId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ReservationOrderId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ReservationId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ReservationId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ReservedHours\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"ReservedHours\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SkuName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SkuName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"TotalReservedQuantity\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"TotalReservedQuantity\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"UsageDate\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"UsageDate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"UsedHours\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"UsedHours\" }\r\n      }\r\n    ]\r\n  }\r\n}\r\n",
                    "$fxv#5": "{\r\n  \"additionalColumns\": [],\r\n  \"translator\": {\r\n    \"type\": \"TabularTranslator\",\r\n    \"mappings\": [\r\n      {\r\n        \"source\": { \"name\": \"SKU\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SKU\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Location\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Location\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CostWithNoReservedInstances\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CostWithNoReservedInstances\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"FirstUsageDate\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"FirstUsageDate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"InstanceFlexibilityRatio\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"InstanceFlexibilityRatio\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"InstanceFlexibilityGroup\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"InstanceFlexibilityGroup\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"LookBackPeriod\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"LookBackPeriod\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"NetSavings\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"NetSavings\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"NormalizedSize\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"NormalizedSize\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"RecommendedQuantity\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"RecommendedQuantity\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"RecommendedQuantityNormalized\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"RecommendedQuantityNormalized\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ResourceType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ResourceType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Scope\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Scope\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SkuProperties\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SkuProperties\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Term\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Term\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"TotalCostWithReservedInstances\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"TotalCostWithReservedInstances\" }\r\n      }\r\n    ]\r\n  }\r\n}\r\n",
                    "$fxv#6": "{\r\n  \"additionalColumns\": [],\r\n  \"translator\": {\r\n    \"type\": \"TabularTranslator\",\r\n    \"mappings\": [\r\n      {\r\n        \"source\": { \"name\": \"Cost With No ReservedInstances\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Cost With No ReservedInstances\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"First UsageDate\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"First UsageDate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Instance Flexibility Ratio\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"Instance Flexibility Ratio\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Instance Flexibility Group\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Instance Flexibility Group\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Location\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Location\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"LookBackPeriod\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"LookBackPeriod\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterID\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterID\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Net Savings\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"Net Savings\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Normalized Size\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Normalized Size\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Recommended Quantity\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"Recommended Quantity\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Recommended Quantity Normalized\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"Recommended Quantity Normalized\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ResourceType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ResourceType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"scope\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"scope\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SkuName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SkuName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Sku Properties\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Sku Properties\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Term\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Term\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Total Cost With ReservedInstances\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Total Cost With ReservedInstances\" }\r\n      }\r\n    ]\r\n  }\r\n}\r\n",
                    "$fxv#7": "{\r\n  \"additionalColumns\": [],\r\n  \"translator\": {\r\n    \"type\": \"TabularTranslator\",\r\n    \"mappings\": [\r\n      {\r\n        \"source\": { \"name\": \"AccountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"AccountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"AccountOwnerEmail\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"AccountOwnerEmail\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Amount\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"Amount\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ArmSkuName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ArmSkuName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingFrequency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingFrequency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingMonth\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingMonth\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CostCenter\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CostCenter\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Currency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Currency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CurrentEnrollmentId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CurrentEnrollmentId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"DepartmentName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"DepartmentName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Description\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Description\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"EventDate\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"EventDate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"EventType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"EventType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MonetaryCommitment\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"MonetaryCommitment\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Overage\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"Overage\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PurchasingSubscriptionGuid\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PurchasingSubscriptionGuid\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PurchasingSubscriptionName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PurchasingSubscriptionName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PurchasingEnrollment\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PurchasingEnrollment\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Quantity\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"Quantity\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Region\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Region\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ReservationOrderId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ReservationOrderId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ReservationOrderName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ReservationOrderName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Term\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Term\" }\r\n      }\r\n    ]\r\n  }\r\n}\r\n",
                    "$fxv#8": "{\r\n  \"additionalColumns\": [],\r\n  \"translator\": {\r\n    \"type\": \"TabularTranslator\",\r\n    \"mappings\": [\r\n      {\r\n        \"source\": { \"name\": \"Amount\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"Amount\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ArmSkuName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ArmSkuName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingFrequency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingFrequency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingProfileId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingProfileId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingProfileName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingProfileName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Currency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Currency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Description\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Description\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"EventDate\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"EventDate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"EventType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"EventType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Invoice\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Invoice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"InvoiceId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"InvoiceId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"InvoiceSectionId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"InvoiceSectionId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"InvoiceSectionName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"InvoiceSectionName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PurchasingSubscriptionGuid\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PurchasingSubscriptionGuid\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PurchasingSubscriptionName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PurchasingSubscriptionName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Quantity\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"Quantity\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Region\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Region\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ReservationOrderId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ReservationOrderId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ReservationOrderName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ReservationOrderName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Term\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Term\" }\r\n      }\r\n    ]\r\n  }\r\n}\r\n",
                    "$fxv#9": "0.6",
                    "safeHubName": "[replace(replace(toLower(parameters('hubName')), '-', ''), '_', '')]",
                    "storageAccountSuffix": "[parameters('uniqueSuffix')]",
                    "storageAccountName": "[format('{0}{1}', take(variables('safeHubName'), sub(24, length(variables('storageAccountSuffix')))), variables('storageAccountSuffix'))]",
                    "schemaFiles": {
                      "focuscost_1.0": "[variables('$fxv#0')]",
                      "focuscost_1.0-preview(v1)": "[variables('$fxv#1')]",
                      "pricesheet_2023-05-01_ea": "[variables('$fxv#2')]",
                      "pricesheet_2023-05-01_mca": "[variables('$fxv#3')]",
                      "reservationdetails_2023-03-01": "[variables('$fxv#4')]",
                      "reservationrecommendations_2023-05-01_ea": "[variables('$fxv#5')]",
                      "reservationrecommendations_2023-05-01_mca": "[variables('$fxv#6')]",
                      "reservationtransactions_2023-05-01_ea": "[variables('$fxv#7')]",
                      "reservationtransactions_2023-05-01_mca": "[variables('$fxv#8')]"
                    },
                    "blobUploadRbacRoles": [
                      "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
                      "e40ec5ca-96e0-45a2-b4ff-59039f2c2b59"
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-09-01",
                      "name": "[variables('storageAccountName')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "[parameters('sku')]"
                      },
                      "kind": "BlockBlobStorage",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Storage/storageAccounts'), parameters('tagsByResource')['Microsoft.Storage/storageAccounts'], createObject()))]",
                      "properties": {
                        "supportsHttpsTrafficOnly": true,
                        "isHnsEnabled": true,
                        "minimumTlsVersion": "TLS1_2",
                        "allowBlobPublicAccess": false
                      }
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}', variables('storageAccountName'), 'default')]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}/{2}', variables('storageAccountName'), 'default', 'config')]",
                      "properties": {
                        "publicAccess": "None",
                        "metadata": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}/{2}', variables('storageAccountName'), 'default', 'msexports')]",
                      "properties": {
                        "publicAccess": "None",
                        "metadata": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}/{2}', variables('storageAccountName'), 'default', 'ingestion')]",
                      "properties": {
                        "publicAccess": "None",
                        "metadata": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2023-01-31",
                      "name": "[format('{0}_blobManager', variables('storageAccountName'))]",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), parameters('tagsByResource')['Microsoft.ManagedIdentity/userAssignedIdentities'], createObject()))]",
                      "location": "[parameters('location')]"
                    },
                    {
                      "copy": {
                        "name": "identityRoleAssignments",
                        "count": "[length(variables('blobUploadRbacRoles'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), variables('blobUploadRbacRoles')[copyIndex()], resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_blobManager', variables('storageAccountName'))))]",
                      "properties": {
                        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('blobUploadRbacRoles')[copyIndex()])]",
                        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_blobManager', variables('storageAccountName'))), '2023-01-31').principalId]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_blobManager', variables('storageAccountName')))]",
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}_uploadSettings', variables('storageAccountName'))]",
                      "kind": "AzurePowerShell",
                      "location": "[if(startsWith(parameters('location'), 'china'), 'chinaeast2', parameters('location'))]",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Resources/deploymentScripts'), parameters('tagsByResource')['Microsoft.Resources/deploymentScripts'], createObject()))]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_blobManager', variables('storageAccountName'))))]": {}
                        }
                      },
                      "properties": {
                        "azPowerShellVersion": "8.0",
                        "retentionInterval": "PT1H",
                        "environmentVariables": [
                          {
                            "name": "ftkVersion",
                            "value": "[variables('$fxv#9')]"
                          },
                          {
                            "name": "scopes",
                            "value": "[join(parameters('scopesToMonitor'), '|')]"
                          },
                          {
                            "name": "msexportRetentionInDays",
                            "value": "[string(parameters('msexportRetentionInDays'))]"
                          },
                          {
                            "name": "ingestionRetentionInMonths",
                            "value": "[string(parameters('ingestionRetentionInMonths'))]"
                          },
                          {
                            "name": "storageAccountName",
                            "value": "[variables('storageAccountName')]"
                          },
                          {
                            "name": "containerName",
                            "value": "config"
                          },
                          {
                            "name": "schemaFiles",
                            "value": "[string(variables('schemaFiles'))]"
                          }
                        ],
                        "scriptContent": "[variables('$fxv#10')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('storageAccountName'), 'default', 'config')]",
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_blobManager', variables('storageAccountName')))]",
                        "identityRoleAssignments"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the storage account."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the storage account."
                      },
                      "value": "[variables('storageAccountName')]"
                    },
                    "configContainer": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the container used for configuration settings."
                      },
                      "value": "config"
                    },
                    "exportContainer": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the container used for Cost Management exports."
                      },
                      "value": "msexports"
                    },
                    "ingestionContainer": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the container used for normalized data ingestion."
                      },
                      "value": "ingestion"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "dataFactoryResources",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "dataFactoryName": {
                    "value": "[variables('dataFactoryName')]"
                  },
                  "storageAccountName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.name.value]"
                  },
                  "exportContainerName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.exportContainer.value]"
                  },
                  "configContainerName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.configContainer.value]"
                  },
                  "ingestionContainerName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.ingestionContainer.value]"
                  },
                  "keyVaultName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'keyVault'), '2022-09-01').outputs.name.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "hubName": {
                    "value": "[parameters('hubName')]"
                  },
                  "remoteHubStorageUri": {
                    "value": "[parameters('remoteHubStorageUri')]"
                  },
                  "tags": {
                    "value": "[variables('resourceTags')]"
                  },
                  "tagsByResource": {
                    "value": "[parameters('tagsByResource')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "11358703735693729031"
                    }
                  },
                  "functions": [
                    {
                      "namespace": "__bicep",
                      "members": {
                        "getExportBody": {
                          "parameters": [
                            {
                              "type": "string",
                              "name": "exportContainerName"
                            },
                            {
                              "type": "string",
                              "name": "datasetType"
                            },
                            {
                              "type": "string",
                              "name": "schemaVersion"
                            },
                            {
                              "type": "bool",
                              "name": "isMonthly"
                            },
                            {
                              "type": "string",
                              "name": "exportFormat"
                            },
                            {
                              "type": "string",
                              "name": "compressionMode"
                            },
                            {
                              "type": "string",
                              "name": "partitionData"
                            },
                            {
                              "type": "string",
                              "name": "dataOverwriteBehavior"
                            }
                          ],
                          "output": {
                            "type": "string",
                            "value": "[format('{{ \"properties\": {{ \"definition\": {{ \"dataSet\": {{ \"configuration\": {{ \"dataVersion\": \"{0}\", \"filters\": [] }}, \"granularity\": \"Daily\" }}, \"timeframe\": \"{1}\", \"type\": \"{2}\" }}, \"deliveryInfo\": {{ \"destination\": {{ \"container\": \"{3}\", \"rootFolderPath\": \"@{{if(startswith(item().scope, ''/''), substring(item().scope, 1, sub(length(item().scope), 1)) ,item().scope)}}\", \"type\": \"AzureBlob\", \"resourceId\": \"@{{variables(''storageAccountId'')}}\" }} }}, \"schedule\": {{ \"recurrence\": \"{4}\", \"recurrencePeriod\": {{ \"from\": \"2024-01-01T00:00:00.000Z\", \"to\": \"2050-02-01T00:00:00.000Z\" }}, \"status\": \"Inactive\" }}, \"format\": \"{5}\", \"partitionData\": \"{6}\", \"dataOverwriteBehavior\": \"{7}\", \"compressionMode\": \"{8}\" }}, \"id\": \"@{{variables(''resourceManagementUri'')}}@{{item().scope}}/providers/Microsoft.CostManagement/exports/@{{variables(''exportName'')}}\", \"name\": \"@{{variables(''exportName'')}}\", \"type\": \"Microsoft.CostManagement/reports\", \"identity\": {{ \"type\": \"systemAssigned\" }}, \"location\": \"global\" }}', parameters('schemaVersion'), if(parameters('isMonthly'), 'TheLastMonth', 'MonthToDate'), parameters('datasetType'), parameters('exportContainerName'), if(parameters('isMonthly'), 'Monthly', 'Daily'), parameters('exportFormat'), parameters('partitionData'), parameters('dataOverwriteBehavior'), parameters('compressionMode'))]"
                          }
                        }
                      }
                    }
                  ],
                  "parameters": {
                    "hubName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the FinOps hub instance."
                      }
                    },
                    "dataFactoryName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Data Factory instance."
                      }
                    },
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Azure Key Vault instance."
                      }
                    },
                    "storageAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Azure storage account instance."
                      }
                    },
                    "exportContainerName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the container where Cost Management data is exported."
                      }
                    },
                    "ingestionContainerName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the container where normalized data is ingested."
                      }
                    },
                    "configContainerName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the container where normalized data is ingested."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location to use for the managed identity and deployment script to auto-start triggers. Default = (resource group location)."
                      }
                    },
                    "remoteHubStorageUri": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. Remote storage account for ingestion dataset."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to apply to all resources."
                      }
                    },
                    "tagsByResource": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to apply to resources based on their resource type. Resource type specific tags will be merged with tags for all resources."
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "# Copyright (c) Microsoft Corporation.\r\n# Licensed under the MIT License.\r\n\r\n# Init outputs\r\n$DeploymentScriptOutputs = @{}\r\n\r\n# \r\n$adfParams = @{\r\n    ResourceGroupName = $env:DataFactoryResourceGroup\r\n    DataFactoryName   = $env:DataFactoryName\r\n}\r\n\r\n# Delete old triggers\r\n$triggers = Get-AzDataFactoryV2Trigger @adfParams -ErrorAction SilentlyContinue `\r\n| Where-Object { $_.Name -match '^msexports(_(setup|daily|monthly|extract))?$' }\r\n$DeploymentScriptOutputs[\"stopTriggers\"] = $triggers | Stop-AzDataFactoryV2Trigger -Force -ErrorAction SilentlyContinue\r\n$DeploymentScriptOutputs[\"deleteTriggers\"] = $triggers | Remove-AzDataFactoryV2Trigger -Force -ErrorAction SilentlyContinue\r\n\r\n# Delete old pipelines\r\n$DeploymentScriptOutputs[\"pipelines\"] = Get-AzDataFactoryV2Pipeline @adfParams -ErrorAction SilentlyContinue `\r\n| Where-Object { $_.Name -match '^(msexports_(backfill|extract|fill|get|run|setup|transform)|config_(BackfillData|ExportData|RunBackfill|RunExports))$' } `\r\n| Remove-AzDataFactoryV2Pipeline -Force -ErrorAction SilentlyContinue\r\n",
                    "$fxv#1": "# Copyright (c) Microsoft Corporation.\r\n# Licensed under the MIT License.\r\n\r\nParam(\r\n    [switch] $Stop\r\n)\r\n\r\n# Init outputs\r\n$DeploymentScriptOutputs = @{}\r\n\r\nif (-not $Stop) {\r\n    Start-Sleep -Seconds 10\r\n}\r\n\r\n# Loop thru triggers\r\n$env:Triggers.Split('|') `\r\n| ForEach-Object {\r\n    $trigger = $_\r\n    if ($Stop) {\r\n        Write-Output \"Stopping trigger $trigger...\"\r\n        $triggerOutput = Stop-AzDataFactoryV2Trigger `\r\n            -ResourceGroupName $env:DataFactoryResourceGroup `\r\n            -DataFactoryName $env:DataFactoryName `\r\n            -Name $trigger `\r\n            -Force `\r\n            -ErrorAction SilentlyContinue # Ignore errors, since the trigger may not exist\r\n    } else {\r\n        Write-Output \"Starting trigger $trigger...\"\r\n        $triggerOutput = Start-AzDataFactoryV2Trigger `\r\n            -ResourceGroupName $env:DataFactoryResourceGroup `\r\n            -DataFactoryName $env:DataFactoryName `\r\n            -Name $trigger `\r\n            -Force\r\n    }\r\n    if ($triggerOutput) {\r\n        Write-Output \"done...\"\r\n    } else {\r\n        Write-Output \"failed...\"\r\n    }\r\n    $DeploymentScriptOutputs[$trigger] = $triggerOutput\r\n}\r\n\r\nif ($Stop) {\r\n    Start-Sleep -Seconds 10\r\n}\r\n",
                    "$fxv#2": "# Copyright (c) Microsoft Corporation.\r\n# Licensed under the MIT License.\r\n\r\nParam(\r\n    [switch] $Stop\r\n)\r\n\r\n# Init outputs\r\n$DeploymentScriptOutputs = @{}\r\n\r\nif (-not $Stop) {\r\n    Start-Sleep -Seconds 10\r\n}\r\n\r\n# Loop thru triggers\r\n$env:Triggers.Split('|') `\r\n| ForEach-Object {\r\n    $trigger = $_\r\n    if ($Stop) {\r\n        Write-Output \"Stopping trigger $trigger...\"\r\n        $triggerOutput = Stop-AzDataFactoryV2Trigger `\r\n            -ResourceGroupName $env:DataFactoryResourceGroup `\r\n            -DataFactoryName $env:DataFactoryName `\r\n            -Name $trigger `\r\n            -Force `\r\n            -ErrorAction SilentlyContinue # Ignore errors, since the trigger may not exist\r\n    } else {\r\n        Write-Output \"Starting trigger $trigger...\"\r\n        $triggerOutput = Start-AzDataFactoryV2Trigger `\r\n            -ResourceGroupName $env:DataFactoryResourceGroup `\r\n            -DataFactoryName $env:DataFactoryName `\r\n            -Name $trigger `\r\n            -Force\r\n    }\r\n    if ($triggerOutput) {\r\n        Write-Output \"done...\"\r\n    } else {\r\n        Write-Output \"failed...\"\r\n    }\r\n    $DeploymentScriptOutputs[$trigger] = $triggerOutput\r\n}\r\n\r\nif ($Stop) {\r\n    Start-Sleep -Seconds 10\r\n}\r\n",
                    "focusSchemaVersion": "1.0",
                    "ftkVersion": "0.6",
                    "exportApiVersion": "2023-07-01-preview",
                    "datasetPropsDefault": {
                      "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                          "value": "@{dataset().fileName}",
                          "type": "Expression"
                        },
                        "folderPath": {
                          "value": "@{dataset().folderPath}",
                          "type": "Expression"
                        }
                      }
                    },
                    "safeExportContainerName": "[replace(format('{0}', parameters('exportContainerName')), '-', '_')]",
                    "safeIngestionContainerName": "[replace(format('{0}', parameters('ingestionContainerName')), '-', '_')]",
                    "safeConfigContainerName": "[replace(format('{0}', parameters('configContainerName')), '-', '_')]",
                    "fileAddedExportTriggerName": "[format('{0}_FileAdded', variables('safeExportContainerName'))]",
                    "updateConfigTriggerName": "[format('{0}_SettingsUpdated', variables('safeConfigContainerName'))]",
                    "dailyTriggerName": "[format('{0}_DailySchedule', variables('safeConfigContainerName'))]",
                    "monthlyTriggerName": "[format('{0}_MonthlySchedule', variables('safeConfigContainerName'))]",
                    "allHubTriggers": [
                      "[variables('fileAddedExportTriggerName')]",
                      "[variables('updateConfigTriggerName')]",
                      "[variables('dailyTriggerName')]",
                      "[variables('monthlyTriggerName')]"
                    ],
                    "autoStartRbacRoles": [
                      "673868aa-7521-48a0-acc6-0f60742d39f5",
                      "e40ec5ca-96e0-45a2-b4ff-59039f2c2b59"
                    ],
                    "storageRbacRoles": [
                      "17d1049b-9a84-46fb-8f53-869881c3d3ab",
                      "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
                      "acdd72a7-3385-48ef-bd42-f606fba81ae7",
                      "18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"
                    ]
                  },
                  "resources": {
                    "dataFactory": {
                      "existing": true,
                      "type": "Microsoft.DataFactory/factories",
                      "apiVersion": "2018-06-01",
                      "name": "[parameters('dataFactoryName')]"
                    },
                    "storageAccount": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-09-01",
                      "name": "[parameters('storageAccountName')]"
                    },
                    "keyVault": {
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2023-02-01",
                      "name": "[parameters('keyVaultName')]"
                    },
                    "identity": {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2023-01-31",
                      "name": "[format('{0}_triggerManager', parameters('dataFactoryName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), parameters('tagsByResource')['Microsoft.ManagedIdentity/userAssignedIdentities'], createObject()))]",
                      "dependsOn": [
                        "dataFactory"
                      ]
                    },
                    "identityRoleAssignments": {
                      "copy": {
                        "name": "identityRoleAssignments",
                        "count": "[length(variables('autoStartRbacRoles'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.DataFactory/factories/{0}', parameters('dataFactoryName'))]",
                      "name": "[guid(resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName')), variables('autoStartRbacRoles')[copyIndex()], resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_triggerManager', parameters('dataFactoryName'))))]",
                      "properties": {
                        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('autoStartRbacRoles')[copyIndex()])]",
                        "principalId": "[reference('identity').principalId]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "dataFactory",
                        "identity"
                      ]
                    },
                    "pipelineIdentityRoleAssignments": {
                      "copy": {
                        "name": "pipelineIdentityRoleAssignments",
                        "count": "[length(variables('storageRbacRoles'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
                      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageRbacRoles')[copyIndex()], resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName')))]",
                      "properties": {
                        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageRbacRoles')[copyIndex()])]",
                        "principalId": "[reference('dataFactory', '2018-06-01', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "dataFactory",
                        "storageAccount"
                      ]
                    },
                    "deleteOldResources": {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}_deleteOldResources', parameters('dataFactoryName'))]",
                      "location": "[if(startsWith(parameters('location'), 'china'), 'chinaeast2', parameters('location'))]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_triggerManager', parameters('dataFactoryName'))))]": {}
                        }
                      },
                      "kind": "AzurePowerShell",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Resources/deploymentScripts'), parameters('tagsByResource')['Microsoft.Resources/deploymentScripts'], createObject()))]",
                      "properties": {
                        "azPowerShellVersion": "8.0",
                        "retentionInterval": "PT1H",
                        "cleanupPreference": "OnSuccess",
                        "scriptContent": "[variables('$fxv#0')]",
                        "environmentVariables": [
                          {
                            "name": "DataFactorySubscriptionId",
                            "value": "[subscription().id]"
                          },
                          {
                            "name": "DataFactoryResourceGroup",
                            "value": "[resourceGroup().name]"
                          },
                          {
                            "name": "DataFactoryName",
                            "value": "[parameters('dataFactoryName')]"
                          }
                        ]
                      },
                      "dependsOn": [
                        "dataFactory",
                        "identity",
                        "identityRoleAssignments"
                      ]
                    },
                    "stopTriggers": {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}_stopTriggers', parameters('dataFactoryName'))]",
                      "location": "[parameters('location')]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_triggerManager', parameters('dataFactoryName'))))]": {}
                        }
                      },
                      "kind": "AzurePowerShell",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "azPowerShellVersion": "8.0",
                        "retentionInterval": "PT1H",
                        "cleanupPreference": "OnSuccess",
                        "scriptContent": "[variables('$fxv#1')]",
                        "arguments": "-Stop",
                        "environmentVariables": [
                          {
                            "name": "DataFactorySubscriptionId",
                            "value": "[subscription().id]"
                          },
                          {
                            "name": "DataFactoryResourceGroup",
                            "value": "[resourceGroup().name]"
                          },
                          {
                            "name": "DataFactoryName",
                            "value": "[parameters('dataFactoryName')]"
                          },
                          {
                            "name": "Triggers",
                            "value": "[join(variables('allHubTriggers'), '|')]"
                          }
                        ]
                      },
                      "dependsOn": [
                        "dataFactory",
                        "identity",
                        "identityRoleAssignments"
                      ]
                    },
                    "linkedService_keyVault": {
                      "type": "Microsoft.DataFactory/factories/linkedservices",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), parameters('keyVaultName'))]",
                      "properties": {
                        "annotations": [],
                        "parameters": {},
                        "type": "AzureKeyVault",
                        "typeProperties": {
                          "baseUrl": "[reference(format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName')), '2023-02-01').vaultUri]"
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "keyVault"
                      ]
                    },
                    "linkedService_storageAccount": {
                      "type": "Microsoft.DataFactory/factories/linkedservices",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), parameters('storageAccountName'))]",
                      "properties": {
                        "annotations": [],
                        "parameters": {},
                        "type": "AzureBlobFS",
                        "typeProperties": {
                          "url": "[reference(format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName')), '2021-08-01').primaryEndpoints.dfs]"
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "storageAccount"
                      ]
                    },
                    "linkedService_remoteHubStorage": {
                      "condition": "[not(empty(parameters('remoteHubStorageUri')))]",
                      "type": "Microsoft.DataFactory/factories/linkedservices",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), 'remoteHubStorage')]",
                      "properties": {
                        "annotations": [],
                        "parameters": {},
                        "type": "AzureBlobFS",
                        "typeProperties": {
                          "url": "[parameters('remoteHubStorageUri')]",
                          "accountKey": {
                            "type": "AzureKeyVaultSecret",
                            "store": {
                              "referenceName": "[parameters('keyVaultName')]",
                              "type": "LinkedServiceReference"
                            },
                            "secretName": "[format('{0}-storage-key', toLower(parameters('hubName')))]"
                          }
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "linkedService_keyVault"
                      ]
                    },
                    "dataset_config": {
                      "type": "Microsoft.DataFactory/factories/datasets",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('safeConfigContainerName'))]",
                      "properties": {
                        "annotations": [],
                        "parameters": {
                          "fileName": {
                            "type": "String",
                            "defaultValue": "settings.json"
                          },
                          "folderPath": {
                            "type": "String",
                            "defaultValue": "[parameters('configContainerName')]"
                          }
                        },
                        "type": "Json",
                        "typeProperties": "[variables('datasetPropsDefault')]",
                        "linkedServiceName": {
                          "parameters": {},
                          "referenceName": "[parameters('storageAccountName')]",
                          "type": "LinkedServiceReference"
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "linkedService_storageAccount"
                      ]
                    },
                    "dataset_manifest": {
                      "type": "Microsoft.DataFactory/factories/datasets",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), 'manifest')]",
                      "properties": {
                        "annotations": [],
                        "parameters": {
                          "fileName": {
                            "type": "String",
                            "defaultValue": "manifest.json"
                          },
                          "folderPath": {
                            "type": "String",
                            "defaultValue": "[parameters('exportContainerName')]"
                          }
                        },
                        "type": "Json",
                        "typeProperties": "[variables('datasetPropsDefault')]",
                        "linkedServiceName": {
                          "parameters": {},
                          "referenceName": "[parameters('storageAccountName')]",
                          "type": "LinkedServiceReference"
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "linkedService_storageAccount"
                      ]
                    },
                    "dataset_msexports": {
                      "type": "Microsoft.DataFactory/factories/datasets",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('safeExportContainerName'))]",
                      "properties": {
                        "annotations": [],
                        "parameters": {
                          "blobPath": {
                            "type": "String"
                          }
                        },
                        "type": "DelimitedText",
                        "typeProperties": {
                          "location": {
                            "type": "AzureBlobFSLocation",
                            "fileName": {
                              "value": "@{dataset().blobPath}",
                              "type": "Expression"
                            },
                            "fileSystem": "[variables('safeExportContainerName')]"
                          },
                          "columnDelimiter": ",",
                          "escapeChar": "\"",
                          "quoteChar": "\"",
                          "firstRowAsHeader": true
                        },
                        "linkedServiceName": {
                          "parameters": {},
                          "referenceName": "[parameters('storageAccountName')]",
                          "type": "LinkedServiceReference"
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "linkedService_storageAccount"
                      ]
                    },
                    "dataset_msexports_gzip": {
                      "type": "Microsoft.DataFactory/factories/datasets",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), format('{0}_gzip', variables('safeExportContainerName')))]",
                      "properties": {
                        "annotations": [],
                        "parameters": {
                          "blobPath": {
                            "type": "String"
                          }
                        },
                        "type": "DelimitedText",
                        "typeProperties": {
                          "location": {
                            "type": "AzureBlobFSLocation",
                            "fileName": {
                              "value": "@{dataset().blobPath}",
                              "type": "Expression"
                            },
                            "fileSystem": "[variables('safeExportContainerName')]"
                          },
                          "columnDelimiter": ",",
                          "escapeChar": "\"",
                          "quoteChar": "\"",
                          "firstRowAsHeader": true,
                          "compressionCodec": "Gzip"
                        },
                        "linkedServiceName": {
                          "parameters": {},
                          "referenceName": "[parameters('storageAccountName')]",
                          "type": "LinkedServiceReference"
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "linkedService_storageAccount"
                      ]
                    },
                    "dataset_msexports_parquet": {
                      "type": "Microsoft.DataFactory/factories/datasets",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), format('{0}_parquet', variables('safeExportContainerName')))]",
                      "properties": {
                        "annotations": [],
                        "parameters": {
                          "blobPath": {
                            "type": "String"
                          }
                        },
                        "type": "Parquet",
                        "typeProperties": {
                          "location": {
                            "type": "AzureBlobFSLocation",
                            "fileName": {
                              "value": "@{dataset().blobPath}",
                              "type": "Expression"
                            },
                            "fileSystem": "[variables('safeExportContainerName')]"
                          }
                        },
                        "linkedServiceName": {
                          "parameters": {},
                          "referenceName": "[parameters('storageAccountName')]",
                          "type": "LinkedServiceReference"
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "linkedService_storageAccount"
                      ]
                    },
                    "dataset_ingestion": {
                      "type": "Microsoft.DataFactory/factories/datasets",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('safeIngestionContainerName'))]",
                      "properties": {
                        "annotations": [],
                        "parameters": {
                          "blobPath": {
                            "type": "String"
                          }
                        },
                        "type": "Parquet",
                        "typeProperties": {
                          "location": {
                            "type": "AzureBlobFSLocation",
                            "fileName": {
                              "value": "@{dataset().blobPath}",
                              "type": "Expression"
                            },
                            "fileSystem": "[variables('safeIngestionContainerName')]"
                          }
                        },
                        "linkedServiceName": {
                          "parameters": {},
                          "referenceName": "[if(empty(parameters('remoteHubStorageUri')), parameters('storageAccountName'), 'remoteHubStorage')]",
                          "type": "LinkedServiceReference"
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "linkedService_remoteHubStorage",
                        "linkedService_storageAccount"
                      ]
                    },
                    "dataset_ingestion_files": {
                      "type": "Microsoft.DataFactory/factories/datasets",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), format('{0}_files', variables('safeIngestionContainerName')))]",
                      "properties": {
                        "annotations": [],
                        "parameters": {
                          "folderPath": {
                            "type": "String"
                          }
                        },
                        "type": "Parquet",
                        "typeProperties": {
                          "location": {
                            "type": "AzureBlobFSLocation",
                            "fileSystem": "[variables('safeIngestionContainerName')]",
                            "folderPath": {
                              "value": "@dataset().folderPath",
                              "type": "Expression"
                            }
                          }
                        },
                        "linkedServiceName": {
                          "parameters": {},
                          "referenceName": "[if(empty(parameters('remoteHubStorageUri')), parameters('storageAccountName'), 'remoteHubStorage')]",
                          "type": "LinkedServiceReference"
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "linkedService_remoteHubStorage",
                        "linkedService_storageAccount"
                      ]
                    },
                    "trigger_FileAdded": {
                      "type": "Microsoft.DataFactory/factories/triggers",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('fileAddedExportTriggerName'))]",
                      "properties": {
                        "annotations": [],
                        "pipelines": [
                          {
                            "pipelineReference": {
                              "referenceName": "[format('{0}_ExecuteETL', variables('safeExportContainerName'))]",
                              "type": "PipelineReference"
                            },
                            "parameters": {
                              "folderPath": "@triggerBody().folderPath",
                              "fileName": "@triggerBody().fileName"
                            }
                          }
                        ],
                        "type": "BlobEventsTrigger",
                        "typeProperties": {
                          "blobPathBeginsWith": "[format('/{0}/blobs/', parameters('exportContainerName'))]",
                          "blobPathEndsWith": "manifest.json",
                          "ignoreEmptyBlobs": true,
                          "scope": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                          "events": [
                            "Microsoft.Storage.BlobCreated"
                          ]
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "pipeline_ExecuteETL",
                        "stopTriggers",
                        "storageAccount"
                      ]
                    },
                    "trigger_SettingsUpdated": {
                      "type": "Microsoft.DataFactory/factories/triggers",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('updateConfigTriggerName'))]",
                      "properties": {
                        "annotations": [],
                        "pipelines": [
                          {
                            "pipelineReference": {
                              "referenceName": "[format('{0}_ConfigureExports', variables('safeConfigContainerName'))]",
                              "type": "PipelineReference"
                            }
                          }
                        ],
                        "type": "BlobEventsTrigger",
                        "typeProperties": {
                          "blobPathBeginsWith": "[format('/{0}/blobs/', parameters('configContainerName'))]",
                          "blobPathEndsWith": "settings.json",
                          "ignoreEmptyBlobs": true,
                          "scope": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                          "events": [
                            "Microsoft.Storage.BlobCreated"
                          ]
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "pipeline_ConfigureExports",
                        "stopTriggers",
                        "storageAccount"
                      ]
                    },
                    "trigger_DailySchedule": {
                      "type": "Microsoft.DataFactory/factories/triggers",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('dailyTriggerName'))]",
                      "properties": {
                        "pipelines": [
                          {
                            "pipelineReference": {
                              "referenceName": "[format('{0}_StartExportProcess', variables('safeConfigContainerName'))]",
                              "type": "PipelineReference"
                            },
                            "parameters": {
                              "Recurrence": "Daily"
                            }
                          }
                        ],
                        "type": "ScheduleTrigger",
                        "typeProperties": {
                          "recurrence": {
                            "frequency": "Hour",
                            "interval": 24,
                            "startTime": "2023-01-01T01:01:00",
                            "timeZone": "[reference('azuretimezones').outputs.Timezone.value]"
                          }
                        }
                      },
                      "dependsOn": [
                        "azuretimezones",
                        "dataFactory",
                        "pipeline_StartExportProcess",
                        "stopTriggers"
                      ]
                    },
                    "trigger_MonthlySchedule": {
                      "type": "Microsoft.DataFactory/factories/triggers",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('monthlyTriggerName'))]",
                      "properties": {
                        "pipelines": [
                          {
                            "pipelineReference": {
                              "referenceName": "[format('{0}_StartExportProcess', variables('safeConfigContainerName'))]",
                              "type": "PipelineReference"
                            },
                            "parameters": {
                              "Recurrence": "Monthly"
                            }
                          }
                        ],
                        "type": "ScheduleTrigger",
                        "typeProperties": {
                          "recurrence": {
                            "frequency": "Month",
                            "interval": 1,
                            "startTime": "2023-01-05T01:11:00",
                            "timeZone": "[reference('azuretimezones').outputs.Timezone.value]",
                            "schedule": {
                              "monthDays": [
                                5,
                                19
                              ]
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "azuretimezones",
                        "dataFactory",
                        "pipeline_StartExportProcess",
                        "stopTriggers"
                      ]
                    },
                    "pipeline_StartBackfillProcess": {
                      "type": "Microsoft.DataFactory/factories/pipelines",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), format('{0}_StartBackfillProcess', variables('safeConfigContainerName')))]",
                      "properties": {
                        "activities": [
                          {
                            "name": "Get Config",
                            "type": "Lookup",
                            "dependsOn": [],
                            "policy": {
                              "timeout": "0.00:05:00",
                              "retry": 2,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                  "type": "AzureBlobFSReadSettings",
                                  "recursive": true,
                                  "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                  "type": "JsonReadSettings"
                                }
                              },
                              "dataset": {
                                "referenceName": "[variables('safeConfigContainerName')]",
                                "type": "DatasetReference",
                                "parameters": {
                                  "fileName": {
                                    "value": "@variables('fileName')",
                                    "type": "Expression"
                                  },
                                  "folderPath": {
                                    "value": "@variables('folderPath')",
                                    "type": "Expression"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "name": "Set backfill end date",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Get Config",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "endDate",
                              "value": {
                                "value": "@addDays(startOfMonth(utcNow()), -1)",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Set backfill start date",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Get Config",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "startDate",
                              "value": {
                                "value": "@subtractFromTime(startOfMonth(utcNow()), activity('Get Config').output.firstRow.retention.ingestion.months, 'Month')",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Set export start date",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Set backfill start date",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "thisMonth",
                              "value": {
                                "value": "@startOfMonth(variables('endDate'))",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Set export end date",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Set export start date",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "nextMonth",
                              "value": {
                                "value": "@startOfMonth(subtractFromTime(variables('thisMonth'), 1, 'Month'))",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Every Month",
                            "type": "Until",
                            "dependsOn": [
                              {
                                "activity": "Set export end date",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              },
                              {
                                "activity": "Set backfill end date",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "expression": {
                                "value": "@less(variables('thisMonth'), variables('startDate'))",
                                "type": "Expression"
                              },
                              "activities": [
                                {
                                  "name": "Update export start date",
                                  "type": "SetVariable",
                                  "dependsOn": [
                                    {
                                      "activity": "Backfill data",
                                      "dependencyConditions": [
                                        "Completed"
                                      ]
                                    }
                                  ],
                                  "userProperties": [],
                                  "typeProperties": {
                                    "variableName": "thisMonth",
                                    "value": {
                                      "value": "@variables('nextMonth')",
                                      "type": "Expression"
                                    }
                                  }
                                },
                                {
                                  "name": "Update export end date",
                                  "type": "SetVariable",
                                  "dependsOn": [
                                    {
                                      "activity": "Update export start date",
                                      "dependencyConditions": [
                                        "Completed"
                                      ]
                                    }
                                  ],
                                  "userProperties": [],
                                  "typeProperties": {
                                    "variableName": "nextMonth",
                                    "value": {
                                      "value": "@subtractFromTime(variables('thisMonth'), 1, 'Month')",
                                      "type": "Expression"
                                    }
                                  }
                                },
                                {
                                  "name": "Backfill data",
                                  "type": "ExecutePipeline",
                                  "dependsOn": [],
                                  "userProperties": [],
                                  "typeProperties": {
                                    "pipeline": {
                                      "referenceName": "[format('{0}_RunBackfillJob', variables('safeConfigContainerName'))]",
                                      "type": "PipelineReference"
                                    },
                                    "waitOnCompletion": true,
                                    "parameters": {
                                      "StartDate": {
                                        "value": "@variables('thisMonth')",
                                        "type": "Expression"
                                      },
                                      "EndDate": {
                                        "value": "@addDays(addToTime(variables('thisMonth'), 1, 'Month'), -1)",
                                        "type": "Expression"
                                      }
                                    }
                                  }
                                }
                              ],
                              "timeout": "0.12:00:00"
                            }
                          }
                        ],
                        "concurrency": 1,
                        "variables": {
                          "exportName": {
                            "type": "String"
                          },
                          "storageAccountId": {
                            "type": "String",
                            "defaultValue": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                          },
                          "finOpsHub": {
                            "type": "String",
                            "defaultValue": "[parameters('hubName')]"
                          },
                          "resourceManagementUri": {
                            "type": "String",
                            "defaultValue": "[environment().resourceManager]"
                          },
                          "fileName": {
                            "type": "String",
                            "defaultValue": "settings.json"
                          },
                          "folderPath": {
                            "type": "String",
                            "defaultValue": "[parameters('configContainerName')]"
                          },
                          "endDate": {
                            "type": "String"
                          },
                          "startDate": {
                            "type": "String"
                          },
                          "thisMonth": {
                            "type": "String"
                          },
                          "nextMonth": {
                            "type": "String"
                          }
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "dataset_config",
                        "pipeline_RunBackfillJob",
                        "storageAccount"
                      ],
                      "metadata": {
                        "description": "Runs the backfill job for each month based on retention settings."
                      }
                    },
                    "pipeline_RunBackfillJob": {
                      "type": "Microsoft.DataFactory/factories/pipelines",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), format('{0}_RunBackfillJob', variables('safeConfigContainerName')))]",
                      "properties": {
                        "activities": [
                          {
                            "name": "Get Config",
                            "type": "Lookup",
                            "dependsOn": [],
                            "policy": {
                              "timeout": "0.00:05:00",
                              "retry": 2,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                  "type": "AzureBlobFSReadSettings",
                                  "recursive": true,
                                  "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                  "type": "JsonReadSettings"
                                }
                              },
                              "dataset": {
                                "referenceName": "[variables('safeConfigContainerName')]",
                                "type": "DatasetReference",
                                "parameters": {
                                  "fileName": {
                                    "value": "@variables('fileName')",
                                    "type": "Expression"
                                  },
                                  "folderPath": {
                                    "value": "@variables('folderPath')",
                                    "type": "Expression"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "name": "Set Scopes",
                            "description": "Save scopes to test if it is an array",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Get Config",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "scopesArray",
                              "value": {
                                "value": "@activity('Get Config').output.firstRow.scopes",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Set Scopes as Array",
                            "description": "Wraps a single scope object into an array to work around the PowerShell bug where single-item arrays are sometimes written as a single object instead of an array.",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Set Scopes",
                                "dependencyConditions": [
                                  "Failed"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "scopesArray",
                              "value": {
                                "value": "@createArray(activity('Get Config').output.firstRow.scopes)",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Filter Invalid Scopes",
                            "description": "Remove any invalid scopes to avoid errors.",
                            "type": "Filter",
                            "dependsOn": [
                              {
                                "activity": "Set Scopes",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              },
                              {
                                "activity": "Set Scopes as Array",
                                "dependencyConditions": [
                                  "Skipped",
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "items": {
                                "value": "@variables('scopesArray')",
                                "type": "Expression"
                              },
                              "condition": {
                                "value": "@and(not(empty(item().scope)), not(equals(item().scope, '/')))",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "ForEach Export Scope",
                            "type": "ForEach",
                            "dependsOn": [
                              {
                                "activity": "Filter Invalid Scopes",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "items": {
                                "value": "@activity('Filter Invalid Scopes').output.Value",
                                "type": "Expression"
                              },
                              "isSequential": true,
                              "activities": [
                                {
                                  "name": "Set backfill export name",
                                  "type": "SetVariable",
                                  "dependsOn": [],
                                  "userProperties": [],
                                  "typeProperties": {
                                    "variableName": "exportName",
                                    "value": {
                                      "value": "@toLower(concat(variables('finOpsHub'), '-monthly-costdetails'))",
                                      "type": "Expression"
                                    }
                                  }
                                },
                                {
                                  "name": "Trigger backfill export",
                                  "type": "WebActivity",
                                  "dependsOn": [
                                    {
                                      "activity": "Set backfill export name",
                                      "dependencyConditions": [
                                        "Completed"
                                      ]
                                    }
                                  ],
                                  "policy": {
                                    "timeout": "0.00:05:00",
                                    "retry": 1,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                  },
                                  "userProperties": [],
                                  "typeProperties": {
                                    "url": {
                                      "value": "[format('@{{variables(''resourceManagementUri'')}}@{{item().scope}}/providers/Microsoft.CostManagement/exports/@{{variables(''exportName'')}}/run?api-version={0}', variables('exportApiVersion'))]",
                                      "type": "Expression"
                                    },
                                    "method": "POST",
                                    "headers": {
                                      "x-ms-command-name": "[format('FinOpsToolkit.Hubs.config_RunBackfill@{0}', variables('ftkVersion'))]",
                                      "Content-Type": "application/json",
                                      "ClientType": "[format('FinOpsToolkit.Hubs@{0}', variables('ftkVersion'))]"
                                    },
                                    "body": "{\"timePeriod\" : { \"from\" : \"@{pipeline().parameters.StartDate}\", \"to\" : \"@{pipeline().parameters.EndDate}\" }}",
                                    "authentication": {
                                      "type": "MSI",
                                      "resource": {
                                        "value": "@variables('resourceManagementUri')",
                                        "type": "Expression"
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "concurrency": 1,
                        "parameters": {
                          "StartDate": {
                            "type": "string"
                          },
                          "EndDate": {
                            "type": "string"
                          }
                        },
                        "variables": {
                          "exportName": {
                            "type": "String"
                          },
                          "storageAccountId": {
                            "type": "String",
                            "defaultValue": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                          },
                          "finOpsHub": {
                            "type": "String",
                            "defaultValue": "[parameters('hubName')]"
                          },
                          "resourceManagementUri": {
                            "type": "String",
                            "defaultValue": "[environment().resourceManager]"
                          },
                          "fileName": {
                            "type": "String",
                            "defaultValue": "settings.json"
                          },
                          "folderPath": {
                            "type": "String",
                            "defaultValue": "[parameters('configContainerName')]"
                          },
                          "scopesArray": {
                            "type": "Array"
                          }
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "dataset_config",
                        "storageAccount"
                      ],
                      "metadata": {
                        "description": "Creates and triggers exports for all defined scopes for the specified date range."
                      }
                    },
                    "pipeline_StartExportProcess": {
                      "type": "Microsoft.DataFactory/factories/pipelines",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), format('{0}_StartExportProcess', variables('safeConfigContainerName')))]",
                      "properties": {
                        "activities": [
                          {
                            "name": "Get Config",
                            "type": "Lookup",
                            "dependsOn": [],
                            "policy": {
                              "timeout": "0.00:05:00",
                              "retry": 2,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                  "type": "AzureBlobFSReadSettings",
                                  "recursive": true,
                                  "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                  "type": "JsonReadSettings"
                                }
                              },
                              "dataset": {
                                "referenceName": "[variables('safeConfigContainerName')]",
                                "type": "DatasetReference",
                                "parameters": {
                                  "fileName": {
                                    "value": "@variables('fileName')",
                                    "type": "Expression"
                                  },
                                  "folderPath": {
                                    "value": "@variables('folderPath')",
                                    "type": "Expression"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "name": "Set Scopes",
                            "description": "Save scopes to test if it is an array",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Get Config",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "scopesArray",
                              "value": {
                                "value": "@activity('Get Config').output.firstRow.scopes",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Set Scopes as Array",
                            "description": "Wraps a single scope object into an array to work around the PowerShell bug where single-item arrays are sometimes written as a single object instead of an array.",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Set Scopes",
                                "dependencyConditions": [
                                  "Failed"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "scopesArray",
                              "value": {
                                "value": "@createArray(activity('Get Config').output.firstRow.scopes)",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Filter Invalid Scopes",
                            "description": "Remove any invalid scopes to avoid errors.",
                            "type": "Filter",
                            "dependsOn": [
                              {
                                "activity": "Set Scopes",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              },
                              {
                                "activity": "Set Scopes as Array",
                                "dependencyConditions": [
                                  "Succeeded",
                                  "Skipped"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "items": {
                                "value": "@variables('scopesArray')",
                                "type": "Expression"
                              },
                              "condition": {
                                "value": "@and(not(empty(item().scope)), not(equals(item().scope, '/')))",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "ForEach Export Scope",
                            "type": "ForEach",
                            "dependsOn": [
                              {
                                "activity": "Filter Invalid Scopes",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "items": {
                                "value": "@activity('Filter Invalid Scopes').output.Value",
                                "type": "Expression"
                              },
                              "isSequential": true,
                              "activities": [
                                {
                                  "name": "Get exports for scope",
                                  "type": "WebActivity",
                                  "dependsOn": [],
                                  "policy": {
                                    "timeout": "0.00:05:00",
                                    "retry": 2,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                  },
                                  "userProperties": [],
                                  "typeProperties": {
                                    "url": {
                                      "value": "[format('@{{variables(''resourceManagementUri'')}}@{{item().scope}}/providers/Microsoft.CostManagement/exports?api-version={0}', variables('exportApiVersion'))]",
                                      "type": "Expression"
                                    },
                                    "method": "GET",
                                    "authentication": {
                                      "type": "MSI",
                                      "resource": {
                                        "value": "@variables('resourceManagementUri')",
                                        "type": "Expression"
                                      }
                                    }
                                  }
                                },
                                {
                                  "name": "Run exports for scope",
                                  "type": "ExecutePipeline",
                                  "dependsOn": [
                                    {
                                      "activity": "Get exports for scope",
                                      "dependencyConditions": [
                                        "Succeeded"
                                      ]
                                    }
                                  ],
                                  "userProperties": [],
                                  "typeProperties": {
                                    "pipeline": {
                                      "referenceName": "[format('{0}_RunExportJobs', variables('safeConfigContainerName'))]",
                                      "type": "PipelineReference"
                                    },
                                    "waitOnCompletion": true,
                                    "parameters": {
                                      "ExportScopes": {
                                        "value": "@activity('Get exports for scope').output.value",
                                        "type": "Expression"
                                      },
                                      "Recurrence": {
                                        "value": "@pipeline().parameters.Recurrence",
                                        "type": "Expression"
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "concurrency": 1,
                        "parameters": {
                          "Recurrence": {
                            "type": "string",
                            "defaultValue": "Daily"
                          }
                        },
                        "variables": {
                          "fileName": {
                            "type": "String",
                            "defaultValue": "settings.json"
                          },
                          "folderPath": {
                            "type": "String",
                            "defaultValue": "[parameters('configContainerName')]"
                          },
                          "finOpsHub": {
                            "type": "String",
                            "defaultValue": "[parameters('hubName')]"
                          },
                          "resourceManagementUri": {
                            "type": "String",
                            "defaultValue": "[environment().resourceManager]"
                          },
                          "scopesArray": {
                            "type": "Array"
                          }
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "dataset_config",
                        "pipeline_RunExportJobs"
                      ],
                      "metadata": {
                        "description": "Gets a list of all Cost Management exports configured for this hub based on the scopes defined in settings.json, then runs each export using the config_RunExportJobs pipeline."
                      }
                    },
                    "pipeline_RunExportJobs": {
                      "type": "Microsoft.DataFactory/factories/pipelines",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), format('{0}_RunExportJobs', variables('safeConfigContainerName')))]",
                      "properties": {
                        "activities": [
                          {
                            "name": "ForEach export scope",
                            "type": "ForEach",
                            "dependsOn": [],
                            "userProperties": [],
                            "typeProperties": {
                              "items": {
                                "value": "@pipeline().parameters.exportScopes",
                                "type": "Expression"
                              },
                              "isSequential": true,
                              "activities": [
                                {
                                  "name": "If scheduled",
                                  "type": "IfCondition",
                                  "dependsOn": [],
                                  "userProperties": [],
                                  "typeProperties": {
                                    "expression": {
                                      "value": "@and(equals(toLower(item().properties.schedule.recurrence), toLower(pipeline().parameters.Recurrence)),startswith(toLower(item().name), toLower(variables('hubName'))))",
                                      "type": "Expression"
                                    },
                                    "ifTrueActivities": [
                                      {
                                        "name": "Trigger export",
                                        "type": "WebActivity",
                                        "dependsOn": [],
                                        "policy": {
                                          "timeout": "0.00:05:00",
                                          "retry": 0,
                                          "retryIntervalInSeconds": 30,
                                          "secureOutput": false,
                                          "secureInput": false
                                        },
                                        "userProperties": [],
                                        "typeProperties": {
                                          "url": {
                                            "value": "[format('@{{replace(toLower(concat(variables(''resourceManagementUri''),item().id)), ''com//'', ''com/'')}}/run?api-version={0}', variables('exportApiVersion'))]",
                                            "type": "Expression"
                                          },
                                          "method": "POST",
                                          "headers": {
                                            "x-ms-command-name": "[format('FinOpsToolkit.Hubs.config_RunExportJobs@{0}', variables('ftkVersion'))]",
                                            "ClientType": "[format('FinOpsToolkit.Hubs@{0}', variables('ftkVersion'))]"
                                          },
                                          "authentication": {
                                            "type": "MSI",
                                            "resource": {
                                              "value": "@variables('resourceManagementUri')",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "concurrency": 1,
                        "parameters": {
                          "ExportScopes": {
                            "type": "array"
                          },
                          "Recurrence": {
                            "type": "string",
                            "defaultValue": "Daily"
                          }
                        },
                        "variables": {
                          "resourceManagementUri": {
                            "type": "String",
                            "defaultValue": "[environment().resourceManager]"
                          },
                          "hubName": {
                            "type": "String",
                            "defaultValue": "[parameters('hubName')]"
                          }
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "dataset_config"
                      ],
                      "metadata": {
                        "description": "Runs the specified Cost Management exports."
                      }
                    },
                    "pipeline_ConfigureExports": {
                      "type": "Microsoft.DataFactory/factories/pipelines",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), format('{0}_ConfigureExports', variables('safeConfigContainerName')))]",
                      "properties": {
                        "activities": [
                          {
                            "name": "Get Config",
                            "type": "Lookup",
                            "dependsOn": [],
                            "policy": {
                              "timeout": "0.00:05:00",
                              "retry": 2,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                  "type": "AzureBlobFSReadSettings",
                                  "recursive": true,
                                  "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                  "type": "JsonReadSettings"
                                }
                              },
                              "dataset": {
                                "referenceName": "[variables('safeConfigContainerName')]",
                                "type": "DatasetReference",
                                "parameters": {
                                  "fileName": {
                                    "value": "@variables('fileName')",
                                    "type": "Expression"
                                  },
                                  "folderPath": {
                                    "value": "@variables('folderPath')",
                                    "type": "Expression"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "name": "Save Scopes",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Get Config",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "scopesArray",
                              "value": {
                                "value": "@activity('Get Config').output.firstRow.scopes",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Save Scopes as Array",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Save Scopes",
                                "dependencyConditions": [
                                  "Failed"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "scopesArray",
                              "value": {
                                "value": "@array(activity('Get Config').output.firstRow.scopes)",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Filter Invalid Scopes",
                            "type": "Filter",
                            "dependsOn": [
                              {
                                "activity": "Save Scopes",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              },
                              {
                                "activity": "Save Scopes as Array",
                                "dependencyConditions": [
                                  "Skipped",
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "items": {
                                "value": "@variables('scopesArray')",
                                "type": "Expression"
                              },
                              "condition": {
                                "value": "@and(not(empty(item().scope)), not(equals(item().scope, '/')))",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "ForEach Export Scope",
                            "type": "ForEach",
                            "dependsOn": [
                              {
                                "activity": "Filter Invalid Scopes",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "items": {
                                "value": "@activity('Filter Invalid Scopes').output.value",
                                "type": "Expression"
                              },
                              "isSequential": true,
                              "activities": [
                                {
                                  "name": "Create or update open month focus export",
                                  "type": "WebActivity",
                                  "dependsOn": [
                                    {
                                      "activity": "Set open month focus export name",
                                      "dependencyConditions": [
                                        "Succeeded"
                                      ]
                                    }
                                  ],
                                  "policy": {
                                    "timeout": "0.00:05:00",
                                    "retry": 2,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                  },
                                  "userProperties": [],
                                  "typeProperties": {
                                    "url": {
                                      "value": "[format('@{{variables(''resourceManagementUri'')}}@{{item().scope}}/providers/Microsoft.CostManagement/exports/@{{variables(''exportName'')}}?api-version={0}', variables('exportApiVersion'))]",
                                      "type": "Expression"
                                    },
                                    "method": "PUT",
                                    "body": {
                                      "value": "[__bicep.getExportBody(parameters('exportContainerName'), 'FocusCost', variables('focusSchemaVersion'), false(), 'Parquet', 'Snappy', 'true', 'CreateNewReport')]",
                                      "type": "Expression"
                                    },
                                    "authentication": {
                                      "type": "MSI",
                                      "resource": {
                                        "value": "@variables('ResourceManagementUri')",
                                        "type": "Expression"
                                      }
                                    }
                                  }
                                },
                                {
                                  "name": "Set open month focus export name",
                                  "type": "SetVariable",
                                  "dependsOn": [],
                                  "policy": {
                                    "secureOutput": false,
                                    "secureInput": false
                                  },
                                  "userProperties": [],
                                  "typeProperties": {
                                    "variableName": "exportName",
                                    "value": {
                                      "value": "@toLower(concat(variables('finOpsHub'), '-daily-costdetails'))",
                                      "type": "Expression"
                                    }
                                  }
                                },
                                {
                                  "name": "Create or update closed month focus export",
                                  "type": "WebActivity",
                                  "dependsOn": [
                                    {
                                      "activity": "Set closed month focus export name",
                                      "dependencyConditions": [
                                        "Succeeded"
                                      ]
                                    }
                                  ],
                                  "policy": {
                                    "timeout": "0.00:05:00",
                                    "retry": 2,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                  },
                                  "userProperties": [],
                                  "typeProperties": {
                                    "url": {
                                      "value": "[format('@{{variables(''ResourceManagementUri'')}}@{{item().scope}}/providers/Microsoft.CostManagement/exports/@{{variables(''exportName'')}}?api-version={0}', variables('exportApiVersion'))]",
                                      "type": "Expression"
                                    },
                                    "method": "PUT",
                                    "body": {
                                      "value": "[__bicep.getExportBody(parameters('exportContainerName'), 'FocusCost', variables('focusSchemaVersion'), true(), 'Parquet', 'Snappy', 'true', 'CreateNewReport')]",
                                      "type": "Expression"
                                    },
                                    "authentication": {
                                      "type": "MSI",
                                      "resource": {
                                        "value": "@variables('ResourceManagementUri')",
                                        "type": "Expression"
                                      }
                                    }
                                  }
                                },
                                {
                                  "name": "Set closed month focus export name",
                                  "type": "SetVariable",
                                  "dependsOn": [
                                    {
                                      "activity": "Create or update open month focus export",
                                      "dependencyConditions": [
                                        "Succeeded"
                                      ]
                                    }
                                  ],
                                  "policy": {
                                    "secureOutput": false,
                                    "secureInput": false
                                  },
                                  "userProperties": [],
                                  "typeProperties": {
                                    "variableName": "exportName",
                                    "value": {
                                      "value": "@toLower(concat(variables('finOpsHub'), '-monthly-costdetails'))",
                                      "type": "Expression"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "concurrency": 1,
                        "variables": {
                          "scopesArray": {
                            "type": "Array"
                          },
                          "exportName": {
                            "type": "String"
                          },
                          "exportScope": {
                            "type": "String"
                          },
                          "storageAccountId": {
                            "type": "String",
                            "defaultValue": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                          },
                          "finOpsHub": {
                            "type": "String",
                            "defaultValue": "[parameters('hubName')]"
                          },
                          "resourceManagementUri": {
                            "type": "String",
                            "defaultValue": "[environment().resourceManager]"
                          },
                          "fileName": {
                            "type": "String",
                            "defaultValue": "settings.json"
                          },
                          "folderPath": {
                            "type": "String",
                            "defaultValue": "[parameters('configContainerName')]"
                          }
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "dataset_config",
                        "storageAccount"
                      ],
                      "metadata": {
                        "description": "Creates Cost Management exports for all scopes."
                      }
                    },
                    "pipeline_ExecuteETL": {
                      "type": "Microsoft.DataFactory/factories/pipelines",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), format('{0}_ExecuteETL', variables('safeExportContainerName')))]",
                      "properties": {
                        "activities": [
                          {
                            "name": "Wait",
                            "type": "Wait",
                            "dependsOn": [],
                            "userProperties": [],
                            "typeProperties": {
                              "waitTimeInSeconds": 60
                            }
                          },
                          {
                            "name": "Read Manifest",
                            "description": "Load the export manifest to determine the scope, dataset, and date range.",
                            "type": "Lookup",
                            "dependsOn": [
                              {
                                "activity": "Wait",
                                "dependencyConditions": [
                                  "Completed"
                                ]
                              }
                            ],
                            "policy": {
                              "timeout": "0.12:00:00",
                              "retry": 0,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                  "type": "AzureBlobFSReadSettings",
                                  "recursive": true,
                                  "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                  "type": "JsonReadSettings"
                                }
                              },
                              "dataset": {
                                "referenceName": "manifest",
                                "type": "DatasetReference",
                                "parameters": {
                                  "fileName": {
                                    "value": "@pipeline().parameters.fileName",
                                    "type": "Expression"
                                  },
                                  "folderPath": {
                                    "value": "@pipeline().parameters.folderPath",
                                    "type": "Expression"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "name": "Set Dataset Type",
                            "description": "Save the dataset type from the export manifest.",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Read Manifest",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "datasetType",
                              "value": {
                                "value": "@toLower(activity('Read Manifest').output.firstRow.exportConfig.type)",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Set MCA Column",
                            "description": "Determines if the dataset schema has channel-specific columns and saves the column name that only exists in MCA to determine if it is an MCA dataset.",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Set Dataset Type",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "mcaColumnToCheck",
                              "value": {
                                "value": "@if(contains(createArray('pricesheet', 'reservationtransactions'), variables('datasetType')), 'BillingProfileId', if(equals(variables('datasetType'), 'reservationrecommendations'), 'Net Savings', null))",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Set Dataset Version",
                            "description": "Save the dataset version from the export manifest.",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Read Manifest",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "datasetVersion",
                              "value": {
                                "value": "@activity('Read Manifest').output.firstRow.exportConfig.dataVersion",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Detect Channel",
                            "description": "Determines what channel this dataset is from. Switch statement handles the different file types if the mcaColumnToCheck variable is set.",
                            "type": "Switch",
                            "dependsOn": [
                              {
                                "activity": "Set MCA Column",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              },
                              {
                                "activity": "Set Dataset Version",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "on": {
                                "value": "@if(empty(variables('mcaColumnToCheck')), 'ignore', last(array(split(activity('Read Manifest').output.firstRow.blobs[0].blobName, '.'))))",
                                "type": "Expression"
                              },
                              "cases": [
                                {
                                  "value": "csv",
                                  "activities": [
                                    {
                                      "name": "Check for MCA Column in CSV",
                                      "description": "Checks the dataset to determine if the applicable MCA-specific column exists.",
                                      "type": "Lookup",
                                      "dependsOn": [],
                                      "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                      },
                                      "userProperties": [],
                                      "typeProperties": {
                                        "source": {
                                          "type": "DelimitedTextSource",
                                          "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": false,
                                            "enablePartitionDiscovery": false
                                          },
                                          "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                          }
                                        },
                                        "dataset": {
                                          "referenceName": "[variables('safeExportContainerName')]",
                                          "type": "DatasetReference",
                                          "parameters": {
                                            "blobPath": {
                                              "value": "@activity('Read Manifest').output.firstRow.blobs[0].blobName",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "Set Schema File with Channel in CSV",
                                      "type": "SetVariable",
                                      "dependsOn": [
                                        {
                                          "activity": "Check for MCA Column in CSV",
                                          "dependencyConditions": [
                                            "Succeeded"
                                          ]
                                        }
                                      ],
                                      "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                      },
                                      "userProperties": [],
                                      "typeProperties": {
                                        "variableName": "schemaFile",
                                        "value": {
                                          "value": "@toLower(concat(variables('datasetType'), '_', variables('datasetVersion'), if(contains(activity('Check for MCA Column in CSV').output.firstRow, variables('mcaColumnToCheck')), '_mca', '_ea'), '.json'))",
                                          "type": "Expression"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "value": "gz",
                                  "activities": [
                                    {
                                      "name": "Check for MCA Column in Gzip CSV",
                                      "description": "Checks the dataset to determine if the applicable MCA-specific column exists.",
                                      "type": "Lookup",
                                      "dependsOn": [],
                                      "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                      },
                                      "userProperties": [],
                                      "typeProperties": {
                                        "source": {
                                          "type": "DelimitedTextSource",
                                          "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": false,
                                            "enablePartitionDiscovery": false
                                          },
                                          "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                          }
                                        },
                                        "dataset": {
                                          "referenceName": "[format('{0}_gzip', variables('safeExportContainerName'))]",
                                          "type": "DatasetReference",
                                          "parameters": {
                                            "blobPath": {
                                              "value": "@activity('Read Manifest').output.firstRow.blobs[0].blobName",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "Set Schema File with Channel in Gzip CSV",
                                      "type": "SetVariable",
                                      "dependsOn": [
                                        {
                                          "activity": "Check for MCA Column in Gzip CSV",
                                          "dependencyConditions": [
                                            "Succeeded"
                                          ]
                                        }
                                      ],
                                      "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                      },
                                      "userProperties": [],
                                      "typeProperties": {
                                        "variableName": "schemaFile",
                                        "value": {
                                          "value": "@toLower(concat(variables('datasetType'), '_', variables('datasetVersion'), if(contains(activity('Check for MCA Column in Gzip CSV').output.firstRow, variables('mcaColumnToCheck')), '_mca', '_ea'), '.json'))",
                                          "type": "Expression"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "value": "parquet",
                                  "activities": [
                                    {
                                      "name": "Check for MCA Column in Parquet",
                                      "description": "Checks the dataset to determine if the applicable MCA-specific column exists.",
                                      "type": "Lookup",
                                      "dependsOn": [],
                                      "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                      },
                                      "userProperties": [],
                                      "typeProperties": {
                                        "source": {
                                          "type": "ParquetSource",
                                          "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": false,
                                            "enablePartitionDiscovery": false
                                          },
                                          "formatSettings": {
                                            "type": "ParquetReadSettings"
                                          }
                                        },
                                        "dataset": {
                                          "referenceName": "[format('{0}_parquet', variables('safeExportContainerName'))]",
                                          "type": "DatasetReference",
                                          "parameters": {
                                            "blobPath": {
                                              "value": "@activity('Read Manifest').output.firstRow.blobs[0].blobName",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "Set Schema File with Channel for Parquet",
                                      "type": "SetVariable",
                                      "dependsOn": [
                                        {
                                          "activity": "Check for MCA Column in Parquet",
                                          "dependencyConditions": [
                                            "Succeeded"
                                          ]
                                        }
                                      ],
                                      "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                      },
                                      "userProperties": [],
                                      "typeProperties": {
                                        "variableName": "schemaFile",
                                        "value": {
                                          "value": "@toLower(concat(variables('datasetType'), '_', variables('datasetVersion'), if(contains(activity('Check for MCA Column in Parquet').output.firstRow, variables('mcaColumnToCheck')), '_mca', '_ea'), '.json'))",
                                          "type": "Expression"
                                        }
                                      }
                                    }
                                  ]
                                }
                              ],
                              "defaultActivities": [
                                {
                                  "name": "Set Schema File",
                                  "type": "SetVariable",
                                  "dependsOn": [],
                                  "policy": {
                                    "secureOutput": false,
                                    "secureInput": false
                                  },
                                  "userProperties": [],
                                  "typeProperties": {
                                    "variableName": "schemaFile",
                                    "value": {
                                      "value": "@toLower(concat(variables('datasetType'), '_', variables('datasetVersion'), '.json'))",
                                      "type": "Expression"
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "Set Scope",
                            "description": "Save the scope from the export manifest.",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Read Manifest",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "scope",
                              "value": {
                                "value": "@split(toLower(activity('Read Manifest').output.firstRow.exportConfig.resourceId), '/providers/microsoft.costmanagement/exports/')[0]",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Set Date",
                            "description": "Save the exported month from the export manifest.",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Read Manifest",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "date",
                              "value": {
                                "value": "@replace(substring(activity('Read Manifest').output.firstRow.runInfo.startDate, 0, 7), '-', '')",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Failed to Read Manifest",
                            "type": "Fail",
                            "dependsOn": [
                              {
                                "activity": "Set Date",
                                "dependencyConditions": [
                                  "Failed"
                                ]
                              },
                              {
                                "activity": "Set Dataset Type",
                                "dependencyConditions": [
                                  "Failed"
                                ]
                              },
                              {
                                "activity": "Set Scope",
                                "dependencyConditions": [
                                  "Failed"
                                ]
                              },
                              {
                                "activity": "Read Manifest",
                                "dependencyConditions": [
                                  "Failed"
                                ]
                              },
                              {
                                "activity": "Set Dataset Version",
                                "dependencyConditions": [
                                  "Failed"
                                ]
                              },
                              {
                                "activity": "Detect Channel",
                                "dependencyConditions": [
                                  "Failed"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "message": {
                                "value": "@concat('Failed to read the manifest file for this export run. Manifest path: ', pipeline().parameters.folderPath)",
                                "type": "Expression"
                              },
                              "errorCode": "ManifestReadFailed"
                            }
                          },
                          {
                            "name": "Check Schema",
                            "description": "Verify that the schema file exists in storage.",
                            "type": "GetMetadata",
                            "dependsOn": [
                              {
                                "activity": "Set Scope",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              },
                              {
                                "activity": "Set Date",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              },
                              {
                                "activity": "Detect Channel",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "timeout": "0.12:00:00",
                              "retry": 0,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "dataset": {
                                "referenceName": "[variables('safeConfigContainerName')]",
                                "type": "DatasetReference",
                                "parameters": {
                                  "fileName": {
                                    "value": "@variables('schemaFile')",
                                    "type": "Expression"
                                  },
                                  "folderPath": "[format('{0}/schemas', parameters('configContainerName'))]"
                                }
                              },
                              "fieldList": [
                                "exists"
                              ],
                              "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                              },
                              "formatSettings": {
                                "type": "JsonReadSettings"
                              }
                            }
                          },
                          {
                            "name": "Schema Not Found",
                            "type": "Fail",
                            "dependsOn": [
                              {
                                "activity": "Check Schema",
                                "dependencyConditions": [
                                  "Failed"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "message": {
                                "value": "@concat('The ', variables('schemaFile'), ' schema mapping file was not found. Please confirm version ', variables('datasetVersion'), ' of the ', variables('datasetType'), ' dataset is supported by this version of FinOps hubs. You may need to upgrade to a newer release. To add support for another dataset, you can create a custom mapping file.')",
                                "type": "Expression"
                              },
                              "errorCode": "SchemaNotFound"
                            }
                          },
                          {
                            "name": "For Each Blob",
                            "description": "Loop thru each exported file listed in the manifest.",
                            "type": "ForEach",
                            "dependsOn": [
                              {
                                "activity": "Check Schema",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "items": {
                                "value": "@activity('Read Manifest').output.firstRow.blobs",
                                "type": "Expression"
                              },
                              "isSequential": false,
                              "activities": [
                                {
                                  "name": "Execute",
                                  "description": "Run the ETL pipeline.",
                                  "type": "ExecutePipeline",
                                  "dependsOn": [],
                                  "policy": {
                                    "secureInput": false
                                  },
                                  "userProperties": [],
                                  "typeProperties": {
                                    "pipeline": {
                                      "referenceName": "[format('{0}_ETL_{1}', variables('safeExportContainerName'), variables('safeIngestionContainerName'))]",
                                      "type": "PipelineReference"
                                    },
                                    "waitOnCompletion": true,
                                    "parameters": {
                                      "blobPath": {
                                        "value": "@item().blobName",
                                        "type": "Expression"
                                      },
                                      "destinationFolder": {
                                        "value": "@toLower(replace(concat(variables('datasetType'),'/',substring(variables('date'), 0, 4),'/',substring(variables('date'), 4, 2),'/',variables('scope')),'//','/'))",
                                        "type": "Expression"
                                      },
                                      "destinationFile": {
                                        "value": "@concat(activity('Read Manifest').output.firstRow.runInfo.runId, '__', last(array(split(replace(replace(item().blobName, '.gz', ''), '.csv', '.parquet'), '/'))))",
                                        "type": "Expression"
                                      },
                                      "keepFilePrefix": {
                                        "value": "@concat(activity('Read Manifest').output.firstRow.runInfo.runId, '__')",
                                        "type": "Expression"
                                      },
                                      "schemaFile": {
                                        "value": "@variables('schemaFile')",
                                        "type": "Expression"
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "parameters": {
                          "folderPath": {
                            "type": "string"
                          },
                          "fileName": {
                            "type": "string"
                          }
                        },
                        "variables": {
                          "datasetType": {
                            "type": "String"
                          },
                          "datasetVersion": {
                            "type": "String"
                          },
                          "date": {
                            "type": "String"
                          },
                          "mcaColumnToCheck": {
                            "type": "String"
                          },
                          "schemaFile": {
                            "type": "String"
                          },
                          "scope": {
                            "type": "String"
                          }
                        },
                        "annotations": []
                      },
                      "dependsOn": [
                        "dataFactory",
                        "dataset_config",
                        "dataset_manifest",
                        "dataset_msexports",
                        "dataset_msexports_gzip",
                        "dataset_msexports_parquet",
                        "pipeline_ToIngestion"
                      ],
                      "metadata": {
                        "description": "Queues the msexports_ETL_ingestion pipeline."
                      }
                    },
                    "pipeline_ToIngestion": {
                      "type": "Microsoft.DataFactory/factories/pipelines",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), format('{0}_ETL_{1}', variables('safeExportContainerName'), variables('safeIngestionContainerName')))]",
                      "properties": {
                        "activities": [
                          {
                            "name": "Load Schema Mappings",
                            "description": "Get schema mapping file to use for the CSV to parquet conversion.",
                            "type": "Lookup",
                            "dependsOn": [],
                            "policy": {
                              "timeout": "0.12:00:00",
                              "retry": 0,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                  "type": "AzureBlobFSReadSettings",
                                  "recursive": true,
                                  "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                  "type": "JsonReadSettings"
                                }
                              },
                              "dataset": {
                                "referenceName": "[variables('safeConfigContainerName')]",
                                "type": "DatasetReference",
                                "parameters": {
                                  "fileName": {
                                    "value": "@toLower(pipeline().parameters.schemaFile)",
                                    "type": "Expression"
                                  },
                                  "folderPath": "[format('{0}/schemas', parameters('configContainerName'))]"
                                }
                              }
                            }
                          },
                          {
                            "name": "Failed to Load Schema",
                            "type": "Fail",
                            "dependsOn": [
                              {
                                "activity": "Load Schema Mappings",
                                "dependencyConditions": [
                                  "Failed"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "message": {
                                "value": "@concat('Unable to load the ', pipeline().parameters.schemaFile, ' schema file. Please confirm the schema and version are supported for FinOps hubs ingestion. Unsupported files will remain in the msexports container.')",
                                "type": "Expression"
                              },
                              "errorCode": "SchemaLoadFailed"
                            }
                          },
                          {
                            "name": "Convert to Parquet",
                            "description": "[format('Convert CSV to parquet and move the file to the {0} container.', parameters('ingestionContainerName'))]",
                            "type": "Switch",
                            "dependsOn": [
                              {
                                "activity": "Load Schema Mappings",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "on": {
                                "value": "@last(array(split(pipeline().parameters.blobPath, '.')))",
                                "type": "Expression"
                              },
                              "cases": [
                                {
                                  "value": "csv",
                                  "activities": [
                                    {
                                      "name": "Convert CSV File",
                                      "type": "Copy",
                                      "dependsOn": [],
                                      "policy": {
                                        "timeout": "0.00:10:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                      },
                                      "userProperties": [],
                                      "typeProperties": {
                                        "source": {
                                          "type": "DelimitedTextSource",
                                          "additionalColumns": {
                                            "type": "Expression",
                                            "value": "@activity('Load Schema Mappings').output.firstRow.additionalColumns"
                                          },
                                          "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                          },
                                          "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                          }
                                        },
                                        "sink": {
                                          "type": "ParquetSink",
                                          "storeSettings": {
                                            "type": "AzureBlobFSWriteSettings"
                                          },
                                          "formatSettings": {
                                            "type": "ParquetWriteSettings",
                                            "fileExtension": ".parquet"
                                          }
                                        },
                                        "enableStaging": false,
                                        "parallelCopies": 1,
                                        "validateDataConsistency": false,
                                        "translator": {
                                          "value": "@activity('Load Schema Mappings').output.firstRow.translator",
                                          "type": "Expression"
                                        }
                                      },
                                      "inputs": [
                                        {
                                          "referenceName": "[variables('safeExportContainerName')]",
                                          "type": "DatasetReference",
                                          "parameters": {
                                            "blobPath": {
                                              "value": "@pipeline().parameters.blobPath",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      ],
                                      "outputs": [
                                        {
                                          "referenceName": "[variables('safeIngestionContainerName')]",
                                          "type": "DatasetReference",
                                          "parameters": {
                                            "blobPath": {
                                              "value": "@concat(pipeline().parameters.destinationFolder, '/', pipeline().parameters.destinationFile)",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "gz",
                                  "activities": [
                                    {
                                      "name": "Convert GZip CSV File",
                                      "type": "Copy",
                                      "dependsOn": [],
                                      "policy": {
                                        "timeout": "0.00:10:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                      },
                                      "userProperties": [],
                                      "typeProperties": {
                                        "source": {
                                          "type": "DelimitedTextSource",
                                          "additionalColumns": {
                                            "type": "Expression",
                                            "value": "@activity('Load Schema Mappings').output.firstRow.additionalColumns"
                                          },
                                          "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                          },
                                          "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                          }
                                        },
                                        "sink": {
                                          "type": "ParquetSink",
                                          "storeSettings": {
                                            "type": "AzureBlobFSWriteSettings"
                                          },
                                          "formatSettings": {
                                            "type": "ParquetWriteSettings",
                                            "fileExtension": ".parquet"
                                          }
                                        },
                                        "enableStaging": false,
                                        "parallelCopies": 1,
                                        "validateDataConsistency": false,
                                        "translator": {
                                          "value": "@activity('Load Schema Mappings').output.firstRow.translator",
                                          "type": "Expression"
                                        }
                                      },
                                      "inputs": [
                                        {
                                          "referenceName": "[format('{0}_gzip', variables('safeExportContainerName'))]",
                                          "type": "DatasetReference",
                                          "parameters": {
                                            "blobPath": {
                                              "value": "@pipeline().parameters.blobPath",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      ],
                                      "outputs": [
                                        {
                                          "referenceName": "[variables('safeIngestionContainerName')]",
                                          "type": "DatasetReference",
                                          "parameters": {
                                            "blobPath": {
                                              "value": "@concat(pipeline().parameters.destinationFolder, '/', pipeline().parameters.destinationFile)",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "parquet",
                                  "activities": [
                                    {
                                      "name": "Move Parquet File",
                                      "type": "Copy",
                                      "dependsOn": [],
                                      "policy": {
                                        "timeout": "0.00:05:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                      },
                                      "userProperties": [],
                                      "typeProperties": {
                                        "source": {
                                          "type": "ParquetSource",
                                          "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                          },
                                          "formatSettings": {
                                            "type": "ParquetReadSettings"
                                          }
                                        },
                                        "sink": {
                                          "type": "ParquetSink",
                                          "storeSettings": {
                                            "type": "AzureBlobFSWriteSettings"
                                          },
                                          "formatSettings": {
                                            "type": "ParquetWriteSettings",
                                            "fileExtension": ".parquet"
                                          }
                                        },
                                        "enableStaging": false,
                                        "parallelCopies": 1,
                                        "validateDataConsistency": false
                                      },
                                      "inputs": [
                                        {
                                          "referenceName": "[format('{0}_parquet', variables('safeExportContainerName'))]",
                                          "type": "DatasetReference",
                                          "parameters": {
                                            "blobPath": {
                                              "value": "@pipeline().parameters.blobPath",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      ],
                                      "outputs": [
                                        {
                                          "referenceName": "[variables('safeIngestionContainerName')]",
                                          "type": "DatasetReference",
                                          "parameters": {
                                            "blobPath": {
                                              "value": "@concat(pipeline().parameters.destinationFolder, '/', pipeline().parameters.destinationFile)",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ],
                              "defaultActivities": [
                                {
                                  "name": "Unsupported File Type",
                                  "type": "Fail",
                                  "dependsOn": [],
                                  "userProperties": [],
                                  "typeProperties": {
                                    "message": {
                                      "value": "@concat('Unable to ingest the specified export file because the file type is not supported. File: ', pipeline().parameters.blobPath)",
                                      "type": "Expression"
                                    },
                                    "errorCode": "UnsupportedExportFileType"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "Get Existing Parquet Files",
                            "description": "Get the previously ingested files so we can remove any older data. This is necessary to avoid data duplication in reports.",
                            "type": "GetMetadata",
                            "dependsOn": [],
                            "policy": {
                              "timeout": "0.12:00:00",
                              "retry": 0,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "dataset": {
                                "referenceName": "[format('{0}_files', variables('safeIngestionContainerName'))]",
                                "type": "DatasetReference",
                                "parameters": {
                                  "folderPath": "@pipeline().parameters.destinationFolder"
                                }
                              },
                              "fieldList": [
                                "childItems"
                              ],
                              "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "enablePartitionDiscovery": false
                              },
                              "formatSettings": {
                                "type": "ParquetReadSettings"
                              }
                            }
                          },
                          {
                            "name": "Filter Out Current Exports",
                            "description": "Remove existing files from the current export so those files do not get deleted.",
                            "type": "Filter",
                            "dependsOn": [
                              {
                                "activity": "Get Existing Parquet Files",
                                "dependencyConditions": [
                                  "Completed"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "items": {
                                "value": "@if(contains(activity('Get Existing Parquet Files').output, 'childItems'), activity('Get Existing Parquet Files').output.childItems, json('[]'))",
                                "type": "Expression"
                              },
                              "condition": {
                                "value": "@and(endswith(item().name, '.parquet'), not(startswith(item().name, pipeline().parameters.keepFilePrefix)))",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "For Each Old File",
                            "description": "Loop thru each of the existing files from previous exports.",
                            "type": "ForEach",
                            "dependsOn": [
                              {
                                "activity": "Convert to Parquet",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              },
                              {
                                "activity": "Filter Out Current Exports",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "items": {
                                "value": "@activity('Filter Out Current Exports').output.Value",
                                "type": "Expression"
                              },
                              "activities": [
                                {
                                  "name": "Delete Old Ingested File",
                                  "description": "Delete the previously ingested files from older exports.",
                                  "type": "Delete",
                                  "dependsOn": [],
                                  "policy": {
                                    "timeout": "0.12:00:00",
                                    "retry": 0,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                  },
                                  "userProperties": [],
                                  "typeProperties": {
                                    "dataset": {
                                      "referenceName": "[variables('safeIngestionContainerName')]",
                                      "type": "DatasetReference",
                                      "parameters": {
                                        "blobPath": {
                                          "value": "@concat(pipeline().parameters.destinationFolder, '/', item().name)",
                                          "type": "Expression"
                                        }
                                      }
                                    },
                                    "enableLogging": false,
                                    "storeSettings": {
                                      "type": "AzureBlobFSReadSettings",
                                      "recursive": false,
                                      "enablePartitionDiscovery": false
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "Read Hub Config",
                            "description": "Read the hub config to determine if the export should be retained.",
                            "type": "Lookup",
                            "dependsOn": [],
                            "policy": {
                              "timeout": "0.12:00:00",
                              "retry": 0,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                  "type": "AzureBlobFSReadSettings",
                                  "recursive": false,
                                  "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                  "type": "JsonReadSettings"
                                }
                              },
                              "dataset": {
                                "referenceName": "[variables('safeConfigContainerName')]",
                                "type": "DatasetReference",
                                "parameters": {
                                  "fileName": "settings.json",
                                  "folderPath": "[parameters('configContainerName')]"
                                }
                              }
                            }
                          },
                          {
                            "name": "If Not Retaining Exports",
                            "description": "If the msexports retention period <= 0, delete the source file. The main reason to keep the source file is to allow for troubleshooting and reprocessing in the future.",
                            "type": "IfCondition",
                            "dependsOn": [
                              {
                                "activity": "Convert to Parquet",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              },
                              {
                                "activity": "Read Hub Config",
                                "dependencyConditions": [
                                  "Completed"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "expression": {
                                "value": "@lessOrEquals(coalesce(activity('Read Hub Config').output.firstRow.retention.msexports.days, 0), 0)",
                                "type": "Expression"
                              },
                              "ifTrueActivities": [
                                {
                                  "name": "Delete Source File",
                                  "description": "Delete the exported data file to keep storage costs down. This file is not referenced by any reporting systems.",
                                  "type": "Delete",
                                  "dependsOn": [],
                                  "policy": {
                                    "timeout": "0.12:00:00",
                                    "retry": 0,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                  },
                                  "userProperties": [],
                                  "typeProperties": {
                                    "dataset": {
                                      "referenceName": "[format('{0}_parquet', variables('safeExportContainerName'))]",
                                      "type": "DatasetReference",
                                      "parameters": {
                                        "blobPath": {
                                          "value": "@pipeline().parameters.blobPath",
                                          "type": "Expression"
                                        }
                                      }
                                    },
                                    "enableLogging": false,
                                    "storeSettings": {
                                      "type": "AzureBlobFSReadSettings",
                                      "recursive": true,
                                      "enablePartitionDiscovery": false
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "parameters": {
                          "blobPath": {
                            "type": "String"
                          },
                          "destinationFile": {
                            "type": "string"
                          },
                          "destinationFolder": {
                            "type": "string"
                          },
                          "keepFilePrefix": {
                            "type": "string"
                          },
                          "schemaFile": {
                            "type": "string"
                          }
                        },
                        "variables": {
                          "destinationFile": {
                            "type": "String"
                          }
                        },
                        "annotations": []
                      },
                      "dependsOn": [
                        "dataFactory",
                        "dataset_config",
                        "dataset_ingestion",
                        "dataset_ingestion_files",
                        "dataset_msexports",
                        "dataset_msexports_gzip",
                        "dataset_msexports_parquet"
                      ],
                      "metadata": {
                        "description": "Transforms CSV data to a standard schema and converts to Parquet."
                      }
                    },
                    "startTriggers": {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}_startTriggers', parameters('dataFactoryName'))]",
                      "location": "[if(startsWith(parameters('location'), 'china'), 'chinaeast2', parameters('location'))]",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Resources/deploymentScripts'), parameters('tagsByResource')['Microsoft.Resources/deploymentScripts'], createObject()))]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_triggerManager', parameters('dataFactoryName'))))]": {}
                        }
                      },
                      "kind": "AzurePowerShell",
                      "properties": {
                        "azPowerShellVersion": "8.0",
                        "retentionInterval": "PT1H",
                        "cleanupPreference": "OnSuccess",
                        "scriptContent": "[variables('$fxv#2')]",
                        "environmentVariables": [
                          {
                            "name": "DataFactorySubscriptionId",
                            "value": "[subscription().id]"
                          },
                          {
                            "name": "DataFactoryResourceGroup",
                            "value": "[resourceGroup().name]"
                          },
                          {
                            "name": "DataFactoryName",
                            "value": "[parameters('dataFactoryName')]"
                          },
                          {
                            "name": "Triggers",
                            "value": "[join(variables('allHubTriggers'), '|')]"
                          }
                        ]
                      },
                      "dependsOn": [
                        "dataFactory",
                        "identity",
                        "identityRoleAssignments",
                        "trigger_DailySchedule",
                        "trigger_FileAdded",
                        "trigger_MonthlySchedule",
                        "trigger_SettingsUpdated"
                      ]
                    },
                    "azuretimezones": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "azuretimezones",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "14136384188299968885"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location to use for the managed identity and deployment script to auto-start triggers. Default = (resource group location)."
                              }
                            },
                            "timezoneobject": {
                              "type": "object",
                              "defaultValue": {
                                "australiaeast": "Australian Eastern Standard Time",
                                "australiasoutheast": "Australian Eastern Standard Time",
                                "brazilsouth": "Brasil Standard Time",
                                "canadacentral": "Central Standard Time",
                                "canadaeast": "Eastern Standard Time",
                                "centralindia": "India Standard Time",
                                "centralus": "Central Standard Time",
                                "eastasia": "China Standard Time",
                                "eastus": "Eastern Standard Time",
                                "eastus2": "Eastern Standard Time",
                                "francecentral": "Central European Time",
                                "germanynorth": "Central European Time",
                                "germanywestcentral": "Central European Time",
                                "japaneast": "Japan Standard Time",
                                "japanwest": "Japan Standard Time",
                                "koreacentral": "Korea Standard Time",
                                "koreasouth": "Korea Standard Time",
                                "northcentralus": "Central Standard Time",
                                "northeurope": "Central European Time",
                                "norwayeast": "Central European Time",
                                "norwaywest": "Central European Time",
                                "southcentralus": "Central Standard Time",
                                "southindia": "India Standard Time",
                                "southeastasia": "Singapore Standard Time",
                                "switzerlandnorth": "Central European Time",
                                "switzerlandwest": "Central European Time",
                                "uksouth": "Greenwich Mean Time",
                                "ukwest": "Greenwich Mean Time",
                                "westcentralus": "Central Standard Time",
                                "westeurope": "Central European Time",
                                "westindia": "India Standard Time",
                                "westus": "Pacific Standard Time",
                                "westus2": "Pacific Standard Time"
                              }
                            },
                            "utchrs": {
                              "type": "string",
                              "defaultValue": "[utcNow('hh')]"
                            },
                            "utcmins": {
                              "type": "string",
                              "defaultValue": "[utcNow('mm')]"
                            },
                            "utcsecs": {
                              "type": "string",
                              "defaultValue": "[utcNow('ss')]"
                            }
                          },
                          "variables": {
                            "loc": "[toLower(replace(parameters('location'), ' ', ''))]",
                            "timezone": "[coalesce(tryGet(parameters('timezoneobject'), variables('loc')), 'Universal Coordinated Time')]"
                          },
                          "resources": [],
                          "outputs": {
                            "AzureRegion": {
                              "type": "string",
                              "value": "[parameters('location')]"
                            },
                            "Timezone": {
                              "type": "string",
                              "value": "[variables('timezone')]"
                            },
                            "UtcHours": {
                              "type": "string",
                              "value": "[parameters('utchrs')]"
                            },
                            "UtcMinutes": {
                              "type": "string",
                              "value": "[parameters('utcmins')]"
                            },
                            "UtcSeconds": {
                              "type": "string",
                              "value": "[parameters('utcsecs')]"
                            }
                          }
                        }
                      }
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The Resource ID of the Data factory."
                      },
                      "value": "[resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The Name of the Azure Data Factory instance."
                      },
                      "value": "[parameters('dataFactoryName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]",
                "[resourceId('Microsoft.Resources/deployments', 'keyVault')]",
                "[resourceId('Microsoft.Resources/deployments', 'storage')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "keyVault",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "hubName": {
                    "value": "[parameters('hubName')]"
                  },
                  "uniqueSuffix": {
                    "value": "[variables('uniqueSuffix')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[variables('resourceTags')]"
                  },
                  "tagsByResource": {
                    "value": "[parameters('tagsByResource')]"
                  },
                  "storageAccountKey": {
                    "value": "[parameters('remoteHubStorageKey')]"
                  },
                  "accessPolicies": {
                    "value": [
                      {
                        "objectId": "[reference(resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName')), '2018-06-01', 'full').identity.principalId]",
                        "tenantId": "[subscription().tenantId]",
                        "permissions": {
                          "secrets": [
                            "get"
                          ]
                        }
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "14731661584528957809"
                    }
                  },
                  "parameters": {
                    "hubName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the hub. Used to ensure unique resource names."
                      }
                    },
                    "uniqueSuffix": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Suffix to add to the KeyVault instance name to ensure uniqueness."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "accessPolicies": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of access policies object."
                      }
                    },
                    "storageAccountKey": {
                      "type": "securestring",
                      "metadata": {
                        "description": "Optional. Create and store a key for a remote storage account."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "premium",
                      "allowedValues": [
                        "premium",
                        "standard"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies the SKU for the vault."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Resource tags."
                      }
                    },
                    "tagsByResource": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to apply to resources based on their resource type. Resource type specific tags will be merged with tags for all resources."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedAccessPolicies",
                        "count": "[length(parameters('accessPolicies'))]",
                        "input": {
                          "applicationId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'applicationId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].applicationId, '')]",
                          "objectId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'objectId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].objectId, '')]",
                          "permissions": "[parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].permissions]",
                          "tenantId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'tenantId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].tenantId, tenant().tenantId)]"
                        }
                      }
                    ],
                    "keyVaultPrefix": "[format('{0}-vault', replace(parameters('hubName'), '_', '-'))]",
                    "keyVaultSuffix": "[format('-{0}', parameters('uniqueSuffix'))]",
                    "keyVaultName": "[replace(format('{0}{1}', take(variables('keyVaultPrefix'), sub(24, length(variables('keyVaultSuffix')))), variables('keyVaultSuffix')), '--', '-')]",
                    "keyVaultSecretName": "[format('{0}-storage-key', toLower(parameters('hubName')))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2023-02-01",
                      "name": "[variables('keyVaultName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.KeyVault/vaults'), parameters('tagsByResource')['Microsoft.KeyVault/vaults'], createObject()))]",
                      "properties": {
                        "enabledForDeployment": true,
                        "enabledForTemplateDeployment": true,
                        "enabledForDiskEncryption": true,
                        "enableSoftDelete": true,
                        "softDeleteRetentionInDays": 90,
                        "enableRbacAuthorization": false,
                        "createMode": "default",
                        "tenantId": "[subscription().tenantId]",
                        "accessPolicies": "[variables('formattedAccessPolicies')]",
                        "sku": {
                          "name": "[if(startsWith(parameters('location'), 'china'), 'standard', parameters('sku'))]",
                          "family": "A"
                        }
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('accessPolicies')))]",
                      "type": "Microsoft.KeyVault/vaults/accessPolicies",
                      "apiVersion": "2023-02-01",
                      "name": "[format('{0}/{1}', variables('keyVaultName'), 'add')]",
                      "properties": {
                        "accessPolicies": "[variables('formattedAccessPolicies')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('storageAccountKey')))]",
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2023-02-01",
                      "name": "[format('{0}/{1}', variables('keyVaultName'), variables('keyVaultSecretName'))]",
                      "properties": {
                        "attributes": {
                          "enabled": true,
                          "exp": 1702648632,
                          "nbf": 10000
                        },
                        "value": "[parameters('storageAccountKey')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the key vault."
                      },
                      "value": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the key vault."
                      },
                      "value": "[variables('keyVaultName')]"
                    },
                    "uri": {
                      "type": "string",
                      "metadata": {
                        "description": "The URI of the key vault."
                      },
                      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '2023-02-01').vaultUri]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the deployed hub instance."
              },
              "value": "[parameters('hubName')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure resource location resources were deployed to."
              },
              "value": "[parameters('location')]"
            },
            "dataFactorytName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Data Factory."
              },
              "value": "[variables('dataFactoryName')]"
            },
            "storageAccountId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the storage account created for the hub instance. This must be used when creating the Cost Management export."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.resourceId.value]"
            },
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Name of the storage account created for the hub instance. This must be used when connecting FinOps toolkit Power BI reports to your data."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.name.value]"
            },
            "storageUrlForPowerBI": {
              "type": "string",
              "metadata": {
                "description": "URL to use when connecting custom Power BI reports to your data."
              },
              "value": "[format('https://{0}.dfs.{1}/{2}', reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.name.value, environment().suffixes.storage, reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.ingestionContainer.value)]"
            },
            "managedIdentityId": {
              "type": "string",
              "metadata": {
                "description": "Object ID of the Data Factory managed identity. This will be needed when configuring managed exports."
              },
              "value": "[reference(resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName')), '2018-06-01', 'full').identity.principalId]"
            },
            "managedIdentityTenantId": {
              "type": "string",
              "metadata": {
                "description": "Azure AD tenant ID. This will be needed when configuring managed exports."
              },
              "value": "[tenant().tenantId]"
            }
          }
        }
      }
    }
  ],
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the resource group."
      },
      "value": "[parameters('hubName')]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the resources wer deployed to."
      },
      "value": "[parameters('location')]"
    },
    "dataFactorytName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Data Factory."
      },
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hub'), '2022-09-01').outputs.dataFactorytName.value]"
    },
    "storageAccountId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the deployed storage account."
      },
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hub'), '2022-09-01').outputs.storageAccountId.value]"
    },
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Name of the storage account created for the hub instance. This must be used when connecting FinOps toolkit Power BI reports to your data."
      },
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hub'), '2022-09-01').outputs.storageAccountName.value]"
    },
    "storageUrlForPowerBI": {
      "type": "string",
      "metadata": {
        "description": "URL to use when connecting custom Power BI reports to your data."
      },
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hub'), '2022-09-01').outputs.storageUrlForPowerBI.value]"
    },
    "managedIdentityId": {
      "type": "string",
      "metadata": {
        "description": "Object ID of the Data Factory managed identity. This will be needed when configuring managed exports."
      },
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hub'), '2022-09-01').outputs.managedIdentityId.value]"
    },
    "managedIdentityTenantId": {
      "type": "string",
      "metadata": {
        "description": "Azure AD tenant ID. This will be needed when configuring managed exports."
      },
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hub'), '2022-09-01').outputs.managedIdentityTenantId.value]"
    }
  }
}