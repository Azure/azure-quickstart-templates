{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.31.92.45157",
      "templateHash": "16654793504325852733"
    }
  },
  "parameters": {
    "hubName": {
      "type": "string",
      "metadata": {
        "description": "Optional. Name of the hub. Used to ensure unique resource names. Default: \"finops-hub\"."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Azure location where all resources should be created. See https://aka.ms/azureregions. Default: Same as deployment."
      }
    },
    "storageSku": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Premium_ZRS"
      ],
      "metadata": {
        "description": "Optional. Storage SKU to use. LRS = Lowest cost, ZRS = High availability. Note Standard SKUs are not available for Data Lake gen2 storage. Allowed: Premium_LRS, Premium_ZRS. Default: Premium_LRS."
      }
    },
    "enableInfrastructureEncryption": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable infrastructure encryption on the storage account. Default = false."
      }
    },
    "remoteHubStorageUri": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Storage account to push data to for ingestion into a remote hub."
      }
    },
    "remoteHubStorageKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Storage account key to use when pushing data to a remote hub."
      }
    },
    "dataExplorerName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Name of the Azure Data Explorer cluster to use for advanced analytics. If empty, Azure Data Explorer will not be deployed. Required to use with Power BI if you have more than $2-5M/mo in costs being monitored. Default: \"\" (do not use)."
      }
    },
    "dataExplorerSku": {
      "type": "string",
      "defaultValue": "Dev(No SLA)_Standard_D11_v2",
      "allowedValues": [
        "Dev(No SLA)_Standard_E2a_v4",
        "Dev(No SLA)_Standard_D11_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_D16d_v5",
        "Standard_D32d_v4",
        "Standard_D32d_v5",
        "Standard_DS13_v2+1TB_PS",
        "Standard_DS13_v2+2TB_PS",
        "Standard_DS14_v2+3TB_PS",
        "Standard_DS14_v2+4TB_PS",
        "Standard_E2a_v4",
        "Standard_E2ads_v5",
        "Standard_E2d_v4",
        "Standard_E2d_v5",
        "Standard_E4a_v4",
        "Standard_E4ads_v5",
        "Standard_E4d_v4",
        "Standard_E4d_v5",
        "Standard_E8a_v4",
        "Standard_E8ads_v5",
        "Standard_E8as_v4+1TB_PS",
        "Standard_E8as_v4+2TB_PS",
        "Standard_E8as_v5+1TB_PS",
        "Standard_E8as_v5+2TB_PS",
        "Standard_E8d_v4",
        "Standard_E8d_v5",
        "Standard_E8s_v4+1TB_PS",
        "Standard_E8s_v4+2TB_PS",
        "Standard_E8s_v5+1TB_PS",
        "Standard_E8s_v5+2TB_PS",
        "Standard_E16a_v4",
        "Standard_E16ads_v5",
        "Standard_E16as_v4+3TB_PS",
        "Standard_E16as_v4+4TB_PS",
        "Standard_E16as_v5+3TB_PS",
        "Standard_E16as_v5+4TB_PS",
        "Standard_E16d_v4",
        "Standard_E16d_v5",
        "Standard_E16s_v4+3TB_PS",
        "Standard_E16s_v4+4TB_PS",
        "Standard_E16s_v5+3TB_PS",
        "Standard_E16s_v5+4TB_PS",
        "Standard_E64i_v3",
        "Standard_E80ids_v4",
        "Standard_EC8ads_v5",
        "Standard_EC8as_v5+1TB_PS",
        "Standard_EC8as_v5+2TB_PS",
        "Standard_EC16ads_v5",
        "Standard_EC16as_v5+3TB_PS",
        "Standard_EC16as_v5+4TB_PS",
        "Standard_L4s",
        "Standard_L8as_v3",
        "Standard_L8s",
        "Standard_L8s_v2",
        "Standard_L8s_v3",
        "Standard_L16as_v3",
        "Standard_L16s",
        "Standard_L16s_v2",
        "Standard_L16s_v3",
        "Standard_L32as_v3",
        "Standard_L32s_v3"
      ],
      "metadata": {
        "description": "Optional. Name of the Azure Data Explorer SKU. Default: \"Dev(No SLA)_Standard_D11_v2\"."
      }
    },
    "dataExplorerCapacity": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 1000,
      "metadata": {
        "description": "Optional. Number of nodes to use in the cluster. Allowed values: 1 for the Basic SKU tier and 2-1000 for Standard. Default: 1 for dev/test SKUs, 2 for standard SKUs."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Tags to apply to all resources. We will also add the cm-resource-parent tag for improved cost roll-ups in Cost Management."
      }
    },
    "tagsByResource": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Tags to apply to resources based on their resource type. Resource type specific tags will be merged with tags for all resources."
      }
    },
    "scopesToMonitor": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. List of scope IDs to monitor and ingest cost for."
      }
    },
    "exportRetentionInDays": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Optional. Number of days of data to retain in the msexports container. Default: 0."
      }
    },
    "ingestionRetentionInMonths": {
      "type": "int",
      "defaultValue": 13,
      "metadata": {
        "description": "Optional. Number of months of data to retain in the ingestion container. Default: 13."
      }
    },
    "dataExplorerRawRetentionInDays": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Optional. Number of days of data to retain in the Data Explorer *_raw tables. Default: 0."
      }
    },
    "dataExplorerFinalRetentionInMonths": {
      "type": "int",
      "defaultValue": 13,
      "metadata": {
        "description": "Optional. Number of months of data to retain in the Data Explorer *_final_v* tables. Default: 13."
      }
    },
    "enablePublicAccess": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable public access to FinOps hubs resources.  Default: true."
      }
    },
    "virtualNetworkAddressPrefix": {
      "type": "string",
      "defaultValue": "10.20.30.0/26",
      "metadata": {
        "description": "Optional. Address space for the workload. A /26 is required for the workload. Default: \"10.20.30.0/26\"."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "hub",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "hubName": {
            "value": "[parameters('hubName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "storageSku": {
            "value": "[parameters('storageSku')]"
          },
          "enableInfrastructureEncryption": {
            "value": "[parameters('enableInfrastructureEncryption')]"
          },
          "dataExplorerName": {
            "value": "[parameters('dataExplorerName')]"
          },
          "dataExplorerSku": {
            "value": "[parameters('dataExplorerSku')]"
          },
          "dataExplorerCapacity": {
            "value": "[parameters('dataExplorerCapacity')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "tagsByResource": {
            "value": "[parameters('tagsByResource')]"
          },
          "scopesToMonitor": {
            "value": "[parameters('scopesToMonitor')]"
          },
          "exportRetentionInDays": {
            "value": "[parameters('exportRetentionInDays')]"
          },
          "ingestionRetentionInMonths": {
            "value": "[parameters('ingestionRetentionInMonths')]"
          },
          "dataExplorerRawRetentionInDays": {
            "value": "[parameters('dataExplorerRawRetentionInDays')]"
          },
          "dataExplorerFinalRetentionInMonths": {
            "value": "[parameters('dataExplorerFinalRetentionInMonths')]"
          },
          "remoteHubStorageUri": {
            "value": "[parameters('remoteHubStorageUri')]"
          },
          "remoteHubStorageKey": {
            "value": "[parameters('remoteHubStorageKey')]"
          },
          "enablePublicAccess": {
            "value": "[parameters('enablePublicAccess')]"
          },
          "virtualNetworkAddressPrefix": {
            "value": "[parameters('virtualNetworkAddressPrefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.92.45157",
              "templateHash": "1967767240641406879"
            }
          },
          "parameters": {
            "hubName": {
              "type": "string",
              "metadata": {
                "description": "Optional. Name of the hub. Used to ensure unique resource names. Default: \"finops-hub\"."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Azure location where all resources should be created. See https://aka.ms/azureregions. Default: (resource group location)."
              }
            },
            "storageSku": {
              "type": "string",
              "defaultValue": "Premium_LRS",
              "allowedValues": [
                "Premium_LRS",
                "Premium_ZRS"
              ],
              "metadata": {
                "description": "Optional. Storage SKU to use. LRS = Lowest cost, ZRS = High availability. Note Standard SKUs are not available for Data Lake gen2 storage. Allowed: Premium_LRS, Premium_ZRS. Default: Premium_LRS."
              }
            },
            "enableInfrastructureEncryption": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enable infrastructure encryption on the storage account. Default = false."
              }
            },
            "remoteHubStorageUri": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Remote storage account for ingestion dataset."
              }
            },
            "remoteHubStorageKey": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Storage account key for remote storage account."
              }
            },
            "dataExplorerName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the Azure Data Explorer cluster to use for advanced analytics. If empty, Azure Data Explorer will not be deployed. Required to use with Power BI if you have more than $2-5M/mo in costs being monitored. Default: \"\" (do not use)."
              }
            },
            "dataExplorerSku": {
              "type": "string",
              "defaultValue": "Dev(No SLA)_Standard_D11_v2",
              "allowedValues": [
                "Dev(No SLA)_Standard_E2a_v4",
                "Dev(No SLA)_Standard_D11_v2",
                "Standard_D11_v2",
                "Standard_D12_v2",
                "Standard_D13_v2",
                "Standard_D14_v2",
                "Standard_D16d_v5",
                "Standard_D32d_v4",
                "Standard_D32d_v5",
                "Standard_DS13_v2+1TB_PS",
                "Standard_DS13_v2+2TB_PS",
                "Standard_DS14_v2+3TB_PS",
                "Standard_DS14_v2+4TB_PS",
                "Standard_E2a_v4",
                "Standard_E2ads_v5",
                "Standard_E2d_v4",
                "Standard_E2d_v5",
                "Standard_E4a_v4",
                "Standard_E4ads_v5",
                "Standard_E4d_v4",
                "Standard_E4d_v5",
                "Standard_E8a_v4",
                "Standard_E8ads_v5",
                "Standard_E8as_v4+1TB_PS",
                "Standard_E8as_v4+2TB_PS",
                "Standard_E8as_v5+1TB_PS",
                "Standard_E8as_v5+2TB_PS",
                "Standard_E8d_v4",
                "Standard_E8d_v5",
                "Standard_E8s_v4+1TB_PS",
                "Standard_E8s_v4+2TB_PS",
                "Standard_E8s_v5+1TB_PS",
                "Standard_E8s_v5+2TB_PS",
                "Standard_E16a_v4",
                "Standard_E16ads_v5",
                "Standard_E16as_v4+3TB_PS",
                "Standard_E16as_v4+4TB_PS",
                "Standard_E16as_v5+3TB_PS",
                "Standard_E16as_v5+4TB_PS",
                "Standard_E16d_v4",
                "Standard_E16d_v5",
                "Standard_E16s_v4+3TB_PS",
                "Standard_E16s_v4+4TB_PS",
                "Standard_E16s_v5+3TB_PS",
                "Standard_E16s_v5+4TB_PS",
                "Standard_E64i_v3",
                "Standard_E80ids_v4",
                "Standard_EC8ads_v5",
                "Standard_EC8as_v5+1TB_PS",
                "Standard_EC8as_v5+2TB_PS",
                "Standard_EC16ads_v5",
                "Standard_EC16as_v5+3TB_PS",
                "Standard_EC16as_v5+4TB_PS",
                "Standard_L4s",
                "Standard_L8as_v3",
                "Standard_L8s",
                "Standard_L8s_v2",
                "Standard_L8s_v3",
                "Standard_L16as_v3",
                "Standard_L16s",
                "Standard_L16s_v2",
                "Standard_L16s_v3",
                "Standard_L32as_v3",
                "Standard_L32s_v3"
              ],
              "metadata": {
                "description": "Optional. Name of the Azure Data Explorer SKU. Default: \"Dev(No SLA)_Standard_D11_v2\"."
              }
            },
            "dataExplorerCapacity": {
              "type": "int",
              "defaultValue": 1,
              "minValue": 1,
              "maxValue": 1000,
              "metadata": {
                "description": "Optional. Number of nodes to use in the cluster. Allowed values: 1 for the Basic SKU tier and 2-1000 for Standard. Default: 1 for dev/test SKUs, 2 for standard SKUs."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to apply to all resources. We will also add the cm-resource-parent tag for improved cost roll-ups in Cost Management."
              }
            },
            "tagsByResource": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to apply to resources based on their resource type. Resource type specific tags will be merged with tags for all resources."
              }
            },
            "scopesToMonitor": {
              "type": "array",
              "metadata": {
                "description": "Optional. List of scope IDs to monitor and ingest cost for."
              }
            },
            "exportRetentionInDays": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. Number of days of data to retain in the msexports container. Default: 0."
              }
            },
            "ingestionRetentionInMonths": {
              "type": "int",
              "defaultValue": 13,
              "metadata": {
                "description": "Optional. Number of months of data to retain in the ingestion container. Default: 13."
              }
            },
            "dataExplorerRawRetentionInDays": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. Number of days of data to retain in the Data Explorer *_raw tables. Default: 0."
              }
            },
            "dataExplorerFinalRetentionInMonths": {
              "type": "int",
              "defaultValue": 13,
              "metadata": {
                "description": "Optional. Number of months of data to retain in the Data Explorer *_final_v* tables. Default: 13."
              }
            },
            "enablePublicAccess": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable public access to the data lake. Default: true."
              }
            },
            "virtualNetworkAddressPrefix": {
              "type": "string",
              "defaultValue": "10.20.30.0/26",
              "metadata": {
                "description": "Optional. Address space for the workload. A /26 is required for the workload. Default: \"10.20.30.0/26\"."
              }
            },
            "enableDefaultTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable telemetry to track anonymous module usage trends, monitor for bugs, and improve future releases."
              }
            }
          },
          "variables": {
            "finOpsToolkitVersion": "0.7\r\n",
            "resourceTags": "[union(parameters('tags'), createObject('cm-resource-parent', format('{0}/providers/Microsoft.Cloud/hubs/{1}', resourceGroup().id, parameters('hubName')), 'ftk-version', variables('finOpsToolkitVersion'), 'ftk-tool', 'FinOps hubs'))]",
            "uniqueSuffix": "[uniqueString(parameters('hubName'), resourceGroup().id)]",
            "dataFactoryPrefix": "[format('{0}-engine', replace(parameters('hubName'), '_', '-'))]",
            "dataFactorySuffix": "[format('-{0}', variables('uniqueSuffix'))]",
            "dataFactoryName": "[replace(format('{0}{1}', take(variables('dataFactoryPrefix'), sub(63, length(variables('dataFactorySuffix')))), variables('dataFactorySuffix')), '--', '-')]",
            "deployDataExplorer": "[not(empty(parameters('dataExplorerName')))]",
            "telemetryId": "00f120b5-2007-6120-0000-40b000000000"
          },
          "resources": [
            {
              "condition": "[parameters('enableDefaultTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('pid-{0}-{1}', variables('telemetryId'), uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "FinOps toolkit",
                      "version": "[variables('finOpsToolkitVersion')]"
                    }
                  },
                  "resources": []
                }
              }
            },
            {
              "type": "Microsoft.DataFactory/factories",
              "apiVersion": "2018-06-01",
              "name": "[variables('dataFactoryName')]",
              "location": "[parameters('location')]",
              "tags": "[union(variables('resourceTags'), if(contains(parameters('tagsByResource'), 'Microsoft.DataFactory/factories'), parameters('tagsByResource')['Microsoft.DataFactory/factories'], createObject()))]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "globalConfigurations": {
                  "PipelineBillingEnabled": "true"
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "vnet",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "hubName": {
                    "value": "[parameters('hubName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "virtualNetworkAddressPrefix": {
                    "value": "[parameters('virtualNetworkAddressPrefix')]"
                  },
                  "tags": {
                    "value": "[variables('resourceTags')]"
                  },
                  "tagsByResource": {
                    "value": "[parameters('tagsByResource')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.31.92.45157",
                      "templateHash": "7858400878780888358"
                    }
                  },
                  "parameters": {
                    "hubName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the hub. Used to ensure unique resource names."
                      }
                    },
                    "virtualNetworkAddressPrefix": {
                      "type": "string",
                      "defaultValue": "10.20.30.0/26",
                      "metadata": {
                        "description": "Optional. Address space for the workload. A /26 is required for the workload. Default: \"10.20.30.0/26\"."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Azure location where all resources should be created. See https://aka.ms/azureregions. Default: (resource group location)."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to apply to all resources."
                      }
                    },
                    "tagsByResource": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to apply to resources based on their resource type. Resource type specific tags will be merged with tags for all resources."
                      }
                    }
                  },
                  "variables": {
                    "safeHubName": "[replace(replace(toLower(parameters('hubName')), '-', ''), '_', '')]",
                    "vNetName": "[format('{0}-vnet-{1}', variables('safeHubName'), parameters('location'))]",
                    "nsgName": "[format('{0}-nsg', variables('vNetName'))]",
                    "subnets": [
                      {
                        "name": "private-endpoint-subnet",
                        "properties": {
                          "addressPrefix": "[cidrSubnet(parameters('virtualNetworkAddressPrefix'), 28, 0)]",
                          "networkSecurityGroup": {
                            "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                          },
                          "serviceEndpoints": [
                            {
                              "service": "Microsoft.Storage"
                            }
                          ]
                        }
                      },
                      {
                        "name": "script-subnet",
                        "properties": {
                          "addressPrefix": "[cidrSubnet(parameters('virtualNetworkAddressPrefix'), 28, 1)]",
                          "networkSecurityGroup": {
                            "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                          },
                          "delegations": [
                            {
                              "name": "Microsoft.ContainerInstance/containerGroups",
                              "properties": {
                                "serviceName": "Microsoft.ContainerInstance/containerGroups"
                              }
                            }
                          ],
                          "serviceEndpoints": [
                            {
                              "service": "Microsoft.Storage"
                            }
                          ]
                        }
                      },
                      {
                        "name": "dataExplorer-subnet",
                        "properties": {
                          "addressPrefix": "[cidrSubnet(parameters('virtualNetworkAddressPrefix'), 27, 1)]",
                          "networkSecurityGroup": {
                            "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2023-11-01",
                      "name": "[variables('nsgName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Storage/networkSecurityGroups'), parameters('tagsByResource')['Microsoft.Storage/networkSecurityGroups'], createObject()))]",
                      "properties": {
                        "securityRules": [
                          {
                            "name": "AllowVnetInBound",
                            "properties": {
                              "priority": 100,
                              "direction": "Inbound",
                              "access": "Allow",
                              "protocol": "*",
                              "sourcePortRange": "*",
                              "destinationPortRange": "*",
                              "sourceAddressPrefix": "VirtualNetwork",
                              "destinationAddressPrefix": "VirtualNetwork"
                            }
                          },
                          {
                            "name": "AllowAzureLoadBalancerInBound",
                            "properties": {
                              "priority": 200,
                              "direction": "Inbound",
                              "access": "Allow",
                              "protocol": "*",
                              "sourcePortRange": "*",
                              "destinationPortRange": "*",
                              "sourceAddressPrefix": "AzureLoadBalancer",
                              "destinationAddressPrefix": "*"
                            }
                          },
                          {
                            "name": "DenyAllInBound",
                            "properties": {
                              "priority": 4096,
                              "direction": "Inbound",
                              "access": "Deny",
                              "protocol": "*",
                              "sourcePortRange": "*",
                              "destinationPortRange": "*",
                              "sourceAddressPrefix": "*",
                              "destinationAddressPrefix": "*"
                            }
                          },
                          {
                            "name": "AllowVnetOutBound",
                            "properties": {
                              "priority": 100,
                              "direction": "Outbound",
                              "access": "Allow",
                              "protocol": "*",
                              "sourcePortRange": "*",
                              "destinationPortRange": "*",
                              "sourceAddressPrefix": "VirtualNetwork",
                              "destinationAddressPrefix": "VirtualNetwork"
                            }
                          },
                          {
                            "name": "AllowInternetOutBound",
                            "properties": {
                              "priority": 200,
                              "direction": "Outbound",
                              "access": "Allow",
                              "protocol": "*",
                              "sourcePortRange": "*",
                              "destinationPortRange": "*",
                              "sourceAddressPrefix": "*",
                              "destinationAddressPrefix": "Internet"
                            }
                          },
                          {
                            "name": "DenyAllOutBound",
                            "properties": {
                              "priority": 4096,
                              "direction": "Outbound",
                              "access": "Deny",
                              "protocol": "*",
                              "sourcePortRange": "*",
                              "destinationPortRange": "*",
                              "sourceAddressPrefix": "*",
                              "destinationAddressPrefix": "*"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2023-11-01",
                      "name": "[variables('vNetName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Storage/virtualNetworks'), parameters('tagsByResource')['Microsoft.Storage/virtualNetworks'], createObject()))]",
                      "properties": {
                        "addressSpace": {
                          "addressPrefixes": [
                            "[parameters('virtualNetworkAddressPrefix')]"
                          ]
                        },
                        "subnets": "[variables('subnets')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "vNetId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))]"
                    },
                    "vNetName": {
                      "type": "string",
                      "value": "[variables('vNetName')]"
                    },
                    "vNetAddressSpace": {
                      "type": "array",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vNetName')), '2023-11-01').addressSpace.addressPrefixes]"
                    },
                    "vNetSubnets": {
                      "type": "array",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vNetName')), '2023-11-01').subnets]"
                    },
                    "finopsHubSubnetId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vNetName')), '2023-11-01').subnets[0].id]"
                    },
                    "scriptSubnetId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vNetName')), '2023-11-01').subnets[1].id]"
                    },
                    "dataExplorerSubnetId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vNetName')), '2023-11-01').subnets[2].id]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "storage",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "hubName": {
                    "value": "[parameters('hubName')]"
                  },
                  "uniqueSuffix": {
                    "value": "[variables('uniqueSuffix')]"
                  },
                  "sku": {
                    "value": "[parameters('storageSku')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[variables('resourceTags')]"
                  },
                  "tagsByResource": {
                    "value": "[parameters('tagsByResource')]"
                  },
                  "enableInfrastructureEncryption": {
                    "value": "[parameters('enableInfrastructureEncryption')]"
                  },
                  "scopesToMonitor": {
                    "value": "[parameters('scopesToMonitor')]"
                  },
                  "msexportRetentionInDays": {
                    "value": "[parameters('exportRetentionInDays')]"
                  },
                  "ingestionRetentionInMonths": {
                    "value": "[parameters('ingestionRetentionInMonths')]"
                  },
                  "rawRetentionInDays": {
                    "value": "[parameters('dataExplorerRawRetentionInDays')]"
                  },
                  "finalRetentionInMonths": {
                    "value": "[parameters('dataExplorerFinalRetentionInMonths')]"
                  },
                  "virtualNetworkId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.vNetId.value]"
                  },
                  "privateEndpointSubnetId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.finopsHubSubnetId.value]"
                  },
                  "scriptSubnetId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.scriptSubnetId.value]"
                  },
                  "enablePublicAccess": {
                    "value": "[parameters('enablePublicAccess')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.31.92.45157",
                      "templateHash": "4146773717126465176"
                    }
                  },
                  "parameters": {
                    "hubName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the FinOps hub instance. Used to ensure unique resource names."
                      }
                    },
                    "uniqueSuffix": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Suffix to add to the storage account name to ensure uniqueness."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Azure location where all resources should be created. See https://aka.ms/azureregions. Default: (resource group location)."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "Premium_LRS",
                      "allowedValues": [
                        "Premium_LRS",
                        "Premium_ZRS"
                      ],
                      "metadata": {
                        "description": "Optional. Storage SKU to use. LRS = Lowest cost, ZRS = High availability. Note Standard SKUs are not available for Data Lake gen2 storage. Allowed: Premium_LRS, Premium_ZRS. Default: Premium_LRS."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to apply to all resources."
                      }
                    },
                    "tagsByResource": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to apply to resources based on their resource type. Resource type specific tags will be merged with tags for all resources."
                      }
                    },
                    "scopesToMonitor": {
                      "type": "array",
                      "metadata": {
                        "description": "Optional. List of scope IDs to monitor and ingest cost for."
                      }
                    },
                    "msexportRetentionInDays": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. Number of days of data to retain in the msexports container. Default: 0."
                      }
                    },
                    "ingestionRetentionInMonths": {
                      "type": "int",
                      "defaultValue": 13,
                      "metadata": {
                        "description": "Optional. Number of months of data to retain in the ingestion container. Default: 13."
                      }
                    },
                    "enableInfrastructureEncryption": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enable infrastructure encryption on the storage account. Default = false."
                      }
                    },
                    "rawRetentionInDays": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. Number of days of data to retain in the Data Explorer *_raw tables. Default: 0."
                      }
                    },
                    "finalRetentionInMonths": {
                      "type": "int",
                      "defaultValue": 13,
                      "metadata": {
                        "description": "Optional. Number of months of data to retain in the Data Explorer *_final_v* tables. Default: 13."
                      }
                    },
                    "virtualNetworkId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Id of the virtual network for private endpoints."
                      }
                    },
                    "privateEndpointSubnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Id of the subnet for private endpoints."
                      }
                    },
                    "scriptSubnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Id of the virtual network for running deployment scripts."
                      }
                    },
                    "enablePublicAccess": {
                      "type": "bool",
                      "metadata": {
                        "description": "Optional. Enable public access to the data lake.  Default: false."
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "{\r\n  \"additionalColumns\": [],\r\n  \"translator\": {\r\n    \"type\": \"TabularTranslator\",\r\n    \"mappings\": [\r\n      {\r\n        \"source\": { \"name\": \"BilledCost\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"BilledCost\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingAccountId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingAccountId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingAccountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingAccountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingAccountType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingAccountType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingCurrency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingCurrency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingPeriodEnd\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"BillingPeriodEnd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingPeriodStart\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"BillingPeriodStart\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargeCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ChargeCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargeClass\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ChargeClass\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargeDescription\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ChargeDescription\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargeFrequency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ChargeFrequency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargePeriodEnd\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"ChargePeriodEnd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargePeriodStart\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"ChargePeriodStart\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CommitmentDiscountCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CommitmentDiscountCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CommitmentDiscountId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CommitmentDiscountId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CommitmentDiscountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CommitmentDiscountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CommitmentDiscountStatus\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CommitmentDiscountStatus\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CommitmentDiscountType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CommitmentDiscountType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ConsumedQuantity\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"ConsumedQuantity\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ConsumedUnit\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ConsumedUnit\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ContractedCost\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"ContractedCost\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ContractedUnitPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"ContractedUnitPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"EffectiveCost\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"EffectiveCost\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"InvoiceIssuerName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"InvoiceIssuerName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ListCost\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"ListCost\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ListUnitPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"ListUnitPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PricingCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PricingCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PricingQuantity\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"PricingQuantity\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PricingUnit\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PricingUnit\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ProviderName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ProviderName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PublisherName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PublisherName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"RegionId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"RegionId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"RegionName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"RegionName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ResourceId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ResourceId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ResourceName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ResourceName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ResourceType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ResourceType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ServiceCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ServiceCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ServiceName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ServiceName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SkuId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SkuId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SkuPriceId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SkuPriceId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SubAccountId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SubAccountId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SubAccountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SubAccountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SubAccountType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SubAccountType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Tags\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Tags\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_AccountId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_AccountId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_AccountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_AccountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_AccountOwnerId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_AccountOwnerId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BilledCostInUsd\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_BilledCostInUsd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BilledUnitPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_BilledUnitPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingAccountId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_BillingAccountId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingAccountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_BillingAccountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingExchangeRate\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_BillingExchangeRate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingExchangeRateDate\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"x_BillingExchangeRateDate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingProfileId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_BillingProfileId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingProfileName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_BillingProfileName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ContractedCostInUsd\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_ContractedCostInUsd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_CostAllocationRuleName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_CostAllocationRuleName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_CostCenter\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_CostCenter\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_CustomerId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_CustomerId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_CustomerName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_CustomerName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_EffectiveCostInUsd\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_EffectiveCostInUsd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_EffectiveUnitPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_EffectiveUnitPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_InvoiceId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_InvoiceId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_InvoiceIssuerId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_InvoiceIssuerId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_InvoiceSectionId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_InvoiceSectionId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_InvoiceSectionName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_InvoiceSectionName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ListCostInUsd\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_ListCostInUsd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PartnerCreditApplied\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PartnerCreditApplied\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PartnerCreditRate\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PartnerCreditRate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PricingBlockSize\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_PricingBlockSize\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PricingCurrency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PricingCurrency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PricingSubcategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PricingSubcategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PricingUnitDescription\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PricingUnitDescription\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PublisherCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PublisherCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PublisherId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PublisherId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ResellerId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_ResellerId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ResellerName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_ResellerName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ResourceGroupName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_ResourceGroupName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ResourceType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_ResourceType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ServicePeriodEnd\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"x_ServicePeriodEnd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ServicePeriodStart\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"x_ServicePeriodStart\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuDescription\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuDescription\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuDetails\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuDetails\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuIsCreditEligible\", \"type\": \"Boolean\" },\r\n        \"sink\": { \"name\": \"x_SkuIsCreditEligible\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuMeterCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuMeterCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuMeterId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuMeterId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuMeterName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuMeterName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuMeterSubcategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuMeterSubcategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuOfferId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuOfferId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuOrderId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuOrderId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuOrderName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuOrderName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuPartNumber\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuPartNumber\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuRegion\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuRegion\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuServiceFamily\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuServiceFamily\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuTerm\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuTerm\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuTier\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuTier\" }\r\n      }\r\n    ]\r\n  }\r\n}\r\n",
                    "$fxv#1": "{\r\n  \"additionalColumns\": [],\r\n  \"translator\": {\r\n    \"type\": \"TabularTranslator\",\r\n    \"mappings\": [\r\n      {\r\n        \"source\": { \"name\": \"BilledCost\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"BilledCost\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingAccountId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingAccountId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingAccountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingAccountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingAccountType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingAccountType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingCurrency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingCurrency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingPeriodEnd\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"BillingPeriodEnd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingPeriodStart\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"BillingPeriodStart\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargeCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ChargeCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargeClass\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ChargeClass\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargeDescription\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ChargeDescription\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargeFrequency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ChargeFrequency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargePeriodEnd\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"ChargePeriodEnd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargePeriodStart\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"ChargePeriodStart\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CommitmentDiscountCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CommitmentDiscountCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CommitmentDiscountId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CommitmentDiscountId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CommitmentDiscountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CommitmentDiscountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CommitmentDiscountStatus\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CommitmentDiscountStatus\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CommitmentDiscountType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CommitmentDiscountType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ConsumedQuantity\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"ConsumedQuantity\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ConsumedUnit\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ConsumedUnit\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ContractedCost\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"ContractedCost\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ContractedUnitPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"ContractedUnitPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"EffectiveCost\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"EffectiveCost\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"InvoiceIssuerName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"InvoiceIssuerName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ListCost\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"ListCost\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ListUnitPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"ListUnitPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PricingCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PricingCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PricingQuantity\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"PricingQuantity\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PricingUnit\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PricingUnit\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ProviderName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ProviderName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PublisherName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PublisherName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"RegionId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"RegionId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"RegionName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"RegionName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ResourceId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ResourceId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ResourceName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ResourceName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ResourceType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ResourceType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ServiceCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ServiceCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ServiceName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ServiceName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SkuId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SkuId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SkuPriceId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SkuPriceId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SubAccountId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SubAccountId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SubAccountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SubAccountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SubAccountType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SubAccountType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Tags\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Tags\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_AccountId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_AccountId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_AccountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_AccountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_AccountOwnerId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_AccountOwnerId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BilledCostInUsd\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_BilledCostInUsd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BilledUnitPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_BilledUnitPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingAccountId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_BillingAccountId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingAccountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_BillingAccountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingExchangeRate\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_BillingExchangeRate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingExchangeRateDate\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"x_BillingExchangeRateDate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingProfileId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_BillingProfileId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingProfileName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_BillingProfileName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ContractedCostInUsd\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_ContractedCostInUsd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_CostAllocationRuleName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_CostAllocationRuleName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_CostCenter\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_CostCenter\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_CustomerId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_CustomerId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_CustomerName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_CustomerName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_EffectiveCostInUsd\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_EffectiveCostInUsd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_EffectiveUnitPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_EffectiveUnitPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_InvoiceId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_InvoiceId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_InvoiceIssuerId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_InvoiceIssuerId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_InvoiceSectionId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_InvoiceSectionId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_InvoiceSectionName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_InvoiceSectionName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ListCostInUsd\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_ListCostInUsd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PartnerCreditApplied\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PartnerCreditApplied\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PartnerCreditRate\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PartnerCreditRate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PricingBlockSize\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_PricingBlockSize\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PricingCurrency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PricingCurrency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PricingSubcategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PricingSubcategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PricingUnitDescription\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PricingUnitDescription\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PublisherCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PublisherCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PublisherId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PublisherId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ResellerId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_ResellerId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ResellerName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_ResellerName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ResourceGroupName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_ResourceGroupName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ResourceType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_ResourceType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ServicePeriodEnd\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"x_ServicePeriodEnd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ServicePeriodStart\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"x_ServicePeriodStart\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuDescription\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuDescription\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuDetails\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuDetails\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuIsCreditEligible\", \"type\": \"Boolean\" },\r\n        \"sink\": { \"name\": \"x_SkuIsCreditEligible\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuMeterCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuMeterCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuMeterId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuMeterId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuMeterName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuMeterName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuMeterSubcategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuMeterSubcategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuOfferId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuOfferId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuOrderId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuOrderId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuOrderName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuOrderName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuPartNumber\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuPartNumber\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuRegion\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuRegion\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuServiceFamily\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuServiceFamily\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuTerm\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuTerm\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuTier\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuTier\" }\r\n      }\r\n    ]\r\n  }\r\n}\r\n",
                    "$fxv#10": "0.7\r\n",
                    "$fxv#11": "# Copyright (c) Microsoft Corporation.\r\n# Licensed under the MIT License.\r\n\r\nWrite-Output \"Updating settings.json file...\"\r\nWrite-Output \"  Storage account: $env:storageAccountName\"\r\nWrite-Output \"  Container: $env:containerName\"\r\n\r\n$validateScopes = { $_.Length -gt 45 }\r\n\r\n# Initialize variables\r\n$fileName = 'settings.json'\r\n$filePath = Join-Path -Path . -ChildPath $fileName\r\n$newScopes = $env:scopes.Split('|') | Where-Object $validateScopes | ForEach-Object { @{ scope = $_ } }\r\n\r\n# Get storage context\r\n$storageContext = @{\r\n    Context   = New-AzStorageContext -StorageAccountName $env:storageAccountName -UseConnectedAccount\r\n    Container = $env:containerName\r\n}\r\n\r\n# Download existing settings, if they exist\r\n$blob = Get-AzStorageBlobContent @storageContext -Blob $fileName -Destination $filePath -Force\r\nif ($blob)\r\n{\r\n    $text = Get-Content $filePath -Raw\r\n    Write-Output \"---------\"\r\n    Write-Output $text\r\n    Write-Output \"---------\"\r\n    $json = $text | ConvertFrom-Json\r\n    Write-Output \"Existing settings.json file found. Updating...\"\r\n    # Rename exportScopes to scopes + convert to object array\r\n    if ($json.exportScopes)\r\n    {\r\n        Write-Output \"  Updating exportScopes...\"\r\n        if ($json.exportScopes[0] -is [string])\r\n        {\r\n            Write-Output \"    Converting string array to object array...\"\r\n            $json.exportScopes = $json.exportScopes | Where-Object $validateScopes | ForEach-Object { @{ scope = $_ } }\r\n            if (-not ($json.exportScopes -is [array]))\r\n            {\r\n                Write-Output \"    Converting single object to object array...\"\r\n                $json.exportScopes = @($json.exportScopes)\r\n            }\r\n        }\r\n\r\n        Write-Output \"    Renaming to 'scopes'...\"\r\n        $json | Add-Member -MemberType NoteProperty -Name scopes -Value $json.exportScopes\r\n        $json.PSObject.Properties.Remove('exportScopes')\r\n    }\r\n}\r\n\r\n# Set default if not found\r\nif (!$json)\r\n{\r\n    Write-Output \"No existing settings.json file found. Creating new file...\"\r\n    $json = [ordered]@{\r\n        '$schema' = 'https://aka.ms/finops/hubs/settings-schema'\r\n        type      = 'HubInstance'\r\n        version   = ''\r\n        learnMore = 'https://aka.ms/finops/hubs'\r\n        scopes    = @()\r\n        retention = @{\r\n            'msexports' = @{\r\n                days = 0\r\n            }\r\n            'ingestion' = @{\r\n                months = 13\r\n            }\r\n            'raw'       = @{\r\n                days = 0\r\n            }\r\n            'final'     = @{\r\n                months = 13\r\n            }\r\n        }\r\n    }\r\n\r\n    $text = $json | ConvertTo-Json\r\n    Write-Output \"---------\"\r\n    Write-Output $text\r\n    Write-Output \"---------\"\r\n}\r\n\r\n# Set values from inputs\r\n$json.scopes = $env:scopes.Split('|') | ForEach-Object { @{ 'scope' = $_ } }\r\nif (!($json.retention))\r\n{\r\n    # In case the retention object is not present in the settings.json file (versions before 0.4), add it with default values\r\n    $retention = @\"\r\n    {\r\n        \"msexports\": {\r\n            \"days\": 0\r\n        },\r\n        \"ingestion\": {\r\n            \"months\": 13\r\n        },\r\n        \"raw\": {\r\n            \"days\": 0\r\n        },\r\n        \"final\": {\r\n            \"months\": 13\r\n        }\r\n    }\r\n\"@\r\n    $json | Add-Member -Name retention -Value (ConvertFrom-Json $retention) -MemberType NoteProperty\r\n}\r\n\r\n# Set or update msexports retention\r\nif (!($json.retention.msexports))\r\n{\r\n    $json.retention | Add-Member -Name msexports -Value (ConvertFrom-Json \"{\"\"days\"\":$($env:msexportRetentionInDays)}\") -MemberType NoteProperty\r\n}\r\nelse\r\n{\r\n    $json.retention.msexports.days = [Int32]::Parse($env:msexportRetentionInDays)\r\n}\r\n\r\n# Set or update ingestion retention\r\nif (!($json.retention.ingestion))\r\n{\r\n    $json.retention | Add-Member -Name ingestion -Value (ConvertFrom-Json \"{\"\"months\"\":$($env:ingestionRetentionInMonths)}\") -MemberType NoteProperty\r\n}\r\nelse\r\n{\r\n    $json.retention.ingestion.months = [Int32]::Parse($env:ingestionRetentionInMonths)\r\n}\r\n\r\n# Set or update raw retention\r\nif (!($json.retention.raw))\r\n{\r\n    $json.retention | Add-Member -Name raw -Value (ConvertFrom-Json \"{\"\"days\"\":$($env:rawRetentionInDays)}\") -MemberType NoteProperty\r\n}\r\nelse\r\n{\r\n    $json.retention.raw.days = [Int32]::Parse($env:rawRetentionInDays)\r\n}\r\n\r\n# Set or update final retention\r\nif (!($json.retention.final))\r\n{\r\n    $json.retention | Add-Member -Name final -Value (ConvertFrom-Json \"{\"\"months\"\":$($env:finalRetentionInMonths)}\") -MemberType NoteProperty\r\n}\r\nelse\r\n{\r\n    $json.retention.final.months = [Int32]::Parse($env:finalRetentionInMonths)\r\n}\r\n\r\n# Updating settings\r\nWrite-Output \"Updating version to $env:ftkVersion...\"\r\n$json.version = $env:ftkVersion\r\nif ($newScopes)\r\n{\r\n    Write-Output \"Merging $($newScopes.Count) scopes...\"\r\n    $json.scopes = Compare-Object -ReferenceObject $json.scopes -DifferenceObject $newScopes -Property scope -PassThru -IncludeEqual\r\n\r\n    # Remove the SideIndicator property from the Compare-Object output\r\n    $json.scopes | ForEach-Object { $_.PSObject.Properties.Remove('SideIndicator') } | ConvertTo-Json\r\n\r\n    if (-not ($json.scopes -is [array]))\r\n    {\r\n        $json.scopes = @($json.scopes)\r\n    }\r\n    Write-Output \"$($json.scopes.Count) scopes found.\"\r\n}\r\n$text = $json | ConvertTo-Json\r\nWrite-Output \"---------\"\r\nWrite-Output $text\r\nWrite-Output \"---------\"\r\n$text | Out-File $filePath\r\n\r\n# Upload new/updated settings\r\nWrite-Output \"Uploading settings.json file...\"\r\nSet-AzStorageBlobContent @storageContext -File $filePath -Force | Out-Null\r\n\r\n# Save focusSchemaFile file to storage\r\n$schemaFiles = $env:schemaFiles | ConvertFrom-Json -Depth 10\r\nWrite-Output \"Uploading ${$schemaFiles.PSObject.Properties.Count} schema files...\"\r\n$schemaFiles.PSObject.Properties | ForEach-Object {\r\n    $fileName = \"$($_.Name).json\"\r\n    $tempPath = \"./$fileName\"\r\n    Write-Output \"  Uploading $($_.Name).json...\"\r\n    $_.Value | Out-File $tempPath\r\n    Set-AzStorageBlobContent @storageContext -File $tempPath -Blob \"schemas/$fileName\" -Force | Out-Null\r\n}\r\n",
                    "$fxv#2": "{\r\n  \"additionalColumns\": [],\r\n  \"translator\": {\r\n    \"type\": \"TabularTranslator\",\r\n    \"mappings\": [\r\n      {\r\n        \"source\": { \"name\": \"AvailabilityZone\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"AvailabilityZone\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BilledCost\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"BilledCost\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingAccountId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingAccountId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingAccountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingAccountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingAccountType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingAccountType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingCurrency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingCurrency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingPeriodEnd\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"BillingPeriodEnd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingPeriodStart\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"BillingPeriodStart\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargeCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ChargeCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargeDescription\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ChargeDescription\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargeFrequency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ChargeFrequency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargePeriodEnd\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"ChargePeriodEnd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargePeriodStart\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"ChargePeriodStart\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ChargeSubcategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ChargeSubcategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CommitmentDiscountCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CommitmentDiscountCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CommitmentDiscountId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CommitmentDiscountId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CommitmentDiscountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CommitmentDiscountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CommitmentDiscountType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CommitmentDiscountType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"EffectiveCost\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"EffectiveCost\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"InvoiceIssuerName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"InvoiceIssuerName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ListCost\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"ListCost\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ListUnitPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"ListUnitPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PricingCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PricingCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PricingQuantity\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"PricingQuantity\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PricingUnit\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PricingUnit\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ProviderName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ProviderName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PublisherName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PublisherName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Region\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Region\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ResourceId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ResourceId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ResourceName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ResourceName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ResourceType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ResourceType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ServiceCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ServiceCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ServiceName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ServiceName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SkuId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SkuId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SkuPriceId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SkuPriceId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SubAccountId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SubAccountId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SubAccountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SubAccountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SubAccountType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SubAccountType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Tags\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Tags\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"UsageQuantity\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"UsageQuantity\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"UsageUnit\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"UsageUnit\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_AccountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_AccountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_AccountOwnerId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_AccountOwnerId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BilledCostInUsd\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_BilledCostInUsd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BilledUnitPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_BilledUnitPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingAccountId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_BillingAccountId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingAccountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_BillingAccountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingExchangeRate\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_BillingExchangeRate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingExchangeRateDate\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"x_BillingExchangeRateDate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingProfileId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_BillingProfileId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_BillingProfileName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_BillingProfileName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ChargeId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_ChargeId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_CostAllocationRuleName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_CostAllocationRuleName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_CostCenter\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_CostCenter\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_CustomerId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_CustomerId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_CustomerName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_CustomerName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_EffectiveCostInUsd\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_EffectiveCostInUsd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_EffectiveUnitPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_EffectiveUnitPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_InvoiceId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_InvoiceId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_InvoiceIssuerId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_InvoiceIssuerId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_InvoiceSectionId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_InvoiceSectionId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_InvoiceSectionName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_InvoiceSectionName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_OnDemandCost\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_OnDemandCost\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_OnDemandCostInUsd\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_OnDemandCostInUsd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_OnDemandUnitPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_OnDemandUnitPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PartnerCreditApplied\", \"type\": \"Boolean\" },\r\n        \"sink\": { \"name\": \"x_PartnerCreditApplied\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PartnerCreditRate\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_PartnerCreditRate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PricingBlockSize\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"x_PricingBlockSize\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PricingCurrency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PricingCurrency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PricingSubcategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PricingSubcategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PricingUnitDescription\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PricingUnitDescription\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PublisherCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PublisherCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_PublisherId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_PublisherId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ResellerId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_ResellerId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ResellerName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_ResellerName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ResourceGroupName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_ResourceGroupName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ResourceType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_ResourceType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ServicePeriodEnd\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"x_ServicePeriodEnd\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_ServicePeriodStart\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"x_ServicePeriodStart\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuDescription\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuDescription\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuDetails\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuDetails\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuIsCreditEligible\", \"type\": \"Boolean\" },\r\n        \"sink\": { \"name\": \"x_SkuIsCreditEligible\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuMeterCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuMeterCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuMeterId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuMeterId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuMeterName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuMeterName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuMeterSubcategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuMeterSubcategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuOfferId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuOfferId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuOrderId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuOrderId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuOrderName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuOrderName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuPartNumber\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuPartNumber\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuRegion\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuRegion\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuServiceFamily\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuServiceFamily\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuTerm\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuTerm\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"x_SkuTier\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"x_SkuTier\" }\r\n      }\r\n    ]\r\n  }\r\n}\r\n",
                    "$fxv#3": "{\r\n  \"additionalColumns\": [],\r\n  \"translator\": {\r\n    \"type\": \"TabularTranslator\",\r\n    \"mappings\": [\r\n      {\r\n        \"source\": { \"name\": \"EnrollmentNumber\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"EnrollmentNumber\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterID\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterID\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterSubCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterSubCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ServiceFamily\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ServiceFamily\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Product\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Product\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SkuID\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SkuID\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ProductID\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ProductID\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterRegion\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterRegion\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"UnitOfMeasure\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"UnitOfMeasure\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PartNumber\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PartNumber\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"EffectiveStartDate\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"EffectiveStartDate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"EffectiveEndDate\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"EffectiveEndDate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"UnitPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"UnitPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BasePrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"BasePrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MarketPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"MarketPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CurrencyCode\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CurrencyCode\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"IncludedQuantity\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"IncludedQuantity\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"OfferID\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"OfferID\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Term\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Term\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PriceType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PriceType\" }\r\n      }\r\n    ]\r\n  }\r\n}\r\n",
                    "$fxv#4": "{\r\n  \"additionalColumns\": [],\r\n  \"translator\": {\r\n    \"type\": \"TabularTranslator\",\r\n    \"mappings\": [\r\n      {\r\n        \"source\": { \"name\": \"BillingAccountId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingAccountId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingAccountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingAccountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingProfileId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingProfileId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingProfileName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingProfileName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ServiceFamily\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ServiceFamily\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Product\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Product\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ProductId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ProductId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SkuId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SkuId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"UnitOfMeasure\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"UnitOfMeasure\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterSubCategory\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterSubCategory\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterRegion\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterRegion\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"TierMinimumUnits\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"TierMinimumUnits\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"EffectiveStartDate\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"EffectiveStartDate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"EffectiveEndDate\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"EffectiveEndDate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"UnitPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"UnitPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BasePrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"BasePrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MarketPrice\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"MarketPrice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Currency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Currency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingCurrency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingCurrency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Term\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Term\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PriceType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PriceType\" }\r\n      }\r\n    ]\r\n  }\r\n}\r\n",
                    "$fxv#5": "{\r\n  \"additionalColumns\": [],\r\n  \"translator\": {\r\n    \"type\": \"TabularTranslator\",\r\n    \"mappings\": [\r\n      {\r\n        \"source\": { \"name\": \"InstanceFlexibilityGroup\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"InstanceFlexibilityGroup\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"InstanceFlexibilityRatio\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"InstanceFlexibilityRatio\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"InstanceId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"InstanceId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Kind\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Kind\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ReservationOrderId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ReservationOrderId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ReservationId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ReservationId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ReservedHours\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"ReservedHours\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SkuName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SkuName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"TotalReservedQuantity\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"TotalReservedQuantity\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"UsageDate\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"UsageDate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"UsedHours\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"UsedHours\" }\r\n      }\r\n    ]\r\n  }\r\n}\r\n",
                    "$fxv#6": "{\r\n  \"additionalColumns\": [],\r\n  \"translator\": {\r\n    \"type\": \"TabularTranslator\",\r\n    \"mappings\": [\r\n      {\r\n        \"source\": { \"name\": \"SKU\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SKU\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Location\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Location\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CostWithNoReservedInstances\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CostWithNoReservedInstances\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"FirstUsageDate\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"FirstUsageDate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"InstanceFlexibilityRatio\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"InstanceFlexibilityRatio\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"InstanceFlexibilityGroup\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"InstanceFlexibilityGroup\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"LookBackPeriod\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"LookBackPeriod\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"NetSavings\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"NetSavings\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"NormalizedSize\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"NormalizedSize\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"RecommendedQuantity\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"RecommendedQuantity\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"RecommendedQuantityNormalized\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"RecommendedQuantityNormalized\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ResourceType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ResourceType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Scope\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Scope\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SkuProperties\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SkuProperties\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Term\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Term\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"TotalCostWithReservedInstances\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"TotalCostWithReservedInstances\" }\r\n      }\r\n    ]\r\n  }\r\n}\r\n",
                    "$fxv#7": "{\r\n  \"additionalColumns\": [],\r\n  \"translator\": {\r\n    \"type\": \"TabularTranslator\",\r\n    \"mappings\": [\r\n      {\r\n        \"source\": { \"name\": \"Cost With No ReservedInstances\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Cost With No ReservedInstances\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"First UsageDate\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"First UsageDate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Instance Flexibility Ratio\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"Instance Flexibility Ratio\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Instance Flexibility Group\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Instance Flexibility Group\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Location\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Location\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"LookBackPeriod\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"LookBackPeriod\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MeterID\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"MeterID\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Net Savings\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"Net Savings\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Normalized Size\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Normalized Size\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Recommended Quantity\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"Recommended Quantity\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Recommended Quantity Normalized\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"Recommended Quantity Normalized\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ResourceType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ResourceType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"scope\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"scope\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"SkuName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"SkuName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Sku Properties\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Sku Properties\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Term\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Term\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Total Cost With ReservedInstances\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Total Cost With ReservedInstances\" }\r\n      }\r\n    ]\r\n  }\r\n}\r\n",
                    "$fxv#8": "{\r\n  \"additionalColumns\": [],\r\n  \"translator\": {\r\n    \"type\": \"TabularTranslator\",\r\n    \"mappings\": [\r\n      {\r\n        \"source\": { \"name\": \"AccountName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"AccountName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"AccountOwnerEmail\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"AccountOwnerEmail\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Amount\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"Amount\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ArmSkuName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ArmSkuName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingFrequency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingFrequency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingMonth\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingMonth\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CostCenter\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CostCenter\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Currency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Currency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"CurrentEnrollmentId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"CurrentEnrollmentId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"DepartmentName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"DepartmentName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Description\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Description\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"EventDate\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"EventDate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"EventType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"EventType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"MonetaryCommitment\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"MonetaryCommitment\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Overage\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"Overage\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PurchasingSubscriptionGuid\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PurchasingSubscriptionGuid\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PurchasingSubscriptionName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PurchasingSubscriptionName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PurchasingEnrollment\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PurchasingEnrollment\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Quantity\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"Quantity\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Region\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Region\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ReservationOrderId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ReservationOrderId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ReservationOrderName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ReservationOrderName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Term\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Term\" }\r\n      }\r\n    ]\r\n  }\r\n}\r\n",
                    "$fxv#9": "{\r\n  \"additionalColumns\": [],\r\n  \"translator\": {\r\n    \"type\": \"TabularTranslator\",\r\n    \"mappings\": [\r\n      {\r\n        \"source\": { \"name\": \"Amount\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"Amount\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ArmSkuName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ArmSkuName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingFrequency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingFrequency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingProfileId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingProfileId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"BillingProfileName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"BillingProfileName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Currency\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Currency\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Description\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Description\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"EventDate\", \"type\": \"DateTimeOffset\" },\r\n        \"sink\": { \"name\": \"EventDate\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"EventType\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"EventType\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Invoice\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Invoice\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"InvoiceId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"InvoiceId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"InvoiceSectionId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"InvoiceSectionId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"InvoiceSectionName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"InvoiceSectionName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PurchasingSubscriptionGuid\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PurchasingSubscriptionGuid\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"PurchasingSubscriptionName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"PurchasingSubscriptionName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Quantity\", \"type\": \"Decimal\" },\r\n        \"sink\": { \"name\": \"Quantity\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Region\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Region\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ReservationOrderId\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ReservationOrderId\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"ReservationOrderName\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"ReservationOrderName\" }\r\n      },\r\n      {\r\n        \"source\": { \"name\": \"Term\", \"type\": \"String\" },\r\n        \"sink\": { \"name\": \"Term\" }\r\n      }\r\n    ]\r\n  }\r\n}\r\n",
                    "safeHubName": "[replace(replace(toLower(parameters('hubName')), '-', ''), '_', '')]",
                    "storageAccountSuffix": "[parameters('uniqueSuffix')]",
                    "storageAccountName": "[format('{0}{1}', take(variables('safeHubName'), sub(24, length(variables('storageAccountSuffix')))), variables('storageAccountSuffix'))]",
                    "scriptStorageAccountName": "[format('{0}script{1}', take(variables('safeHubName'), sub(16, length(variables('storageAccountSuffix')))), variables('storageAccountSuffix'))]",
                    "schemaFiles": {
                      "focuscost_1.0r2": "[variables('$fxv#0')]",
                      "focuscost_1.0": "[variables('$fxv#1')]",
                      "focuscost_1.0-preview(v1)": "[variables('$fxv#2')]",
                      "pricesheet_2023-05-01_ea": "[variables('$fxv#3')]",
                      "pricesheet_2023-05-01_mca": "[variables('$fxv#4')]",
                      "reservationdetails_2023-03-01": "[variables('$fxv#5')]",
                      "reservationrecommendations_2023-05-01_ea": "[variables('$fxv#6')]",
                      "reservationrecommendations_2023-05-01_mca": "[variables('$fxv#7')]",
                      "reservationtransactions_2023-05-01_ea": "[variables('$fxv#8')]",
                      "reservationtransactions_2023-05-01_mca": "[variables('$fxv#9')]"
                    },
                    "blobUploadRbacRoles": [
                      "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
                      "e40ec5ca-96e0-45a2-b4ff-59039f2c2b59",
                      "69566ab7-960f-475b-8e7c-b3118f30c6bd"
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-09-01",
                      "name": "[variables('storageAccountName')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "[parameters('sku')]"
                      },
                      "kind": "BlockBlobStorage",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Storage/storageAccounts'), parameters('tagsByResource')['Microsoft.Storage/storageAccounts'], createObject()))]",
                      "properties": "[union(if(not(parameters('enableInfrastructureEncryption')), createObject(), createObject('encryption', createObject('keySource', 'Microsoft.Storage', 'requireInfrastructureEncryption', parameters('enableInfrastructureEncryption')))), createObject('supportsHttpsTrafficOnly', true(), 'allowSharedKeyAccess', true(), 'isHnsEnabled', true(), 'minimumTlsVersion', 'TLS1_2', 'allowBlobPublicAccess', false(), 'publicNetworkAccess', 'Enabled', 'networkAcls', createObject('bypass', 'AzureServices', 'defaultAction', if(parameters('enablePublicAccess'), 'Allow', 'Deny'))))]"
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-09-01",
                      "name": "[variables('scriptStorageAccountName')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "Standard_LRS"
                      },
                      "kind": "StorageV2",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Storage/storageAccounts'), parameters('tagsByResource')['Microsoft.Storage/storageAccounts'], createObject()))]",
                      "properties": {
                        "supportsHttpsTrafficOnly": true,
                        "allowSharedKeyAccess": true,
                        "isHnsEnabled": false,
                        "minimumTlsVersion": "TLS1_2",
                        "allowBlobPublicAccess": false,
                        "publicNetworkAccess": "Enabled",
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "Deny",
                          "virtualNetworkRules": [
                            {
                              "id": "[parameters('scriptSubnetId')]",
                              "action": "Allow"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2024-06-01",
                      "name": "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
                      "location": "global",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Storage/privateDnsZones'), parameters('tagsByResource')['Microsoft.Storage/privateDnsZones'], createObject()))]",
                      "properties": {}
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2024-06-01",
                      "name": "[format('privatelink.dfs.{0}', environment().suffixes.storage)]",
                      "location": "global",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Storage/privateDnsZones'), parameters('tagsByResource')['Microsoft.Storage/privateDnsZones'], createObject()))]",
                      "properties": {}
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2024-06-01",
                      "name": "[format('privatelink.queue.{0}', environment().suffixes.storage)]",
                      "location": "global",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Storage/privateDnsZones'), parameters('tagsByResource')['Microsoft.Storage/privateDnsZones'], createObject()))]",
                      "properties": {}
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2024-06-01",
                      "name": "[format('privatelink.table.{0}', environment().suffixes.storage)]",
                      "location": "global",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Storage/privateDnsZones'), parameters('tagsByResource')['Microsoft.Storage/privateDnsZones'], createObject()))]",
                      "properties": {}
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', format('privatelink.blob.{0}', environment().suffixes.storage), format('{0}-link', replace(format('privatelink.blob.{0}', environment().suffixes.storage), '.', '-')))]",
                      "location": "global",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Network/privateDnsZones/virtualNetworkLinks'), parameters('tagsByResource')['Microsoft.Network/privateDnsZones/virtualNetworkLinks'], createObject()))]",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.blob.{0}', environment().suffixes.storage))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', format('privatelink.dfs.{0}', environment().suffixes.storage), format('{0}-link', replace(format('privatelink.dfs.{0}', environment().suffixes.storage), '.', '-')))]",
                      "location": "global",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Network/privateDnsZones/virtualNetworkLinks'), parameters('tagsByResource')['Microsoft.Network/privateDnsZones/virtualNetworkLinks'], createObject()))]",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.dfs.{0}', environment().suffixes.storage))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', format('privatelink.queue.{0}', environment().suffixes.storage), format('{0}-link', replace(format('privatelink.queue.{0}', environment().suffixes.storage), '.', '-')))]",
                      "location": "global",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Network/privateDnsZones/virtualNetworkLinks'), parameters('tagsByResource')['Microsoft.Network/privateDnsZones/virtualNetworkLinks'], createObject()))]",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.queue.{0}', environment().suffixes.storage))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', format('privatelink.table.{0}', environment().suffixes.storage), format('{0}-link', replace(format('privatelink.table.{0}', environment().suffixes.storage), '.', '-')))]",
                      "location": "global",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Network/privateDnsZones/virtualNetworkLinks'), parameters('tagsByResource')['Microsoft.Network/privateDnsZones/virtualNetworkLinks'], createObject()))]",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.table.{0}', environment().suffixes.storage))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-11-01",
                      "name": "[format('{0}-blob-ep', variables('storageAccountName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Network/privateEndpoints'), parameters('tagsByResource')['Microsoft.Network/privateEndpoints'], createObject()))]",
                      "properties": {
                        "subnet": {
                          "id": "[parameters('privateEndpointSubnetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "blobLink",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                              "groupIds": [
                                "blob"
                              ]
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-11-01",
                      "name": "[format('{0}-blob-ep', variables('scriptStorageAccountName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Network/privateEndpoints'), parameters('tagsByResource')['Microsoft.Network/privateEndpoints'], createObject()))]",
                      "properties": {
                        "subnet": {
                          "id": "[parameters('privateEndpointSubnetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "scriptLink",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('scriptStorageAccountName'))]",
                              "groupIds": [
                                "blob"
                              ]
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('scriptStorageAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-11-01",
                      "name": "[format('{0}-dfs-ep', variables('storageAccountName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Network/privateEndpoints'), parameters('tagsByResource')['Microsoft.Network/privateEndpoints'], createObject()))]",
                      "properties": {
                        "subnet": {
                          "id": "[parameters('privateEndpointSubnetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "dfsLink",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                              "groupIds": [
                                "dfs"
                              ]
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-11-01",
                      "name": "[format('{0}/{1}', format('{0}-blob-ep', variables('storageAccountName')), 'storage-endpoint-zone')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
                            "properties": {
                              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.blob.{0}', environment().suffixes.storage))]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-blob-ep', variables('storageAccountName')))]",
                        "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.blob.{0}', environment().suffixes.storage))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-11-01",
                      "name": "[format('{0}/{1}', format('{0}-dfs-ep', variables('storageAccountName')), 'dfs-endpoint-zone')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('privatelink.dfs.{0}', environment().suffixes.storage)]",
                            "properties": {
                              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.dfs.{0}', environment().suffixes.storage))]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-dfs-ep', variables('storageAccountName')))]",
                        "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.dfs.{0}', environment().suffixes.storage))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-11-01",
                      "name": "[format('{0}/{1}', format('{0}-blob-ep', variables('scriptStorageAccountName')), 'blob-endpoint-zone')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
                            "properties": {
                              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.blob.{0}', environment().suffixes.storage))]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.blob.{0}', environment().suffixes.storage))]",
                        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-blob-ep', variables('scriptStorageAccountName')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}', variables('storageAccountName'), 'default')]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}/{2}', variables('storageAccountName'), 'default', 'config')]",
                      "properties": {
                        "publicAccess": "None",
                        "metadata": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}/{2}', variables('storageAccountName'), 'default', 'msexports')]",
                      "properties": {
                        "publicAccess": "None",
                        "metadata": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}/{2}', variables('storageAccountName'), 'default', 'ingestion')]",
                      "properties": {
                        "publicAccess": "None",
                        "metadata": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2023-01-31",
                      "name": "[format('{0}_blobManager', variables('storageAccountName'))]",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), parameters('tagsByResource')['Microsoft.ManagedIdentity/userAssignedIdentities'], createObject()))]",
                      "location": "[parameters('location')]"
                    },
                    {
                      "copy": {
                        "name": "identityRoleAssignments",
                        "count": "[length(variables('blobUploadRbacRoles'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), variables('blobUploadRbacRoles')[copyIndex()], resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_blobManager', variables('storageAccountName'))))]",
                      "properties": {
                        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('blobUploadRbacRoles')[copyIndex()])]",
                        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_blobManager', variables('storageAccountName'))), '2023-01-31').principalId]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_blobManager', variables('storageAccountName')))]",
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2023-08-01",
                      "name": "[format('{0}_uploadSettings', variables('storageAccountName'))]",
                      "kind": "AzurePowerShell",
                      "location": "[if(startsWith(parameters('location'), 'china'), 'chinaeast2', parameters('location'))]",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Resources/deploymentScripts'), parameters('tagsByResource')['Microsoft.Resources/deploymentScripts'], createObject()))]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_blobManager', variables('storageAccountName'))))]": {}
                        }
                      },
                      "properties": {
                        "azPowerShellVersion": "9.0",
                        "retentionInterval": "PT1H",
                        "environmentVariables": [
                          {
                            "name": "ftkVersion",
                            "value": "[variables('$fxv#10')]"
                          },
                          {
                            "name": "scopes",
                            "value": "[join(parameters('scopesToMonitor'), '|')]"
                          },
                          {
                            "name": "msexportRetentionInDays",
                            "value": "[string(parameters('msexportRetentionInDays'))]"
                          },
                          {
                            "name": "ingestionRetentionInMonths",
                            "value": "[string(parameters('ingestionRetentionInMonths'))]"
                          },
                          {
                            "name": "rawRetentionInDays",
                            "value": "[string(parameters('rawRetentionInDays'))]"
                          },
                          {
                            "name": "finalRetentionInMonths",
                            "value": "[string(parameters('finalRetentionInMonths'))]"
                          },
                          {
                            "name": "storageAccountName",
                            "value": "[variables('storageAccountName')]"
                          },
                          {
                            "name": "containerName",
                            "value": "config"
                          },
                          {
                            "name": "schemaFiles",
                            "value": "[string(variables('schemaFiles'))]"
                          }
                        ],
                        "scriptContent": "[variables('$fxv#11')]",
                        "storageAccountSettings": {
                          "storageAccountName": "[variables('scriptStorageAccountName')]"
                        },
                        "containerSettings": {
                          "containerGroupName": "[format('{0}cg', variables('scriptStorageAccountName'))]",
                          "subnetIds": [
                            {
                              "id": "[parameters('scriptSubnetId')]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-blob-ep', variables('storageAccountName')))]",
                        "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', format('{0}-blob-ep', variables('storageAccountName')), 'storage-endpoint-zone')]",
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('storageAccountName'), 'default', 'config')]",
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_blobManager', variables('storageAccountName')))]",
                        "identityRoleAssignments",
                        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-blob-ep', variables('scriptStorageAccountName')))]",
                        "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', format('{0}-blob-ep', variables('scriptStorageAccountName')), 'blob-endpoint-zone')]",
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('scriptStorageAccountName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the storage account."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the storage account."
                      },
                      "value": "[variables('storageAccountName')]"
                    },
                    "scriptStorageAccountResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the storage account."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('scriptStorageAccountName'))]"
                    },
                    "scriptStorageAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the storage account."
                      },
                      "value": "[variables('scriptStorageAccountName')]"
                    },
                    "configContainer": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the container used for configuration settings."
                      },
                      "value": "config"
                    },
                    "exportContainer": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the container used for Cost Management exports."
                      },
                      "value": "msexports"
                    },
                    "ingestionContainer": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the container used for normalized data ingestion."
                      },
                      "value": "ingestion"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'vnet')]"
              ]
            },
            {
              "condition": "[variables('deployDataExplorer')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "dataExplorer",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "clusterName": {
                    "value": "[parameters('dataExplorerName')]"
                  },
                  "clusterSku": {
                    "value": "[parameters('dataExplorerSku')]"
                  },
                  "clusterCapacity": {
                    "value": "[parameters('dataExplorerCapacity')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[variables('resourceTags')]"
                  },
                  "tagsByResource": {
                    "value": "[parameters('tagsByResource')]"
                  },
                  "dataFactoryName": {
                    "value": "[variables('dataFactoryName')]"
                  },
                  "rawRetentionInDays": {
                    "value": "[parameters('dataExplorerRawRetentionInDays')]"
                  },
                  "virtualNetworkId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.vNetId.value]"
                  },
                  "privateEndpointSubnetId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.dataExplorerSubnetId.value]"
                  },
                  "enablePublicAccess": {
                    "value": "[parameters('enablePublicAccess')]"
                  },
                  "storageAccountName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.name.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.31.92.45157",
                      "templateHash": "18374621768570112654"
                    }
                  },
                  "parameters": {
                    "clusterName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the Azure Data Explorer cluster to use for advanced analytics. If empty, Azure Data Explorer will not be deployed. Required to use with Power BI if you have more than $2-5M/mo in costs being monitored. Default: \"\" (do not use)."
                      }
                    },
                    "clusterSku": {
                      "type": "string",
                      "defaultValue": "Dev(No SLA)_Standard_E2a_v4",
                      "allowedValues": [
                        "Dev(No SLA)_Standard_E2a_v4",
                        "Dev(No SLA)_Standard_D11_v2",
                        "Standard_D11_v2",
                        "Standard_D12_v2",
                        "Standard_D13_v2",
                        "Standard_D14_v2",
                        "Standard_D16d_v5",
                        "Standard_D32d_v4",
                        "Standard_D32d_v5",
                        "Standard_DS13_v2+1TB_PS",
                        "Standard_DS13_v2+2TB_PS",
                        "Standard_DS14_v2+3TB_PS",
                        "Standard_DS14_v2+4TB_PS",
                        "Standard_E2a_v4",
                        "Standard_E2ads_v5",
                        "Standard_E2d_v4",
                        "Standard_E2d_v5",
                        "Standard_E4a_v4",
                        "Standard_E4ads_v5",
                        "Standard_E4d_v4",
                        "Standard_E4d_v5",
                        "Standard_E8a_v4",
                        "Standard_E8ads_v5",
                        "Standard_E8as_v4+1TB_PS",
                        "Standard_E8as_v4+2TB_PS",
                        "Standard_E8as_v5+1TB_PS",
                        "Standard_E8as_v5+2TB_PS",
                        "Standard_E8d_v4",
                        "Standard_E8d_v5",
                        "Standard_E8s_v4+1TB_PS",
                        "Standard_E8s_v4+2TB_PS",
                        "Standard_E8s_v5+1TB_PS",
                        "Standard_E8s_v5+2TB_PS",
                        "Standard_E16a_v4",
                        "Standard_E16ads_v5",
                        "Standard_E16as_v4+3TB_PS",
                        "Standard_E16as_v4+4TB_PS",
                        "Standard_E16as_v5+3TB_PS",
                        "Standard_E16as_v5+4TB_PS",
                        "Standard_E16d_v4",
                        "Standard_E16d_v5",
                        "Standard_E16s_v4+3TB_PS",
                        "Standard_E16s_v4+4TB_PS",
                        "Standard_E16s_v5+3TB_PS",
                        "Standard_E16s_v5+4TB_PS",
                        "Standard_E64i_v3",
                        "Standard_E80ids_v4",
                        "Standard_EC8ads_v5",
                        "Standard_EC8as_v5+1TB_PS",
                        "Standard_EC8as_v5+2TB_PS",
                        "Standard_EC16ads_v5",
                        "Standard_EC16as_v5+3TB_PS",
                        "Standard_EC16as_v5+4TB_PS",
                        "Standard_L4s",
                        "Standard_L8as_v3",
                        "Standard_L8s",
                        "Standard_L8s_v2",
                        "Standard_L8s_v3",
                        "Standard_L16as_v3",
                        "Standard_L16s",
                        "Standard_L16s_v2",
                        "Standard_L16s_v3",
                        "Standard_L32as_v3",
                        "Standard_L32s_v3"
                      ],
                      "metadata": {
                        "description": "Optional. Name of the Azure Data Explorer SKU. Default: \"Dev(No SLA)_Standard_E2a_v4\"."
                      }
                    },
                    "clusterCapacity": {
                      "type": "int",
                      "defaultValue": 1,
                      "minValue": 1,
                      "maxValue": 1000,
                      "metadata": {
                        "description": "Optional. Number of nodes to use in the cluster. Allowed values: 1 for the Basic SKU tier and 2-1000 for Standard. Default: 1 for dev/test SKUs, 2 for standard SKUs."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "[utcNow()]",
                      "metadata": {
                        "description": "Optional. Forces the table to be updated if different from the last time it was deployed."
                      }
                    },
                    "continueOnErrors": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If true, ingestion will continue even if some rows fail to ingest. Default: false."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Azure location to use for the managed identity and deployment script to auto-start triggers. Default: (resource group location)."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to apply to all resources."
                      }
                    },
                    "tagsByResource": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to apply to resources based on their resource type. Resource type specific tags will be merged with tags for all resources."
                      }
                    },
                    "dataFactoryName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Data Factory instance."
                      }
                    },
                    "rawRetentionInDays": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. Number of days of data to retain in the Data Explorer *_raw tables. Default: 0."
                      }
                    },
                    "storageAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the storage account to use for data ingestion."
                      }
                    },
                    "virtualNetworkId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the virtual network for private endpoints."
                      }
                    },
                    "privateEndpointSubnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the subnet for private endpoints."
                      }
                    },
                    "enablePublicAccess": {
                      "type": "bool",
                      "metadata": {
                        "description": "Optional. Enable public access."
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "0.7\r\n",
                    "$fxv#1": "//======================================================================================================================\r\n// Common utility functions\r\n//\r\n// TIP: Use Ctrl+K,Ctrl+0 to collapse all regions in VS Code\r\n//======================================================================================================================\r\n\r\n\r\n//===| Date functions |=================================================================================================\r\n\r\n// daterange\r\n.create-or-alter function \r\nwith (docstring = @'Converts 2 dates into a simple, user-friendly date range (e.g. Jan 1-Jan 3)', folder =@'Common') \r\ndaterange(start: datetime, end: datetime = datetime('0001-01-01'))\r\n{\r\n    let month = (d: datetime) { let mo = toint(substring(d, 5, 2)) - 1; dynamic(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])[mo] };\r\n    let day = (d: datetime) { toint(substring(d, 8, 2)) };\r\n    let endDate = iff(end == datetime('0001-01-01'), start, end);\r\n    let sameDay = startofday(start) == startofday(endDate);\r\n    let sameMonth = startofmonth(start) == startofmonth(endDate);\r\n    strcat(month(start), ' ', day(start), iff(sameDay, '', strcat('-', iff(sameMonth, '', strcat(month(endDate), ' ')), day(endDate))))\r\n}\r\n\r\n// monthsago\r\n.create-or-alter function \r\nwith (docstring = 'Gets the date that is the specified number of months ago', folder = 'Common')\r\nmonthsago(months: int)\r\n{\r\n    datetime_add('month', -months, startofmonth(now()))\r\n}\r\n\r\n\r\n//===| Number comparisons |=============================================================================================\r\n// NOTE: Must be defined before string converters\r\n\r\n// delta\r\n.create-or-alter function \r\nwith (docstring = @'Compares 2 values and returns the percentage change from oldval to newval', folder =@'Common') \r\ndelta(oldval: double, newval: double)\r\n{\r\n    (newval - todouble(oldval))/oldval\r\n}\r\n\r\n// percentOfTotal\r\n// NOTE: Must be before percent() function\r\n.create-or-alter function \r\nwith (docstring = @'Calculates the percentage of each record based on a required Count column', folder =@'Common') \r\npercentOfTotal(t: (Count: long), tot: long)\r\n{\r\n    let total = todouble(tot);\r\n    t \r\n    | extend Percent = round(Count / total * 100, 3) \r\n    | order by Count desc\r\n}\r\n\r\n// percent\r\n.create-or-alter function \r\nwith (docstring = @'Calculates the percentage of each record based on a required Count column', folder =@'Common') \r\npercent(t: (Count: long))\r\n{\r\n    let total = todouble(toscalar(t | summarize sum(Count)));\r\n    percentOfTotal(t, total)\r\n}\r\n\r\n// plusminus\r\n.create-or-alter function \r\nwith (docstring = 'Shows a +/- sign based on the direction of the number', folder = 'Common')\r\nplusminus(val: string)\r\n{\r\n    let neg = substring(val, 0, 1) == '-';\r\n    iff(neg, val, strcat('+', val))\r\n}\r\n\r\n// updown\r\n.create-or-alter function \r\nwith (docstring = 'Shows an up/down arrow based on the direction of the number', folder = 'Common')\r\nupdown(val: string)\r\n{\r\n    let neg = substring(val, 0, 1) == '-';\r\n    iff(neg, strcat('↓', substring(val, 1)), strcat('↑', val))\r\n}\r\n\r\n\r\n//===| String comparisons |=============================================================================================\r\n\r\n// percentstring\r\n// NOTE: Must be defined before deltastring\r\n.create-or-alter function \r\nwith (docstring = 'Calculate a percentage and render as a string', folder = 'Common')\r\npercentstring(num: double, total: double = 1.0, places: int = 9)\r\n{\r\n    let value = 1.0 * num / total * 100;\r\n    strcat(case(\r\n        places != 9, round(value, places),\r\n        value < 10,  round(value, 2),\r\n        round(value, 1)\r\n    ), '%')\r\n}\r\n\r\n//----------------------------------------------------------------------------------------------------------------------\r\n\r\n// arraystring\r\n.create-or-alter function \r\nwith (docstring = 'Convert an array to a comma-delimited string', folder = 'Common')\r\narraystring(arr: dynamic)\r\n{\r\n    replace_string(replace_regex(replace_regex(replace_regex(replace_regex(replace_regex(\r\n        tostring(arr)\r\n        , @'^\\[\"', '')\r\n        , @'\"\\]$', '')\r\n        , @'^, ', '')\r\n        , @', $', '')\r\n        , @'^\\[]$', '')\r\n        , '\",\"', ', ')\r\n}\r\n\r\n// deltastring\r\n.create-or-alter function \r\nwith (docstring = 'Calculate a delta percentage and render as a string', folder = 'Common')\r\ndeltastring(oldval: double, newval: double, places: int = 1, useArrows: bool = false)\r\n{\r\n    let d = delta(oldval, newval);\r\n    strcat(case(useArrows and d > 0, '↑', useArrows and d < 0, '↓', d < 0, '-', ''), percentstring(abs(d), 1, places))\r\n}\r\n\r\n// diffstring\r\n.create-or-alter function \r\nwith (docstring = 'Calculate the difference and render as a string', folder = 'Common')\r\ndiffstring(oldval: double, newval: double, places: int = 1)\r\n{\r\n    plusminus(round(newval - oldval, places))\r\n}\r\n\r\n// numberstring\r\n.create-or-alter function \r\nwith (docstring = 'Convert a number to a string', folder = 'Common')\r\nnumberstring(num: long, abbrev: bool = true)\r\n{\r\n    case(\r\n        num >= 10000000000000, strcat(round(1.0 * num / 1000000000000, 1), 'T'),\r\n        num >= 1000000000000,  strcat(round(1.0 * num / 1000000000000, 2), 'T'),\r\n        num >= 10000000000,    strcat(round(1.0 * num / 1000000000, 1), 'B'),\r\n        num >= 1000000000,     strcat(round(1.0 * num / 1000000000, 2), 'B'),\r\n        num >= 10000000,       strcat(round(1.0 * num / 1000000, 1), 'M'),\r\n        num >= 1000000,        strcat(round(1.0 * num / 1000000, 2), 'M'),\r\n        num >= 10000,          strcat(round(1.0 * num / 1000, 1), 'K'),\r\n        // Kusto doesn't support back-refs yet -- num > 1000, replace_regex(tostring(num), @'(\\d)(?=(\\d{3})+\\.)', @'\\1,'), // See https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/re2-library\r\n        num > 1000, replace_regex(tostring(num), @'([0-9]{3})$', @',\\1'), //num / 1000, ',', substring(tostring(num), 0) - (num / 1000 * 1000)),\r\n        tostring(num))\r\n}\r\n\r\n\r\n//===| Other |==========================================================================================================\r\n\r\n// ifempty\r\n.create-or-alter function \r\nwith (docstring = 'Replaces an empty value with the specified default value', folder = 'Common')\r\nifempty(val: dynamic, defaultVal: dynamic)\r\n{\r\n    iff(isempty(val), defaultVal, val)\r\n}\r\n",
                    "$fxv#2": "//======================================================================================================================\r\n// Ingestion database\r\n// Used for data ingestion, normalization, and cleansing.\r\n//\r\n// Data ingestion workflow:\r\n// - All data is ingested into tables named \"*_raw\". These tables have a union schema to support multiple sources and versions.\r\n// - All data is transformed to the latest FOCUS schema using an update policy into a table named after the version (e.g., \"1.0\" = \"_v1_0\").\r\n// - Data ingestion from previous version of hubs will remain in the versioned tables.\r\n// - Data is read from versioned functions in the Hub database. See HubSetup.kql for details.\r\n//\r\n// To add a new FOCUS versions:\r\n// 1. Add new columns to the *_raw tables per dataset\r\n// 2. Add new *_final_vX_Y tables per dataset\r\n// 3. Add new *_transform_vX_Y functions per dataset\r\n// 4. Change the update policy for the *_raw tables to use the new transform functions\r\n// 5. Update HubSetup.kql to read from the new *_final_vX_Y tables\r\n//======================================================================================================================\r\n\r\n// For allowed commands, see https://learn.microsoft.com/azure/data-explorer/database-script\r\n\r\n//===| Settings |=======================================================================================================\r\n\r\n.create-merge table HubSettingsLog (\r\n    version:   string,\r\n    scopes:    dynamic,\r\n    retention: dynamic\r\n)\r\n\r\n//----------------------------------------------------------------------------------------------------------------------\r\n\r\n// HubSettings function\r\n.create-or-alter function\r\nwith (docstring='Gets the latest version of hub settings.', folder='Settings')\r\nHubSettings()\r\n{\r\n    HubSettingsLog\r\n    | extend timestamp = ingestion_time()\r\n    | summarize arg_max(timestamp, *)\r\n}\r\n\r\n//----------------------------------------------------------------------------------------------------------------------\r\n\r\n// HubScopes function\r\n.create-or-alter function\r\nwith (docstring='Gets the currently configured scopes.', folder='Settings')\r\nHubScopes()\r\n{\r\n    HubSettings\r\n    | project scopes\r\n    | mv-expand scopes\r\n}\r\n\r\n\r\n//===| Open data |======================================================================================================\r\n\r\n// PricingUnits\r\n.create-merge table PricingUnits (    \r\n    x_PricingUnitDescription: string,\r\n    x_PricingBlockSize:       decimal,\r\n    PricingUnit:              string\r\n)\r\n\r\n// Regions\r\n.create-merge table Regions(\r\n    ResourceLocation: string,\r\n    RegionId:         string,\r\n    RegionName:       string\r\n)\r\n\r\n// ResourceTypes\r\n.create-merge table ResourceTypes(\r\n    x_ResourceType:           string,\r\n    SingularDisplayName:      string,\r\n    PluralDisplayName:        string,\r\n    LowerSingularDisplayName: string,\r\n    LowerPluralDisplayName:   string,\r\n    IsPreview:                bool,\r\n    Description:              string,\r\n    IconUri:                  string\r\n)\r\n\r\n// Services\r\n.create-merge table Services(\r\n    x_ConsumedService:        string,\r\n    x_ResourceType:           string,\r\n    ServiceName:              string,\r\n    ServiceCategory:          string,\r\n    ServiceSubcategory:       string,\r\n    PublisherName:            string,\r\n    x_PublisherCategory:      string,\r\n    x_Environment:            string,\r\n    x_ServiceModel:           string\r\n)\r\n\r\n//----------------------------------------------------------------------------------------------------------------------\r\n\r\n// parse_resourceid\r\n.create-or-alter function \r\nwith (docstring = 'Parses an Azure resource ID to extract resource attributes like the name, type, resource group, and subaccount ID.', folder = 'Common')\r\nparse_resourceid(resourceId: string) {\r\n    let ResourceId = tolower(resourceId);\r\n    // let ResourceId = tolower('/providers/Microsoft.BillingBenefits/savingsPlanOrders/2d2e284b-0638-427e-b8c6-1b874d4f17c8/sp/xxx');\r\n    let SubAccountId = tostring(extract('/subscriptions/[^/]+', 1, ResourceId));\r\n    let x_ResourceGroupName = tostring(extract('/resourcegroups/[^/]+', 1, ResourceId));\r\n    let providerPath = iff(ResourceId !contains '/providers/', '', split(iff(ResourceId startswith '/subscriptions/', strcat('/providers/microsoft.resources/', ResourceId), ResourceId), '/providers/')[-1]);\r\n    let x_ResourceProvider = iff(isempty(providerPath), '', split(providerPath, '/')[0]);\r\n    let tmp_ResourceProviderPath = iff(isempty(providerPath), '', substring(providerPath, strlen(x_ResourceProvider) + 1));\r\n    let segments = split(tmp_ResourceProviderPath, '/');\r\n    let ResourceName = trim(@'/+', replace_string(strcat_array(array_iff(\r\n        dynamic([false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true]),\r\n        segments, dynamic([])), '/'), '//', '/'));\r\n    let x_ResourceTypePath = trim(@'/+', replace_string(strcat_array(array_iff(\r\n        dynamic([true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false]),\r\n        segments, dynamic([])), '/'), '//', '/'));\r\n    let xRT = iff(isempty(x_ResourceProvider) or isempty(x_ResourceTypePath), '', strcat(x_ResourceProvider, '/', x_ResourceTypePath));\r\n    let types = split(toscalar(database('Ingestion').ResourceTypes | summarize types = make_set(strcat(x_ResourceType, '=', SingularDisplayName)) | extend types = strcat('||', strcat_array(types, '||')), '||'), strcat('||', xRT, '='));\r\n    let ResourceType = iff(array_length(types) < 2, '', split(types[1], '||')[0]);\r\n    bag_pack('ResourceId', ResourceId, 'ResourceName', ResourceName, 'ResourceType', coalesce(ResourceType, xRT), 'SubAccountId', SubAccountId, 'x_ResourceGroupName', x_ResourceGroupName, 'x_ResourceProvider', x_ResourceProvider, 'x_ResourceType', xRT)\r\n}\r\n\r\n\r\n//===| Prices |=========================================================================================================\r\n// NOTE: Must be before cost details.\r\n//\r\n// Supported versions:\r\n// - MS EA 2023-05-01  -- See https://learn.microsoft.com/azure/cost-management-billing/dataset-schema/price-sheet-ea\r\n// - MS MCA 2023-05-01 -- See https://learn.microsoft.com/azure/cost-management-billing/dataset-schema/price-sheet-mca\r\n//======================================================================================================================\r\n\r\n// Prices_raw table\r\n.create-merge table Prices_raw (\r\n    BasePrice:          decimal,  // Azure EA + MCA\r\n    BillingAccountId:   string,   // Azure MCA\r\n    BillingAccountName: string,   // Azure MCA\r\n    BillingCurrency:    string,   // Azure MCA\r\n    BillingProfileId:   string,   // Azure MCA\r\n    BillingProfileName: string,   // Azure MCA\r\n    Currency:           string,   // Azure MCA\r\n    CurrencyCode:       string,   // Azure EA \r\n    EffectiveEndDate:   datetime, // Azure MCA\r\n    EffectiveStartDate: datetime, // Azure EA + MCA\r\n    EnrollmentNumber:   string,   // Azure EA \r\n    IncludedQuantity:   decimal,  // Azure EA \r\n    MarketPrice:        decimal,  // Azure EA + MCA\r\n    MeterCategory:      string,   // Azure EA + MCA\r\n    MeterId:            string,   // Azure MCA\r\n    MeterID:            string,   // Azure EA \r\n    MeterName:          string,   // Azure EA + MCA\r\n    MeterRegion:        string,   // Azure EA + MCA\r\n    MeterSubCategory:   string,   // Azure EA + MCA\r\n    MeterType:          string,   // Azure EA + MCA\r\n    OfferID:            string,   // Azure EA \r\n    PartNumber:         string,   // Azure EA\r\n    PriceType:          string,   // Azure EA + MCA\r\n    Product:            string,   // Azure EA + MCA\r\n    ProductId:          string,   // Azure MCA\r\n    ProductID:          string,   // Azure EA \r\n    ServiceFamily:      string,   // Azure EA + MCA\r\n    SkuId:              string,   // Azure MCA\r\n    SkuID:              string,   // Azure EA\r\n    Term:               string,   // Azure EA + MCA\r\n    TierMinimumUnits:   decimal,  // Azure MCA\r\n    UnitOfMeasure:      string,   // Azure EA + MCA\r\n    UnitPrice:          decimal,  // Azure EA + MCA\r\n    x_SourceName:       string,   // Hubs add-on\r\n    x_SourceProvider:   string,   // Hubs add-on\r\n    x_SourceType:       string,   // Hubs add-on\r\n    x_SourceVersion:    string    // Hubs add-on\r\n)\r\n\r\n// Prices_raw ingestion mapping\r\n.create-or-alter table Prices_raw ingestion parquet mapping \"Prices_raw_mapping\"\r\n```\r\n[\r\n    { \"Column\": \"BasePrice\",          \"Properties\": { \"Field\": \"BasePrice\" } },\r\n    { \"Column\": \"BillingAccountId\",   \"Properties\": { \"Field\": \"BillingAccountId\" } },\r\n    { \"Column\": \"BillingAccountName\", \"Properties\": { \"Field\": \"BillingAccountName\" } },\r\n    { \"Column\": \"BillingCurrency\",    \"Properties\": { \"Field\": \"BillingCurrency\" } },\r\n    { \"Column\": \"BillingProfileId\",   \"Properties\": { \"Field\": \"BillingProfileId\" } },\r\n    { \"Column\": \"BillingProfileName\", \"Properties\": { \"Field\": \"BillingProfileName\" } },\r\n    { \"Column\": \"Currency\",           \"Properties\": { \"Field\": \"Currency\" } },\r\n    { \"Column\": \"CurrencyCode\",       \"Properties\": { \"Field\": \"CurrencyCode\" } },\r\n    { \"Column\": \"EffectiveEndDate\",   \"Properties\": { \"Field\": \"EffectiveEndDate\" } },\r\n    { \"Column\": \"EffectiveStartDate\", \"Properties\": { \"Field\": \"EffectiveStartDate\" } },\r\n    { \"Column\": \"EnrollmentNumber\",   \"Properties\": { \"Field\": \"EnrollmentNumber\" } },\r\n    { \"Column\": \"IncludedQuantity\",   \"Properties\": { \"Field\": \"IncludedQuantity\" } },\r\n    { \"Column\": \"MarketPrice\",        \"Properties\": { \"Field\": \"MarketPrice\" } },\r\n    { \"Column\": \"MeterCategory\",      \"Properties\": { \"Field\": \"MeterCategory\" } },\r\n    { \"Column\": \"MeterId\",            \"Properties\": { \"Field\": \"MeterId\" } },\r\n    { \"Column\": \"MeterID\",            \"Properties\": { \"Field\": \"MeterID\" } },\r\n    { \"Column\": \"MeterName\",          \"Properties\": { \"Field\": \"MeterName\" } },\r\n    { \"Column\": \"MeterRegion\",        \"Properties\": { \"Field\": \"MeterRegion\" } },\r\n    { \"Column\": \"MeterSubCategory\",   \"Properties\": { \"Field\": \"MeterSubCategory\" } },\r\n    { \"Column\": \"MeterType\",          \"Properties\": { \"Field\": \"MeterType\" } },\r\n    { \"Column\": \"OfferID\",            \"Properties\": { \"Field\": \"OfferID\" } },\r\n    { \"Column\": \"PartNumber\",         \"Properties\": { \"Field\": \"PartNumber\" } },\r\n    { \"Column\": \"PriceType\",          \"Properties\": { \"Field\": \"PriceType\" } },\r\n    { \"Column\": \"Product\",            \"Properties\": { \"Field\": \"Product\" } },\r\n    { \"Column\": \"ProductId\",          \"Properties\": { \"Field\": \"ProductId\" } },\r\n    { \"Column\": \"ProductID\",          \"Properties\": { \"Field\": \"ProductID\" } },\r\n    { \"Column\": \"ServiceFamily\",      \"Properties\": { \"Field\": \"ServiceFamily\" } },\r\n    { \"Column\": \"SkuId\",              \"Properties\": { \"Field\": \"SkuId\" } },\r\n    { \"Column\": \"SkuID\",              \"Properties\": { \"Field\": \"SkuID\" } },\r\n    { \"Column\": \"Term\",               \"Properties\": { \"Field\": \"Term\" } },\r\n    { \"Column\": \"TierMinimumUnits\",   \"Properties\": { \"Field\": \"TierMinimumUnits\" } },\r\n    { \"Column\": \"UnitOfMeasure\",      \"Properties\": { \"Field\": \"UnitOfMeasure\" } },\r\n    { \"Column\": \"UnitPrice\",          \"Properties\": { \"Field\": \"UnitPrice\" } },\r\n    { \"Column\": \"x_SourceName\",       \"Properties\": { \"Field\": \"x_SourceName\" } },\r\n    { \"Column\": \"x_SourceProvider\",   \"Properties\": { \"Field\": \"x_SourceProvider\" } },\r\n    { \"Column\": \"x_SourceType\",       \"Properties\": { \"Field\": \"x_SourceType\" } },\r\n    { \"Column\": \"x_SourceVersion\",    \"Properties\": { \"Field\": \"x_SourceVersion\" } }\r\n]\r\n```\r\n\r\n// Prices_raw retention policy\r\n.alter-merge table Prices_raw policy retention softdelete = $$rawRetentionInDays$$d recoverability = disabled\r\n\r\n//----------------------------------------------------------------------------------------------------------------------\r\n\r\n// Prices_transform_v1_0 function\r\n.create-or-alter function\r\nwith (docstring='Transforms Prices_raw into FOCUS 1.0.', folder='Prices')\r\nPrices_transform_v1_0()\r\n{\r\n    // NOTE: All open issues and questions are tracked @ https://github.com/microsoft/finops-toolkit/issues/1111\r\n    let isoMonths = (duration: string) {\r\n        let number = toint(replace_regex(duration, @'[PMY]', ''));\r\n        toint(case(\r\n            duration == '', toint(''),\r\n            duration endswith \"Y\", number * 12,\r\n            duration endswith \"M\", number,\r\n            -1\r\n        ))\r\n    };\r\n    let prices = materialize(\r\n        Prices_raw\r\n        | extend x_SkuId = coalesce(SkuId, SkuID)\r\n        | extend x_SkuMeterId = coalesce(MeterId, MeterID)\r\n        | extend x_SkuProductId = coalesce(ProductId, ProductID)\r\n        | extend x_SkuTerm = isoMonths(Term)\r\n        | project-rename\r\n            x_BaseUnitPrice = BasePrice,\r\n            x_EffectivePeriodEnd = EffectiveEndDate,\r\n            x_EffectivePeriodStart = EffectiveStartDate,\r\n            x_PricingUnitDescription = UnitOfMeasure,\r\n            x_SkuIncludedQuantity = IncludedQuantity,\r\n            x_SkuMeterCategory = MeterCategory,\r\n            x_SkuMeterName = MeterName,\r\n            x_SkuMeterSubcategory = MeterSubCategory,\r\n            x_SkuMeterType = MeterType,\r\n            x_SkuOfferId = OfferID,\r\n            x_SkuPartNumber = PartNumber,\r\n            x_SkuPriceType = PriceType,\r\n            x_SkuRegion = MeterRegion,\r\n            x_SkuServiceFamily = ServiceFamily,\r\n            x_SkuTier = TierMinimumUnits\r\n        | extend ContractedUnitPrice = iff(x_SkuPriceType != 'SavingsPlan', UnitPrice, todecimal(''))  // UnitPrice for savings plan is not the on-demand unit price\r\n        | extend ListUnitPrice = iff(x_SkuPriceType != 'SavingsPlan', MarketPrice, todecimal(''))  // MarketPrice for savings plan is not the list price\r\n        | extend ChargeCategory = case(\r\n            x_SkuPriceType == 'Consumption', 'Usage',\r\n            x_SkuPriceType == 'ReservedInstance', 'Purchase',\r\n            x_SkuPriceType == 'SavingsPlan', 'Usage',  // Savings plan prices are for committed usage, not the purchase\r\n            ''\r\n        )\r\n        | extend SkuPriceIdv2 = strcat(case(x_SkuPriceType == 'Consumption', 'OD', x_SkuPriceType == 'ReservedInstance', 'RI', x_SkuPriceType == 'SavingsPlan', 'SP', 'XX'), substring(ChargeCategory, 0, 1), x_SkuTerm, '_', x_SkuProductId, '_', x_SkuId, '_', x_SkuMeterType, '_', x_SkuTier, x_SkuOfferId)\r\n        | extend x_BillingAccountId = iff(BillingAccountId startswith '/', split(BillingAccountId, '/')[-1], coalesce(BillingAccountId, EnrollmentNumber))\r\n        | extend x_BillingProfileId = iff(BillingProfileId startswith '/', split(BillingProfileId, '/')[-1], coalesce(BillingProfileId, EnrollmentNumber))\r\n        | extend tmp_SavingsPlanKey = strcat(x_SkuMeterId, x_SkuProductId, x_SkuId, x_SkuTier, x_SkuOfferId)\r\n        //\r\n        // Get latest ingested row based on the unique ID\r\n        | extend x_IngestionTime = ingestion_time()\r\n    );\r\n    //\r\n    // Meters for reservations and savings plans to identify commitment eligibility\r\n    let riMeters = prices | where x_SkuPriceType == 'ReservedInstance' | distinct x_SkuMeterId;\r\n    let spMeters = prices | where x_SkuPriceType == 'SavingsPlan' | distinct x_SkuMeterId;\r\n    // \r\n    // Copy list/base/contracted prices from on-demand SKUs\r\n    prices\r\n    | where x_SkuPriceType == 'SavingsPlan'\r\n    // If we use join, specify the shuffle key\r\n    // TODO: Compare join vs. lookup perf -- | join kind=leftouter hint.strategy=shuffle (prices | where x_SkuPriceType == 'Consumption' | where x_SkuMeterId in (spMeters) | distinct tmp_SavingsPlanKey, ListUnitPrice, ContractedUnitPrice, x_BaseUnitPrice) on tmp_SavingsPlanKey\r\n    | lookup kind=leftouter (prices | where x_SkuPriceType == 'Consumption' | where x_SkuMeterId in (spMeters) | distinct tmp_SavingsPlanKey, ListUnitPrice, ContractedUnitPrice, x_BaseUnitPrice) on tmp_SavingsPlanKey\r\n    | extend ListUnitPrice = coalesce(ListUnitPrice, ListUnitPrice1)\r\n    | extend ContractedUnitPrice = coalesce(ContractedUnitPrice, ContractedUnitPrice1)\r\n    | extend x_BaseUnitPrice = coalesce(x_BaseUnitPrice, x_BaseUnitPrice1)\r\n    | project-away ListUnitPrice1, ContractedUnitPrice1, x_BaseUnitPrice1, tmp_SavingsPlanKey\r\n    | union ((prices | where x_SkuPriceType != 'SavingsPlan'))\r\n    //\r\n    // Calculate commitment discount elgibility\r\n    // TODO: Would a join be faster?\r\n    | extend x_CommitmentDiscountSpendEligibility = iff(x_SkuMeterId in (riMeters) and x_SkuPriceType != 'ReservedInstance', 'Eligible', 'Not Eligible')\r\n    | extend x_CommitmentDiscountUsageEligibility = iff(x_SkuMeterId in (spMeters), 'Eligible', 'Not Eligible')\r\n    //\r\n    // Add PricingUnit and x_PricingBlockSize\r\n    // TODO: Compare join vs. lookup perf -- | join kind=leftouter (PricingUnits) on x_PricingUnitDescription | project-away x_PricingUnitDescription1\r\n    | lookup kind=leftouter (PricingUnits) on x_PricingUnitDescription\r\n    //\r\n    | extend x_EffectiveUnitPrice = iff(x_SkuPriceType == 'SavingsPlan', UnitPrice, todecimal(''))  // Savings plan prices are for the effective price, not the contracted price\r\n    | extend x_EffectiveUnitPriceDiscount = ContractedUnitPrice - x_EffectiveUnitPrice\r\n    | extend x_ContractedUnitPriceDiscount = ListUnitPrice - ContractedUnitPrice\r\n    | extend x_TotalUnitPriceDiscount = ListUnitPrice - x_EffectiveUnitPrice\r\n    | project\r\n        BillingAccountId = case(\r\n            BillingProfileId startswith '/', BillingProfileId,\r\n            BillingAccountId startswith '/', BillingAccountId,\r\n            strcat('/providers/Microsoft.Billing/billingAccounts/', x_BillingAccountId, iff(x_BillingProfileId != x_BillingAccountId, '', strcat('/billingProfiles/', x_BillingProfileId)))\r\n        ),\r\n        BillingAccountName = coalesce(BillingProfileName, BillingAccountName, x_BillingProfileId),\r\n        BillingCurrency = coalesce(BillingCurrency, CurrencyCode, Currency),  // Currency last as a fallback only\r\n        ChargeCategory,\r\n        CommitmentDiscountCategory = case(\r\n            x_SkuPriceType == 'ReservedInstance', 'Usage',\r\n            x_SkuPriceType == 'SavingsPlan', 'Spend',\r\n            ''\r\n        ),\r\n        CommitmentDiscountType = case(\r\n            x_SkuPriceType == 'ReservedInstance', 'Reservation',\r\n            x_SkuPriceType == 'SavingsPlan', 'Savings plan',\r\n            ''\r\n        ),\r\n        ContractedUnitPrice,\r\n        ListUnitPrice,\r\n        PricingCategory = case(\r\n            x_SkuPriceType == 'Consumption', 'Standard',\r\n            x_SkuPriceType == 'ReservedInstance', 'Standard',  // Reservation purchases are tracked as \"Standard\"\r\n            x_SkuPriceType == 'SavingsPlan', 'Committed',\r\n            ''\r\n        ),\r\n        PricingUnit,\r\n        SkuId = coalesce(ProductId, ProductID),\r\n        SkuPriceId = strcat(x_SkuProductId, '_', x_SkuId, '_', x_SkuMeterType),\r\n        SkuPriceIdv2,\r\n        x_BaseUnitPrice,\r\n        x_BillingAccountAgreement = case(\r\n            strlen(x_BillingAccountId) > 32, 'MCA',\r\n            strlen(x_BillingAccountId) < 32, 'EA',\r\n            'Unknown'\r\n        ),\r\n        x_BillingAccountId,\r\n        x_BillingProfileId,\r\n        x_CommitmentDiscountSpendEligibility,\r\n        x_CommitmentDiscountUsageEligibility,\r\n        x_ContractedUnitPriceDiscount,\r\n        x_ContractedUnitPriceDiscountPercent = 1.0 * x_ContractedUnitPriceDiscount / ListUnitPrice * 100,\r\n        x_EffectivePeriodEnd = startofmonth(x_EffectivePeriodEnd + 1h),\r\n        x_EffectivePeriodStart,\r\n        x_EffectiveUnitPrice,\r\n        x_EffectiveUnitPriceDiscount,\r\n        x_EffectiveUnitPriceDiscountPercent = 1.0 * x_EffectiveUnitPriceDiscount / ContractedUnitPrice * 100,\r\n        x_IngestionTime,\r\n        x_PricingBlockSize,\r\n        x_PricingCurrency = coalesce(Currency, CurrencyCode),  // CurrencyCode last as a fallback only\r\n        x_PricingSubcategory = case(\r\n            x_SkuPriceType == 'Consumption' and (x_SkuIncludedQuantity > 0 or x_SkuTier > 0), 'Tiered',\r\n            x_SkuPriceType == 'Consumption', 'Standard',\r\n            x_SkuPriceType == 'ReservedInstance', 'Standard', // Reservation purchases are tracked as \"Standard\"\r\n            x_SkuPriceType == 'SavingsPlan', 'Committed Spend',\r\n            ''\r\n        ),\r\n        x_PricingUnitDescription,\r\n        x_SkuDescription = Product,\r\n        x_SkuId,\r\n        x_SkuIncludedQuantity,\r\n        x_SkuMeterCategory,\r\n        x_SkuMeterId,\r\n        x_SkuMeterName,\r\n        x_SkuMeterSubcategory,\r\n        x_SkuMeterType,\r\n        x_SkuPriceType,\r\n        x_SkuProductId,\r\n        x_SkuRegion,\r\n        x_SkuServiceFamily,\r\n        x_SkuOfferId,\r\n        x_SkuPartNumber,\r\n        x_SkuTerm,\r\n        x_SkuTier,\r\n        x_SourceName = coalesce(x_SourceName, 'Cost Management'),\r\n        x_SourceProvider = coalesce(x_SourceProvider, 'Microsoft'),\r\n        x_SourceType = coalesce(x_SourceType, 'PriceSheet'),\r\n        x_SourceVersion = coalesce(x_SourceVersion, '2023-05-01'),\r\n        x_TotalUnitPriceDiscount,\r\n        x_TotalUnitPriceDiscountPercent = 1.0 * x_TotalUnitPriceDiscount / ListUnitPrice * 100\r\n}\r\n\r\n//----------------------------------------------------------------------------------------------------------------------\r\n\r\n// Prices_final_v1_0 table\r\n// FOCUS 1.0 version of the price sheet that covers everything defined in Prices_raw.\r\n.create-merge table Prices_final_v1_0 (\r\n    BillingAccountId:                     string,\r\n    BillingAccountName:                   string,\r\n    BillingCurrency:                      string,\r\n    ChargeCategory:                       string,\r\n    CommitmentDiscountCategory:           string,\r\n    CommitmentDiscountType:               string,\r\n    ContractedUnitPrice:                  decimal,\r\n    ListUnitPrice:                        decimal,\r\n    PricingCategory:                      string,\r\n    PricingUnit:                          string,\r\n    SkuId:                                string,\r\n    SkuPriceId:                           string,\r\n    SkuPriceIdv2:                         string,    // Hubs add-on\r\n    x_BaseUnitPrice:                      decimal,   // Azure\r\n    x_BillingAccountAgreement:            string,    // Hubs add-on\r\n    x_BillingAccountId:                   string,    // Azure MCA\r\n    x_BillingProfileId:                   string,    // Azure MCA\r\n    x_CommitmentDiscountSpendEligibility: string,    // Hubs add-on\r\n    x_CommitmentDiscountUsageEligibility: string,    // Hubs add-on\r\n    x_ContractedUnitPriceDiscount:        decimal,   // Hubs add-on\r\n    x_ContractedUnitPriceDiscountPercent: decimal,   // Hubs add-on\r\n    x_EffectivePeriodEnd:                 datetime,  // Azure\r\n    x_EffectivePeriodStart:               datetime,  // Azure\r\n    x_EffectiveUnitPrice:                 decimal,   // Azure\r\n    x_EffectiveUnitPriceDiscount:         decimal,   // Hubs add-on\r\n    x_EffectiveUnitPriceDiscountPercent:  decimal,   // Hubs add-on\r\n    x_IngestionTime:                      datetime,  // Hubs add-on\r\n    x_PricingBlockSize:                   decimal,   // Hubs add-on\r\n    x_PricingCurrency:                    string,    // Azure\r\n    x_PricingSubcategory:                 string,    // Hubs add-on\r\n    x_PricingUnitDescription:             string,    // Azure\r\n    x_SkuDescription:                     string,    // Azure\r\n    x_SkuId:                              string,    // Azure\r\n    x_SkuIncludedQuantity:                decimal,   // Azure EA\r\n    x_SkuMeterCategory:                   string,    // Azure\r\n    x_SkuMeterId:                         string,    // Azure\r\n    x_SkuMeterName:                       string,    // Azure\r\n    x_SkuMeterSubcategory:                string,    // Azure\r\n    x_SkuMeterType:                       string,    // Azure\r\n    x_SkuPriceType:                       string,    // Azure\r\n    x_SkuProductId:                       string,    // Azure\r\n    x_SkuRegion:                          string,    // Azure\r\n    x_SkuServiceFamily:                   string,    // Azure\r\n    x_SkuOfferId:                         string,    // Azure EA\r\n    x_SkuPartNumber:                      string,    // Azure EA\r\n    x_SkuTerm:                            int,       // Azure\r\n    x_SkuTier:                            decimal,   // Azure MCA\r\n    x_SourceName:                         string,    // Hubs add-on\r\n    x_SourceProvider:                     string,    // Hubs add-on\r\n    x_SourceType:                         string,    // Hubs add-on\r\n    x_SourceVersion:                      string,    // Hubs add-on\r\n    x_TotalUnitPriceDiscount:             decimal,   // Hubs add-on\r\n    x_TotalUnitPriceDiscountPercent:      decimal    // Hubs add-on\r\n)\r\n\r\n//----------------------------------------------------------------------------------------------------------------------\r\n\r\n// Update policy for Prices_raw -> Prices_final_v1_0\r\n// NOTE: Must be after transform function is defined\r\n.alter table Prices_final_v1_0 policy update\r\n```\r\n[{\r\n    \"IsEnabled\": true,\r\n    \"Source\": \"Prices_raw\",\r\n    \"Query\": \"Prices_transform_v1_0()\",\r\n    \"IsTransactional\": true,\r\n    \"PropagateIngestionProperties\": true\r\n}]\r\n```\r\n\r\n\r\n//===| Cost and usage |=================================================================================================\r\n// Supported versions:\r\n// - MS: 1.0, 1.0-preview(v1) -- See https://aka.ms/costmgmt/exports/focus\r\n// - AWS: 1.0                 -- See https://docs.aws.amazon.com/cur/latest/userguide/table-dictionary-focus-1-0-aws-columns.html\r\n// - GCP: Jan-Jun 2024        -- See https://cloud.google.com/resources/google-cloud-focus?e=48754805&hl=en\r\n//                                   Links to (Aug 2024): https://services.google.com/fh/files/misc/focus_guide_v1.pdf\r\n//                               See also:\r\n//                               - https://cloud.google.com/billing/docs/how-to/export-data-bigquery-tables/standard-usage\r\n//                               - https://cloud.google.com/billing/docs/how-to/export-data-bigquery-tables/detailed-usage\r\n// - OCI: 1.0                 -- See https://docs.oracle.com/iaas/Content/Billing/Concepts/costusagereportsoverview.htm#costreports__focus-cost-report-schema\r\n//\r\n// Support for non-Azure data is limited to ingestion only. Data is not transformed across versions.\r\n//======================================================================================================================\r\n\r\n// Costs_raw table\r\n.create-merge table Costs_raw (\r\n    AvailabilityZone:           string,    // FOCUS 0.5+\r\n    BilledCost:                 decimal,   // FOCUS 0.5+\r\n    BillingAccountId:           string,    // FOCUS 0.5+\r\n    BillingAccountName:         string,    // FOCUS 0.5+\r\n    BillingAccountType:         string,    // Azure 1.0-preview(v1)+\r\n    BillingCurrency:            string,    // FOCUS 0.5+\r\n    BillingPeriodEnd:           datetime,  // FOCUS 0.5+\r\n    BillingPeriodStart:         datetime,  // FOCUS 0.5+\r\n    ChargeCategory:             string,    // FOCUS 1.0-preview+\r\n    ChargeClass:                string,    // FOCUS 1.0+\r\n    ChargeDescription:          string,    // FOCUS 1.0+\r\n    ChargeFrequency:            string,    // FOCUS 1.0+\r\n    ChargePeriodEnd:            datetime,  // FOCUS 0.5+\r\n    ChargePeriodStart:          datetime,  // FOCUS 0.5+\r\n    ChargeSubcategory:          string,    // FOCUS 1.0-preview only\r\n    CommitmentDiscountCategory: string,    // FOCUS 1.0-preview+\r\n    CommitmentDiscountId:       string,    // FOCUS 1.0-preview+\r\n    CommitmentDiscountName:     string,    // FOCUS 1.0-preview+\r\n    CommitmentDiscountStatus:   string,    // FOCUS 1.0+\r\n    CommitmentDiscountType:     string,    // FOCUS 1.0-preview+\r\n    ConsumedQuantity:           decimal,   // FOCUS 1.0+\r\n    ConsumedUnit:               string,    // FOCUS 1.0+\r\n    ContractedCost:             decimal,   // FOCUS 1.0+\r\n    ContractedUnitPrice:        decimal,   // FOCUS 1.0+\r\n    EffectiveCost:              decimal,   // FOCUS 1.0-preview+\r\n    InvoiceIssuerName:          string,    // FOCUS 0.5+\r\n    ListCost:                   decimal,   // FOCUS 1.0-preview+\r\n    ListUnitPrice:              decimal,   // FOCUS 1.0-preview+\r\n    PricingCategory:            string,    // FOCUS 1.0-preview+\r\n    PricingQuantity:            decimal,   // FOCUS 1.0-preview+\r\n    PricingUnit:                string,    // FOCUS 1.0-preview+\r\n    ProviderName:               string,    // FOCUS 0.5+\r\n    PublisherName:              string,    // FOCUS 0.5+\r\n    Region:                     string,    // FOCUS 0.5-1.0-preview (deprecated)\r\n    RegionId:                   string,    // FOCUS 1.0+\r\n    RegionName:                 string,    // FOCUS 1.0+\r\n    ResourceId:                 string,    // FOCUS 0.5+\r\n    ResourceName:               string,    // FOCUS 0.5+\r\n    ResourceType:               string,    // FOCUS 1.0-preview+\r\n    ServiceCategory:            string,    // FOCUS 0.5+\r\n    ServiceName:                string,    // FOCUS 0.5+\r\n    SkuId:                      string,    // FOCUS 1.0-preview+\r\n    SkuPriceId:                 string,    // FOCUS 1.0-preview+\r\n    SubAccountId:               string,    // FOCUS 0.5+\r\n    SubAccountName:             string,    // FOCUS 0.5+\r\n    SubAccountType:             string,    // Azure 1.0-preview(v1)+\r\n    Tags:                       string,    // FOCUS 1.0-preview+\r\n    UsageAmount:                decimal,   // GCP Jan 2024 -- Removed Mar 2024 (UsageQuantity)\r\n    UsageQuantity:              decimal,   // FOCUS 1.0-preview only\r\n    UsageUnit:                  string,    // FOCUS 1.0-preview only\r\n    x_AccountId:                string,    // Azure 1.0-preview(v1)+\r\n    x_AccountName:              string,    // Azure 1.0-preview(v1)+\r\n    x_AccountOwnerId:           string,    // Azure 1.0-preview(v1)+\r\n    x_BilledCostInUsd:          decimal,   // Azure 1.0-preview(v1)+\r\n    x_BilledUnitPrice:          decimal,   // Azure 1.0-preview(v1)+\r\n    x_BillingAccountId:         string,    // Azure 1.0-preview(v1)+\r\n    x_BillingAccountName:       string,    // Azure 1.0-preview(v1)+\r\n    x_BillingExchangeRate:      decimal,   // Azure 1.0-preview(v1)+\r\n    x_BillingExchangeRateDate:  datetime,  // Azure 1.0-preview(v1)+\r\n    x_BillingProfileId:         string,    // Azure 1.0-preview(v1)+\r\n    x_BillingProfileName:       string,    // Azure 1.0-preview(v1)+\r\n    x_ChargeId:                 string,    // Azure 1.0-preview(v1) only\r\n    x_ContractedCostInUsd:      decimal,   // Azure 1.0+\r\n    x_Cost:                     decimal,   // GCP Jan 2024 -- Removed Jun 2024 (ContractedCost)\r\n    x_CostAllocationRuleName:   string,    // Azure 1.0-preview(v1)+\r\n    x_CostCategories:           string,    // AWS 1.0 (JSON)\r\n    x_CostCenter:               string,    // Azure 1.0-preview(v1)+\r\n    x_Credits:                  string,    // GCP Jan 2024\r\n    x_CostType:                 string,    // GCP Jan 2024\r\n    x_CurrencyConversionRate:   decimal,   // GCP Jun 2024\r\n    x_CustomerId:               string,    // Azure 1.0-preview(v1)+\r\n    x_CustomerName:             string,    // Azure 1.0-preview(v1)+\r\n    x_Discount:                 string,    // AWS 1.0 (JSON)\r\n    x_EffectiveCostInUsd:       decimal,   // Azure 1.0-preview(v1)+\r\n    x_EffectiveUnitPrice:       decimal,   // Azure 1.0-preview(v1)+\r\n    x_ExportTime:               datetime,  // GCP Jan 2024\r\n    x_InvoiceId:                string,    // Azure 1.0-preview(v1)+\r\n    x_InvoiceIssuerId:          string,    // Azure 1.0-preview(v1)+\r\n    x_InvoiceSectionId:         string,    // Azure 1.0-preview(v1)+\r\n    x_InvoiceSectionName:       string,    // Azure 1.0-preview(v1)+\r\n    x_ListCostInUsd:            decimal,   // Azure 1.0-preview(v1)+\r\n    x_Location:                 string,    // GCP Jan 2024\r\n    x_OnDemandCost:             decimal,   // Azure 1.0-preview(v1) only\r\n    x_OnDemandCostInUsd:        decimal,   // Azure 1.0-preview(v1) only\r\n    x_OnDemandUnitPrice:        decimal,   // Azure 1.0-preview(v1) only\r\n    x_Operation:                string,    // AWS 1.0\r\n    x_PartnerCreditApplied:     string,    // Azure 1.0-preview(v1)+\r\n    x_PartnerCreditRate:        string,    // Azure 1.0-preview(v1)+\r\n    x_PricingBlockSize:         decimal,   // Azure 1.0-preview(v1)+\r\n    x_PricingCurrency:          string,    // Azure 1.0-preview(v1)+\r\n    x_PricingSubcategory:       string,    // Azure 1.0-preview(v1)+\r\n    x_PricingUnitDescription:   string,    // Azure 1.0-preview(v1)+\r\n    x_Project:                  string,    // GCP Jan 2024\r\n    x_PublisherCategory:        string,    // Azure 1.0-preview(v1)+\r\n    x_PublisherId:              string,    // Azure 1.0-preview(v1)+\r\n    x_ResellerId:               string,    // Azure 1.0-preview(v1)+\r\n    x_ResellerName:             string,    // Azure 1.0-preview(v1)+\r\n    x_ResourceGroupName:        string,    // Azure 1.0-preview(v1)+\r\n    x_ResourceType:             string,    // Azure 1.0-preview(v1)+\r\n    x_ServiceCode:              string,    // AWS 1.0\r\n    x_ServiceId:                string,    // GCP Jan 2024\r\n    x_ServicePeriodEnd:         datetime,  // Azure 1.0-preview(v1)+\r\n    x_ServicePeriodStart:       datetime,  // Azure 1.0-preview(v1)+\r\n    x_SkuDescription:           string,    // Azure 1.0-preview(v1)+\r\n    x_SkuDetails:               string,    // Azure 1.0-preview(v1)+\r\n    x_SkuIsCreditEligible:      bool,      // Azure 1.0-preview(v1)+ \r\n    x_SkuMeterCategory:         string,    // Azure 1.0-preview(v1)+\r\n    x_SkuMeterId:               string,    // Azure 1.0-preview(v1)+\r\n    x_SkuMeterName:             string,    // Azure 1.0-preview(v1)+\r\n    x_SkuMeterSubcategory:      string,    // Azure 1.0-preview(v1)+\r\n    x_SkuOfferId:               string,    // Azure 1.0-preview(v1)+\r\n    x_SkuOrderId:               string,    // Azure 1.0-preview(v1)+\r\n    x_SkuOrderName:             string,    // Azure 1.0-preview(v1)+\r\n    x_SkuPartNumber:            string,    // Azure 1.0-preview(v1)+\r\n    x_SkuRegion:                string,    // Azure 1.0-preview(v1)+\r\n    x_SkuServiceFamily:         string,    // Azure 1.0-preview(v1)+\r\n    x_SkuTerm:                  int,       // Azure 1.0-preview(v1)+\r\n    x_SkuTier:                  string,    // Azure 1.0-preview(v1)+ \r\n    x_SourceName:               string,    // Hubs add-on\r\n    x_SourceProvider:           string,    // Hubs add-on\r\n    x_SourceType:               string,    // Hubs add-on\r\n    x_SourceVersion:            string,    // Hubs add-on\r\n    x_UsageType:                string     // AWS 1.0\r\n)\r\n\r\n// Costs_raw ingestion mapping\r\n.create-or-alter table Costs_raw ingestion parquet mapping \"Costs_raw_mapping\"\r\n```\r\n[\r\n    { \"Column\": \"AvailabilityZone\",           \"Properties\": { \"Field\": \"AvailabilityZone\" } },\r\n    { \"Column\": \"BilledCost\",                 \"Properties\": { \"Field\": \"BilledCost\" } },\r\n    { \"Column\": \"BillingAccountId\",           \"Properties\": { \"Field\": \"BillingAccountId\" } },\r\n    { \"Column\": \"BillingAccountName\",         \"Properties\": { \"Field\": \"BillingAccountName\" } },\r\n    { \"Column\": \"BillingAccountType\",         \"Properties\": { \"Field\": \"BillingAccountType\" } },\r\n    { \"Column\": \"BillingCurrency\",            \"Properties\": { \"Field\": \"BillingCurrency\" } },\r\n    { \"Column\": \"BillingPeriodEnd\",           \"Properties\": { \"Field\": \"BillingPeriodEnd\" } },\r\n    { \"Column\": \"BillingPeriodStart\",         \"Properties\": { \"Field\": \"BillingPeriodStart\" } },\r\n    { \"Column\": \"ChargeCategory\",             \"Properties\": { \"Field\": \"ChargeCategory\" } },\r\n    { \"Column\": \"ChargeClass\",                \"Properties\": { \"Field\": \"ChargeClass\" } },\r\n    { \"Column\": \"ChargeDescription\",          \"Properties\": { \"Field\": \"ChargeDescription\" } },\r\n    { \"Column\": \"ChargeFrequency\",            \"Properties\": { \"Field\": \"ChargeFrequency\" } },\r\n    { \"Column\": \"ChargePeriodEnd\",            \"Properties\": { \"Field\": \"ChargePeriodEnd\" } },\r\n    { \"Column\": \"ChargePeriodStart\",          \"Properties\": { \"Field\": \"ChargePeriodStart\" } },\r\n    { \"Column\": \"ChargeSubcategory\",          \"Properties\": { \"Field\": \"ChargeSubcategory\" } },\r\n    { \"Column\": \"CommitmentDiscountCategory\", \"Properties\": { \"Field\": \"CommitmentDiscountCategory\" } },\r\n    { \"Column\": \"CommitmentDiscountId\",       \"Properties\": { \"Field\": \"CommitmentDiscountId\" } },\r\n    { \"Column\": \"CommitmentDiscountName\",     \"Properties\": { \"Field\": \"CommitmentDiscountName\" } },\r\n    { \"Column\": \"CommitmentDiscountStatus\",   \"Properties\": { \"Field\": \"CommitmentDiscountStatus\" } },\r\n    { \"Column\": \"CommitmentDiscountType\",     \"Properties\": { \"Field\": \"CommitmentDiscountType\" } },\r\n    { \"Column\": \"ConsumedQuantity\",           \"Properties\": { \"Field\": \"ConsumedQuantity\" } },\r\n    { \"Column\": \"ConsumedUnit\",               \"Properties\": { \"Field\": \"ConsumedUnit\" } },\r\n    { \"Column\": \"ContractedCost\",             \"Properties\": { \"Field\": \"ContractedCost\" } },\r\n    { \"Column\": \"ContractedUnitPrice\",        \"Properties\": { \"Field\": \"ContractedUnitPrice\" } },\r\n    { \"Column\": \"EffectiveCost\",              \"Properties\": { \"Field\": \"EffectiveCost\" } },\r\n    { \"Column\": \"InvoiceIssuerName\",          \"Properties\": { \"Field\": \"InvoiceIssuerName\" } },\r\n    { \"Column\": \"ListCost\",                   \"Properties\": { \"Field\": \"ListCost\" } },\r\n    { \"Column\": \"ListUnitPrice\",              \"Properties\": { \"Field\": \"ListUnitPrice\" } },\r\n    { \"Column\": \"PricingCategory\",            \"Properties\": { \"Field\": \"PricingCategory\" } },\r\n    { \"Column\": \"PricingQuantity\",            \"Properties\": { \"Field\": \"PricingQuantity\" } },\r\n    { \"Column\": \"PricingUnit\",                \"Properties\": { \"Field\": \"PricingUnit\" } },\r\n    { \"Column\": \"ProviderName\",               \"Properties\": { \"Field\": \"ProviderName\" } },\r\n    { \"Column\": \"PublisherName\",              \"Properties\": { \"Field\": \"PublisherName\" } },\r\n    { \"Column\": \"Region\",                     \"Properties\": { \"Field\": \"Region\" } },\r\n    { \"Column\": \"RegionId\",                   \"Properties\": { \"Field\": \"RegionId\" } },\r\n    { \"Column\": \"RegionName\",                 \"Properties\": { \"Field\": \"RegionName\" } },\r\n    { \"Column\": \"ResourceId\",                 \"Properties\": { \"Field\": \"ResourceId\" } },\r\n    { \"Column\": \"ResourceName\",               \"Properties\": { \"Field\": \"ResourceName\" } },\r\n    { \"Column\": \"ResourceType\",               \"Properties\": { \"Field\": \"ResourceType\" } },\r\n    { \"Column\": \"ServiceCategory\",            \"Properties\": { \"Field\": \"ServiceCategory\" } },\r\n    { \"Column\": \"ServiceName\",                \"Properties\": { \"Field\": \"ServiceName\" } },\r\n    { \"Column\": \"SkuId\",                      \"Properties\": { \"Field\": \"SkuId\" } },\r\n    { \"Column\": \"SkuPriceId\",                 \"Properties\": { \"Field\": \"SkuPriceId\" } },\r\n    { \"Column\": \"SubAccountId\",               \"Properties\": { \"Field\": \"SubAccountId\" } },\r\n    { \"Column\": \"SubAccountName\",             \"Properties\": { \"Field\": \"SubAccountName\" } },\r\n    { \"Column\": \"SubAccountType\",             \"Properties\": { \"Field\": \"SubAccountType\" } },\r\n    { \"Column\": \"Tags\",                       \"Properties\": { \"Field\": \"Tags\" } },\r\n    { \"Column\": \"UsageAmount\",                \"Properties\": { \"Field\": \"UsageAmount\" } },\r\n    { \"Column\": \"UsageQuantity\",              \"Properties\": { \"Field\": \"UsageQuantity\" } },\r\n    { \"Column\": \"UsageUnit\",                  \"Properties\": { \"Field\": \"UsageUnit\" } },\r\n    { \"Column\": \"x_AccountId\",                \"Properties\": { \"Field\": \"x_AccountId\" } },\r\n    { \"Column\": \"x_AccountName\",              \"Properties\": { \"Field\": \"x_AccountName\" } },\r\n    { \"Column\": \"x_AccountOwnerId\",           \"Properties\": { \"Field\": \"x_AccountOwnerId\" } },\r\n    { \"Column\": \"x_BilledCostInUsd\",          \"Properties\": { \"Field\": \"x_BilledCostInUsd\" } },\r\n    { \"Column\": \"x_BilledUnitPrice\",          \"Properties\": { \"Field\": \"x_BilledUnitPrice\" } },\r\n    { \"Column\": \"x_BillingAccountId\",         \"Properties\": { \"Field\": \"x_BillingAccountId\" } },\r\n    { \"Column\": \"x_BillingAccountName\",       \"Properties\": { \"Field\": \"x_BillingAccountName\" } },\r\n    { \"Column\": \"x_BillingExchangeRate\",      \"Properties\": { \"Field\": \"x_BillingExchangeRate\" } },\r\n    { \"Column\": \"x_BillingExchangeRateDate\",  \"Properties\": { \"Field\": \"x_BillingExchangeRateDate\" } },\r\n    { \"Column\": \"x_BillingProfileId\",         \"Properties\": { \"Field\": \"x_BillingProfileId\" } },\r\n    { \"Column\": \"x_BillingProfileName\",       \"Properties\": { \"Field\": \"x_BillingProfileName\" } },\r\n    { \"Column\": \"x_ChargeId\",                 \"Properties\": { \"Field\": \"x_ChargeId\" } },\r\n    { \"Column\": \"x_ContractedCostInUsd\",      \"Properties\": { \"Field\": \"x_ContractedCostInUsd\" } },\r\n    { \"Column\": \"x_Cost\",                     \"Properties\": { \"Field\": \"x_Cost\" } },\r\n    { \"Column\": \"x_CostAllocationRuleName\",   \"Properties\": { \"Field\": \"x_CostAllocationRuleName\" } },\r\n    { \"Column\": \"x_CostCategories\",           \"Properties\": { \"Field\": \"x_CostCategories\" } },\r\n    { \"Column\": \"x_CostCenter\",               \"Properties\": { \"Field\": \"x_CostCenter\" } },\r\n    { \"Column\": \"x_Credits\",                  \"Properties\": { \"Field\": \"x_Credits\" } },\r\n    { \"Column\": \"x_CostType\",                 \"Properties\": { \"Field\": \"x_CostType\" } },\r\n    { \"Column\": \"x_CurrencyConversionRate\",   \"Properties\": { \"Field\": \"x_CurrencyConversionRate\" } },\r\n    { \"Column\": \"x_CustomerId\",               \"Properties\": { \"Field\": \"x_CustomerId\" } },\r\n    { \"Column\": \"x_CustomerName\",             \"Properties\": { \"Field\": \"x_CustomerName\" } },\r\n    { \"Column\": \"x_Discount\",                 \"Properties\": { \"Field\": \"x_Discount\" } },\r\n    { \"Column\": \"x_EffectiveCostInUsd\",       \"Properties\": { \"Field\": \"x_EffectiveCostInUsd\" } },\r\n    { \"Column\": \"x_EffectiveUnitPrice\",       \"Properties\": { \"Field\": \"x_EffectiveUnitPrice\" } },\r\n    { \"Column\": \"x_ExportTime\",               \"Properties\": { \"Field\": \"x_ExportTime\" } },\r\n    { \"Column\": \"x_InvoiceId\",                \"Properties\": { \"Field\": \"x_InvoiceId\" } },\r\n    { \"Column\": \"x_InvoiceIssuerId\",          \"Properties\": { \"Field\": \"x_InvoiceIssuerId\" } },\r\n    { \"Column\": \"x_InvoiceSectionId\",         \"Properties\": { \"Field\": \"x_InvoiceSectionId\" } },\r\n    { \"Column\": \"x_InvoiceSectionName\",       \"Properties\": { \"Field\": \"x_InvoiceSectionName\" } },\r\n    { \"Column\": \"x_ListCostInUsd\",            \"Properties\": { \"Field\": \"x_ListCostInUsd\" } },\r\n    { \"Column\": \"x_Location\",                 \"Properties\": { \"Field\": \"x_Location\" } },\r\n    { \"Column\": \"x_OnDemandCost\",             \"Properties\": { \"Field\": \"x_OnDemandCost\" } },\r\n    { \"Column\": \"x_OnDemandCostInUsd\",        \"Properties\": { \"Field\": \"x_OnDemandCostInUsd\" } },\r\n    { \"Column\": \"x_OnDemandUnitPrice\",        \"Properties\": { \"Field\": \"x_OnDemandUnitPrice\" } },\r\n    { \"Column\": \"x_Operation\",                \"Properties\": { \"Field\": \"x_Operation\" } },\r\n    { \"Column\": \"x_PartnerCreditApplied\",     \"Properties\": { \"Field\": \"x_PartnerCreditApplied\" } },\r\n    { \"Column\": \"x_PartnerCreditRate\",        \"Properties\": { \"Field\": \"x_PartnerCreditRate\" } },\r\n    { \"Column\": \"x_PricingBlockSize\",         \"Properties\": { \"Field\": \"x_PricingBlockSize\" } },\r\n    { \"Column\": \"x_PricingCurrency\",          \"Properties\": { \"Field\": \"x_PricingCurrency\" } },\r\n    { \"Column\": \"x_PricingSubcategory\",       \"Properties\": { \"Field\": \"x_PricingSubcategory\" } },\r\n    { \"Column\": \"x_PricingUnitDescription\",   \"Properties\": { \"Field\": \"x_PricingUnitDescription\" } },\r\n    { \"Column\": \"x_Project\",                  \"Properties\": { \"Field\": \"x_Project\" } },\r\n    { \"Column\": \"x_PublisherCategory\",        \"Properties\": { \"Field\": \"x_PublisherCategory\" } },\r\n    { \"Column\": \"x_PublisherId\",              \"Properties\": { \"Field\": \"x_PublisherId\" } },\r\n    { \"Column\": \"x_ResellerId\",               \"Properties\": { \"Field\": \"x_ResellerId\" } },\r\n    { \"Column\": \"x_ResellerName\",             \"Properties\": { \"Field\": \"x_ResellerName\" } },\r\n    { \"Column\": \"x_ResourceGroupName\",        \"Properties\": { \"Field\": \"x_ResourceGroupName\" } },\r\n    { \"Column\": \"x_ResourceType\",             \"Properties\": { \"Field\": \"x_ResourceType\" } },\r\n    { \"Column\": \"x_ServiceCode\",              \"Properties\": { \"Field\": \"x_ServiceCode\" } },\r\n    { \"Column\": \"x_ServiceId\",                \"Properties\": { \"Field\": \"x_ServiceId\" } },\r\n    { \"Column\": \"x_ServicePeriodEnd\",         \"Properties\": { \"Field\": \"x_ServicePeriodEnd\" } },\r\n    { \"Column\": \"x_ServicePeriodStart\",       \"Properties\": { \"Field\": \"x_ServicePeriodStart\" } },\r\n    { \"Column\": \"x_SkuDescription\",           \"Properties\": { \"Field\": \"x_SkuDescription\" } },\r\n    { \"Column\": \"x_SkuDetails\",               \"Properties\": { \"Field\": \"x_SkuDetails\" } },\r\n    { \"Column\": \"x_SkuIsCreditEligible\",      \"Properties\": { \"Field\": \"x_SkuIsCreditEligible\" } },\r\n    { \"Column\": \"x_SkuMeterCategory\",         \"Properties\": { \"Field\": \"x_SkuMeterCategory\" } },\r\n    { \"Column\": \"x_SkuMeterId\",               \"Properties\": { \"Field\": \"x_SkuMeterId\" } },\r\n    { \"Column\": \"x_SkuMeterName\",             \"Properties\": { \"Field\": \"x_SkuMeterName\" } },\r\n    { \"Column\": \"x_SkuMeterSubcategory\",      \"Properties\": { \"Field\": \"x_SkuMeterSubcategory\" } },\r\n    { \"Column\": \"x_SkuOfferId\",               \"Properties\": { \"Field\": \"x_SkuOfferId\" } },\r\n    { \"Column\": \"x_SkuOrderId\",               \"Properties\": { \"Field\": \"x_SkuOrderId\" } },\r\n    { \"Column\": \"x_SkuOrderName\",             \"Properties\": { \"Field\": \"x_SkuOrderName\" } },\r\n    { \"Column\": \"x_SkuPartNumber\",            \"Properties\": { \"Field\": \"x_SkuPartNumber\" } },\r\n    { \"Column\": \"x_SkuRegion\",                \"Properties\": { \"Field\": \"x_SkuRegion\" } },\r\n    { \"Column\": \"x_SkuServiceFamily\",         \"Properties\": { \"Field\": \"x_SkuServiceFamily\" } },\r\n    { \"Column\": \"x_SkuTerm\",                  \"Properties\": { \"Field\": \"x_SkuTerm\" } },\r\n    { \"Column\": \"x_SkuTier\",                  \"Properties\": { \"Field\": \"x_SkuTier\" } },\r\n    { \"Column\": \"x_SourceName\",               \"Properties\": { \"Field\": \"x_SourceName\" } },\r\n    { \"Column\": \"x_SourceProvider\",           \"Properties\": { \"Field\": \"x_SourceProvider\" } },\r\n    { \"Column\": \"x_SourceType\",               \"Properties\": { \"Field\": \"x_SourceType\" } },\r\n    { \"Column\": \"x_SourceVersion\",            \"Properties\": { \"Field\": \"x_SourceVersion\" } },\r\n    { \"Column\": \"x_UsageType\",                \"Properties\": { \"Field\": \"x_UsageType\" } }\r\n]\r\n```\r\n\r\n// Costs_raw retention policy\r\n.alter-merge table Costs_raw policy retention softdelete = $$rawRetentionInDays$$d recoverability = disabled\r\n\r\n//----------------------------------------------------------------------------------------------------------------------\r\n\r\n// Costs_transform_v1_0 function\r\n.create-or-alter function\r\nwith (docstring='All costs transformed to FOCUS 1.0.', folder='Costs')\r\nCosts_transform_v1_0()\r\n{\r\n    // NOTE: All open issues and questions are tracked @ https://github.com/microsoft/finops-toolkit/issues/1111\r\n    Costs_raw\r\n    //\r\n    // Dedupe rows\r\n    | extend x_IngestionTime = ingestion_time()\r\n    | extend x_ChargeId = ''\r\n    // TODO: Consider adding a unique charge ID per row\r\n    // hash_sha256(strcat(\r\n    //     // DO NOT CHANGE COLUMNS OR COLUMN ORDER\r\n    //     // 1. Resource hierarchy (including resource name), highest to lowest\r\n    //     BillingAccountId,\r\n    //     x_InvoiceSectionId,\r\n    //     x_AccountOwnerId,\r\n    //     SubAccountId,\r\n    //     x_ResourceGroupName,\r\n    //     ResourceName,\r\n    //     // 2. Resource details\r\n    //     ResourceId,\r\n    //     RegionId,\r\n    //     Tags,\r\n    //     CommitmentDiscountId,\r\n    //     x_CostCenter,\r\n    //     // 4. Meter details\r\n    //     SkuPriceId,\r\n    //     x_SkuMeterId,\r\n    //     x_SkuPartNumber,\r\n    //     x_SkuOfferId,\r\n    //     x_SkuDetails,\r\n    //     // 5. Date\r\n    //     ChargePeriodStart\r\n    // ))\r\n    //\r\n    // Identify data quality issues\r\n    | extend x_SourceChanges = trim_end(',', strcat(\r\n        iff(ChargeCategory == 'Purchase' and isnotempty(CommitmentDiscountId) and ChargeFrequency == 'Usage-Based',                 'InvalidChargeFrequency,',           ''),\r\n        iff(ChargeCategory == 'Purchase' and isnotempty(CommitmentDiscountId) and EffectiveCost > 0,                                'InvalidEffectiveCost,',             ''),\r\n        iff((isempty(ContractedCost)      or ContractedCost == 0)      and EffectiveCost != 0,                                      'MissingContractedCost,',            ''),\r\n        iff((isempty(ContractedUnitPrice) or ContractedUnitPrice == 0) and x_EffectiveUnitPrice != 0,                               'MissingContractedUnitPrice,',       ''),\r\n        iff((isempty(ListCost)            or ListCost == 0)            and (ContractedCost != 0      or EffectiveCost != 0),        'MissingListCost,',                  ''),\r\n        iff((isempty(ListUnitPrice)       or ListUnitPrice == 0)       and (ContractedUnitPrice != 0 or x_EffectiveUnitPrice != 0), 'MissingListUnitPrice,',             ''),\r\n        iff(isempty(ProviderName),                                                                                                  'MissingProviderName,',              ''),\r\n        iff(isempty(PublisherName),                                                                                                 'MissingPublisherName,',             ''),\r\n        iff(ChargeCategory == 'Purchase' and isnotempty(CommitmentDiscountId) and isempty(ResourceId),                              'MissingResourceId,',                ''),\r\n        iff(ChargeCategory == 'Purchase' and isnotempty(CommitmentDiscountId) and isempty(ResourceName),                            'MissingResourceName,',              ''),\r\n        iff(ChargeCategory == 'Purchase' and isnotempty(CommitmentDiscountId) and isempty(ResourceType),                            'MissingResourceType,',              ''),\r\n        iff(BilledCost > 0 and x_BilledUnitPrice == 0,                                                                              'MissingXBilledUnitPrice,',          ''),\r\n        iff(ChargeCategory == 'Purchase' and isnotempty(CommitmentDiscountId) and isempty(x_ResourceType),                          'MissingXResourceType,',             ''),\r\n        iff(PricingCategory == 'Standard' and isnotempty(CommitmentDiscountId) and ChargeCategory == 'Usage',                       'PricingCategoryShouldBeCommitted,', ''),\r\n        iff(x_SkuTerm == '1Year' or x_SkuTerm == '3Years' or x_SkuTerm == '5Years',                                                 'SkuTermShouldBeAnInteger,',         '')\r\n    ))\r\n    //\r\n    // Fix columns needed in other changes\r\n    | extend ProviderName = case(\r\n        isnotempty(ProviderName), ProviderName,\r\n        isnotempty(coalesce(x_CostCategories, x_Discount, x_Operation, x_ServiceCode, x_UsageType)), 'AWS',\r\n        isnotempty(coalesce(tostring(UsageAmount), tostring(x_Cost), x_Credits, x_CostType, tostring(x_CurrencyConversionRate), tostring(x_ExportTime), x_Project, x_ServiceId)), 'GCP',\r\n        isnotempty(coalesce(x_BillingProfileId, x_InvoiceSectionId)), 'Microsoft',\r\n        ''\r\n    )\r\n    //\r\n    // Identify source\r\n    | extend x_SourceName     = coalesce(x_SourceName, iff(isnotempty(x_BillingProfileId), 'Cost Management', ProviderName))\r\n    | extend x_SourceProvider = coalesce(x_SourceProvider, ProviderName)\r\n    | extend x_SourceType     = coalesce(x_SourceType, iff(isnotempty(x_BillingProfileId), 'FocusCost', ''))\r\n    | extend x_SourceVersion  = coalesce(x_SourceVersion, case(\r\n        isnotempty(coalesce(ChargeClass, CommitmentDiscountStatus, tostring(ConsumedQuantity), ConsumedUnit, tostring(ContractedCost), tostring(ContractedUnitPrice), RegionId, RegionName)), '1.0',\r\n        isnotempty(coalesce(ChargeSubcategory, Region, tostring(UsageQuantity), UsageUnit)), iff(ProviderName == 'Microsoft', '1.0-preview(v1)', '1.0-preview'),\r\n        ''\r\n    ))\r\n    // Append version check error code\r\n    | extend x_SourceChanges = iff(x_SourceVersion == '1.0', x_SourceChanges,\r\n        strcat(x_SourceChanges, iff(isempty(x_SourceChanges), '', ','), iff(x_SourceVersion == '', 'UnknownFocusVersion', 'LegacyFocusVersion'))\r\n    )\r\n    //\r\n    // Populate missing prices -- mapping to on-demand prices requires meter ID and offer ID\r\n    | extend tmp_MissingPrices = ProviderName == 'Microsoft'\r\n        and (ListUnitPrice == 0 or ContractedUnitPrice == 0)\r\n        and x_EffectiveUnitPrice != 0\r\n        and not(CommitmentDiscountCategory == 'Spend' and CommitmentDiscountStatus == 'Unused')\r\n        and isnotempty(strcat(x_SkuMeterId, x_SkuOfferId))\r\n    | as allCosts\r\n    | where tmp_MissingPrices\r\n    | extend tmp_ReservationPriceLookupKey = strcat(x_BillingProfileId, substring(ChargePeriodStart, 0, 7), x_SkuMeterId, x_SkuOfferId)\r\n    | as costsWithMissingPrices\r\n    | join kind=leftouter (\r\n        Prices_final_v1_0\r\n        | extend tmp_ReservationPriceLookupKey = strcat(x_BillingProfileId, substring(x_EffectivePeriodStart, 0, 7), x_SkuMeterId, x_SkuOfferId)\r\n        | where x_SkuPriceType == 'Consumption' and tmp_ReservationPriceLookupKey in ((costsWithMissingPrices | summarize by tmp_ReservationPriceLookupKey))\r\n        | summarize ListUnitPrice = min(ListUnitPrice), ContractedUnitPrice = min(ContractedUnitPrice) by tmp_ReservationPriceLookupKey, x_PricingBlockSize, PricingUnit\r\n    ) on tmp_ReservationPriceLookupKey\r\n    // Select the best price to use for each row\r\n    | extend ContractedUnitPrice = case(\r\n        // If price is already correct, keep that\r\n        ContractedUnitPrice != 0 or x_EffectiveUnitPrice == 0, ContractedUnitPrice,\r\n        // If both prices use the same scale, use the new one\r\n        PricingUnit == PricingUnit1 and x_PricingBlockSize == x_PricingBlockSize1, ContractedUnitPrice1 * x_BillingExchangeRate,\r\n        // If prices are the same unit but not the same scale, use the new one but correct the scale\r\n        PricingUnit == PricingUnit1 and x_PricingBlockSize != x_PricingBlockSize1 and isnotempty(x_PricingBlockSize) and isnotempty(x_PricingBlockSize1), ContractedUnitPrice1 * x_BillingExchangeRate / x_PricingBlockSize1 * x_PricingBlockSize,\r\n        // If billed price is available, assume the billed price is the same as contracted price to support aggregations\r\n        isnotempty(x_BilledUnitPrice) and x_BilledUnitPrice != 0, x_EffectiveUnitPrice,\r\n        // Otherwise, assume the effective price is the same as contracted price to support aggregations\r\n        x_EffectiveUnitPrice\r\n    )\r\n    | extend ListUnitPrice = case(\r\n        // If price is already correct, keep that\r\n        ListUnitPrice != 0 or x_EffectiveUnitPrice == 0, ListUnitPrice,\r\n        // If both prices use the same scale, use the new one\r\n        PricingUnit == PricingUnit1 and x_PricingBlockSize == x_PricingBlockSize1, ListUnitPrice1 * x_BillingExchangeRate,\r\n        // If prices are the same unit but not the same scale, use the new one but correct the scale\r\n        PricingUnit == PricingUnit1 and x_PricingBlockSize != x_PricingBlockSize1 and isnotempty(x_PricingBlockSize) and isnotempty(x_PricingBlockSize1), ListUnitPrice1 * x_BillingExchangeRate / x_PricingBlockSize1 * x_PricingBlockSize,\r\n        // Otherwise, assume the contracted price is the same as list price to support aggregations\r\n        ContractedUnitPrice\r\n    )\r\n    // Calculate missing costs based on new prices -- If cost is already correct, keep that; if not and price is available, recalculate the cost; otherwise, keep the existing cost\r\n    | extend ListCost = case(ListCost != 0 or EffectiveCost == 0, ListCost, ListUnitPrice != 0, ListUnitPrice * PricingQuantity, ListCost)\r\n    | extend ContractedCost = case(ContractedCost != 0 or EffectiveCost == 0, ContractedCost, ContractedUnitPrice != 0, ContractedUnitPrice * PricingQuantity, ContractedCost)\r\n    // Merge the rest of the unmodified cost records and remove excess columns\r\n    | union (allCosts | where not(tmp_MissingPrices))\r\n    | project-away x_PricingBlockSize1, PricingUnit1, ListUnitPrice1, ContractedUnitPrice1, tmp_MissingPrices, tmp_ReservationPriceLookupKey, tmp_ReservationPriceLookupKey1\r\n    //\r\n    // BUG: Fix ContractedCost that has bad values\r\n    | extend ContractedCost = iff(ProviderName == 'Microsoft' and isnotempty(PricingQuantity) and isnotempty(x_PricingBlockSize) and ContractedCost != ContractedUnitPrice * PricingQuantity, ContractedUnitPrice * PricingQuantity, ContractedCost)\r\n    //\r\n    // Handle FOCUS 1.0-preview UsageQuantity/Unit\r\n    | extend ConsumedQuantity = iff(ChargeCategory == 'Usage', coalesce(ConsumedQuantity, UsageQuantity, UsageAmount), todecimal(''))\r\n    | extend ConsumedUnit = iff(ChargeCategory == 'Usage' and isnotempty(ConsumedQuantity), coalesce(ConsumedUnit, UsageUnit, 'Units'), '')\r\n    //\r\n    // Convert IDs to lowercase for consistency\r\n    | extend CommitmentDiscountId = tolower(CommitmentDiscountId)\r\n    //\r\n    // BUG: Remove EffectiveCost for commitment discount purchases\r\n    | extend EffectiveCost = iff(ChargeCategory == 'Purchase' and isnotempty(CommitmentDiscountId), decimal(0), EffectiveCost)\r\n    | extend x_EffectiveCostInUsd = iff(ChargeCategory == 'Purchase' and isnotempty(CommitmentDiscountId), decimal(0), x_EffectiveCostInUsd)\r\n    //\r\n    // Clean up resource columns\r\n    | extend ResourceId = case(\r\n        isnotempty(ResourceId), ResourceId,\r\n        ChargeCategory == 'Purchase' and isnotempty(CommitmentDiscountId), CommitmentDiscountId,\r\n        ResourceId)\r\n    | extend tmp_ResourceDetails = parse_resourceid(ResourceId)\r\n    | extend ResourceName = tolower(case(\r\n        isnotempty(ResourceName), ResourceName,\r\n        ChargeCategory == 'Purchase' and isnotempty(CommitmentDiscountName), CommitmentDiscountName,\r\n        isnotempty(ResourceId), tmp_ResourceDetails.ResourceName,\r\n        ResourceName))\r\n    | extend ResourceType = case(\r\n        isnotempty(ResourceType), ResourceType,\r\n        isnotempty(ResourceId) and isnotempty(tmp_ResourceDetails.ResourceType), tmp_ResourceDetails.ResourceType,\r\n        ChargeCategory == 'Purchase' and isnotempty(CommitmentDiscountType), CommitmentDiscountType,\r\n        ResourceType)\r\n    | extend x_ResourceType = case(\r\n        isnotempty(x_ResourceType), x_ResourceType,\r\n        isnotempty(ResourceId) and isnotempty(tmp_ResourceDetails.x_ResourceType), tmp_ResourceDetails.x_ResourceType,\r\n        x_ResourceType)\r\n    //\r\n    // Sort columns and apply final transforms\r\n    | project\r\n        AvailabilityZone,\r\n        BilledCost,\r\n        BillingAccountId,\r\n        BillingAccountName,\r\n        BillingAccountType,          // Azure 1.0-preview(v1)+\r\n        BillingCurrency,\r\n        BillingPeriodEnd,\r\n        BillingPeriodStart,\r\n        ChargeCategory = case(\r\n            // Handle FOCUS 1.0-preview ChargeSubcategory\r\n            ChargeSubcategory == 'Credit', 'Credit',\r\n            ChargeSubcategory == 'Refund', 'Purchase',  // We are assuming purchase refunds since we don't have data to indicate usage refunds\r\n            ChargeCategory\r\n        ),\r\n        ChargeClass = case(ChargeSubcategory == 'Refund', 'Correction', ChargeClass),\r\n        ChargeDescription,\r\n        // BUG: ChargeFrequency shows \"Usage-Based\" for monthly recurring savings plan purchases\r\n        ChargeFrequency = iff(ChargeCategory == 'Purchase' and isnotempty(CommitmentDiscountId) and ChargeFrequency == 'Usage-Based' and ProviderName == 'Microsoft' and x_SourceVersion startswith '1.0', 'Recurring', ChargeFrequency),\r\n        ChargePeriodEnd,\r\n        ChargePeriodStart,\r\n        CommitmentDiscountCategory,\r\n        CommitmentDiscountId,\r\n        CommitmentDiscountName,\r\n        CommitmentDiscountStatus = case(\r\n            // Handle FOCUS 1.0-preview ChargeSubcategory\r\n            ChargeSubcategory == 'Used Commitment', 'Used',\r\n            ChargeSubcategory == 'Unused Commitment', 'Unused',\r\n            CommitmentDiscountStatus\r\n        ),\r\n        CommitmentDiscountType,\r\n        ConsumedQuantity,\r\n        ConsumedUnit,\r\n        ContractedCost = coalesce(ContractedCost, x_OnDemandCost, x_Cost),\r\n        ContractedUnitPrice = coalesce(ContractedUnitPrice, x_OnDemandUnitPrice),\r\n        EffectiveCost,\r\n        InvoiceIssuerName,\r\n        ListCost,\r\n        ListUnitPrice,\r\n        PricingCategory = case(\r\n            // Handle FOCUS 1.0-preview PricingCategory values\r\n            PricingCategory == 'On-Demand', 'Standard',\r\n            PricingCategory == 'Commitment-Based', 'Committed',\r\n            PricingCategory\r\n        ),\r\n        PricingQuantity,\r\n        PricingUnit,\r\n        ProviderName,\r\n        // Handle missing PublisherName values\r\n        PublisherName = case(PublisherName == 'Microsoft Corporation', 'Microsoft', isnotempty(PublisherName), PublisherName, x_PublisherCategory == 'Cloud Provider', ProviderName, ''),\r\n        // Handle FOCUS 1.0-preview Region column\r\n        RegionId = coalesce(RegionId, iff(ProviderName == 'Microsoft', replace_string(tolower(Region), ' ', ''), Region)),\r\n        RegionName = coalesce(RegionName, Region),\r\n        ResourceId,\r\n        ResourceName,\r\n        ResourceType,\r\n        ServiceCategory,\r\n        ServiceName,\r\n        SkuId,\r\n        SkuPriceId,\r\n        SubAccountId,\r\n        SubAccountName,\r\n        SubAccountType,              // Azure 1.0-preview(v1)+\r\n        Tags = parse_json(Tags),\r\n        x_AccountId,                 // Azure 1.0-preview(v1)+\r\n        x_AccountName,               // Azure 1.0-preview(v1)+\r\n        x_AccountOwnerId,            // Azure 1.0-preview(v1)+\r\n        x_BilledCostInUsd,           // Azure 1.0-preview(v1)+\r\n        x_BilledUnitPrice,           // Azure 1.0-preview(v1)+\r\n        x_BillingAccountAgreement = case(\r\n            ProviderName == 'Microsoft' and x_BillingAccountId == x_BillingProfileId, 'EA',\r\n            ProviderName == 'Microsoft' and x_BillingAccountId != x_BillingProfileId, 'MCA',\r\n            ProviderName\r\n        ),                           // Hubs add-on\r\n        x_BillingAccountId,          // Azure 1.0-preview(v1)+\r\n        x_BillingAccountName,        // Azure 1.0-preview(v1)+\r\n        x_BillingExchangeRate,       // Azure 1.0-preview(v1)+\r\n        x_BillingExchangeRateDate,   // Azure 1.0-preview(v1)+\r\n        x_BillingProfileId,          // Azure 1.0-preview(v1)+\r\n        x_BillingProfileName,        // Azure 1.0-preview(v1)+\r\n        x_ChargeId,                  // Azure 1.0-preview(v1) only\r\n        x_ContractedCostInUsd = coalesce(x_ContractedCostInUsd, x_OnDemandCostInUsd), // Azure 1.0+\r\n        x_CostAllocationRuleName,    // Azure 1.0-preview(v1)+\r\n        x_CostCategories = parse_json(x_CostCategories),  // AWS 1.0 (JSON)\r\n        x_CostCenter,                // Azure 1.0-preview(v1)+\r\n        x_Credits = parse_json(x_Credits),  // GCP Jan 2024\r\n        x_CostType,                  // GCP Jan 2024\r\n        x_CurrencyConversionRate,    // GCP Jun 2024\r\n        x_CustomerId,                // Azure 1.0-preview(v1)+\r\n        x_CustomerName,              // Azure 1.0-preview(v1)+\r\n        x_Discount = parse_json(x_Discount),  // AWS 1.0 (JSON)\r\n        x_EffectiveCostInUsd,        // Azure 1.0-preview(v1)+\r\n        x_EffectiveUnitPrice,        // Azure 1.0-preview(v1)+\r\n        x_ExportTime,                // GCP Jan 2024\r\n        x_IngestionTime,             // Hubs add-on\r\n        x_InvoiceId,                 // Azure 1.0-preview(v1)+\r\n        x_InvoiceIssuerId,           // Azure 1.0-preview(v1)+\r\n        x_InvoiceSectionId,          // Azure 1.0-preview(v1)+\r\n        x_InvoiceSectionName,        // Azure 1.0-preview(v1)+\r\n        x_ListCostInUsd,             // Azure 1.0-preview(v1)+\r\n        x_Location,                  // GCP Jan 2024\r\n        x_Operation,                 // AWS 1.0\r\n        x_PartnerCreditApplied,      // Azure 1.0-preview(v1)+\r\n        x_PartnerCreditRate,         // Azure 1.0-preview(v1)+\r\n        x_PricingBlockSize,          // Azure 1.0-preview(v1)+\r\n        x_PricingCurrency,           // Azure 1.0-preview(v1)+\r\n        x_PricingSubcategory,        // Azure 1.0-preview(v1)+\r\n        x_PricingUnitDescription,    // Azure 1.0-preview(v1)+\r\n        x_Project,                   // GCP Jan 2024\r\n        x_PublisherCategory,         // Azure 1.0-preview(v1)+\r\n        x_PublisherId,               // Azure 1.0-preview(v1)+\r\n        x_ResellerId,                // Azure 1.0-preview(v1)+\r\n        x_ResellerName,              // Azure 1.0-preview(v1)+\r\n        x_ResourceGroupName = tolower(x_ResourceGroupName),  // Azure 1.0-preview(v1)+\r\n        x_ResourceType = tolower(case(\r\n            isnotempty(ResourceType), ResourceType,\r\n            ChargeCategory == 'Purchase' and CommitmentDiscountType == 'Reservation', '',\r\n            ResourceType)),          // Azure 1.0-preview(v1)+\r\n        x_ServiceCode,               // AWS 1.0\r\n        x_ServiceId,                 // GCP Jan 2024\r\n        x_ServicePeriodEnd,          // Azure 1.0-preview(v1)+\r\n        x_ServicePeriodStart,        // Azure 1.0-preview(v1)+\r\n        x_SkuDescription,            // Azure 1.0-preview(v1)+\r\n        x_SkuDetails = parse_json(x_SkuDetails),  // Azure 1.0-preview(v1)+\r\n        x_SkuIsCreditEligible,       // Azure 1.0-preview(v1)+ \r\n        x_SkuMeterCategory,          // Azure 1.0-preview(v1)+\r\n        x_SkuMeterId,                // Azure 1.0-preview(v1)+\r\n        x_SkuMeterName,              // Azure 1.0-preview(v1)+\r\n        x_SkuMeterSubcategory,       // Azure 1.0-preview(v1)+\r\n        x_SkuOfferId,                // Azure 1.0-preview(v1)+\r\n        x_SkuOrderId,                // Azure 1.0-preview(v1)+\r\n        x_SkuOrderName,              // Azure 1.0-preview(v1)+\r\n        x_SkuPartNumber,             // Azure 1.0-preview(v1)+\r\n        x_SkuRegion,                 // Azure 1.0-preview(v1)+\r\n        x_SkuServiceFamily,          // Azure 1.0-preview(v1)+\r\n        x_SkuTerm,                   // Azure 1.0-preview(v1)+\r\n        x_SkuTier,                   // Azure 1.0-preview(v1)+ \r\n        x_SourceChanges,             // Hubs add-on\r\n        x_SourceName,                // Hubs add-on\r\n        x_SourceProvider,            // Hubs add-on\r\n        x_SourceType,                // Hubs add-on\r\n        x_SourceVersion,             // Hubs add-on\r\n        x_UsageType                  // AWS 1.0\r\n}\r\n\r\n//----------------------------------------------------------------------------------------------------------------------\r\n\r\n// Costs_final_v1_0 table\r\n.create-merge table Costs_final_v1_0 (\r\n    AvailabilityZone:           string,\r\n    BilledCost:                 decimal,\r\n    BillingAccountId:           string,\r\n    BillingAccountName:         string,\r\n    BillingAccountType:         string,    // Azure 1.0-preview(v1)+\r\n    BillingCurrency:            string,\r\n    BillingPeriodEnd:           datetime,\r\n    BillingPeriodStart:         datetime,\r\n    ChargeCategory:             string,\r\n    ChargeClass:                string,\r\n    ChargeDescription:          string,\r\n    ChargeFrequency:            string,\r\n    ChargePeriodEnd:            datetime,\r\n    ChargePeriodStart:          datetime,\r\n    CommitmentDiscountCategory: string,    // FOCUS 1.0-preview only\r\n    CommitmentDiscountId:       string,\r\n    CommitmentDiscountName:     string,\r\n    CommitmentDiscountStatus:   string,\r\n    CommitmentDiscountType:     string,\r\n    ConsumedQuantity:           decimal,\r\n    ConsumedUnit:               string,\r\n    ContractedCost:             decimal,\r\n    ContractedUnitPrice:        decimal,\r\n    EffectiveCost:              decimal,\r\n    InvoiceIssuerName:          string,\r\n    ListCost:                   decimal,\r\n    ListUnitPrice:              decimal,\r\n    PricingCategory:            string,\r\n    PricingQuantity:            decimal,\r\n    PricingUnit:                string,\r\n    ProviderName:               string,\r\n    PublisherName:              string,\r\n    RegionId:                   string,\r\n    RegionName:                 string,\r\n    ResourceId:                 string,\r\n    ResourceName:               string,\r\n    ResourceType:               string,\r\n    ServiceCategory:            string,\r\n    ServiceName:                string,\r\n    SkuId:                      string,\r\n    SkuPriceId:                 string,\r\n    SubAccountId:               string,\r\n    SubAccountName:             string,\r\n    SubAccountType:             string,\r\n    Tags:                       dynamic,\r\n    x_AccountId:                string,    // Azure 1.0-preview(v1)+\r\n    x_AccountName:              string,    // Azure 1.0-preview(v1)+\r\n    x_AccountOwnerId:           string,    // Azure 1.0-preview(v1)+\r\n    x_BilledCostInUsd:          decimal,   // Azure 1.0-preview(v1)+\r\n    x_BilledUnitPrice:          decimal,   // Azure 1.0-preview(v1)+\r\n    x_BillingAccountAgreement:  string,    // Hubs add-on\r\n    x_BillingAccountId:         string,    // Azure 1.0-preview(v1)+\r\n    x_BillingAccountName:       string,    // Azure 1.0-preview(v1)+\r\n    x_BillingExchangeRate:      decimal,   // Azure 1.0-preview(v1)+\r\n    x_BillingExchangeRateDate:  datetime,  // Azure 1.0-preview(v1)+\r\n    x_BillingProfileId:         string,    // Azure 1.0-preview(v1)+\r\n    x_BillingProfileName:       string,    // Azure 1.0-preview(v1)+\r\n    x_ChargeId:                 string,    // Azure 1.0-preview(v1) only\r\n    x_ContractedCostInUsd:      decimal,   // Azure 1.0+\r\n    x_CostAllocationRuleName:   string,    // Azure 1.0-preview(v1)+\r\n    x_CostCategories:           dynamic,   // AWS 1.0 (JSON)\r\n    x_CostCenter:               string,    // Azure 1.0-preview(v1)+\r\n    x_Credits:                  dynamic,   // GCP Jan 2024\r\n    x_CostType:                 string,    // GCP Jan 2024\r\n    x_CurrencyConversionRate:   decimal,   // GCP Jun 2024\r\n    x_CustomerId:               string,    // Azure 1.0-preview(v1)+\r\n    x_CustomerName:             string,    // Azure 1.0-preview(v1)+\r\n    x_Discount:                 dynamic,   // AWS 1.0 (JSON)\r\n    x_EffectiveCostInUsd:       decimal,   // Azure 1.0-preview(v1)+\r\n    x_EffectiveUnitPrice:       decimal,   // Azure 1.0-preview(v1)+\r\n    x_ExportTime:               datetime,  // GCP Jan 2024\r\n    x_IngestionTime:            datetime,  // Hubs add-on\r\n    x_InvoiceId:                string,    // Azure 1.0-preview(v1)+\r\n    x_InvoiceIssuerId:          string,    // Azure 1.0-preview(v1)+\r\n    x_InvoiceSectionId:         string,    // Azure 1.0-preview(v1)+\r\n    x_InvoiceSectionName:       string,    // Azure 1.0-preview(v1)+\r\n    x_ListCostInUsd:            decimal,   // Azure 1.0-preview(v1)+\r\n    x_Location:                 string,    // GCP Jan 2024\r\n    x_Operation:                string,    // AWS 1.0\r\n    x_PartnerCreditApplied:     string,    // Azure 1.0-preview(v1)+\r\n    x_PartnerCreditRate:        string,    // Azure 1.0-preview(v1)+\r\n    x_PricingBlockSize:         decimal,   // Azure 1.0-preview(v1)+\r\n    x_PricingCurrency:          string,    // Azure 1.0-preview(v1)+\r\n    x_PricingSubcategory:       string,    // Azure 1.0-preview(v1)+\r\n    x_PricingUnitDescription:   string,    // Azure 1.0-preview(v1)+\r\n    x_Project:                  string,    // GCP Jan 2024\r\n    x_PublisherCategory:        string,    // Azure 1.0-preview(v1)+\r\n    x_PublisherId:              string,    // Azure 1.0-preview(v1)+\r\n    x_ResellerId:               string,    // Azure 1.0-preview(v1)+\r\n    x_ResellerName:             string,    // Azure 1.0-preview(v1)+\r\n    x_ResourceGroupName:        string,    // Azure 1.0-preview(v1)+\r\n    x_ResourceType:             string,    // Azure 1.0-preview(v1)+\r\n    x_ServiceCode:              string,    // AWS 1.0\r\n    x_ServiceId:                string,    // GCP Jan 2024\r\n    x_ServicePeriodEnd:         datetime,  // Azure 1.0-preview(v1)+\r\n    x_ServicePeriodStart:       datetime,  // Azure 1.0-preview(v1)+\r\n    x_SkuDescription:           string,    // Azure 1.0-preview(v1)+\r\n    x_SkuDetails:               dynamic,   // Azure 1.0-preview(v1)+\r\n    x_SkuIsCreditEligible:      bool,      // Azure 1.0-preview(v1)+ \r\n    x_SkuMeterCategory:         string,    // Azure 1.0-preview(v1)+\r\n    x_SkuMeterId:               string,    // Azure 1.0-preview(v1)+\r\n    x_SkuMeterName:             string,    // Azure 1.0-preview(v1)+\r\n    x_SkuMeterSubcategory:      string,    // Azure 1.0-preview(v1)+\r\n    x_SkuOfferId:               string,    // Azure 1.0-preview(v1)+\r\n    x_SkuOrderId:               string,    // Azure 1.0-preview(v1)+\r\n    x_SkuOrderName:             string,    // Azure 1.0-preview(v1)+\r\n    x_SkuPartNumber:            string,    // Azure 1.0-preview(v1)+\r\n    x_SkuRegion:                string,    // Azure 1.0-preview(v1)+\r\n    x_SkuServiceFamily:         string,    // Azure 1.0-preview(v1)+\r\n    x_SkuTerm:                  int,       // Azure 1.0-preview(v1)+\r\n    x_SkuTier:                  string,    // Azure 1.0-preview(v1)+ \r\n    x_SourceChanges:            string,    // Hubs add-on\r\n    x_SourceName:               string,    // Hubs add-on\r\n    x_SourceProvider:           string,    // Hubs add-on\r\n    x_SourceType:               string,    // Hubs add-on\r\n    x_SourceVersion:            string,    // Hubs add-on\r\n    x_UsageType:                string     // AWS 1.0\r\n)\r\n\r\n//----------------------------------------------------------------------------------------------------------------------\r\n\r\n// Update policy for Costs_raw -> Costs_final_v1_0 table\r\n// NOTE: Must be after transform function is defined\r\n.alter table Costs_final_v1_0 policy update\r\n```\r\n[{\r\n    \"IsEnabled\": true,\r\n    \"Source\": \"Costs_raw\",\r\n    \"Query\": \"Costs_transform_v1_0()\",\r\n    \"IsTransactional\": true,\r\n    \"PropagateIngestionProperties\": true\r\n}]\r\n```\r\n\r\n\r\n//===| CommitmentDiscountUsage |========================================================================================\r\n// Supported versions:\r\n// - MS EA reservation details: 2023-03-01  -- See https://learn.microsoft.com/azure/cost-management-billing/dataset-schema/reservation-details-ea\r\n// - MS MCA reservation details: 2023-03-01 -- See https://learn.microsoft.com/azure/cost-management-billing/dataset-schema/reservation-details-mca\r\n//======================================================================================================================\r\n\r\n// CommitmentDiscountUsage_raw table\r\n.create-merge table CommitmentDiscountUsage_raw (\r\n    InstanceFlexibilityGroup: string,\r\n    InstanceFlexibilityRatio: decimal,\r\n    InstanceId:               string,\r\n    Kind:                     string,\r\n    ReservationId:            string,\r\n    ReservationOrderId:       string,\r\n    ReservedHours:            decimal,\r\n    SkuName:                  string,\r\n    TotalReservedQuantity:    decimal,\r\n    UsageDate:                datetime,\r\n    UsedHours:                decimal,\r\n    x_SourceName:             string,    // Hubs add-on\r\n    x_SourceProvider:         string,    // Hubs add-on\r\n    x_SourceType:             string,    // Hubs add-on\r\n    x_SourceVersion:          string     // Hubs add-on\r\n)\r\n\r\n// CommitmentDiscountUsage_raw ingestion mapping\r\n.create-or-alter table CommitmentDiscountUsage_raw ingestion parquet mapping \"CommitmentDiscountUsage_raw_mapping\"\r\n```\r\n[\r\n    { \"Column\": \"InstanceFlexibilityGroup\", \"Properties\": { \"Field\": \"InstanceFlexibilityGroup\" } },\r\n    { \"Column\": \"InstanceFlexibilityRatio\", \"Properties\": { \"Field\": \"InstanceFlexibilityRatio\" } },\r\n    { \"Column\": \"InstanceId\",               \"Properties\": { \"Field\": \"InstanceId\" } },\r\n    { \"Column\": \"Kind\",                     \"Properties\": { \"Field\": \"Kind\" } },\r\n    { \"Column\": \"ReservationId\",            \"Properties\": { \"Field\": \"ReservationId\" } },\r\n    { \"Column\": \"ReservationOrderId\",       \"Properties\": { \"Field\": \"ReservationOrderId\" } },\r\n    { \"Column\": \"ReservedHours\",            \"Properties\": { \"Field\": \"ReservedHours\" } },\r\n    { \"Column\": \"SkuName\",                  \"Properties\": { \"Field\": \"SkuName\" } },\r\n    { \"Column\": \"TotalReservedQuantity\",    \"Properties\": { \"Field\": \"TotalReservedQuantity\" } },\r\n    { \"Column\": \"UsageDate\",                \"Properties\": { \"Field\": \"UsageDate\" } },\r\n    { \"Column\": \"UsedHours\",                \"Properties\": { \"Field\": \"UsedHours\" } },\r\n    { \"Column\": \"x_SourceName\",             \"Properties\": { \"Field\": \"x_SourceName\" } },\r\n    { \"Column\": \"x_SourceProvider\",         \"Properties\": { \"Field\": \"x_SourceProvider\" } },\r\n    { \"Column\": \"x_SourceType\",             \"Properties\": { \"Field\": \"x_SourceType\" } },\r\n    { \"Column\": \"x_SourceVersion\",          \"Properties\": { \"Field\": \"x_SourceVersion\" } }\r\n]\r\n```\r\n\r\n// CommitmentDiscountUsage_raw retention policy\r\n.alter-merge table CommitmentDiscountUsage_raw policy retention softdelete = $$rawRetentionInDays$$d recoverability = disabled\r\n\r\n//----------------------------------------------------------------------------------------------------------------------\r\n\r\n// CommitmentDiscountUsage_transform_v1_0 function\r\n.create-or-alter function\r\nwith (docstring='All commitment discount usage transformed to FOCUS 1.0. This includes reservationdeatils_raw.', folder='Commitment discounts')\r\nCommitmentDiscountUsage_transform_v1_0()\r\n{\r\n    // NOTE: All open issues and questions are tracked @ https://github.com/microsoft/finops-toolkit/issues/1111\r\n    CommitmentDiscountUsage_raw\r\n    //\r\n    // Set ProviderName\r\n    | extend ProviderName = 'Microsoft'\r\n    //\r\n    // Handle resource columns\r\n    | extend ResourceId = tolower(InstanceId)\r\n    // TODO: Switch to use parse_resourceid()\r\n    | parse ResourceId with \"/subscriptions/\" SubAccountId \"/resourcegroups/\" x_ResourceGroupName \"/providers/\" tmp_ResourceProvider \"/\" tmp_ResourceProviderPath\r\n    | extend segments = split(tmp_ResourceProviderPath, '/')\r\n    | mv-apply element = segments on (extend index = row_number() | where index % 2 == 0 | summarize ResourceName = strcat_array(make_list(element), '/'))\r\n    | mv-apply element = segments on (extend index = row_number() | where index % 2 == 1 | summarize x_ResourceType = strcat_array(make_list(element), '/'))\r\n    | extend x_ResourceType = strcat(tmp_ResourceProvider, '/', x_ResourceType)\r\n    | lookup kind=leftouter (ResourceTypes | distinct x_ResourceType, ResourceType = SingularDisplayName) on x_ResourceType\r\n    | lookup kind=leftouter (Services | distinct x_ResourceType, ServiceName, ServiceCategory, x_ServiceModel) on x_ResourceType\r\n    //\r\n    // Sort columns and apply final transforms\r\n    | project\r\n        ChargePeriodEnd                     = UsageDate + 1d,\r\n        ChargePeriodStart                   = UsageDate,\r\n        CommitmentDiscountCategory          = 'Usage',\r\n        CommitmentDiscountId                = tolower(strcat('/providers/microsoft.capacity/reservationorders/', ReservationOrderId, '/reservations/', ReservationId)),\r\n        CommitmentDiscountType              = 'Reservation',\r\n        ConsumedQuantity                    = UsedHours,\r\n        ProviderName,\r\n        ResourceId,\r\n        ResourceName,\r\n        ResourceType,\r\n        ServiceCategory,\r\n        ServiceName,\r\n        SubAccountId,\r\n        x_CommitmentDiscountCommittedCount  = TotalReservedQuantity,\r\n        x_CommitmentDiscountCommittedAmount = ReservedHours,\r\n        // TODO: Is this needed? -- x_CommitmentDiscountKind            = Kind,\r\n        x_CommitmentDiscountNormalizedGroup = iff(InstanceFlexibilityGroup == 'NA', '', InstanceFlexibilityGroup),\r\n        x_CommitmentDiscountNormalizedRatio = InstanceFlexibilityRatio,\r\n        x_CommitmentDiscountQuantity        = UsedHours * InstanceFlexibilityRatio,\r\n        x_IngestionTime                     = ingestion_time(),             // Hubs add-on\r\n        x_ResourceGroupName                 = extract('/resourcegroups/([^/]+)/', 1, ResourceId),\r\n        x_ResourceType,\r\n        // x_RowId = hash_sha256(strcat(\r\n        //     // DO NOT CHANGE COLUMNS OR COLUMN ORDER\r\n        //     CommitmentDiscountId,\r\n        //     ResourceId,\r\n        //     ChargePeriodStart\r\n        // )),\r\n        x_ServiceModel,\r\n        x_SkuOrderId                        = ReservationOrderId,\r\n        x_SkuSize                           = iff(SkuName == 'NA', '', SkuName),\r\n        x_SourceName                        = coalesce(x_SourceName, iff(ProviderName == 'Microsoft', 'Cost Management', ProviderName)),\r\n        x_SourceProvider                    = coalesce(x_SourceProvider, ProviderName),\r\n        x_SourceType                        = coalesce(x_SourceType, iff(ProviderName == 'Microsoft', 'ReservationDetails', '')),\r\n        x_SourceVersion                     = coalesce(x_SourceVersion, iff(ProviderName == 'Microsoft', '2024-03-01', ''))\r\n}\r\n\r\n//----------------------------------------------------------------------------------------------------------------------\r\n\r\n// CommitmentDiscountUsage_final_v1_0 table\r\n.create-merge table CommitmentDiscountUsage_final_v1_0 (\r\n    ChargePeriodEnd:                     datetime,  // Hubs add-on\r\n    ChargePeriodStart:                   datetime,  // MS 2023-03-01\r\n    CommitmentDiscountCategory:          string,    // Hubs add-on\r\n    CommitmentDiscountId:                string,    // MS 2023-03-01\r\n    CommitmentDiscountType:              string,    // Hubs add-on\r\n    ConsumedQuantity:                    decimal,   // MS 2023-03-01\r\n    ProviderName:                        string,    // Hubs add-on\r\n    ResourceId:                          string,    // MS 2023-03-01\r\n    ResourceName:                        string,    // Hubs add-on\r\n    ResourceType:                        string,    // Hubs add-on\r\n    ServiceCategory:                     string,    // Hubs add-on\r\n    ServiceName:                         string,    // Hubs add-on\r\n    SubAccountId:                        string,    // Hubs add-on\r\n    x_CommitmentDiscountCommittedCount:  decimal,   // MS 2023-03-01\r\n    x_CommitmentDiscountCommittedAmount: decimal,   // MS 2023-03-01\r\n    x_CommitmentDiscountNormalizedGroup: string,    // MS 2023-03-01\r\n    x_CommitmentDiscountNormalizedRatio: decimal,   // MS 2023-03-01\r\n    x_CommitmentDiscountQuantity:        decimal,   // MS 2023-03-01\r\n    x_IngestionTime:                     datetime,  // Hubs add-on\r\n    x_ResourceGroupName:                 string,    // Hubs add-on\r\n    x_ResourceType:                      string,    // Hubs add-on\r\n    x_ServiceModel:                      string,    // Hubs add-on\r\n    x_SkuOrderId:                        string,    // MS 2023-03-01\r\n    x_SkuSize:                           string,    // MS 2023-03-01\r\n    x_SourceName:                        string,    // Hubs add-on\r\n    x_SourceProvider:                    string,    // Hubs add-on\r\n    x_SourceType:                        string,    // Hubs add-on\r\n    x_SourceVersion:                     string     // Hubs add-on\r\n)\r\n\r\n//----------------------------------------------------------------------------------------------------------------------\r\n\r\n// Update policy for CommitmentDiscountUsage_raw -> CommitmentDiscountUsage_final_v1_0 table\r\n// NOTE: Must be after transform function is defined\r\n.alter table CommitmentDiscountUsage_final_v1_0 policy update\r\n```\r\n[{\r\n    \"IsEnabled\": true,\r\n    \"Source\": \"CommitmentDiscountUsage_raw\",\r\n    \"Query\": \"CommitmentDiscountUsage_transform_v1_0()\",\r\n    \"IsTransactional\": true,\r\n    \"PropagateIngestionProperties\": true\r\n}]\r\n```\r\n\r\n\r\n//===| Recommendations |================================================================================================\r\n// Supported datasets/versions:\r\n// - MS CM EA reservation recommendations: 2023-05-01  -- See https://learn.microsoft.com/en-us/azure/cost-management-billing/dataset-schema/reservation-recommendations-ea\r\n// - MS CM MCA reservation recommendations: 2023-05-01 -- See https://learn.microsoft.com/en-us/azure/cost-management-billing/dataset-schema/reservation-recommendations-mca\r\n//======================================================================================================================\r\n\r\n// Recommendations_raw table\r\n.create-merge table Recommendations_raw (\r\n    CostWithNoReservedInstances:     decimal,   // MS CM EA resv reco 2024-05-01\r\n    CostWithNoReservedInstances2:    decimal,   // MS CM MCA resv reco 2024-05-01 -- Renamed to remove spaces\r\n    FirstUsageDate:                  datetime,  // MS CM EA resv reco 2024-05-01\r\n    FirstUsageDate2:                 datetime,  // MS CM MCA resv reco 2024-05-01 -- Renamed to remove spaces\r\n    InstanceFlexibilityGroup:        string,    // MS CM EA resv reco 2024-05-01\r\n    InstanceFlexibilityGroup2:       string,    // MS CM MCA resv reco 2024-05-01 -- Renamed to remove spaces\r\n    InstanceFlexibilityRatio:        decimal,   // MS CM EA resv reco 2024-05-01\r\n    InstanceFlexibilityRatio2:       decimal,   // MS CM MCA resv reco 2024-05-01 -- Renamed to remove spaces\r\n    Location:                        string,    // MS CM EA+MCA resv reco 2024-05-01\r\n    LookBackPeriod:                  string,    // MS CM EA+MCA resv reco 2024-05-01\r\n    MeterId:                         string,    // MS CM EA resv reco 2024-05-01\r\n    MeterID:                         string,    // MS CM MCA resv reco 2024-05-01\r\n    NetSavings:                      decimal,   // MS CM EA resv reco 2024-05-01\r\n    NetSavings2:                     decimal,   // MS CM MCA resv reco 2024-05-01 -- Renamed to remove spaces\r\n    NormalizedSize:                  string,    // MS CM EA resv reco 2024-05-01\r\n    NormalizedSize2:                 string,    // MS CM MCA resv reco 2024-05-01 -- Renamed to remove spaces\r\n    RecommendedQuantity:             decimal,   // MS CM EA resv reco 2024-05-01\r\n    RecommendedQuantity2:            decimal,   // MS CM MCA resv reco 2024-05-01 -- Renamed to remove spaces\r\n    RecommendedQuantityNormalized:   decimal,   // MS CM EA resv reco 2024-05-01\r\n    RecommendedQuantityNormalized2:  decimal,   // MS CM MCA resv reco 2024-05-01 -- Renamed to remove spaces\r\n    ResourceType:                    string,    // MS CM EA+MCA resv reco 2024-05-01\r\n    Scope:                           string,    // MS CM EA resv reco 2024-05-01\r\n    scope:                           string,    // MS CM MCA resv reco 2024-05-01\r\n    SKU:                             string,    // MS CM EA resv reco 2024-05-01\r\n    SkuName:                         string,    // MS CM MCA resv reco 2024-05-01\r\n    SkuProperties:                   string,    // MS CM EA resv reco 2024-05-01\r\n    SkuProperties2:                  string,    // MS CM MCA resv reco 2024-05-01 -- Renamed to remove spaces\r\n    SubscriptionId:                  string,    // MS CM EA+MCA resv reco 2024-05-01\r\n    Term:                            string,    // MS CM EA+MCA resv reco 2024-05-01\r\n    TotalCostWithReservedInstances:  decimal,   // MS CM EA resv reco 2024-05-01\r\n    TotalCostWithReservedInstances2: decimal,   // MS CM MCA resv reco 2024-05-01 -- Renamed to remove spaces\r\n    x_SourceName:                    string,    // Hubs add-on\r\n    x_SourceProvider:                string,    // Hubs add-on\r\n    x_SourceType:                    string,    // Hubs add-on\r\n    x_SourceVersion:                 string     // Hubs add-on\r\n)\r\n\r\n// Recommendations_raw ingestion mapping\r\n.create-or-alter table Recommendations_raw ingestion parquet mapping \"Recommendations_raw_mapping\"\r\n```\r\n[\r\n    { \"Column\": \"CostWithNoReservedInstances\",     \"Properties\": { \"Field\": \"CostWithNoReservedInstances\" } },\r\n    { \"Column\": \"CostWithNoReservedInstances2\",    \"Properties\": { \"Field\": \"Cost With No ReservedInstances\" } },\r\n    { \"Column\": \"FirstUsageDate\",                  \"Properties\": { \"Field\": \"FirstUsageDate\" } },\r\n    { \"Column\": \"FirstUsageDate2\",                 \"Properties\": { \"Field\": \"First UsageDate\" } },\r\n    { \"Column\": \"InstanceFlexibilityGroup\",        \"Properties\": { \"Field\": \"InstanceFlexibilityGroup\" } },\r\n    { \"Column\": \"InstanceFlexibilityGroup2\",       \"Properties\": { \"Field\": \"Instance Flexibility Group\" } },\r\n    { \"Column\": \"InstanceFlexibilityRatio\",        \"Properties\": { \"Field\": \"InstanceFlexibilityRatio\" } },\r\n    { \"Column\": \"InstanceFlexibilityRatio2\",       \"Properties\": { \"Field\": \"Instance Flexibility Ratio\" } },\r\n    { \"Column\": \"Location\",                        \"Properties\": { \"Field\": \"Location\" } },\r\n    { \"Column\": \"LookBackPeriod\",                  \"Properties\": { \"Field\": \"LookBackPeriod\" } },\r\n    { \"Column\": \"MeterId\",                         \"Properties\": { \"Field\": \"MeterId\" } },\r\n    { \"Column\": \"MeterID\",                         \"Properties\": { \"Field\": \"MeterID\" } },\r\n    { \"Column\": \"NetSavings\",                      \"Properties\": { \"Field\": \"NetSavings\" } },\r\n    { \"Column\": \"NetSavings2\",                     \"Properties\": { \"Field\": \"Net Savings\" } },\r\n    { \"Column\": \"NormalizedSize\",                  \"Properties\": { \"Field\": \"NormalizedSize\" } },\r\n    { \"Column\": \"NormalizedSize2\",                 \"Properties\": { \"Field\": \"Normalized Size\" } },\r\n    { \"Column\": \"RecommendedQuantity\",             \"Properties\": { \"Field\": \"RecommendedQuantity\" } },\r\n    { \"Column\": \"RecommendedQuantity2\",            \"Properties\": { \"Field\": \"Recommended Quantity\" } },\r\n    { \"Column\": \"RecommendedQuantityNormalized\",   \"Properties\": { \"Field\": \"RecommendedQuantityNormalized\" } },\r\n    { \"Column\": \"RecommendedQuantityNormalized2\",  \"Properties\": { \"Field\": \"Recommended Quantity Normalized\" } },\r\n    { \"Column\": \"ResourceType\",                    \"Properties\": { \"Field\": \"ResourceType\" } },\r\n    { \"Column\": \"Scope\",                           \"Properties\": { \"Field\": \"Scope\" } },\r\n    { \"Column\": \"scope\",                           \"Properties\": { \"Field\": \"scope\" } },\r\n    { \"Column\": \"SKU\",                             \"Properties\": { \"Field\": \"SKU\" } },\r\n    { \"Column\": \"SkuName\",                         \"Properties\": { \"Field\": \"SkuName\" } },\r\n    { \"Column\": \"SkuProperties\",                   \"Properties\": { \"Field\": \"SkuProperties\" } },\r\n    { \"Column\": \"SkuProperties2\",                  \"Properties\": { \"Field\": \"Sku Properties\" } },\r\n    { \"Column\": \"SubscriptionId\",                  \"Properties\": { \"Field\": \"SubscriptionId\" } },\r\n    { \"Column\": \"Term\",                            \"Properties\": { \"Field\": \"Term\" } },\r\n    { \"Column\": \"TotalCostWithReservedInstances\",  \"Properties\": { \"Field\": \"TotalCostWithReservedInstances\" } },\r\n    { \"Column\": \"TotalCostWithReservedInstances2\", \"Properties\": { \"Field\": \"Total Cost With ReservedInstances\" } },\r\n    { \"Column\": \"x_SourceName\",                    \"Properties\": { \"Field\": \"x_SourceName\" } },\r\n    { \"Column\": \"x_SourceProvider\",                \"Properties\": { \"Field\": \"x_SourceProvider\" } },\r\n    { \"Column\": \"x_SourceType\",                    \"Properties\": { \"Field\": \"x_SourceType\" } },\r\n    { \"Column\": \"x_SourceVersion\",                 \"Properties\": { \"Field\": \"x_SourceVersion\" } }\r\n]\r\n```\r\n\r\n// Recommendations_raw retention policy\r\n.alter-merge table Recommendations_raw policy retention softdelete = $$rawRetentionInDays$$d recoverability = disabled\r\n\r\n//----------------------------------------------------------------------------------------------------------------------\r\n\r\n// Recommendations_transform_v1_0 function\r\n.create-or-alter function\r\nwith (docstring='All recommendations transformed to FOCUS 1.0.', folder='Recommendations')\r\nRecommendations_transform_v1_0()\r\n{\r\n    // NOTE: All open issues and questions are tracked @ https://github.com/microsoft/finops-toolkit/issues/1111\r\n    let isoMonths = (duration: string) {\r\n        let number = toint(replace_regex(duration, @'[PMY]', ''));\r\n        toint(case(\r\n            duration == '', toint(''),\r\n            duration endswith \"Y\", number * 12,\r\n            duration endswith \"M\", number,\r\n            -1\r\n        ))\r\n    };\r\n    Recommendations_raw\r\n    //\r\n    // Set ProviderName\r\n    | extend ProviderName = 'Microsoft'\r\n    //\r\n    // Set source columns\r\n    | extend x_SourceName     = coalesce(x_SourceName, iff(ProviderName == 'Microsoft', 'Cost Management', ProviderName))\r\n    | extend x_SourceProvider = coalesce(x_SourceProvider, ProviderName)\r\n    | extend x_SourceType     = coalesce(x_SourceType, iff(ProviderName == 'Microsoft', 'ReservationRecommendations', ''))\r\n    | extend x_SourceVersion  = coalesce(x_SourceVersion, iff(ProviderName == 'Microsoft', '2023-05-01', ''))\r\n    //\r\n    // Handle duplicated columns with spaces\r\n    | extend CostWithNoReservedInstances =    coalesce(CostWithNoReservedInstances, CostWithNoReservedInstances2)\r\n    | extend FirstUsageDate =                 coalesce(FirstUsageDate, FirstUsageDate2)\r\n    | extend InstanceFlexibilityGroup =       coalesce(InstanceFlexibilityGroup, InstanceFlexibilityGroup2)\r\n    | extend InstanceFlexibilityRatio =       coalesce(InstanceFlexibilityRatio, InstanceFlexibilityRatio2)\r\n    | extend NetSavings =                     coalesce(NetSavings, NetSavings2)\r\n    | extend NormalizedSize =                 coalesce(NormalizedSize, NormalizedSize2)\r\n    | extend RecommendedQuantity =            coalesce(RecommendedQuantity, RecommendedQuantity2)\r\n    | extend RecommendedQuantityNormalized =  coalesce(RecommendedQuantityNormalized, RecommendedQuantityNormalized2)\r\n    | extend SkuProperties =                  coalesce(SkuProperties, SkuProperties2)\r\n    | extend TotalCostWithReservedInstances = coalesce(TotalCostWithReservedInstances, TotalCostWithReservedInstances2)\r\n    //\r\n    // Build recommendation details\r\n    | lookup kind=leftouter (database('Ingestion').Regions | distinct Location = RegionId, RegionName) on Location\r\n    | extend x_RecommendationDetails = case(\r\n      x_SourceType == 'ReservationRecommendations', bag_pack(\r\n        'CommitmentDiscountNormalizedGroup', InstanceFlexibilityGroup,\r\n        'CommitmentDiscountNormalizedRatio', InstanceFlexibilityRatio,\r\n        'CommitmentDiscountNormalizedSize', NormalizedSize,\r\n        'CommitmentDiscountResourceType', ResourceType,\r\n        'CommitmentDiscountScope', coalesce(Scope, scope),\r\n        'LookbackPeriodDuration', case(\r\n            LookBackPeriod matches regex @'^Last([0-9]+)Days$', replace_regex(LookBackPeriod, @'^Last([0-9]+)Days$', @'P\\1D'),\r\n            ''\r\n        ),\r\n        'LookbackPeriodStart', FirstUsageDate,\r\n        'RecommendedQuantity', RecommendedQuantity,\r\n        'RecommendedQuantityNormalized', RecommendedQuantityNormalized,\r\n        'RegionId', Location,\r\n        'RegionName', RegionName,\r\n        'SkuMeterId', coalesce(MeterId, MeterID),\r\n        'SkuPriceDetails', SkuProperties,\r\n        'SkuSize', coalesce(SKU, SkuName),\r\n        'SkuTerm', isoMonths(Term)\r\n      ),\r\n      dynamic({})\r\n    )\r\n    //\r\n    // Sort columns and apply final transforms\r\n    | project\r\n      ProviderName,\r\n      SubAccountId = iff(isnotempty(SubscriptionId), strcat('/subscriptions/', SubscriptionId), ''),\r\n      x_IngestionTime = ingestion_time(),\r\n      x_EffectiveCostAfter = TotalCostWithReservedInstances,\r\n      x_EffectiveCostBefore = CostWithNoReservedInstances,\r\n      x_EffectiveCostSavings = NetSavings,\r\n      x_RecommendationDate = FirstUsageDate + (toint(extract(@'^Last([0-9]+)Days$', 1, LookBackPeriod)) * 1d),\r\n      x_RecommendationDetails,\r\n      x_SourceName,\r\n      x_SourceProvider,\r\n      x_SourceType,\r\n      x_SourceVersion\r\n}\r\n\r\n//----------------------------------------------------------------------------------------------------------------------\r\n\r\n// Recommendations_final_v1_0 table\r\n.create-merge table Recommendations_final_v1_0 (\r\n    ProviderName:            string,\r\n    SubAccountId:            string,\r\n    x_IngestionTime:         datetime,\r\n    x_EffectiveCostAfter:    decimal,\r\n    x_EffectiveCostBefore:   decimal,\r\n    x_EffectiveCostSavings:  decimal,\r\n    x_RecommendationDate:    datetime,\r\n    x_RecommendationDetails: dynamic,\r\n    x_SourceName:            string,\r\n    x_SourceProvider:        string,\r\n    x_SourceType:            string,\r\n    x_SourceVersion:         string\r\n)\r\n\r\n//----------------------------------------------------------------------------------------------------------------------\r\n\r\n// Update policy for Recommendations_raw -> Recommendations_final_v1_0 table\r\n// NOTE: Must be after transform function is defined\r\n.alter table Recommendations_final_v1_0 policy update\r\n```\r\n[{\r\n    \"IsEnabled\": true,\r\n    \"Source\": \"Recommendations_raw\",\r\n    \"Query\": \"Recommendations_transform_v1_0()\",\r\n    \"IsTransactional\": true,\r\n    \"PropagateIngestionProperties\": true\r\n}]\r\n```\r\n\r\n\r\n//===| Transactions |===================================================================================================\r\n// Supported versions:\r\n// - MS CM EA reservation transactions: 2023-05-01  -- See https://learn.microsoft.com/en-us/azure/cost-management-billing/dataset-schema/reservation-transactions-ea\r\n// - MS CM MCA reservation transactions: 2023-05-01 -- See https://learn.microsoft.com/en-us/azure/cost-management-billing/dataset-schema/reservation-transactions-mca\r\n//======================================================================================================================\r\n\r\n// Transactions_raw table\r\n.create-merge table Transactions_raw (\r\n    AccountName:                    string,    // MS CM EA resv trans 2023-05-01\r\n    AccountOwnerEmail:              string,    // MS CM EA resv trans 2023-05-01\r\n    Amount:                         decimal,   // MS CM EA+MCA resv trans 2023-05-01\r\n    ArmSkuName:                     string,    // MS CM EA+MCA resv trans 2023-05-01\r\n    BillingFrequency:               string,    // MS CM EA+MCA resv trans 2023-05-01\r\n    BillingMonth:                   string,    // MS CM EA resv trans 2023-05-01\r\n    BillingProfileId:               string,    // MS CM MCA resv trans 2023-05-01\r\n    BillingProfileName:             string,    // MS CM MCA resv trans 2023-05-01\r\n    CostCenter:                     string,    // MS CM EA resv trans 2023-05-01\r\n    Currency:                       string,    // MS CM EA+MCA resv trans 2023-05-01\r\n    CurrentEnrollmentId:            string,    // MS CM EA resv trans 2023-05-01\r\n    DepartmentName:                 string,    // MS CM EA resv trans 2023-05-01\r\n    Description:                    string,    // MS CM EA+MCA resv trans 2023-05-01\r\n    EventDate:                      datetime,  // MS CM EA+MCA resv trans 2023-05-01\r\n    EventType:                      string,    // MS CM EA+MCA resv trans 2023-05-01\r\n    Invoice:                        string,    // MS CM EA+MCA resv trans 2023-05-01\r\n    InvoiceId:                      string,    // MS CM EA+MCA resv trans 2023-05-01\r\n    InvoiceSectionId:               string,    // MS CM MCA resv trans 2023-05-01\r\n    InvoiceSectionName:             string,    // MS CM MCA resv trans 2023-05-01\r\n    MonetaryCommitment:             decimal,   // MS CM EA resv trans 2023-05-01\r\n    Overage:                        decimal,   // MS CM EA resv trans 2023-05-01\r\n    PurchasingEnrollment:           string,    // MS CM EA resv trans 2023-05-01\r\n    PurchasingSubscriptionGuid:     string,    // MS CM EA+MCA resv trans 2023-05-01\r\n    PurchasingSubscriptionName:     string,    // MS CM EA+MCA resv trans 2023-05-01\r\n    Quantity:                       decimal,   // MS CM EA+MCA resv trans 2023-05-01\r\n    Region:                         string,    // MS CM EA+MCA resv trans 2023-05-01\r\n    ReservationOrderId:             string,    // MS CM EA+MCA resv trans 2023-05-01\r\n    ReservationOrderName:           string,    // MS CM EA+MCA resv trans 2023-05-01\r\n    Term:                           string,    // MS CM EA+MCA resv trans 2023-05-01\r\n    x_SourceName:                   string,    // Hubs add-on\r\n    x_SourceProvider:               string,    // Hubs add-on\r\n    x_SourceType:                   string,    // Hubs add-on\r\n    x_SourceVersion:                string     // Hubs add-on\r\n)\r\n\r\n// Transactions_raw ingestion mapping\r\n.create-or-alter table Transactions_raw ingestion parquet mapping \"Transactions_raw_mapping\"\r\n```\r\n[\r\n    { \"Column\": \"AccountName\",                \"Properties\": { \"Field\": \"AccountName\" } },\r\n    { \"Column\": \"AccountOwnerEmail\",          \"Properties\": { \"Field\": \"AccountOwnerEmail\" } },\r\n    { \"Column\": \"Amount\",                     \"Properties\": { \"Field\": \"Amount\" } },\r\n    { \"Column\": \"ArmSkuName\",                 \"Properties\": { \"Field\": \"ArmSkuName\" } },\r\n    { \"Column\": \"BillingFrequency\",           \"Properties\": { \"Field\": \"BillingFrequency\" } },\r\n    { \"Column\": \"BillingMonth\",               \"Properties\": { \"Field\": \"BillingMonth\" } },\r\n    { \"Column\": \"BillingProfileId\",           \"Properties\": { \"Field\": \"BillingProfileId\" } },\r\n    { \"Column\": \"BillingProfileName\",         \"Properties\": { \"Field\": \"BillingProfileName\" } },\r\n    { \"Column\": \"CostCenter\",                 \"Properties\": { \"Field\": \"CostCenter\" } },\r\n    { \"Column\": \"Currency\",                   \"Properties\": { \"Field\": \"Currency\" } },\r\n    { \"Column\": \"CurrentEnrollmentId\",        \"Properties\": { \"Field\": \"CurrentEnrollmentId\" } },\r\n    { \"Column\": \"DepartmentName\",             \"Properties\": { \"Field\": \"DepartmentName\" } },\r\n    { \"Column\": \"Description\",                \"Properties\": { \"Field\": \"Description\" } },\r\n    { \"Column\": \"EventDate\",                  \"Properties\": { \"Field\": \"EventDate\" } },\r\n    { \"Column\": \"EventType\",                  \"Properties\": { \"Field\": \"EventType\" } },\r\n    { \"Column\": \"Invoice\",                    \"Properties\": { \"Field\": \"Invoice\" } },\r\n    { \"Column\": \"InvoiceId\",                  \"Properties\": { \"Field\": \"InvoiceId\" } },\r\n    { \"Column\": \"InvoiceSectionId\",           \"Properties\": { \"Field\": \"InvoiceSectionId\" } },\r\n    { \"Column\": \"InvoiceSectionName\",         \"Properties\": { \"Field\": \"InvoiceSectionName\" } },\r\n    { \"Column\": \"MonetaryCommitment\",         \"Properties\": { \"Field\": \"MonetaryCommitment\" } },\r\n    { \"Column\": \"Overage\",                    \"Properties\": { \"Field\": \"Overage\" } },\r\n    { \"Column\": \"PurchasingEnrollment\",       \"Properties\": { \"Field\": \"PurchasingEnrollment\" } },\r\n    { \"Column\": \"PurchasingSubscriptionGuid\", \"Properties\": { \"Field\": \"PurchasingSubscriptionGuid\" } },\r\n    { \"Column\": \"PurchasingSubscriptionName\", \"Properties\": { \"Field\": \"PurchasingSubscriptionName\" } },\r\n    { \"Column\": \"Quantity\",                   \"Properties\": { \"Field\": \"Quantity\" } },\r\n    { \"Column\": \"Region\",                     \"Properties\": { \"Field\": \"Region\" } },\r\n    { \"Column\": \"ReservationOrderId\",         \"Properties\": { \"Field\": \"ReservationOrderId\" } },\r\n    { \"Column\": \"ReservationOrderName\",       \"Properties\": { \"Field\": \"ReservationOrderName\" } },\r\n    { \"Column\": \"Term\",                       \"Properties\": { \"Field\": \"Term\" } },\r\n    { \"Column\": \"x_SourceName\",               \"Properties\": { \"Field\": \"x_SourceName\" } },\r\n    { \"Column\": \"x_SourceProvider\",           \"Properties\": { \"Field\": \"x_SourceProvider\" } },\r\n    { \"Column\": \"x_SourceType\",               \"Properties\": { \"Field\": \"x_SourceType\" } },\r\n    { \"Column\": \"x_SourceVersion\",            \"Properties\": { \"Field\": \"x_SourceVersion\" } }\r\n]\r\n```\r\n\r\n// Transactions_raw retention policy\r\n.alter-merge table Transactions_raw policy retention softdelete = $$rawRetentionInDays$$d recoverability = disabled\r\n\r\n//----------------------------------------------------------------------------------------------------------------------\r\n\r\n// Transactions_transform_v1_0 function\r\n.create-or-alter function\r\nwith (docstring='All transactions transformed to FOCUS 1.0.', folder='Transactions')\r\nTransactions_transform_v1_0()\r\n{\r\n    // NOTE: All open issues and questions are tracked @ https://github.com/microsoft/finops-toolkit/issues/1111\r\n    let isoMonths = (duration: string) {\r\n        let number = toint(replace_regex(duration, @'[PMY]', ''));\r\n        toint(case(\r\n            duration == '', toint(''),\r\n            duration endswith \"Y\", number * 12,\r\n            duration endswith \"M\", number,\r\n            -1\r\n        ))\r\n    };\r\n    Transactions_raw\r\n    //\r\n    // Set ProviderName\r\n    | extend ProviderName = 'Microsoft'\r\n    //\r\n    // Set source columns\r\n    | extend x_SourceName     = coalesce(x_SourceName, iff(ProviderName == 'Microsoft', 'Cost Management', ProviderName))\r\n    | extend x_SourceProvider = coalesce(x_SourceProvider, ProviderName)\r\n    | extend x_SourceType     = coalesce(x_SourceType, iff(ProviderName == 'Microsoft', 'ReservationTransactions', ''))\r\n    | extend x_SourceVersion  = coalesce(x_SourceVersion, iff(ProviderName == 'Microsoft', '2023-05-01', ''))\r\n    //\r\n    // Handle BillingPeriodStart/End\r\n    | extend BillingMonth = tostring(BillingMonth)\r\n    | extend BillingPeriodStart = iff(isempty(BillingMonth), datetime(null), todatetime(strcat(substring(BillingMonth, 0, 4), \"-\", substring(BillingMonth, 4, 2), \"-\", substring(BillingMonth, 6, 2))))\r\n    | extend BillingPeriodEnd = iff(isempty(BillingMonth), datetime(null), startofmonth(endofmonth(BillingPeriodStart) + 1d))\r\n    //\r\n    // Sort columns and apply final transforms\r\n    | project\r\n      BilledCost = Amount,\r\n      BillingAccountId = case(\r\n        BillingProfileId startswith '/', BillingProfileId,\r\n        isnotempty(CurrentEnrollmentId), strcat('/providers/Microsoft.Billing/billingAccounts/', CurrentEnrollmentId),\r\n        isnotempty(BillingProfileId), strcat('/providers/Microsoft.Billing/billingProfiles/', BillingProfileId),\r\n        ''\r\n      ),\r\n      BillingAccountName = coalesce(BillingProfileName, CurrentEnrollmentId),\r\n      BillingCurrency = Currency,\r\n      BillingPeriodEnd,\r\n      BillingPeriodStart,\r\n      ChargeCategory = case(\r\n        EventType in ('Cancel', 'Purchase', 'Refund'), 'Purchase',\r\n        'Adjustment'\r\n      ),\r\n      ChargeClass = case(\r\n        EventType == 'Cancel', 'Cancel',  // FOCUS does not handle this scenario\r\n        EventType == 'Refund', 'Correction',\r\n        ''\r\n      ),\r\n      ChargeDescription = Description,\r\n      ChargeFrequency   = case(\r\n        BillingFrequency == 'OneTime', 'One-Time',\r\n        BillingFrequency == 'Recurring', 'Recurring',\r\n        BillingFrequency\r\n      ),\r\n      ChargePeriodStart    = EventDate,\r\n      PricingQuantity      = Quantity,\r\n      PricingUnit          = 'Reservations',\r\n      ProviderName,\r\n      RegionId             = Region,\r\n      RegionName           = Region,\r\n      SubAccountId         = iff(isempty(PurchasingSubscriptionGuid), '', strcat('/subscriptions/', PurchasingSubscriptionGuid)),\r\n      SubAccountName       = iff(isempty(PurchasingSubscriptionGuid), '', PurchasingSubscriptionName),\r\n      x_AccountName        = AccountName,\r\n      x_AccountOwnerId     = AccountOwnerEmail,\r\n      x_CostCenter         = CostCenter,\r\n      x_InvoiceId          = InvoiceId,\r\n      x_InvoiceNumber      = Invoice,\r\n      x_InvoiceSectionId   = InvoiceSectionId,\r\n      x_InvoiceSectionName = coalesce(InvoiceSectionName, DepartmentName),\r\n      x_IngestionTime      = ingestion_time(),\r\n      x_MonetaryCommitment = MonetaryCommitment,\r\n      x_Overage            = Overage,\r\n      x_PurchasingBillingAccountId = PurchasingEnrollment,\r\n      x_SkuOrderId         = ReservationOrderId,\r\n      x_SkuOrderName       = ReservationOrderName,\r\n      x_SkuSize            = ArmSkuName,\r\n      x_SkuTerm            = isoMonths(Term),\r\n      x_SourceName,\r\n      x_SourceProvider,\r\n      x_SourceType,\r\n      x_SourceVersion,\r\n      x_SubscriptionId  = PurchasingSubscriptionGuid,\r\n      x_TransactionType = EventType\r\n}\r\n\r\n//----------------------------------------------------------------------------------------------------------------------\r\n\r\n// Transactions_final_v1_0 table\r\n.create-merge table Transactions_final_v1_0 (\r\n    BilledCost:                   decimal,   // MS CM EA+MCA 2023-05-01\r\n    BillingAccountId:             string,    // MS CM EA+MCA 2023-05-01\r\n    BillingAccountName:           string,    // MS CM EA+MCA 2023-05-01\r\n    BillingCurrency:              string,    // MS CM EA+MCA 2023-05-01\r\n    BillingPeriodEnd:             datetime,  // MS CM EA+MCA 2023-05-01\r\n    BillingPeriodStart:           datetime,  // MS CM EA+MCA 2023-05-01\r\n    ChargeCategory:               string,    // Hubs add-on\r\n    ChargeClass:                  string,    // Hubs add-on\r\n    ChargeDescription:            string,    // MS CM EA+MCA 2023-05-01\r\n    ChargeFrequency:              string,    // MS CM EA+MCA 2023-05-01\r\n    ChargePeriodStart:            datetime,  // MS CM EA+MCA 2023-05-01\r\n    PricingQuantity:              decimal,   // MS CM EA+MCA 2023-05-01\r\n    PricingUnit:                  string,    // Hubs add-on\r\n    ProviderName:                 string,    // Hubs add-on\r\n    RegionId:                     string,    // MS CM EA+MCA 2023-05-01\r\n    RegionName:                   string,    // MS CM EA+MCA 2023-05-01\r\n    SubAccountId:                 string,    // MS CM EA+MCA 2023-05-01\r\n    SubAccountName:               string,    // MS CM EA+MCA 2023-05-01\r\n    x_AccountName:                string,    // MS CM EA 2023-05-01\r\n    x_AccountOwnerId:             string,    // MS CM EA 2023-05-01\r\n    x_CostCenter:                 string,    // MS CM EA 2023-05-01\r\n    x_InvoiceId:                  string,    // MS CM MCA 2023-05-01\r\n    x_InvoiceNumber:              string,    // MS CM MCA 2023-05-01\r\n    x_InvoiceSectionId:           string,    // MS CM MCA 2023-05-01\r\n    x_InvoiceSectionName:         string,    // MS CM MCA 2023-05-01\r\n    x_IngestionTime:              datetime,  // Hubs add-on\r\n    x_MonetaryCommitment:         decimal,   // MS CM EA 2023-05-01\r\n    x_Overage:                    decimal,   // MS CM EA 2023-05-01\r\n    x_PurchasingBillingAccountId: string,    // MS CM EA 2023-05-01\r\n    x_SkuOrderId:                 string,    // MS CM EA+MCA 2023-05-01\r\n    x_SkuOrderName:               string,    // MS CM EA+MCA 2023-05-01\r\n    x_SkuSize:                    string,    // MS CM EA+MCA 2023-05-01\r\n    x_SkuTerm:                    int,       // MS CM EA+MCA 2023-05-01\r\n    x_SourceName:                 string,    // Hubs add-on\r\n    x_SourceProvider:             string,    // Hubs add-on\r\n    x_SourceType:                 string,    // Hubs add-on\r\n    x_SourceVersion:              string,    // Hubs add-on\r\n    x_SubscriptionId:             string,    // MS CM EA+MCA 2023-05-01\r\n    x_TransactionType:            string     // MS CM EA+MCA 2023-05-01\r\n)\r\n\r\n//----------------------------------------------------------------------------------------------------------------------\r\n\r\n// Update policy for Transactions_raw -> Transactions_final_v1_0 table\r\n// NOTE: Must be after transform function is defined\r\n.alter table Transactions_final_v1_0 policy update\r\n```\r\n[{\r\n    \"IsEnabled\": true,\r\n    \"Source\": \"Transactions_raw\",\r\n    \"Query\": \"Transactions_transform_v1_0()\",\r\n    \"IsTransactional\": true,\r\n    \"PropagateIngestionProperties\": true\r\n}]\r\n```\r\n",
                    "$fxv#3": "//======================================================================================================================\r\n// Common utility functions\r\n//\r\n// TIP: Use Ctrl+K,Ctrl+0 to collapse all regions in VS Code\r\n//======================================================================================================================\r\n\r\n\r\n//===| Date functions |=================================================================================================\r\n\r\n// daterange\r\n.create-or-alter function \r\nwith (docstring = @'Converts 2 dates into a simple, user-friendly date range (e.g. Jan 1-Jan 3)', folder =@'Common') \r\ndaterange(start: datetime, end: datetime = datetime('0001-01-01'))\r\n{\r\n    let month = (d: datetime) { let mo = toint(substring(d, 5, 2)) - 1; dynamic(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])[mo] };\r\n    let day = (d: datetime) { toint(substring(d, 8, 2)) };\r\n    let endDate = iff(end == datetime('0001-01-01'), start, end);\r\n    let sameDay = startofday(start) == startofday(endDate);\r\n    let sameMonth = startofmonth(start) == startofmonth(endDate);\r\n    strcat(month(start), ' ', day(start), iff(sameDay, '', strcat('-', iff(sameMonth, '', strcat(month(endDate), ' ')), day(endDate))))\r\n}\r\n\r\n// monthsago\r\n.create-or-alter function \r\nwith (docstring = 'Gets the date that is the specified number of months ago', folder = 'Common')\r\nmonthsago(months: int)\r\n{\r\n    datetime_add('month', -months, startofmonth(now()))\r\n}\r\n\r\n\r\n//===| Number comparisons |=============================================================================================\r\n// NOTE: Must be defined before string converters\r\n\r\n// delta\r\n.create-or-alter function \r\nwith (docstring = @'Compares 2 values and returns the percentage change from oldval to newval', folder =@'Common') \r\ndelta(oldval: double, newval: double)\r\n{\r\n    (newval - todouble(oldval))/oldval\r\n}\r\n\r\n// percentOfTotal\r\n// NOTE: Must be before percent() function\r\n.create-or-alter function \r\nwith (docstring = @'Calculates the percentage of each record based on a required Count column', folder =@'Common') \r\npercentOfTotal(t: (Count: long), tot: long)\r\n{\r\n    let total = todouble(tot);\r\n    t \r\n    | extend Percent = round(Count / total * 100, 3) \r\n    | order by Count desc\r\n}\r\n\r\n// percent\r\n.create-or-alter function \r\nwith (docstring = @'Calculates the percentage of each record based on a required Count column', folder =@'Common') \r\npercent(t: (Count: long))\r\n{\r\n    let total = todouble(toscalar(t | summarize sum(Count)));\r\n    percentOfTotal(t, total)\r\n}\r\n\r\n// plusminus\r\n.create-or-alter function \r\nwith (docstring = 'Shows a +/- sign based on the direction of the number', folder = 'Common')\r\nplusminus(val: string)\r\n{\r\n    let neg = substring(val, 0, 1) == '-';\r\n    iff(neg, val, strcat('+', val))\r\n}\r\n\r\n// updown\r\n.create-or-alter function \r\nwith (docstring = 'Shows an up/down arrow based on the direction of the number', folder = 'Common')\r\nupdown(val: string)\r\n{\r\n    let neg = substring(val, 0, 1) == '-';\r\n    iff(neg, strcat('↓', substring(val, 1)), strcat('↑', val))\r\n}\r\n\r\n\r\n//===| String comparisons |=============================================================================================\r\n\r\n// percentstring\r\n// NOTE: Must be defined before deltastring\r\n.create-or-alter function \r\nwith (docstring = 'Calculate a percentage and render as a string', folder = 'Common')\r\npercentstring(num: double, total: double = 1.0, places: int = 9)\r\n{\r\n    let value = 1.0 * num / total * 100;\r\n    strcat(case(\r\n        places != 9, round(value, places),\r\n        value < 10,  round(value, 2),\r\n        round(value, 1)\r\n    ), '%')\r\n}\r\n\r\n//----------------------------------------------------------------------------------------------------------------------\r\n\r\n// arraystring\r\n.create-or-alter function \r\nwith (docstring = 'Convert an array to a comma-delimited string', folder = 'Common')\r\narraystring(arr: dynamic)\r\n{\r\n    replace_string(replace_regex(replace_regex(replace_regex(replace_regex(replace_regex(\r\n        tostring(arr)\r\n        , @'^\\[\"', '')\r\n        , @'\"\\]$', '')\r\n        , @'^, ', '')\r\n        , @', $', '')\r\n        , @'^\\[]$', '')\r\n        , '\",\"', ', ')\r\n}\r\n\r\n// deltastring\r\n.create-or-alter function \r\nwith (docstring = 'Calculate a delta percentage and render as a string', folder = 'Common')\r\ndeltastring(oldval: double, newval: double, places: int = 1, useArrows: bool = false)\r\n{\r\n    let d = delta(oldval, newval);\r\n    strcat(case(useArrows and d > 0, '↑', useArrows and d < 0, '↓', d < 0, '-', ''), percentstring(abs(d), 1, places))\r\n}\r\n\r\n// diffstring\r\n.create-or-alter function \r\nwith (docstring = 'Calculate the difference and render as a string', folder = 'Common')\r\ndiffstring(oldval: double, newval: double, places: int = 1)\r\n{\r\n    plusminus(round(newval - oldval, places))\r\n}\r\n\r\n// numberstring\r\n.create-or-alter function \r\nwith (docstring = 'Convert a number to a string', folder = 'Common')\r\nnumberstring(num: long, abbrev: bool = true)\r\n{\r\n    case(\r\n        num >= 10000000000000, strcat(round(1.0 * num / 1000000000000, 1), 'T'),\r\n        num >= 1000000000000,  strcat(round(1.0 * num / 1000000000000, 2), 'T'),\r\n        num >= 10000000000,    strcat(round(1.0 * num / 1000000000, 1), 'B'),\r\n        num >= 1000000000,     strcat(round(1.0 * num / 1000000000, 2), 'B'),\r\n        num >= 10000000,       strcat(round(1.0 * num / 1000000, 1), 'M'),\r\n        num >= 1000000,        strcat(round(1.0 * num / 1000000, 2), 'M'),\r\n        num >= 10000,          strcat(round(1.0 * num / 1000, 1), 'K'),\r\n        // Kusto doesn't support back-refs yet -- num > 1000, replace_regex(tostring(num), @'(\\d)(?=(\\d{3})+\\.)', @'\\1,'), // See https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/re2-library\r\n        num > 1000, replace_regex(tostring(num), @'([0-9]{3})$', @',\\1'), //num / 1000, ',', substring(tostring(num), 0) - (num / 1000 * 1000)),\r\n        tostring(num))\r\n}\r\n\r\n\r\n//===| Other |==========================================================================================================\r\n\r\n// ifempty\r\n.create-or-alter function \r\nwith (docstring = 'Replaces an empty value with the specified default value', folder = 'Common')\r\nifempty(val: dynamic, defaultVal: dynamic)\r\n{\r\n    iff(isempty(val), defaultVal, val)\r\n}\r\n",
                    "$fxv#4": "//======================================================================================================================\r\n// Hub database\r\n// Used for querying and reporting.\r\n//\r\n// Versioning strategy:\r\n// - Each dataset includes a function that returns the latest version of the data (e.g., \"Costs()\").\r\n// - Every supported version of FOCUS should have a corresponding function (e.g., \"Costs_v1_0\").\r\n// - Each versioned function unions data from versioned tables in the Ingestion database and transforms it to that FOCUS version for back compat.\r\n// - Consumers should use the unversioned function for the latest and the versioned functions for back compat.\r\n//\r\n// To add a new FOCUS versions:\r\n// 1. Add new FOCUS version section after the latest version section and before existing version sections\r\n// 2. Create new *_vX_Y functions per dataset that transforms older data to the new FOCUS version\r\n// 3. Update the unversioned functions to use the new *_vX_Y functions\r\n// 4. Update older versioned functions to also pull from the new *_vX_Y functions and transform to the old schema\r\n//======================================================================================================================\r\n\r\n// For allowed commands, see https://learn.microsoft.com/azure/data-explorer/database-script\r\n\r\n\r\n//======================================================================================================================\r\n// FOCUS 1.0\r\n//======================================================================================================================\r\n\r\n// CommitmentDiscountUsage_final_v1_0\r\n.create-or-alter function\r\nwith (docstring = 'Gets all commitment discount usage records aligned to FOCUS 1.0.', folder = 'CommitmentDiscountUsage')\r\nCommitmentDiscountUsage_v1_0()\r\n{\r\n    database('Ingestion').CommitmentDiscountUsage_final_v1_0\r\n}\r\n\r\n\r\n// Costs_final_v1_0\r\n.create-or-alter function\r\nwith (docstring = 'Gets all cost and usage records aligned to FOCUS 1.0.', folder = 'Costs')\r\nCosts_v1_0()\r\n{\r\n    database('Ingestion').Costs_final_v1_0\r\n}\r\n\r\n\r\n// Prices_final_v1_0\r\n.create-or-alter function\r\nwith (docstring = 'Gets all prices aligned to FOCUS 1.0.', folder = 'Prices')\r\nPrices_v1_0()\r\n{\r\n    database('Ingestion').Prices_final_v1_0\r\n}\r\n\r\n\r\n// Recommendations_final_v1_0\r\n.create-or-alter function\r\nwith (docstring = 'Gets all recommendations aligned to FOCUS 1.0.', folder = 'Recommendations')\r\nRecommendations_v1_0()\r\n{\r\n    database('Ingestion').Recommendations_final_v1_0\r\n}\r\n\r\n\r\n// Transactions_final_v1_0\r\n.create-or-alter function\r\nwith (docstring = 'Gets all transactions aligned to FOCUS 1.0.', folder = 'Transactions')\r\nTransactions_v1_0()\r\n{\r\n    database('Ingestion').Transactions_final_v1_0\r\n}\r\n\r\n\r\n//======================================================================================================================\r\n// Latest FOCUS version\r\n//======================================================================================================================\r\n\r\n.create-or-alter function\r\nwith (docstring = 'Gets all commitment discount usage records with the latest supported version of the FOCUS schema.', folder = 'CommitmentDiscountUsage')\r\nCommitmentDiscountUsage()\r\n{\r\n    CommitmentDiscountUsage_v1_0()\r\n}\r\n\r\n\r\n.create-or-alter function\r\nwith (docstring = 'Gets all cost and usage records with the latest supported version of the FOCUS schema.', folder = 'Costs')\r\nCosts()\r\n{\r\n    Costs_v1_0()\r\n}\r\n\r\n\r\n.create-or-alter function\r\nwith (docstring = 'Gets all prices with the latest supported version of the FOCUS schema.', folder = 'Prices')\r\nPrices()\r\n{\r\n    Prices_v1_0()\r\n}\r\n\r\n\r\n.create-or-alter function\r\nwith (docstring = 'Gets all recommendations with the latest supported version of the FOCUS schema.', folder = 'Recommendations')\r\nRecommendations()\r\n{\r\n    Recommendations_v1_0()\r\n}\r\n\r\n\r\n.create-or-alter function\r\nwith (docstring = 'Gets all transactions with the latest supported version of the FOCUS schema.', folder = 'Transactions')\r\nTransactions()\r\n{\r\n    Transactions_v1_0()\r\n}\r\n",
                    "ftkver": "[variables('$fxv#0')]",
                    "ftkVersion": "[if(contains(variables('ftkver'), '-'), split(variables('ftkver'), '-')[0], variables('ftkver'))]",
                    "ftkBranch": "[if(contains(variables('ftkver'), '-'), split(variables('ftkver'), '-')[1], '')]",
                    "dataExplorerPrivateDnsZoneName": "[replace(format('privatelink.{0}.{1}', parameters('location'), replace(environment().suffixes.storage, 'core', 'kusto')), '..', '.')]",
                    "ingestionCapacity": {
                      "Dev(No SLA)_Standard_E2a_v4": 1,
                      "Dev(No SLA)_Standard_D11_v2": 1,
                      "Standard_D11_v2": 2,
                      "Standard_D12_v2": 4,
                      "Standard_D13_v2": 8,
                      "Standard_D14_v2": 16,
                      "Standard_D16d_v5": 16,
                      "Standard_D32d_v4": 32,
                      "Standard_D32d_v5": 32,
                      "Standard_DS13_v2+1TB_PS": 8,
                      "Standard_DS13_v2+2TB_PS": 8,
                      "Standard_DS14_v2+3TB_PS": 16,
                      "Standard_DS14_v2+4TB_PS": 16,
                      "Standard_E2a_v4": 2,
                      "Standard_E2ads_v5": 2,
                      "Standard_E2d_v4": 2,
                      "Standard_E2d_v5": 2,
                      "Standard_E4a_v4": 4,
                      "Standard_E4ads_v5": 4,
                      "Standard_E4d_v4": 4,
                      "Standard_E4d_v5": 4,
                      "Standard_E8a_v4": 8,
                      "Standard_E8ads_v5": 8,
                      "Standard_E8as_v4+1TB_PS": 8,
                      "Standard_E8as_v4+2TB_PS": 8,
                      "Standard_E8as_v5+1TB_PS": 8,
                      "Standard_E8as_v5+2TB_PS": 8,
                      "Standard_E8d_v4": 8,
                      "Standard_E8d_v5": 8,
                      "Standard_E8s_v4+1TB_PS": 8,
                      "Standard_E8s_v4+2TB_PS": 8,
                      "Standard_E8s_v5+1TB_PS": 8,
                      "Standard_E8s_v5+2TB_PS": 8,
                      "Standard_E16a_v4": 16,
                      "Standard_E16ads_v5": 16,
                      "Standard_E16as_v4+3TB_PS": 16,
                      "Standard_E16as_v4+4TB_PS": 16,
                      "Standard_E16as_v5+3TB_PS": 16,
                      "Standard_E16as_v5+4TB_PS": 16,
                      "Standard_E16d_v4": 16,
                      "Standard_E16d_v5": 16,
                      "Standard_E16s_v4+3TB_PS": 16,
                      "Standard_E16s_v4+4TB_PS": 16,
                      "Standard_E16s_v5+3TB_PS": 16,
                      "Standard_E16s_v5+4TB_PS": 16,
                      "Standard_E64i_v3": 64,
                      "Standard_E80ids_v4": 80,
                      "Standard_EC8ads_v5": 8,
                      "Standard_EC8as_v5+1TB_PS": 8,
                      "Standard_EC8as_v5+2TB_PS": 8,
                      "Standard_EC16ads_v5": 16,
                      "Standard_EC16as_v5+3TB_PS": 16,
                      "Standard_EC16as_v5+4TB_PS": 16,
                      "Standard_L4s": 4,
                      "Standard_L8as_v3": 8,
                      "Standard_L8s": 8,
                      "Standard_L8s_v2": 8,
                      "Standard_L8s_v3": 8,
                      "Standard_L16as_v3": 16,
                      "Standard_L16s": 16,
                      "Standard_L16s_v2": 16,
                      "Standard_L16s_v3": 16,
                      "Standard_L32as_v3": 32,
                      "Standard_L32s_v3": 32
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Kusto/clusters/databases/scripts",
                      "apiVersion": "2023-08-15",
                      "name": "[format('{0}/{1}/{2}', parameters('clusterName'), 'Ingestion', 'CommonFunctions')]",
                      "properties": {
                        "scriptContent": "[variables('$fxv#1')]",
                        "continueOnErrors": "[parameters('continueOnErrors')]",
                        "forceUpdateTag": "[parameters('forceUpdateTag')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Kusto/clusters/databases', parameters('clusterName'), 'Ingestion')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Kusto/clusters/databases/scripts",
                      "apiVersion": "2023-08-15",
                      "name": "[format('{0}/{1}/{2}', parameters('clusterName'), 'Ingestion', 'SetupScript')]",
                      "properties": {
                        "scriptContent": "[replace(replace(replace(replace(variables('$fxv#2'), '$$adfPrincipalId$$', reference(resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName')), '2018-06-01', 'full').identity.principalId), '$$adfTenantId$$', reference(resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName')), '2018-06-01', 'full').identity.tenantId), '$$ftkOpenDataFolder$$', if(empty(variables('ftkBranch')), format('https://github.com/microsoft/finops-toolkit/releases/download/v{0}', variables('ftkVersion')), format('https://raw.githubusercontent.com/microsoft/finops-toolkit/{0}/src/open-data', variables('ftkBranch')))), '$$rawRetentionInDays$$', string(parameters('rawRetentionInDays')))]",
                        "continueOnErrors": "[parameters('continueOnErrors')]",
                        "forceUpdateTag": "[parameters('forceUpdateTag')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Kusto/clusters/databases/scripts', parameters('clusterName'), 'Ingestion', 'CommonFunctions')]",
                        "[resourceId('Microsoft.Kusto/clusters/databases', parameters('clusterName'), 'Ingestion')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Kusto/clusters/databases/scripts",
                      "apiVersion": "2023-08-15",
                      "name": "[format('{0}/{1}/{2}', parameters('clusterName'), 'Hub', 'CommonFunctions')]",
                      "properties": {
                        "scriptContent": "[variables('$fxv#3')]",
                        "continueOnErrors": "[parameters('continueOnErrors')]",
                        "forceUpdateTag": "[parameters('forceUpdateTag')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Kusto/clusters/databases', parameters('clusterName'), 'Hub')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Kusto/clusters/databases/scripts",
                      "apiVersion": "2023-08-15",
                      "name": "[format('{0}/{1}/{2}', parameters('clusterName'), 'Hub', 'SetupScript')]",
                      "properties": {
                        "scriptContent": "[replace(replace(variables('$fxv#4'), '$$adfPrincipalId$$', reference(resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName')), '2018-06-01', 'full').identity.principalId), '$$adfTenantId$$', reference(resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName')), '2018-06-01', 'full').identity.tenantId)]",
                        "continueOnErrors": "[parameters('continueOnErrors')]",
                        "forceUpdateTag": "[parameters('forceUpdateTag')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Kusto/clusters/databases/scripts', parameters('clusterName'), 'Hub', 'CommonFunctions')]",
                        "[resourceId('Microsoft.Kusto/clusters/databases', parameters('clusterName'), 'Hub')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Kusto/clusters/principalAssignments",
                      "apiVersion": "2023-08-15",
                      "name": "[format('{0}/{1}', parameters('clusterName'), 'adf-mi-cluster-admin')]",
                      "properties": {
                        "principalType": "App",
                        "principalId": "[reference(resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName')), '2018-06-01', 'full').identity.principalId]",
                        "tenantId": "[reference(resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName')), '2018-06-01', 'full').identity.tenantId]",
                        "role": "AllDatabasesAdmin"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Kusto/clusters', parameters('clusterName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Kusto/clusters/databases",
                      "apiVersion": "2023-08-15",
                      "name": "[format('{0}/{1}', parameters('clusterName'), 'Ingestion')]",
                      "location": "[parameters('location')]",
                      "kind": "ReadWrite",
                      "dependsOn": [
                        "[resourceId('Microsoft.Kusto/clusters', parameters('clusterName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Kusto/clusters/databases",
                      "apiVersion": "2023-08-15",
                      "name": "[format('{0}/{1}', parameters('clusterName'), 'Hub')]",
                      "location": "[parameters('location')]",
                      "kind": "ReadWrite",
                      "dependsOn": [
                        "[resourceId('Microsoft.Kusto/clusters', parameters('clusterName'))]",
                        "[resourceId('Microsoft.Kusto/clusters/databases/scripts', parameters('clusterName'), 'Ingestion', 'SetupScript')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Kusto/clusters",
                      "apiVersion": "2023-08-15",
                      "name": "[parameters('clusterName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Kusto/clusters'), parameters('tagsByResource')['Microsoft.Kusto/clusters'], createObject()))]",
                      "sku": {
                        "name": "[parameters('clusterSku')]",
                        "tier": "[if(startsWith(parameters('clusterSku'), 'Dev(No SLA)_'), 'Basic', 'Standard')]",
                        "capacity": "[if(startsWith(parameters('clusterSku'), 'Dev(No SLA)_'), 1, if(equals(parameters('clusterCapacity'), 1), 2, parameters('clusterCapacity')))]"
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "enableStreamingIngest": true,
                        "enableAutoStop": false,
                        "publicNetworkAccess": "[if(parameters('enablePublicAccess'), 'Enabled', 'Disabled')]"
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
                      "name": "[guid(parameters('clusterName'), subscription().id, 'Storage Blob Data Contributor')]",
                      "properties": {
                        "description": "Give \"Storage Blob Data Contributor\" to the cluster",
                        "principalId": "[reference(resourceId('Microsoft.Kusto/clusters', parameters('clusterName')), '2023-08-15', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal",
                        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Kusto/clusters', parameters('clusterName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2024-06-01",
                      "name": "[variables('dataExplorerPrivateDnsZoneName')]",
                      "location": "global",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Network/privateDnsZones'), parameters('tagsByResource')['Microsoft.Network/privateDnsZones'], createObject()))]",
                      "properties": {}
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', variables('dataExplorerPrivateDnsZoneName'), format('{0}-link', replace(variables('dataExplorerPrivateDnsZoneName'), '.', '-')))]",
                      "location": "global",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Network/privateDnsZones/virtualNetworkLinks'), parameters('tagsByResource')['Microsoft.Network/privateDnsZones/virtualNetworkLinks'], createObject()))]",
                      "properties": {
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkId')]"
                        },
                        "registrationEnabled": false
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('dataExplorerPrivateDnsZoneName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-11-01",
                      "name": "[format('{0}-ep', parameters('clusterName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Network/privateEndpoints'), parameters('tagsByResource')['Microsoft.Network/privateEndpoints'], createObject()))]",
                      "properties": {
                        "subnet": {
                          "id": "[parameters('privateEndpointSubnetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "dataExplorerLink",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.Kusto/clusters', parameters('clusterName'))]",
                              "groupIds": [
                                "cluster"
                              ]
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Kusto/clusters', parameters('clusterName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-11-01",
                      "name": "[format('{0}/{1}', format('{0}-ep', parameters('clusterName')), 'dataExplorer-endpoint-zone')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "privatelink-westus-kusto-net",
                            "properties": {
                              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('dataExplorerPrivateDnsZoneName'))]"
                            }
                          },
                          {
                            "name": "privatelink-blob-core-windows-net",
                            "properties": {
                              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.blob.{0}', environment().suffixes.storage))]"
                            }
                          },
                          {
                            "name": "privatelink-table-core-windows-net",
                            "properties": {
                              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.table.{0}', environment().suffixes.storage))]"
                            }
                          },
                          {
                            "name": "privatelink-queue-core-windows-net",
                            "properties": {
                              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.queue.{0}', environment().suffixes.storage))]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-ep', parameters('clusterName')))]",
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('dataExplorerPrivateDnsZoneName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "clusterId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the cluster."
                      },
                      "value": "[resourceId('Microsoft.Kusto/clusters', parameters('clusterName'))]"
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the cluster system assigned managed identity."
                      },
                      "value": "[reference(resourceId('Microsoft.Kusto/clusters', parameters('clusterName')), '2023-08-15', 'full').identity.principalId]"
                    },
                    "clusterName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the cluster."
                      },
                      "value": "[parameters('clusterName')]"
                    },
                    "clusterUri": {
                      "type": "string",
                      "metadata": {
                        "description": "The URI of the cluster."
                      },
                      "value": "[reference(resourceId('Microsoft.Kusto/clusters', parameters('clusterName')), '2023-08-15').uri]"
                    },
                    "ingestionDbName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the database for data ingestion."
                      },
                      "value": "Ingestion"
                    },
                    "hubDbName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the database for queries."
                      },
                      "value": "Hub"
                    },
                    "clusterIngestionCapacity": {
                      "type": "int",
                      "metadata": {
                        "description": "Max ingestion capacity of the cluster."
                      },
                      "value": "[coalesce(tryGet(variables('ingestionCapacity'), parameters('clusterSku')), 1)]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]",
                "[resourceId('Microsoft.Resources/deployments', 'storage')]",
                "[resourceId('Microsoft.Resources/deployments', 'vnet')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "dataFactoryResources",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "hubName": {
                    "value": "[parameters('hubName')]"
                  },
                  "dataFactoryName": {
                    "value": "[variables('dataFactoryName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[variables('resourceTags')]"
                  },
                  "tagsByResource": {
                    "value": "[parameters('tagsByResource')]"
                  },
                  "storageAccountName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.name.value]"
                  },
                  "exportContainerName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.exportContainer.value]"
                  },
                  "configContainerName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.configContainer.value]"
                  },
                  "ingestionContainerName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.ingestionContainer.value]"
                  },
                  "dataExplorerName": "[if(not(variables('deployDataExplorer')), createObject('value', ''), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'dataExplorer'), '2022-09-01').outputs.clusterName.value))]",
                  "dataExplorerPrincipalId": "[if(not(variables('deployDataExplorer')), createObject('value', ''), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'dataExplorer'), '2022-09-01').outputs.principalId.value))]",
                  "dataExplorerIngestionDatabase": "[if(not(variables('deployDataExplorer')), createObject('value', ''), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'dataExplorer'), '2022-09-01').outputs.ingestionDbName.value))]",
                  "dataExplorerIngestionCapacity": "[if(not(variables('deployDataExplorer')), createObject('value', 1), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'dataExplorer'), '2022-09-01').outputs.clusterIngestionCapacity.value))]",
                  "dataExplorerUri": "[if(not(variables('deployDataExplorer')), createObject('value', ''), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'dataExplorer'), '2022-09-01').outputs.clusterUri.value))]",
                  "dataExplorerId": "[if(not(variables('deployDataExplorer')), createObject('value', ''), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'dataExplorer'), '2022-09-01').outputs.clusterId.value))]",
                  "keyVaultName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'keyVault'), '2022-09-01').outputs.name.value]"
                  },
                  "remoteHubStorageUri": {
                    "value": "[parameters('remoteHubStorageUri')]"
                  },
                  "enablePublicAccess": {
                    "value": "[parameters('enablePublicAccess')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.31.92.45157",
                      "templateHash": "7635406766524343982"
                    }
                  },
                  "functions": [
                    {
                      "namespace": "__bicep",
                      "members": {
                        "getExportBody": {
                          "parameters": [
                            {
                              "type": "string",
                              "name": "exportContainerName"
                            },
                            {
                              "type": "string",
                              "name": "datasetType"
                            },
                            {
                              "type": "string",
                              "name": "schemaVersion"
                            },
                            {
                              "type": "bool",
                              "name": "isMonthly"
                            },
                            {
                              "type": "string",
                              "name": "exportFormat"
                            },
                            {
                              "type": "string",
                              "name": "compressionMode"
                            },
                            {
                              "type": "string",
                              "name": "partitionData"
                            },
                            {
                              "type": "string",
                              "name": "dataOverwriteBehavior"
                            }
                          ],
                          "output": {
                            "type": "string",
                            "value": "[format('{{ \"properties\": {{ \"definition\": {{ \"dataSet\": {{ \"configuration\": {{ \"dataVersion\": \"{0}\", \"filters\": [] }}, \"granularity\": \"Daily\" }}, \"timeframe\": \"{1}\", \"type\": \"{2}\" }}, \"deliveryInfo\": {{ \"destination\": {{ \"container\": \"{3}\", \"rootFolderPath\": \"@{{if(startswith(item().scope, ''/''), substring(item().scope, 1, sub(length(item().scope), 1)) ,item().scope)}}\", \"type\": \"AzureBlob\", \"resourceId\": \"@{{variables(''storageAccountId'')}}\" }} }}, \"schedule\": {{ \"recurrence\": \"{4}\", \"recurrencePeriod\": {{ \"from\": \"2024-01-01T00:00:00.000Z\", \"to\": \"2050-02-01T00:00:00.000Z\" }}, \"status\": \"Inactive\" }}, \"format\": \"{5}\", \"partitionData\": \"{6}\", \"dataOverwriteBehavior\": \"{7}\", \"compressionMode\": \"{8}\" }}, \"id\": \"@{{variables(''resourceManagementUri'')}}@{{item().scope}}/providers/Microsoft.CostManagement/exports/@{{variables(''exportName'')}}\", \"name\": \"@{{variables(''exportName'')}}\", \"type\": \"Microsoft.CostManagement/reports\", \"identity\": {{ \"type\": \"systemAssigned\" }}, \"location\": \"global\" }}', parameters('schemaVersion'), if(parameters('isMonthly'), 'TheLastMonth', 'MonthToDate'), parameters('datasetType'), parameters('exportContainerName'), if(parameters('isMonthly'), 'Monthly', 'Daily'), parameters('exportFormat'), parameters('partitionData'), parameters('dataOverwriteBehavior'), parameters('compressionMode'))]"
                          }
                        }
                      }
                    }
                  ],
                  "parameters": {
                    "hubName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the FinOps hub instance."
                      }
                    },
                    "dataFactoryName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Data Factory instance."
                      }
                    },
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Azure Key Vault instance."
                      }
                    },
                    "storageAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Azure storage account instance."
                      }
                    },
                    "exportContainerName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the container where Cost Management data is exported."
                      }
                    },
                    "ingestionContainerName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the container where normalized data is ingested."
                      }
                    },
                    "configContainerName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the container where normalized data is ingested."
                      }
                    },
                    "dataExplorerName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the Azure Data Explorer cluster to use for advanced analytics, if applicable."
                      }
                    },
                    "dataExplorerId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the Azure Data Explorer cluster to use for advanced analytics, if applicable."
                      }
                    },
                    "dataExplorerPrincipalId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. ID of the Azure Data Explorer cluster system assigned managed identity, if applicable."
                      }
                    },
                    "dataExplorerUri": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. URI of the Azure Data Explorer cluster to use for advanced analytics, if applicable."
                      }
                    },
                    "dataExplorerIngestionDatabase": {
                      "type": "string",
                      "defaultValue": "Ingestion",
                      "metadata": {
                        "description": "Optional. Name of the Azure Data Explorer ingestion database. Default: \"ingestion\"."
                      }
                    },
                    "dataExplorerIngestionCapacity": {
                      "type": "int",
                      "defaultValue": 1,
                      "metadata": {
                        "description": "Optional. Azure Data Explorer ingestion capacity.  Increase for non-dev SKUs. Default: 1"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location to use for the managed identity and deployment script to auto-start triggers. Default = (resource group location)."
                      }
                    },
                    "remoteHubStorageUri": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. Remote storage account for ingestion dataset."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to apply to all resources."
                      }
                    },
                    "tagsByResource": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to apply to resources based on their resource type. Resource type specific tags will be merged with tags for all resources."
                      }
                    },
                    "enablePublicAccess": {
                      "type": "bool",
                      "metadata": {
                        "description": "Optional. Enable public access."
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "# Copyright (c) Microsoft Corporation.\r\n# Licensed under the MIT License.\r\n\r\n# Init outputs\r\n$DeploymentScriptOutputs = @{}\r\n\r\n# \r\n$adfParams = @{\r\n    ResourceGroupName = $env:DataFactoryResourceGroup\r\n    DataFactoryName   = $env:DataFactoryName\r\n}\r\n\r\n# Delete old triggers\r\n$triggers = Get-AzDataFactoryV2Trigger @adfParams -ErrorAction SilentlyContinue `\r\n| Where-Object { $_.Name -match '^msexports(_(setup|daily|monthly|extract|FileAdded))?$' }\r\n$DeploymentScriptOutputs[\"stopTriggers\"] = $triggers | Stop-AzDataFactoryV2Trigger -Force -ErrorAction SilentlyContinue\r\n$DeploymentScriptOutputs[\"deleteTriggers\"] = $triggers | Remove-AzDataFactoryV2Trigger -Force -ErrorAction SilentlyContinue\r\n\r\n# Delete old pipelines\r\n$DeploymentScriptOutputs[\"pipelines\"] = Get-AzDataFactoryV2Pipeline @adfParams -ErrorAction SilentlyContinue `\r\n| Where-Object { $_.Name -match '^(msexports_(backfill|extract|fill|get|run|setup|transform)|config_(BackfillData|ExportData|RunBackfill|RunExports))$' } `\r\n| Remove-AzDataFactoryV2Pipeline -Force -ErrorAction SilentlyContinue\r\n",
                    "$fxv#1": "# Copyright (c) Microsoft Corporation.\r\n# Licensed under the MIT License.\r\n\r\nParam(\r\n    [switch] $Stop\r\n)\r\n\r\n# Init outputs\r\n$DeploymentScriptOutputs = @{}\r\n\r\nif (-not $Stop)\r\n{\r\n    Start-Sleep -Seconds 10\r\n}\r\n\r\n# Loop thru triggers\r\n$env:Triggers.Split('|') `\r\n| ForEach-Object {\r\n    $trigger = $_\r\n    if ($Stop)\r\n    {\r\n        Write-Output \"Stopping trigger $trigger...\"\r\n        $triggerOutput = Stop-AzDataFactoryV2Trigger `\r\n            -ResourceGroupName $env:DataFactoryResourceGroup `\r\n            -DataFactoryName $env:DataFactoryName `\r\n            -Name $trigger `\r\n            -Force `\r\n            -ErrorAction SilentlyContinue # Ignore errors, since the trigger may not exist\r\n    }\r\n    else\r\n    {\r\n        Write-Output \"Starting trigger $trigger...\"\r\n        $triggerOutput = Start-AzDataFactoryV2Trigger `\r\n            -ResourceGroupName $env:DataFactoryResourceGroup `\r\n            -DataFactoryName $env:DataFactoryName `\r\n            -Name $trigger `\r\n            -Force\r\n    }\r\n    if ($triggerOutput)\r\n    {\r\n        Write-Output \"done...\"\r\n    }\r\n    else\r\n    {\r\n        Write-Output \"failed...\"\r\n    }\r\n    $DeploymentScriptOutputs[$trigger] = $triggerOutput\r\n}\r\n\r\nif ($Stop)\r\n{\r\n    Start-Sleep -Seconds 10\r\n}\r\n\r\nif (-not [string]::IsNullOrWhiteSpace($env:Pipelines))\r\n{\r\n    $env:Pipelines.Split('|') `\r\n    | ForEach-Object {\r\n        Write-Output \"Running the init pipeline...\"\r\n        Invoke-AzDataFactoryV2Pipeline `\r\n            -ResourceGroupName $env:DataFactoryResourceGroup `\r\n            -DataFactoryName $env:DataFactoryName `\r\n            -PipelineName $_\r\n    }\r\n}\r\n",
                    "$fxv#2": "# Copyright (c) Microsoft Corporation.\r\n# Licensed under the MIT License.\r\n\r\nParam(\r\n    [switch] $Stop\r\n)\r\n\r\n# Init outputs\r\n$DeploymentScriptOutputs = @{}\r\n\r\nif (-not $Stop)\r\n{\r\n    Start-Sleep -Seconds 10\r\n}\r\n\r\n# Loop thru triggers\r\n$env:Triggers.Split('|') `\r\n| ForEach-Object {\r\n    $trigger = $_\r\n    if ($Stop)\r\n    {\r\n        Write-Output \"Stopping trigger $trigger...\"\r\n        $triggerOutput = Stop-AzDataFactoryV2Trigger `\r\n            -ResourceGroupName $env:DataFactoryResourceGroup `\r\n            -DataFactoryName $env:DataFactoryName `\r\n            -Name $trigger `\r\n            -Force `\r\n            -ErrorAction SilentlyContinue # Ignore errors, since the trigger may not exist\r\n    }\r\n    else\r\n    {\r\n        Write-Output \"Starting trigger $trigger...\"\r\n        $triggerOutput = Start-AzDataFactoryV2Trigger `\r\n            -ResourceGroupName $env:DataFactoryResourceGroup `\r\n            -DataFactoryName $env:DataFactoryName `\r\n            -Name $trigger `\r\n            -Force\r\n    }\r\n    if ($triggerOutput)\r\n    {\r\n        Write-Output \"done...\"\r\n    }\r\n    else\r\n    {\r\n        Write-Output \"failed...\"\r\n    }\r\n    $DeploymentScriptOutputs[$trigger] = $triggerOutput\r\n}\r\n\r\nif ($Stop)\r\n{\r\n    Start-Sleep -Seconds 10\r\n}\r\n\r\nif (-not [string]::IsNullOrWhiteSpace($env:Pipelines))\r\n{\r\n    $env:Pipelines.Split('|') `\r\n    | ForEach-Object {\r\n        Write-Output \"Running the init pipeline...\"\r\n        Invoke-AzDataFactoryV2Pipeline `\r\n            -ResourceGroupName $env:DataFactoryResourceGroup `\r\n            -DataFactoryName $env:DataFactoryName `\r\n            -PipelineName $_\r\n    }\r\n}\r\n",
                    "focusSchemaVersion": "1.0",
                    "ftkVersion": "0.7\r\n",
                    "exportApiVersion": "2023-07-01-preview",
                    "hubDataExplorerName": "hubDataExplorer",
                    "deployDataExplorer": "[not(empty(parameters('dataExplorerId')))]",
                    "datasetPropsDefault": {
                      "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                          "value": "@{dataset().fileName}",
                          "type": "Expression"
                        },
                        "folderPath": {
                          "value": "@{dataset().folderPath}",
                          "type": "Expression"
                        }
                      }
                    },
                    "safeExportContainerName": "[replace(format('{0}', parameters('exportContainerName')), '-', '_')]",
                    "safeIngestionContainerName": "[replace(format('{0}', parameters('ingestionContainerName')), '-', '_')]",
                    "safeConfigContainerName": "[replace(format('{0}', parameters('configContainerName')), '-', '_')]",
                    "managedVnetName": "default",
                    "ingestionIdFileNameSeparator": "__",
                    "exportManifestAddedTriggerName": "[format('{0}_ManifestAdded', variables('safeExportContainerName'))]",
                    "ingestionManifestAddedTriggerName": "[format('{0}_ManifestAdded', variables('safeIngestionContainerName'))]",
                    "updateConfigTriggerName": "[format('{0}_SettingsUpdated', variables('safeConfigContainerName'))]",
                    "dailyTriggerName": "[format('{0}_DailySchedule', variables('safeConfigContainerName'))]",
                    "monthlyTriggerName": "[format('{0}_MonthlySchedule', variables('safeConfigContainerName'))]",
                    "allHubTriggers": [
                      "[variables('exportManifestAddedTriggerName')]",
                      "[variables('ingestionManifestAddedTriggerName')]",
                      "[variables('updateConfigTriggerName')]",
                      "[variables('dailyTriggerName')]",
                      "[variables('monthlyTriggerName')]"
                    ],
                    "autoStartRbacRoles": [
                      "673868aa-7521-48a0-acc6-0f60742d39f5",
                      "e40ec5ca-96e0-45a2-b4ff-59039f2c2b59"
                    ],
                    "storageRbacRoles": [
                      "17d1049b-9a84-46fb-8f53-869881c3d3ab",
                      "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
                      "acdd72a7-3385-48ef-bd42-f606fba81ae7",
                      "18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"
                    ]
                  },
                  "resources": {
                    "dataFactory": {
                      "existing": true,
                      "type": "Microsoft.DataFactory/factories",
                      "apiVersion": "2018-06-01",
                      "name": "[parameters('dataFactoryName')]"
                    },
                    "storageAccount": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-09-01",
                      "name": "[parameters('storageAccountName')]"
                    },
                    "keyVault": {
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2023-02-01",
                      "name": "[parameters('keyVaultName')]"
                    },
                    "managedVirtualNetwork": {
                      "condition": "[not(parameters('enablePublicAccess'))]",
                      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('managedVnetName'))]",
                      "properties": {},
                      "dependsOn": [
                        "dataFactory"
                      ]
                    },
                    "managedIntegrationRuntime": {
                      "condition": "[not(parameters('enablePublicAccess'))]",
                      "type": "Microsoft.DataFactory/factories/integrationRuntimes",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), 'ManagedIntegrationRuntime')]",
                      "properties": {
                        "type": "Managed",
                        "managedVirtualNetwork": {
                          "referenceName": "[variables('managedVnetName')]",
                          "type": "ManagedVirtualNetworkReference"
                        },
                        "typeProperties": {
                          "computeProperties": {
                            "location": "[parameters('location')]",
                            "dataFlowProperties": {
                              "computeType": "General",
                              "coreCount": 8,
                              "timeToLive": 10,
                              "cleanup": false,
                              "customProperties": []
                            },
                            "copyComputeScaleProperties": {
                              "dataIntegrationUnit": 16,
                              "timeToLive": 30
                            },
                            "pipelineExternalComputeScaleProperties": {
                              "timeToLive": 30,
                              "numberOfPipelineNodes": 1,
                              "numberOfExternalNodes": 1
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "managedVirtualNetwork"
                      ]
                    },
                    "storageManagedPrivateEndpoint": {
                      "condition": "[not(parameters('enablePublicAccess'))]",
                      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}/{2}', parameters('dataFactoryName'), variables('managedVnetName'), parameters('storageAccountName'))]",
                      "properties": {
                        "name": "[parameters('storageAccountName')]",
                        "groupId": "dfs",
                        "privateLinkResourceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                        "fqdns": [
                          "[reference('storageAccount').primaryEndpoints.dfs]"
                        ]
                      },
                      "dependsOn": [
                        "managedVirtualNetwork",
                        "storageAccount"
                      ]
                    },
                    "keyVaultManagedPrivateEndpoint": {
                      "condition": "[not(parameters('enablePublicAccess'))]",
                      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}/{2}', parameters('dataFactoryName'), variables('managedVnetName'), parameters('keyVaultName'))]",
                      "properties": {
                        "name": "[parameters('keyVaultName')]",
                        "groupId": "vault",
                        "privateLinkResourceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                        "fqdns": [
                          "[reference('keyVault').vaultUri]"
                        ]
                      },
                      "dependsOn": [
                        "keyVault",
                        "managedVirtualNetwork"
                      ]
                    },
                    "dataExplorerManagedPrivateEndpoint": {
                      "condition": "[and(variables('deployDataExplorer'), not(parameters('enablePublicAccess')))]",
                      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}/{2}', parameters('dataFactoryName'), variables('managedVnetName'), variables('hubDataExplorerName'))]",
                      "properties": {
                        "name": "[variables('hubDataExplorerName')]",
                        "groupId": "cluster",
                        "privateLinkResourceId": "[parameters('dataExplorerId')]",
                        "fqdns": [
                          "[parameters('dataExplorerUri')]"
                        ]
                      },
                      "dependsOn": [
                        "managedVirtualNetwork"
                      ]
                    },
                    "triggerManagerIdentity": {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2023-01-31",
                      "name": "[format('{0}_triggerManager', parameters('dataFactoryName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), parameters('tagsByResource')['Microsoft.ManagedIdentity/userAssignedIdentities'], createObject()))]",
                      "dependsOn": [
                        "dataFactory"
                      ]
                    },
                    "triggerManagerRoleAssignments": {
                      "copy": {
                        "name": "triggerManagerRoleAssignments",
                        "count": "[length(variables('autoStartRbacRoles'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.DataFactory/factories/{0}', parameters('dataFactoryName'))]",
                      "name": "[guid(resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName')), variables('autoStartRbacRoles')[copyIndex()], resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_triggerManager', parameters('dataFactoryName'))))]",
                      "properties": {
                        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('autoStartRbacRoles')[copyIndex()])]",
                        "principalId": "[reference('triggerManagerIdentity').principalId]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "dataFactory",
                        "triggerManagerIdentity"
                      ]
                    },
                    "factoryIdentityStorageRoleAssignments": {
                      "copy": {
                        "name": "factoryIdentityStorageRoleAssignments",
                        "count": "[length(variables('storageRbacRoles'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
                      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageRbacRoles')[copyIndex()], resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName')))]",
                      "properties": {
                        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageRbacRoles')[copyIndex()])]",
                        "principalId": "[reference('dataFactory', '2018-06-01', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "dataFactory",
                        "storageAccount"
                      ]
                    },
                    "deleteOldResources": {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}_deleteOldResources', parameters('dataFactoryName'))]",
                      "location": "[if(startsWith(parameters('location'), 'china'), 'chinaeast2', parameters('location'))]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_triggerManager', parameters('dataFactoryName'))))]": {}
                        }
                      },
                      "kind": "AzurePowerShell",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Resources/deploymentScripts'), parameters('tagsByResource')['Microsoft.Resources/deploymentScripts'], createObject()))]",
                      "properties": {
                        "azPowerShellVersion": "8.0",
                        "retentionInterval": "PT1H",
                        "cleanupPreference": "OnSuccess",
                        "scriptContent": "[variables('$fxv#0')]",
                        "environmentVariables": [
                          {
                            "name": "DataFactorySubscriptionId",
                            "value": "[subscription().id]"
                          },
                          {
                            "name": "DataFactoryResourceGroup",
                            "value": "[resourceGroup().name]"
                          },
                          {
                            "name": "DataFactoryName",
                            "value": "[parameters('dataFactoryName')]"
                          }
                        ]
                      },
                      "dependsOn": [
                        "dataFactory",
                        "triggerManagerIdentity",
                        "triggerManagerRoleAssignments"
                      ]
                    },
                    "stopTriggers": {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}_stopTriggers', parameters('dataFactoryName'))]",
                      "location": "[parameters('location')]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_triggerManager', parameters('dataFactoryName'))))]": {}
                        }
                      },
                      "kind": "AzurePowerShell",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "azPowerShellVersion": "8.0",
                        "retentionInterval": "PT1H",
                        "cleanupPreference": "OnSuccess",
                        "scriptContent": "[variables('$fxv#1')]",
                        "arguments": "-Stop",
                        "environmentVariables": [
                          {
                            "name": "DataFactorySubscriptionId",
                            "value": "[subscription().id]"
                          },
                          {
                            "name": "DataFactoryResourceGroup",
                            "value": "[resourceGroup().name]"
                          },
                          {
                            "name": "DataFactoryName",
                            "value": "[parameters('dataFactoryName')]"
                          },
                          {
                            "name": "Triggers",
                            "value": "[join(variables('allHubTriggers'), '|')]"
                          }
                        ]
                      },
                      "dependsOn": [
                        "dataFactory",
                        "triggerManagerIdentity",
                        "triggerManagerRoleAssignments"
                      ]
                    },
                    "linkedService_keyVault": {
                      "type": "Microsoft.DataFactory/factories/linkedservices",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), parameters('keyVaultName'))]",
                      "properties": {
                        "annotations": [],
                        "parameters": {},
                        "type": "AzureKeyVault",
                        "typeProperties": {
                          "baseUrl": "[reference(format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName')), '2023-02-01').vaultUri]"
                        },
                        "connectVia": "[if(parameters('enablePublicAccess'), null(), createObject('referenceName', 'ManagedIntegrationRuntime', 'type', 'IntegrationRuntimeReference'))]"
                      },
                      "dependsOn": [
                        "dataFactory",
                        "keyVault",
                        "managedIntegrationRuntime"
                      ]
                    },
                    "linkedService_storageAccount": {
                      "type": "Microsoft.DataFactory/factories/linkedservices",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), parameters('storageAccountName'))]",
                      "properties": {
                        "annotations": [],
                        "parameters": {},
                        "type": "AzureBlobFS",
                        "typeProperties": {
                          "url": "[reference(format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName')), '2021-08-01').primaryEndpoints.dfs]"
                        },
                        "connectVia": "[if(parameters('enablePublicAccess'), null(), createObject('referenceName', 'ManagedIntegrationRuntime', 'type', 'IntegrationRuntimeReference'))]"
                      },
                      "dependsOn": [
                        "dataFactory",
                        "managedIntegrationRuntime",
                        "storageAccount"
                      ]
                    },
                    "linkedService_dataExplorer": {
                      "condition": "[variables('deployDataExplorer')]",
                      "type": "Microsoft.DataFactory/factories/linkedservices",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('hubDataExplorerName'))]",
                      "properties": {
                        "type": "AzureDataExplorer",
                        "parameters": {
                          "database": {
                            "type": "String",
                            "defaultValue": "[parameters('dataExplorerIngestionDatabase')]"
                          }
                        },
                        "typeProperties": {
                          "endpoint": "[parameters('dataExplorerUri')]",
                          "database": "@{linkedService().database}",
                          "tenant": "[reference('dataFactory', '2018-06-01', 'full').identity.tenantId]",
                          "servicePrincipalId": "[reference('dataFactory', '2018-06-01', 'full').identity.principalId]"
                        },
                        "connectVia": "[if(parameters('enablePublicAccess'), null(), createObject('referenceName', 'ManagedIntegrationRuntime', 'type', 'IntegrationRuntimeReference'))]"
                      },
                      "dependsOn": [
                        "dataFactory",
                        "managedIntegrationRuntime"
                      ]
                    },
                    "linkedService_remoteHubStorage": {
                      "condition": "[not(empty(parameters('remoteHubStorageUri')))]",
                      "type": "Microsoft.DataFactory/factories/linkedservices",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), 'remoteHubStorage')]",
                      "properties": {
                        "annotations": [],
                        "parameters": {},
                        "type": "AzureBlobFS",
                        "typeProperties": {
                          "url": "[parameters('remoteHubStorageUri')]",
                          "accountKey": {
                            "type": "AzureKeyVaultSecret",
                            "store": {
                              "referenceName": "[parameters('keyVaultName')]",
                              "type": "LinkedServiceReference"
                            },
                            "secretName": "[format('{0}-storage-key', toLower(parameters('hubName')))]"
                          }
                        },
                        "connectVia": "[if(parameters('enablePublicAccess'), null(), createObject('referenceName', 'ManagedIntegrationRuntime', 'type', 'IntegrationRuntimeReference'))]"
                      },
                      "dependsOn": [
                        "dataFactory",
                        "linkedService_keyVault",
                        "managedIntegrationRuntime"
                      ]
                    },
                    "linkedService_ftkRepo": {
                      "type": "Microsoft.DataFactory/factories/linkedservices",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), 'ftkRepo')]",
                      "properties": {
                        "parameters": {
                          "filePath": {
                            "type": "string"
                          }
                        },
                        "annotations": [],
                        "type": "HttpServer",
                        "typeProperties": {
                          "url": "@concat('https://github.com/microsoft/finops-toolkit/', linkedService().filePath)",
                          "enableServerCertificateValidation": true,
                          "authenticationType": "Anonymous"
                        },
                        "connectVia": "[if(parameters('enablePublicAccess'), null(), createObject('referenceName', 'ManagedIntegrationRuntime', 'type', 'IntegrationRuntimeReference'))]"
                      },
                      "dependsOn": [
                        "dataFactory",
                        "managedIntegrationRuntime"
                      ]
                    },
                    "dataset_config": {
                      "type": "Microsoft.DataFactory/factories/datasets",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('safeConfigContainerName'))]",
                      "properties": {
                        "annotations": [],
                        "parameters": {
                          "fileName": {
                            "type": "String",
                            "defaultValue": "settings.json"
                          },
                          "folderPath": {
                            "type": "String",
                            "defaultValue": "[parameters('configContainerName')]"
                          }
                        },
                        "type": "Json",
                        "typeProperties": "[variables('datasetPropsDefault')]",
                        "linkedServiceName": {
                          "parameters": {},
                          "referenceName": "[parameters('storageAccountName')]",
                          "type": "LinkedServiceReference"
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "linkedService_storageAccount"
                      ]
                    },
                    "dataset_manifest": {
                      "type": "Microsoft.DataFactory/factories/datasets",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), 'manifest')]",
                      "properties": {
                        "annotations": [],
                        "parameters": {
                          "fileName": {
                            "type": "String",
                            "defaultValue": "manifest.json"
                          },
                          "folderPath": {
                            "type": "String",
                            "defaultValue": "[parameters('exportContainerName')]"
                          }
                        },
                        "type": "Json",
                        "typeProperties": "[variables('datasetPropsDefault')]",
                        "linkedServiceName": {
                          "parameters": {},
                          "referenceName": "[parameters('storageAccountName')]",
                          "type": "LinkedServiceReference"
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "linkedService_storageAccount"
                      ]
                    },
                    "dataset_msexports": {
                      "type": "Microsoft.DataFactory/factories/datasets",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('safeExportContainerName'))]",
                      "properties": {
                        "annotations": [],
                        "parameters": {
                          "blobPath": {
                            "type": "String"
                          }
                        },
                        "type": "DelimitedText",
                        "typeProperties": {
                          "location": {
                            "type": "AzureBlobFSLocation",
                            "fileName": {
                              "value": "@{dataset().blobPath}",
                              "type": "Expression"
                            },
                            "fileSystem": "[variables('safeExportContainerName')]"
                          },
                          "columnDelimiter": ",",
                          "escapeChar": "\"",
                          "quoteChar": "\"",
                          "firstRowAsHeader": true
                        },
                        "linkedServiceName": {
                          "parameters": {},
                          "referenceName": "[parameters('storageAccountName')]",
                          "type": "LinkedServiceReference"
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "linkedService_storageAccount"
                      ]
                    },
                    "dataset_msexports_gzip": {
                      "type": "Microsoft.DataFactory/factories/datasets",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), format('{0}_gzip', variables('safeExportContainerName')))]",
                      "properties": {
                        "annotations": [],
                        "parameters": {
                          "blobPath": {
                            "type": "String"
                          }
                        },
                        "type": "DelimitedText",
                        "typeProperties": {
                          "location": {
                            "type": "AzureBlobFSLocation",
                            "fileName": {
                              "value": "@{dataset().blobPath}",
                              "type": "Expression"
                            },
                            "fileSystem": "[variables('safeExportContainerName')]"
                          },
                          "columnDelimiter": ",",
                          "escapeChar": "\"",
                          "quoteChar": "\"",
                          "firstRowAsHeader": true,
                          "compressionCodec": "Gzip"
                        },
                        "linkedServiceName": {
                          "parameters": {},
                          "referenceName": "[parameters('storageAccountName')]",
                          "type": "LinkedServiceReference"
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "linkedService_storageAccount"
                      ]
                    },
                    "dataset_msexports_parquet": {
                      "type": "Microsoft.DataFactory/factories/datasets",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), format('{0}_parquet', variables('safeExportContainerName')))]",
                      "properties": {
                        "annotations": [],
                        "parameters": {
                          "blobPath": {
                            "type": "String"
                          }
                        },
                        "type": "Parquet",
                        "typeProperties": {
                          "location": {
                            "type": "AzureBlobFSLocation",
                            "fileName": {
                              "value": "@{dataset().blobPath}",
                              "type": "Expression"
                            },
                            "fileSystem": "[variables('safeExportContainerName')]"
                          }
                        },
                        "linkedServiceName": {
                          "parameters": {},
                          "referenceName": "[parameters('storageAccountName')]",
                          "type": "LinkedServiceReference"
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "linkedService_storageAccount"
                      ]
                    },
                    "dataset_ingestion": {
                      "type": "Microsoft.DataFactory/factories/datasets",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('safeIngestionContainerName'))]",
                      "properties": {
                        "annotations": [],
                        "parameters": {
                          "blobPath": {
                            "type": "String"
                          }
                        },
                        "type": "Parquet",
                        "typeProperties": {
                          "location": {
                            "type": "AzureBlobFSLocation",
                            "fileName": {
                              "value": "@{dataset().blobPath}",
                              "type": "Expression"
                            },
                            "fileSystem": "[variables('safeIngestionContainerName')]"
                          }
                        },
                        "linkedServiceName": {
                          "parameters": {},
                          "referenceName": "[if(empty(parameters('remoteHubStorageUri')), parameters('storageAccountName'), 'remoteHubStorage')]",
                          "type": "LinkedServiceReference"
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "linkedService_remoteHubStorage",
                        "linkedService_storageAccount"
                      ]
                    },
                    "dataset_ingestion_files": {
                      "type": "Microsoft.DataFactory/factories/datasets",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), format('{0}_files', variables('safeIngestionContainerName')))]",
                      "properties": {
                        "annotations": [],
                        "parameters": {
                          "folderPath": {
                            "type": "String"
                          }
                        },
                        "type": "Parquet",
                        "typeProperties": {
                          "location": {
                            "type": "AzureBlobFSLocation",
                            "fileSystem": "[variables('safeIngestionContainerName')]",
                            "folderPath": {
                              "value": "@dataset().folderPath",
                              "type": "Expression"
                            }
                          }
                        },
                        "linkedServiceName": {
                          "parameters": {},
                          "referenceName": "[if(empty(parameters('remoteHubStorageUri')), parameters('storageAccountName'), 'remoteHubStorage')]",
                          "type": "LinkedServiceReference"
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "linkedService_remoteHubStorage",
                        "linkedService_storageAccount"
                      ]
                    },
                    "dataset_dataExplorer": {
                      "condition": "[variables('deployDataExplorer')]",
                      "type": "Microsoft.DataFactory/factories/datasets",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('hubDataExplorerName'))]",
                      "properties": {
                        "type": "AzureDataExplorerTable",
                        "linkedServiceName": {
                          "parameters": {
                            "database": "@dataset().database"
                          },
                          "referenceName": "[variables('hubDataExplorerName')]",
                          "type": "LinkedServiceReference"
                        },
                        "parameters": {
                          "database": {
                            "type": "String",
                            "defaultValue": "[parameters('dataExplorerIngestionDatabase')]"
                          },
                          "table": {
                            "type": "String"
                          }
                        },
                        "typeProperties": {
                          "table": {
                            "value": "@dataset().table",
                            "type": "Expression"
                          }
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "linkedService_dataExplorer"
                      ]
                    },
                    "dataset_ftkReleaseFile": {
                      "type": "Microsoft.DataFactory/factories/datasets",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), 'ftkReleaseFile')]",
                      "properties": {
                        "linkedServiceName": {
                          "referenceName": "ftkRepo",
                          "type": "LinkedServiceReference"
                        },
                        "parameters": {
                          "fileName": {
                            "type": "string"
                          },
                          "version": {
                            "type": "string",
                            "defaultValue": "[variables('ftkVersion')]"
                          }
                        },
                        "annotations": [],
                        "type": "DelimitedText",
                        "typeProperties": {
                          "location": {
                            "type": "HttpServerLocation",
                            "relativeUrl": {
                              "value": "@concat('releases/download/v', dataset().version, '/', dataset().fileName)",
                              "type": "Expression"
                            }
                          },
                          "columnDelimiter": ",",
                          "escapeChar": "\\",
                          "firstRowAsHeader": true,
                          "quoteChar": "\""
                        },
                        "schema": []
                      },
                      "dependsOn": [
                        "dataFactory",
                        "linkedService_ftkRepo"
                      ]
                    },
                    "trigger_ExportManifestAdded": {
                      "type": "Microsoft.DataFactory/factories/triggers",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('exportManifestAddedTriggerName'))]",
                      "properties": {
                        "annotations": [],
                        "pipelines": [
                          {
                            "pipelineReference": {
                              "referenceName": "[format('{0}_ExecuteETL', variables('safeExportContainerName'))]",
                              "type": "PipelineReference"
                            },
                            "parameters": {
                              "folderPath": "@triggerBody().folderPath",
                              "fileName": "@triggerBody().fileName"
                            }
                          }
                        ],
                        "type": "BlobEventsTrigger",
                        "typeProperties": {
                          "blobPathBeginsWith": "[format('/{0}/blobs/', parameters('exportContainerName'))]",
                          "blobPathEndsWith": "manifest.json",
                          "ignoreEmptyBlobs": true,
                          "scope": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                          "events": [
                            "Microsoft.Storage.BlobCreated"
                          ]
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "pipeline_ExecuteExportsETL",
                        "stopTriggers",
                        "storageAccount"
                      ]
                    },
                    "trigger_IngestionManifestAdded": {
                      "condition": "[variables('deployDataExplorer')]",
                      "type": "Microsoft.DataFactory/factories/triggers",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('ingestionManifestAddedTriggerName'))]",
                      "properties": {
                        "annotations": [],
                        "pipelines": [
                          {
                            "pipelineReference": {
                              "referenceName": "[format('{0}_ExecuteETL', variables('safeIngestionContainerName'))]",
                              "type": "PipelineReference"
                            },
                            "parameters": {
                              "folderPath": "@triggerBody().folderPath"
                            }
                          }
                        ],
                        "type": "BlobEventsTrigger",
                        "typeProperties": {
                          "blobPathBeginsWith": "[format('/{0}/blobs/', parameters('ingestionContainerName'))]",
                          "blobPathEndsWith": "manifest.json",
                          "ignoreEmptyBlobs": true,
                          "scope": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                          "events": [
                            "Microsoft.Storage.BlobCreated"
                          ]
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "pipeline_ExecuteIngestionETL",
                        "stopTriggers",
                        "storageAccount"
                      ]
                    },
                    "trigger_SettingsUpdated": {
                      "type": "Microsoft.DataFactory/factories/triggers",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('updateConfigTriggerName'))]",
                      "properties": {
                        "annotations": [],
                        "pipelines": [
                          {
                            "pipelineReference": {
                              "referenceName": "[format('{0}_ConfigureExports', variables('safeConfigContainerName'))]",
                              "type": "PipelineReference"
                            }
                          }
                        ],
                        "type": "BlobEventsTrigger",
                        "typeProperties": {
                          "blobPathBeginsWith": "[format('/{0}/blobs/', parameters('configContainerName'))]",
                          "blobPathEndsWith": "settings.json",
                          "ignoreEmptyBlobs": true,
                          "scope": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                          "events": [
                            "Microsoft.Storage.BlobCreated"
                          ]
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "pipeline_ConfigureExports",
                        "stopTriggers",
                        "storageAccount"
                      ]
                    },
                    "trigger_DailySchedule": {
                      "type": "Microsoft.DataFactory/factories/triggers",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('dailyTriggerName'))]",
                      "properties": {
                        "pipelines": [
                          {
                            "pipelineReference": {
                              "referenceName": "[format('{0}_StartExportProcess', variables('safeConfigContainerName'))]",
                              "type": "PipelineReference"
                            },
                            "parameters": {
                              "Recurrence": "Daily"
                            }
                          }
                        ],
                        "type": "ScheduleTrigger",
                        "typeProperties": {
                          "recurrence": {
                            "frequency": "Hour",
                            "interval": 24,
                            "startTime": "2023-01-01T01:01:00",
                            "timeZone": "[reference('azuretimezones').outputs.Timezone.value]"
                          }
                        }
                      },
                      "dependsOn": [
                        "azuretimezones",
                        "dataFactory",
                        "pipeline_StartExportProcess",
                        "stopTriggers"
                      ]
                    },
                    "trigger_MonthlySchedule": {
                      "type": "Microsoft.DataFactory/factories/triggers",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('monthlyTriggerName'))]",
                      "properties": {
                        "pipelines": [
                          {
                            "pipelineReference": {
                              "referenceName": "[format('{0}_StartExportProcess', variables('safeConfigContainerName'))]",
                              "type": "PipelineReference"
                            },
                            "parameters": {
                              "Recurrence": "Monthly"
                            }
                          }
                        ],
                        "type": "ScheduleTrigger",
                        "typeProperties": {
                          "recurrence": {
                            "frequency": "Month",
                            "interval": 1,
                            "startTime": "2023-01-05T01:11:00",
                            "timeZone": "[reference('azuretimezones').outputs.Timezone.value]",
                            "schedule": {
                              "monthDays": [
                                5,
                                19
                              ]
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "azuretimezones",
                        "dataFactory",
                        "pipeline_StartExportProcess",
                        "stopTriggers"
                      ]
                    },
                    "pipeline_InitializeHub": {
                      "condition": "[variables('deployDataExplorer')]",
                      "type": "Microsoft.DataFactory/factories/pipelines",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), format('{0}_InitializeHub', variables('safeConfigContainerName')))]",
                      "properties": {
                        "activities": [
                          {
                            "name": "Get Config",
                            "type": "Lookup",
                            "dependsOn": [],
                            "policy": {
                              "timeout": "0.00:05:00",
                              "retry": 2,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                  "type": "AzureBlobFSReadSettings",
                                  "recursive": true,
                                  "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                  "type": "JsonReadSettings"
                                }
                              },
                              "dataset": {
                                "referenceName": "[variables('safeConfigContainerName')]",
                                "type": "DatasetReference"
                              }
                            }
                          },
                          {
                            "name": "Set Version",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Get Config",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "version",
                              "value": {
                                "value": "@activity('Get Config').output.firstRow.version",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Set Scopes",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Get Config",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "scopes",
                              "value": {
                                "value": "@string(activity('Get Config').output.firstRow.scopes)",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Set Retention",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Get Config",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "retention",
                              "value": {
                                "value": "@string(activity('Get Config').output.firstRow.retention)",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Until Capacity Is Available",
                            "type": "Until",
                            "dependsOn": [
                              {
                                "activity": "Set Version",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              },
                              {
                                "activity": "Set Scopes",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              },
                              {
                                "activity": "Set Retention",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "expression": {
                                "value": "@equals(variables('tryAgain'), false)",
                                "type": "Expression"
                              },
                              "activities": [
                                {
                                  "name": "Confirm Ingestion Capacity",
                                  "type": "AzureDataExplorerCommand",
                                  "dependsOn": [],
                                  "policy": {
                                    "timeout": "0.12:00:00",
                                    "retry": 0,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                  },
                                  "userProperties": [],
                                  "typeProperties": {
                                    "command": ".show capacity | where Resource == 'Ingestions' | project Remaining",
                                    "commandTimeout": "00:20:00"
                                  },
                                  "linkedServiceName": {
                                    "referenceName": "[variables('hubDataExplorerName')]",
                                    "type": "LinkedServiceReference",
                                    "parameters": {
                                      "database": "[parameters('dataExplorerIngestionDatabase')]"
                                    }
                                  }
                                },
                                {
                                  "name": "If Has Capacity",
                                  "type": "IfCondition",
                                  "dependsOn": [
                                    {
                                      "activity": "Confirm Ingestion Capacity",
                                      "dependencyConditions": [
                                        "Succeeded"
                                      ]
                                    }
                                  ],
                                  "userProperties": [],
                                  "typeProperties": {
                                    "expression": {
                                      "value": "@or(equals(activity('Confirm Ingestion Capacity').output.count, 0), greater(activity('Confirm Ingestion Capacity').output.value[0].Remaining, 0))",
                                      "type": "Expression"
                                    },
                                    "ifFalseActivities": [
                                      {
                                        "name": "Wait for Ingestion",
                                        "type": "Wait",
                                        "dependsOn": [],
                                        "userProperties": [],
                                        "typeProperties": {
                                          "waitTimeInSeconds": 15
                                        }
                                      },
                                      {
                                        "name": "Try Again",
                                        "type": "SetVariable",
                                        "dependsOn": [
                                          {
                                            "activity": "Wait for Ingestion",
                                            "dependencyConditions": [
                                              "Succeeded"
                                            ]
                                          }
                                        ],
                                        "policy": {
                                          "secureOutput": false,
                                          "secureInput": false
                                        },
                                        "userProperties": [],
                                        "typeProperties": {
                                          "variableName": "tryAgain",
                                          "value": true
                                        }
                                      }
                                    ],
                                    "ifTrueActivities": [
                                      {
                                        "name": "Set ingestion policy in ADX",
                                        "type": "AzureDataExplorerCommand",
                                        "dependsOn": [],
                                        "policy": {
                                          "timeout": "0.12:00:00",
                                          "retry": 0,
                                          "retryIntervalInSeconds": 30,
                                          "secureOutput": false,
                                          "secureInput": false
                                        },
                                        "userProperties": [],
                                        "typeProperties": {
                                          "command": {
                                            "value": "[format('.alter-merge database {0} policy managed_identity \"[ {{ ''ObjectId'' : ''{1}'', ''AllowedUsages'' : ''NativeIngestion'' }}]\"', parameters('dataExplorerIngestionDatabase'), parameters('dataExplorerPrincipalId'))]",
                                            "type": "Expression"
                                          },
                                          "commandTimeout": "00:20:00"
                                        },
                                        "linkedServiceName": {
                                          "referenceName": "[variables('hubDataExplorerName')]",
                                          "type": "LinkedServiceReference",
                                          "parameters": {
                                            "database": "[parameters('dataExplorerIngestionDatabase')]"
                                          }
                                        }
                                      },
                                      {
                                        "name": "Save Hub Settings in ADX",
                                        "type": "AzureDataExplorerCommand",
                                        "dependsOn": [
                                          {
                                            "activity": "Set ingestion policy in ADX",
                                            "dependencyConditions": [
                                              "Succeeded"
                                            ]
                                          }
                                        ],
                                        "policy": {
                                          "timeout": "0.12:00:00",
                                          "retry": 0,
                                          "retryIntervalInSeconds": 30,
                                          "secureOutput": false,
                                          "secureInput": false
                                        },
                                        "userProperties": [],
                                        "typeProperties": {
                                          "command": {
                                            "value": "@concat('.append HubSettingsLog <| print version=\"', variables('version'), '\",scopes=dynamic(', variables('scopes'), '),retention=dynamic(', variables('retention'), ') | extend scopes = iff(isnull(scopes[0]), pack_array(scopes), scopes) | mv-apply scopeObj = scopes on (where isnotempty(scopeObj.scope) | summarize scopes = make_set(scopeObj.scope))')",
                                            "type": "Expression"
                                          },
                                          "commandTimeout": "00:20:00"
                                        },
                                        "linkedServiceName": {
                                          "referenceName": "[variables('hubDataExplorerName')]",
                                          "type": "LinkedServiceReference",
                                          "parameters": {
                                            "database": "[parameters('dataExplorerIngestionDatabase')]"
                                          }
                                        }
                                      },
                                      {
                                        "name": "Update PricingUnits in ADX",
                                        "type": "AzureDataExplorerCommand",
                                        "dependsOn": [
                                          {
                                            "activity": "Save Hub Settings in ADX",
                                            "dependencyConditions": [
                                              "Succeeded"
                                            ]
                                          }
                                        ],
                                        "policy": {
                                          "timeout": "0.12:00:00",
                                          "retry": 0,
                                          "retryIntervalInSeconds": 30,
                                          "secureOutput": false,
                                          "secureInput": false
                                        },
                                        "userProperties": [],
                                        "typeProperties": {
                                          "command": "[format('.set-or-replace PricingUnits <| externaldata(x_PricingUnitDescription: string, AccountTypes: string, x_PricingBlockSize: decimal, PricingUnit: string)[@\"https://github.com/microsoft/finops-toolkit/releases/download/v{0}/PricingUnits.csv\"] with (format=\"csv\", ignoreFirstRecord=true) | project-away AccountTypes', variables('ftkVersion'))]",
                                          "commandTimeout": "00:20:00"
                                        },
                                        "linkedServiceName": {
                                          "referenceName": "[variables('hubDataExplorerName')]",
                                          "type": "LinkedServiceReference",
                                          "parameters": {
                                            "database": "[parameters('dataExplorerIngestionDatabase')]"
                                          }
                                        }
                                      },
                                      {
                                        "name": "Update Regions in ADX",
                                        "type": "AzureDataExplorerCommand",
                                        "dependsOn": [
                                          {
                                            "activity": "Update PricingUnits in ADX",
                                            "dependencyConditions": [
                                              "Succeeded"
                                            ]
                                          }
                                        ],
                                        "policy": {
                                          "timeout": "0.12:00:00",
                                          "retry": 0,
                                          "retryIntervalInSeconds": 30,
                                          "secureOutput": false,
                                          "secureInput": false
                                        },
                                        "userProperties": [],
                                        "typeProperties": {
                                          "command": "[format('.set-or-replace Regions <| externaldata(ResourceLocation: string, RegionId: string, RegionName: string)[@\"https://github.com/microsoft/finops-toolkit/releases/download/v{0}/Regions.csv\"] with (format=\"csv\", ignoreFirstRecord=true)', variables('ftkVersion'))]",
                                          "commandTimeout": "00:20:00"
                                        },
                                        "linkedServiceName": {
                                          "referenceName": "[variables('hubDataExplorerName')]",
                                          "type": "LinkedServiceReference",
                                          "parameters": {
                                            "database": "[parameters('dataExplorerIngestionDatabase')]"
                                          }
                                        }
                                      },
                                      {
                                        "name": "Update ResourceTypes in ADX",
                                        "type": "AzureDataExplorerCommand",
                                        "dependsOn": [
                                          {
                                            "activity": "Update Regions in ADX",
                                            "dependencyConditions": [
                                              "Succeeded"
                                            ]
                                          }
                                        ],
                                        "policy": {
                                          "timeout": "0.12:00:00",
                                          "retry": 0,
                                          "retryIntervalInSeconds": 30,
                                          "secureOutput": false,
                                          "secureInput": false
                                        },
                                        "userProperties": [],
                                        "typeProperties": {
                                          "command": "[format('.set-or-replace ResourceTypes <| externaldata(x_ResourceType: string, SingularDisplayName: string, PluralDisplayName: string, LowerSingularDisplayName: string, LowerPluralDisplayName: string, IsPreview: bool, Description: string, IconUri: string, Links: string)[@\"https://github.com/microsoft/finops-toolkit/releases/download/v{0}/ResourceTypes.csv\"] with (format=\"csv\", ignoreFirstRecord=true) | project-away Links', variables('ftkVersion'))]",
                                          "commandTimeout": "00:20:00"
                                        },
                                        "linkedServiceName": {
                                          "referenceName": "[variables('hubDataExplorerName')]",
                                          "type": "LinkedServiceReference",
                                          "parameters": {
                                            "database": "[parameters('dataExplorerIngestionDatabase')]"
                                          }
                                        }
                                      },
                                      {
                                        "name": "Update Services in ADX",
                                        "type": "AzureDataExplorerCommand",
                                        "dependsOn": [
                                          {
                                            "activity": "Update ResourceTypes in ADX",
                                            "dependencyConditions": [
                                              "Succeeded"
                                            ]
                                          }
                                        ],
                                        "policy": {
                                          "timeout": "0.12:00:00",
                                          "retry": 0,
                                          "retryIntervalInSeconds": 30,
                                          "secureOutput": false,
                                          "secureInput": false
                                        },
                                        "userProperties": [],
                                        "typeProperties": {
                                          "command": "[format('.set-or-replace Services <| externaldata(x_ConsumedService: string, x_ResourceType: string, ServiceName: string, ServiceCategory: string, ServiceSubcategory: string, PublisherName: string, x_PublisherCategory: string, x_Environment: string, x_ServiceModel: string)[@\"https://github.com/microsoft/finops-toolkit/releases/download/v{0}/Services.csv\"] with (format=\"csv\", ignoreFirstRecord=true)', variables('ftkVersion'))]",
                                          "commandTimeout": "00:20:00"
                                        },
                                        "linkedServiceName": {
                                          "referenceName": "[variables('hubDataExplorerName')]",
                                          "type": "LinkedServiceReference",
                                          "parameters": {
                                            "database": "[parameters('dataExplorerIngestionDatabase')]"
                                          }
                                        }
                                      },
                                      {
                                        "name": "Ingestion Complete",
                                        "type": "SetVariable",
                                        "dependsOn": [
                                          {
                                            "activity": "Update Services in ADX",
                                            "dependencyConditions": [
                                              "Succeeded"
                                            ]
                                          }
                                        ],
                                        "policy": {
                                          "secureOutput": false,
                                          "secureInput": false
                                        },
                                        "userProperties": [],
                                        "typeProperties": {
                                          "variableName": "tryAgain",
                                          "value": false
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "Abort On Error",
                                  "type": "SetVariable",
                                  "dependsOn": [
                                    {
                                      "activity": "If Has Capacity",
                                      "dependencyConditions": [
                                        "Failed"
                                      ]
                                    }
                                  ],
                                  "policy": {
                                    "secureOutput": false,
                                    "secureInput": false
                                  },
                                  "userProperties": [],
                                  "typeProperties": {
                                    "variableName": "tryAgain",
                                    "value": false
                                  }
                                }
                              ],
                              "timeout": "0.02:00:00"
                            }
                          },
                          {
                            "name": "Timeout Error",
                            "type": "Fail",
                            "dependsOn": [
                              {
                                "activity": "Until Capacity Is Available",
                                "dependencyConditions": [
                                  "Failed"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "message": "Data Explorer ingestion timed out after 2 hours while waiting for available capacity. Please re-run this pipeline to re-attempt ingestion. If you continue to see this error, please report an issue at https://aka.ms/ftk/ideas.",
                              "errorCode": "DataExplorerIngestionTimeout"
                            }
                          }
                        ],
                        "concurrency": 1,
                        "variables": {
                          "version": {
                            "type": "String"
                          },
                          "scopes": {
                            "type": "String"
                          },
                          "retention": {
                            "type": "String"
                          },
                          "tryAgain": {
                            "type": "Boolean",
                            "defaultValue": true
                          }
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "dataset_config",
                        "linkedService_dataExplorer"
                      ],
                      "metadata": {
                        "description": "Initializes the hub instance based on the configuration settings."
                      }
                    },
                    "pipeline_StartBackfillProcess": {
                      "type": "Microsoft.DataFactory/factories/pipelines",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), format('{0}_StartBackfillProcess', variables('safeConfigContainerName')))]",
                      "properties": {
                        "activities": [
                          {
                            "name": "Get Config",
                            "type": "Lookup",
                            "dependsOn": [],
                            "policy": {
                              "timeout": "0.00:05:00",
                              "retry": 2,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                  "type": "AzureBlobFSReadSettings",
                                  "recursive": true,
                                  "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                  "type": "JsonReadSettings"
                                }
                              },
                              "dataset": {
                                "referenceName": "[variables('safeConfigContainerName')]",
                                "type": "DatasetReference",
                                "parameters": {
                                  "fileName": {
                                    "value": "@variables('fileName')",
                                    "type": "Expression"
                                  },
                                  "folderPath": {
                                    "value": "@variables('folderPath')",
                                    "type": "Expression"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "name": "Set backfill end date",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Get Config",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "endDate",
                              "value": {
                                "value": "@addDays(startOfMonth(utcNow()), -1)",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Set backfill start date",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Get Config",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "startDate",
                              "value": {
                                "value": "@subtractFromTime(startOfMonth(utcNow()), activity('Get Config').output.firstRow.retention.ingestion.months, 'Month')",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Set export start date",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Set backfill start date",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "thisMonth",
                              "value": {
                                "value": "@startOfMonth(variables('endDate'))",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Set export end date",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Set export start date",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "nextMonth",
                              "value": {
                                "value": "@startOfMonth(subtractFromTime(variables('thisMonth'), 1, 'Month'))",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Every Month",
                            "type": "Until",
                            "dependsOn": [
                              {
                                "activity": "Set export end date",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              },
                              {
                                "activity": "Set backfill end date",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "expression": {
                                "value": "@less(variables('thisMonth'), variables('startDate'))",
                                "type": "Expression"
                              },
                              "activities": [
                                {
                                  "name": "Update export start date",
                                  "type": "SetVariable",
                                  "dependsOn": [
                                    {
                                      "activity": "Backfill data",
                                      "dependencyConditions": [
                                        "Completed"
                                      ]
                                    }
                                  ],
                                  "userProperties": [],
                                  "typeProperties": {
                                    "variableName": "thisMonth",
                                    "value": {
                                      "value": "@variables('nextMonth')",
                                      "type": "Expression"
                                    }
                                  }
                                },
                                {
                                  "name": "Update export end date",
                                  "type": "SetVariable",
                                  "dependsOn": [
                                    {
                                      "activity": "Update export start date",
                                      "dependencyConditions": [
                                        "Completed"
                                      ]
                                    }
                                  ],
                                  "userProperties": [],
                                  "typeProperties": {
                                    "variableName": "nextMonth",
                                    "value": {
                                      "value": "@subtractFromTime(variables('thisMonth'), 1, 'Month')",
                                      "type": "Expression"
                                    }
                                  }
                                },
                                {
                                  "name": "Backfill data",
                                  "type": "ExecutePipeline",
                                  "dependsOn": [],
                                  "userProperties": [],
                                  "typeProperties": {
                                    "pipeline": {
                                      "referenceName": "[format('{0}_RunBackfillJob', variables('safeConfigContainerName'))]",
                                      "type": "PipelineReference"
                                    },
                                    "waitOnCompletion": true,
                                    "parameters": {
                                      "StartDate": {
                                        "value": "@variables('thisMonth')",
                                        "type": "Expression"
                                      },
                                      "EndDate": {
                                        "value": "@addDays(addToTime(variables('thisMonth'), 1, 'Month'), -1)",
                                        "type": "Expression"
                                      }
                                    }
                                  }
                                }
                              ],
                              "timeout": "0.02:00:00"
                            }
                          }
                        ],
                        "concurrency": 1,
                        "variables": {
                          "exportName": {
                            "type": "String"
                          },
                          "storageAccountId": {
                            "type": "String",
                            "defaultValue": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                          },
                          "finOpsHub": {
                            "type": "String",
                            "defaultValue": "[parameters('hubName')]"
                          },
                          "resourceManagementUri": {
                            "type": "String",
                            "defaultValue": "[environment().resourceManager]"
                          },
                          "fileName": {
                            "type": "String",
                            "defaultValue": "settings.json"
                          },
                          "folderPath": {
                            "type": "String",
                            "defaultValue": "[parameters('configContainerName')]"
                          },
                          "endDate": {
                            "type": "String"
                          },
                          "startDate": {
                            "type": "String"
                          },
                          "thisMonth": {
                            "type": "String"
                          },
                          "nextMonth": {
                            "type": "String"
                          }
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "dataset_config",
                        "pipeline_RunBackfillJob",
                        "storageAccount"
                      ],
                      "metadata": {
                        "description": "Runs the backfill job for each month based on retention settings."
                      }
                    },
                    "pipeline_RunBackfillJob": {
                      "type": "Microsoft.DataFactory/factories/pipelines",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), format('{0}_RunBackfillJob', variables('safeConfigContainerName')))]",
                      "properties": {
                        "activities": [
                          {
                            "name": "Get Config",
                            "type": "Lookup",
                            "dependsOn": [],
                            "policy": {
                              "timeout": "0.00:05:00",
                              "retry": 2,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                  "type": "AzureBlobFSReadSettings",
                                  "recursive": true,
                                  "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                  "type": "JsonReadSettings"
                                }
                              },
                              "dataset": {
                                "referenceName": "[variables('safeConfigContainerName')]",
                                "type": "DatasetReference",
                                "parameters": {
                                  "fileName": {
                                    "value": "@variables('fileName')",
                                    "type": "Expression"
                                  },
                                  "folderPath": {
                                    "value": "@variables('folderPath')",
                                    "type": "Expression"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "name": "Set Scopes",
                            "description": "Save scopes to test if it is an array",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Get Config",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "scopesArray",
                              "value": {
                                "value": "@activity('Get Config').output.firstRow.scopes",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Set Scopes as Array",
                            "description": "Wraps a single scope object into an array to work around the PowerShell bug where single-item arrays are sometimes written as a single object instead of an array.",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Set Scopes",
                                "dependencyConditions": [
                                  "Failed"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "scopesArray",
                              "value": {
                                "value": "@createArray(activity('Get Config').output.firstRow.scopes)",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Filter Invalid Scopes",
                            "description": "Remove any invalid scopes to avoid errors.",
                            "type": "Filter",
                            "dependsOn": [
                              {
                                "activity": "Set Scopes",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              },
                              {
                                "activity": "Set Scopes as Array",
                                "dependencyConditions": [
                                  "Skipped",
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "items": {
                                "value": "@variables('scopesArray')",
                                "type": "Expression"
                              },
                              "condition": {
                                "value": "@and(not(empty(item().scope)), not(equals(item().scope, '/')))",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "ForEach Export Scope",
                            "type": "ForEach",
                            "dependsOn": [
                              {
                                "activity": "Filter Invalid Scopes",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "items": {
                                "value": "@activity('Filter Invalid Scopes').output.Value",
                                "type": "Expression"
                              },
                              "isSequential": true,
                              "activities": [
                                {
                                  "name": "Set backfill export name",
                                  "type": "SetVariable",
                                  "dependsOn": [],
                                  "userProperties": [],
                                  "typeProperties": {
                                    "variableName": "exportName",
                                    "value": {
                                      "value": "@toLower(concat(variables('finOpsHub'), '-monthly-costdetails'))",
                                      "type": "Expression"
                                    }
                                  }
                                },
                                {
                                  "name": "Trigger backfill export",
                                  "type": "WebActivity",
                                  "dependsOn": [
                                    {
                                      "activity": "Set backfill export name",
                                      "dependencyConditions": [
                                        "Completed"
                                      ]
                                    }
                                  ],
                                  "policy": {
                                    "timeout": "0.00:05:00",
                                    "retry": 1,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                  },
                                  "userProperties": [],
                                  "typeProperties": {
                                    "url": {
                                      "value": "[format('@{{variables(''resourceManagementUri'')}}@{{item().scope}}/providers/Microsoft.CostManagement/exports/@{{variables(''exportName'')}}/run?api-version={0}', variables('exportApiVersion'))]",
                                      "type": "Expression"
                                    },
                                    "method": "POST",
                                    "headers": {
                                      "x-ms-command-name": "[format('FinOpsToolkit.Hubs.config_RunBackfill@{0}', variables('ftkVersion'))]",
                                      "Content-Type": "application/json",
                                      "ClientType": "[format('FinOpsToolkit.Hubs@{0}', variables('ftkVersion'))]"
                                    },
                                    "body": "{\"timePeriod\" : { \"from\" : \"@{pipeline().parameters.StartDate}\", \"to\" : \"@{pipeline().parameters.EndDate}\" }}",
                                    "authentication": {
                                      "type": "MSI",
                                      "resource": {
                                        "value": "@variables('resourceManagementUri')",
                                        "type": "Expression"
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "concurrency": 1,
                        "parameters": {
                          "StartDate": {
                            "type": "string"
                          },
                          "EndDate": {
                            "type": "string"
                          }
                        },
                        "variables": {
                          "exportName": {
                            "type": "String"
                          },
                          "storageAccountId": {
                            "type": "String",
                            "defaultValue": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                          },
                          "finOpsHub": {
                            "type": "String",
                            "defaultValue": "[parameters('hubName')]"
                          },
                          "resourceManagementUri": {
                            "type": "String",
                            "defaultValue": "[environment().resourceManager]"
                          },
                          "fileName": {
                            "type": "String",
                            "defaultValue": "settings.json"
                          },
                          "folderPath": {
                            "type": "String",
                            "defaultValue": "[parameters('configContainerName')]"
                          },
                          "scopesArray": {
                            "type": "Array"
                          }
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "dataset_config",
                        "storageAccount"
                      ],
                      "metadata": {
                        "description": "Creates and triggers exports for all defined scopes for the specified date range."
                      }
                    },
                    "pipeline_StartExportProcess": {
                      "type": "Microsoft.DataFactory/factories/pipelines",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), format('{0}_StartExportProcess', variables('safeConfigContainerName')))]",
                      "properties": {
                        "activities": [
                          {
                            "name": "Get Config",
                            "type": "Lookup",
                            "dependsOn": [],
                            "policy": {
                              "timeout": "0.00:05:00",
                              "retry": 2,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                  "type": "AzureBlobFSReadSettings",
                                  "recursive": true,
                                  "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                  "type": "JsonReadSettings"
                                }
                              },
                              "dataset": {
                                "referenceName": "[variables('safeConfigContainerName')]",
                                "type": "DatasetReference",
                                "parameters": {
                                  "fileName": {
                                    "value": "@variables('fileName')",
                                    "type": "Expression"
                                  },
                                  "folderPath": {
                                    "value": "@variables('folderPath')",
                                    "type": "Expression"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "name": "Set Scopes",
                            "description": "Save scopes to test if it is an array",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Get Config",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "scopesArray",
                              "value": {
                                "value": "@activity('Get Config').output.firstRow.scopes",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Set Scopes as Array",
                            "description": "Wraps a single scope object into an array to work around the PowerShell bug where single-item arrays are sometimes written as a single object instead of an array.",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Set Scopes",
                                "dependencyConditions": [
                                  "Failed"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "scopesArray",
                              "value": {
                                "value": "@createArray(activity('Get Config').output.firstRow.scopes)",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Filter Invalid Scopes",
                            "description": "Remove any invalid scopes to avoid errors.",
                            "type": "Filter",
                            "dependsOn": [
                              {
                                "activity": "Set Scopes",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              },
                              {
                                "activity": "Set Scopes as Array",
                                "dependencyConditions": [
                                  "Succeeded",
                                  "Skipped"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "items": {
                                "value": "@variables('scopesArray')",
                                "type": "Expression"
                              },
                              "condition": {
                                "value": "@and(not(empty(item().scope)), not(equals(item().scope, '/')))",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "ForEach Export Scope",
                            "type": "ForEach",
                            "dependsOn": [
                              {
                                "activity": "Filter Invalid Scopes",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "items": {
                                "value": "@activity('Filter Invalid Scopes').output.Value",
                                "type": "Expression"
                              },
                              "isSequential": true,
                              "activities": [
                                {
                                  "name": "Get exports for scope",
                                  "type": "WebActivity",
                                  "dependsOn": [],
                                  "policy": {
                                    "timeout": "0.00:05:00",
                                    "retry": 2,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                  },
                                  "userProperties": [],
                                  "typeProperties": {
                                    "url": {
                                      "value": "[format('@{{variables(''resourceManagementUri'')}}@{{item().scope}}/providers/Microsoft.CostManagement/exports?api-version={0}', variables('exportApiVersion'))]",
                                      "type": "Expression"
                                    },
                                    "method": "GET",
                                    "authentication": {
                                      "type": "MSI",
                                      "resource": {
                                        "value": "@variables('resourceManagementUri')",
                                        "type": "Expression"
                                      }
                                    }
                                  }
                                },
                                {
                                  "name": "Run exports for scope",
                                  "type": "ExecutePipeline",
                                  "dependsOn": [
                                    {
                                      "activity": "Get exports for scope",
                                      "dependencyConditions": [
                                        "Succeeded"
                                      ]
                                    }
                                  ],
                                  "userProperties": [],
                                  "typeProperties": {
                                    "pipeline": {
                                      "referenceName": "[format('{0}_RunExportJobs', variables('safeConfigContainerName'))]",
                                      "type": "PipelineReference"
                                    },
                                    "waitOnCompletion": true,
                                    "parameters": {
                                      "ExportScopes": {
                                        "value": "@activity('Get exports for scope').output.value",
                                        "type": "Expression"
                                      },
                                      "Recurrence": {
                                        "value": "@pipeline().parameters.Recurrence",
                                        "type": "Expression"
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "concurrency": 1,
                        "parameters": {
                          "Recurrence": {
                            "type": "string",
                            "defaultValue": "Daily"
                          }
                        },
                        "variables": {
                          "fileName": {
                            "type": "String",
                            "defaultValue": "settings.json"
                          },
                          "folderPath": {
                            "type": "String",
                            "defaultValue": "[parameters('configContainerName')]"
                          },
                          "finOpsHub": {
                            "type": "String",
                            "defaultValue": "[parameters('hubName')]"
                          },
                          "resourceManagementUri": {
                            "type": "String",
                            "defaultValue": "[environment().resourceManager]"
                          },
                          "scopesArray": {
                            "type": "Array"
                          }
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "dataset_config",
                        "pipeline_RunExportJobs"
                      ],
                      "metadata": {
                        "description": "Gets a list of all Cost Management exports configured for this hub based on the scopes defined in settings.json, then runs each export using the config_RunExportJobs pipeline."
                      }
                    },
                    "pipeline_RunExportJobs": {
                      "type": "Microsoft.DataFactory/factories/pipelines",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), format('{0}_RunExportJobs', variables('safeConfigContainerName')))]",
                      "properties": {
                        "activities": [
                          {
                            "name": "ForEach export scope",
                            "type": "ForEach",
                            "dependsOn": [],
                            "userProperties": [],
                            "typeProperties": {
                              "items": {
                                "value": "@pipeline().parameters.exportScopes",
                                "type": "Expression"
                              },
                              "isSequential": true,
                              "activities": [
                                {
                                  "name": "If scheduled",
                                  "type": "IfCondition",
                                  "dependsOn": [],
                                  "userProperties": [],
                                  "typeProperties": {
                                    "expression": {
                                      "value": "@and(equals(toLower(item().properties.schedule.recurrence), toLower(pipeline().parameters.Recurrence)),startswith(toLower(item().name), toLower(variables('hubName'))))",
                                      "type": "Expression"
                                    },
                                    "ifTrueActivities": [
                                      {
                                        "name": "Trigger export",
                                        "type": "WebActivity",
                                        "dependsOn": [],
                                        "policy": {
                                          "timeout": "0.00:05:00",
                                          "retry": 0,
                                          "retryIntervalInSeconds": 30,
                                          "secureOutput": false,
                                          "secureInput": false
                                        },
                                        "userProperties": [],
                                        "typeProperties": {
                                          "url": {
                                            "value": "[format('@{{replace(toLower(concat(variables(''resourceManagementUri''),item().id)), ''com//'', ''com/'')}}/run?api-version={0}', variables('exportApiVersion'))]",
                                            "type": "Expression"
                                          },
                                          "method": "POST",
                                          "headers": {
                                            "x-ms-command-name": "[format('FinOpsToolkit.Hubs.config_RunExportJobs@{0}', variables('ftkVersion'))]",
                                            "ClientType": "[format('FinOpsToolkit.Hubs@{0}', variables('ftkVersion'))]"
                                          },
                                          "authentication": {
                                            "type": "MSI",
                                            "resource": {
                                              "value": "@variables('resourceManagementUri')",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "concurrency": 1,
                        "parameters": {
                          "ExportScopes": {
                            "type": "array"
                          },
                          "Recurrence": {
                            "type": "string",
                            "defaultValue": "Daily"
                          }
                        },
                        "variables": {
                          "resourceManagementUri": {
                            "type": "String",
                            "defaultValue": "[environment().resourceManager]"
                          },
                          "hubName": {
                            "type": "String",
                            "defaultValue": "[parameters('hubName')]"
                          }
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "dataset_config"
                      ],
                      "metadata": {
                        "description": "Runs the specified Cost Management exports."
                      }
                    },
                    "pipeline_ConfigureExports": {
                      "type": "Microsoft.DataFactory/factories/pipelines",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), format('{0}_ConfigureExports', variables('safeConfigContainerName')))]",
                      "properties": {
                        "activities": [
                          {
                            "name": "Get Config",
                            "type": "Lookup",
                            "dependsOn": [],
                            "policy": {
                              "timeout": "0.00:05:00",
                              "retry": 2,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                  "type": "AzureBlobFSReadSettings",
                                  "recursive": true,
                                  "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                  "type": "JsonReadSettings"
                                }
                              },
                              "dataset": {
                                "referenceName": "[variables('safeConfigContainerName')]",
                                "type": "DatasetReference",
                                "parameters": {
                                  "fileName": {
                                    "value": "@variables('fileName')",
                                    "type": "Expression"
                                  },
                                  "folderPath": {
                                    "value": "@variables('folderPath')",
                                    "type": "Expression"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "name": "Save Scopes",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Get Config",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "scopesArray",
                              "value": {
                                "value": "@activity('Get Config').output.firstRow.scopes",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Save Scopes as Array",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Save Scopes",
                                "dependencyConditions": [
                                  "Failed"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "scopesArray",
                              "value": {
                                "value": "@array(activity('Get Config').output.firstRow.scopes)",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Filter Invalid Scopes",
                            "type": "Filter",
                            "dependsOn": [
                              {
                                "activity": "Save Scopes",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              },
                              {
                                "activity": "Save Scopes as Array",
                                "dependencyConditions": [
                                  "Skipped",
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "items": {
                                "value": "@variables('scopesArray')",
                                "type": "Expression"
                              },
                              "condition": {
                                "value": "@and(not(empty(item().scope)), not(equals(item().scope, '/')))",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "ForEach Export Scope",
                            "type": "ForEach",
                            "dependsOn": [
                              {
                                "activity": "Filter Invalid Scopes",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "items": {
                                "value": "@activity('Filter Invalid Scopes').output.value",
                                "type": "Expression"
                              },
                              "isSequential": true,
                              "activities": [
                                {
                                  "name": "Create or update open month focus export",
                                  "type": "WebActivity",
                                  "dependsOn": [
                                    {
                                      "activity": "Set open month focus export name",
                                      "dependencyConditions": [
                                        "Succeeded"
                                      ]
                                    }
                                  ],
                                  "policy": {
                                    "timeout": "0.00:05:00",
                                    "retry": 2,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                  },
                                  "userProperties": [],
                                  "typeProperties": {
                                    "url": {
                                      "value": "[format('@{{variables(''resourceManagementUri'')}}@{{item().scope}}/providers/Microsoft.CostManagement/exports/@{{variables(''exportName'')}}?api-version={0}', variables('exportApiVersion'))]",
                                      "type": "Expression"
                                    },
                                    "method": "PUT",
                                    "body": {
                                      "value": "[__bicep.getExportBody(parameters('exportContainerName'), 'FocusCost', variables('focusSchemaVersion'), false(), 'Parquet', 'Snappy', 'true', 'CreateNewReport')]",
                                      "type": "Expression"
                                    },
                                    "authentication": {
                                      "type": "MSI",
                                      "resource": {
                                        "value": "@variables('ResourceManagementUri')",
                                        "type": "Expression"
                                      }
                                    }
                                  }
                                },
                                {
                                  "name": "Set open month focus export name",
                                  "type": "SetVariable",
                                  "dependsOn": [],
                                  "policy": {
                                    "secureOutput": false,
                                    "secureInput": false
                                  },
                                  "userProperties": [],
                                  "typeProperties": {
                                    "variableName": "exportName",
                                    "value": {
                                      "value": "@toLower(concat(variables('finOpsHub'), '-daily-costdetails'))",
                                      "type": "Expression"
                                    }
                                  }
                                },
                                {
                                  "name": "Create or update closed month focus export",
                                  "type": "WebActivity",
                                  "dependsOn": [
                                    {
                                      "activity": "Set closed month focus export name",
                                      "dependencyConditions": [
                                        "Succeeded"
                                      ]
                                    }
                                  ],
                                  "policy": {
                                    "timeout": "0.00:05:00",
                                    "retry": 2,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                  },
                                  "userProperties": [],
                                  "typeProperties": {
                                    "url": {
                                      "value": "[format('@{{variables(''ResourceManagementUri'')}}@{{item().scope}}/providers/Microsoft.CostManagement/exports/@{{variables(''exportName'')}}?api-version={0}', variables('exportApiVersion'))]",
                                      "type": "Expression"
                                    },
                                    "method": "PUT",
                                    "body": {
                                      "value": "[__bicep.getExportBody(parameters('exportContainerName'), 'FocusCost', variables('focusSchemaVersion'), true(), 'Parquet', 'Snappy', 'true', 'CreateNewReport')]",
                                      "type": "Expression"
                                    },
                                    "authentication": {
                                      "type": "MSI",
                                      "resource": {
                                        "value": "@variables('ResourceManagementUri')",
                                        "type": "Expression"
                                      }
                                    }
                                  }
                                },
                                {
                                  "name": "Set closed month focus export name",
                                  "type": "SetVariable",
                                  "dependsOn": [
                                    {
                                      "activity": "Create or update open month focus export",
                                      "dependencyConditions": [
                                        "Succeeded"
                                      ]
                                    }
                                  ],
                                  "policy": {
                                    "secureOutput": false,
                                    "secureInput": false
                                  },
                                  "userProperties": [],
                                  "typeProperties": {
                                    "variableName": "exportName",
                                    "value": {
                                      "value": "@toLower(concat(variables('finOpsHub'), '-monthly-costdetails'))",
                                      "type": "Expression"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "concurrency": 1,
                        "variables": {
                          "scopesArray": {
                            "type": "Array"
                          },
                          "exportName": {
                            "type": "String"
                          },
                          "exportScope": {
                            "type": "String"
                          },
                          "storageAccountId": {
                            "type": "String",
                            "defaultValue": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                          },
                          "finOpsHub": {
                            "type": "String",
                            "defaultValue": "[parameters('hubName')]"
                          },
                          "resourceManagementUri": {
                            "type": "String",
                            "defaultValue": "[environment().resourceManager]"
                          },
                          "fileName": {
                            "type": "String",
                            "defaultValue": "settings.json"
                          },
                          "folderPath": {
                            "type": "String",
                            "defaultValue": "[parameters('configContainerName')]"
                          }
                        }
                      },
                      "dependsOn": [
                        "dataFactory",
                        "dataset_config",
                        "storageAccount"
                      ],
                      "metadata": {
                        "description": "Creates Cost Management exports for all scopes."
                      }
                    },
                    "pipeline_ExecuteExportsETL": {
                      "type": "Microsoft.DataFactory/factories/pipelines",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), format('{0}_ExecuteETL', variables('safeExportContainerName')))]",
                      "properties": {
                        "activities": [
                          {
                            "name": "Wait",
                            "description": "Files may not be available immediately after being created.",
                            "type": "Wait",
                            "dependsOn": [],
                            "userProperties": [],
                            "typeProperties": {
                              "waitTimeInSeconds": 60
                            }
                          },
                          {
                            "name": "Read Manifest",
                            "description": "Load the export manifest to determine the scope, dataset, and date range.",
                            "type": "Lookup",
                            "dependsOn": [
                              {
                                "activity": "Wait",
                                "dependencyConditions": [
                                  "Completed"
                                ]
                              }
                            ],
                            "policy": {
                              "timeout": "0.12:00:00",
                              "retry": 0,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                  "type": "AzureBlobFSReadSettings",
                                  "recursive": true,
                                  "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                  "type": "JsonReadSettings"
                                }
                              },
                              "dataset": {
                                "referenceName": "manifest",
                                "type": "DatasetReference",
                                "parameters": {
                                  "fileName": {
                                    "value": "@pipeline().parameters.fileName",
                                    "type": "Expression"
                                  },
                                  "folderPath": {
                                    "value": "@pipeline().parameters.folderPath",
                                    "type": "Expression"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "name": "Set Has No Rows",
                            "description": "Check the row count ",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Read Manifest",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "hasNoRows",
                              "value": {
                                "value": "@or(equals(activity('Read Manifest').output.firstRow.blobCount, null), equals(activity('Read Manifest').output.firstRow.blobCount, 0))",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Set Export Dataset Type",
                            "description": "Save the dataset type from the export manifest.",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Read Manifest",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "exportDatasetType",
                              "value": {
                                "value": "@activity('Read Manifest').output.firstRow.exportConfig.type",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Set MCA Column",
                            "description": "Determines if the dataset schema has channel-specific columns and saves the column name that only exists in MCA to determine if it is an MCA dataset.",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Set Export Dataset Type",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "mcaColumnToCheck",
                              "value": {
                                "value": "@if(contains(createArray('pricesheet', 'reservationtransactions'), toLower(variables('exportDatasetType'))), 'BillingProfileId', if(equals(toLower(variables('exportDatasetType')), 'reservationrecommendations'), 'Net Savings', null))",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Set Export Dataset Version",
                            "description": "Save the dataset version from the export manifest.",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Read Manifest",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "exportDatasetVersion",
                              "value": {
                                "value": "@activity('Read Manifest').output.firstRow.exportConfig.dataVersion",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Detect Channel",
                            "description": "Determines what channel this export is from. Switch statement handles the different file types if the mcaColumnToCheck variable is set.",
                            "type": "Switch",
                            "dependsOn": [
                              {
                                "activity": "Set Has No Rows",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              },
                              {
                                "activity": "Set MCA Column",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              },
                              {
                                "activity": "Set Export Dataset Version",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "on": {
                                "value": "@if(or(empty(variables('mcaColumnToCheck')), variables('hasNoRows')), 'ignore', last(array(split(activity('Read Manifest').output.firstRow.blobs[0].blobName, '.'))))",
                                "type": "Expression"
                              },
                              "cases": [
                                {
                                  "value": "csv",
                                  "activities": [
                                    {
                                      "name": "Check for MCA Column in CSV",
                                      "description": "Checks the dataset to determine if the applicable MCA-specific column exists.",
                                      "type": "Lookup",
                                      "dependsOn": [],
                                      "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                      },
                                      "userProperties": [],
                                      "typeProperties": {
                                        "source": {
                                          "type": "DelimitedTextSource",
                                          "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": false,
                                            "enablePartitionDiscovery": false
                                          },
                                          "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                          }
                                        },
                                        "dataset": {
                                          "referenceName": "[variables('safeExportContainerName')]",
                                          "type": "DatasetReference",
                                          "parameters": {
                                            "blobPath": {
                                              "value": "@activity('Read Manifest').output.firstRow.blobs[0].blobName",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "Set Schema File with Channel in CSV",
                                      "type": "SetVariable",
                                      "dependsOn": [
                                        {
                                          "activity": "Check for MCA Column in CSV",
                                          "dependencyConditions": [
                                            "Succeeded"
                                          ]
                                        }
                                      ],
                                      "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                      },
                                      "userProperties": [],
                                      "typeProperties": {
                                        "variableName": "schemaFile",
                                        "value": {
                                          "value": "@toLower(concat(variables('exportDatasetType'), '_', variables('exportDatasetVersion'), if(and(contains(activity('Check for MCA Column in CSV').output, 'firstRow'), contains(activity('Check for MCA Column in CSV').output.firstRow, variables('mcaColumnToCheck'))), '_mca', '_ea'), '.json'))",
                                          "type": "Expression"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "value": "gz",
                                  "activities": [
                                    {
                                      "name": "Check for MCA Column in Gzip CSV",
                                      "description": "Checks the dataset to determine if the applicable MCA-specific column exists.",
                                      "type": "Lookup",
                                      "dependsOn": [],
                                      "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                      },
                                      "userProperties": [],
                                      "typeProperties": {
                                        "source": {
                                          "type": "DelimitedTextSource",
                                          "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": false,
                                            "enablePartitionDiscovery": false
                                          },
                                          "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                          }
                                        },
                                        "dataset": {
                                          "referenceName": "[format('{0}_gzip', variables('safeExportContainerName'))]",
                                          "type": "DatasetReference",
                                          "parameters": {
                                            "blobPath": {
                                              "value": "@activity('Read Manifest').output.firstRow.blobs[0].blobName",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "Set Schema File with Channel in Gzip CSV",
                                      "type": "SetVariable",
                                      "dependsOn": [
                                        {
                                          "activity": "Check for MCA Column in Gzip CSV",
                                          "dependencyConditions": [
                                            "Succeeded"
                                          ]
                                        }
                                      ],
                                      "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                      },
                                      "userProperties": [],
                                      "typeProperties": {
                                        "variableName": "schemaFile",
                                        "value": {
                                          "value": "@toLower(concat(variables('exportDatasetType'), '_', variables('exportDatasetVersion'), if(and(contains(activity('Check for MCA Column in Gzip CSV').output, 'firstRow'), contains(activity('Check for MCA Column in Gzip CSV').output.firstRow, variables('mcaColumnToCheck'))), '_mca', '_ea'), '.json'))",
                                          "type": "Expression"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "value": "parquet",
                                  "activities": [
                                    {
                                      "name": "Check for MCA Column in Parquet",
                                      "description": "Checks the dataset to determine if the applicable MCA-specific column exists.",
                                      "type": "Lookup",
                                      "dependsOn": [],
                                      "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                      },
                                      "userProperties": [],
                                      "typeProperties": {
                                        "source": {
                                          "type": "ParquetSource",
                                          "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": false,
                                            "enablePartitionDiscovery": false
                                          },
                                          "formatSettings": {
                                            "type": "ParquetReadSettings"
                                          }
                                        },
                                        "dataset": {
                                          "referenceName": "[format('{0}_parquet', variables('safeExportContainerName'))]",
                                          "type": "DatasetReference",
                                          "parameters": {
                                            "blobPath": {
                                              "value": "@activity('Read Manifest').output.firstRow.blobs[0].blobName",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "Set Schema File with Channel for Parquet",
                                      "type": "SetVariable",
                                      "dependsOn": [
                                        {
                                          "activity": "Check for MCA Column in Parquet",
                                          "dependencyConditions": [
                                            "Succeeded"
                                          ]
                                        }
                                      ],
                                      "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                      },
                                      "userProperties": [],
                                      "typeProperties": {
                                        "variableName": "schemaFile",
                                        "value": {
                                          "value": "@toLower(concat(variables('exportDatasetType'), '_', variables('exportDatasetVersion'), if(and(contains(activity('Check for MCA Column in Parquet').output, 'firstRow'), contains(activity('Check for MCA Column in Parquet').output.firstRow, variables('mcaColumnToCheck'))), '_mca', '_ea'), '.json'))",
                                          "type": "Expression"
                                        }
                                      }
                                    }
                                  ]
                                }
                              ],
                              "defaultActivities": [
                                {
                                  "name": "Set Schema File",
                                  "type": "SetVariable",
                                  "dependsOn": [],
                                  "policy": {
                                    "secureOutput": false,
                                    "secureInput": false
                                  },
                                  "userProperties": [],
                                  "typeProperties": {
                                    "variableName": "schemaFile",
                                    "value": {
                                      "value": "@toLower(concat(variables('exportDatasetType'), '_', variables('exportDatasetVersion'), '.json'))",
                                      "type": "Expression"
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "Set Scope",
                            "description": "Save the scope from the export manifest.",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Read Manifest",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "scope",
                              "value": {
                                "value": "@split(toLower(activity('Read Manifest').output.firstRow.exportConfig.resourceId), '/providers/microsoft.costmanagement/exports/')[0]",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Set Date",
                            "description": "Save the exported month from the export manifest.",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Read Manifest",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "date",
                              "value": {
                                "value": "@replace(substring(activity('Read Manifest').output.firstRow.runInfo.startDate, 0, 7), '-', '')",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Failed to Read Manifest",
                            "type": "Fail",
                            "dependsOn": [
                              {
                                "activity": "Set Date",
                                "dependencyConditions": [
                                  "Failed"
                                ]
                              },
                              {
                                "activity": "Set Export Dataset Type",
                                "dependencyConditions": [
                                  "Failed"
                                ]
                              },
                              {
                                "activity": "Set Scope",
                                "dependencyConditions": [
                                  "Failed"
                                ]
                              },
                              {
                                "activity": "Read Manifest",
                                "dependencyConditions": [
                                  "Failed"
                                ]
                              },
                              {
                                "activity": "Set Export Dataset Version",
                                "dependencyConditions": [
                                  "Failed"
                                ]
                              },
                              {
                                "activity": "Detect Channel",
                                "dependencyConditions": [
                                  "Failed"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "message": {
                                "value": "@concat('Failed to read the manifest file for this export run. Manifest path: ', pipeline().parameters.folderPath)",
                                "type": "Expression"
                              },
                              "errorCode": "ManifestReadFailed"
                            }
                          },
                          {
                            "name": "Check Schema",
                            "description": "Verify that the schema file exists in storage.",
                            "type": "GetMetadata",
                            "dependsOn": [
                              {
                                "activity": "Set Scope",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              },
                              {
                                "activity": "Set Date",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              },
                              {
                                "activity": "Detect Channel",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "timeout": "0.12:00:00",
                              "retry": 0,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "dataset": {
                                "referenceName": "[variables('safeConfigContainerName')]",
                                "type": "DatasetReference",
                                "parameters": {
                                  "fileName": {
                                    "value": "@variables('schemaFile')",
                                    "type": "Expression"
                                  },
                                  "folderPath": "[format('{0}/schemas', parameters('configContainerName'))]"
                                }
                              },
                              "fieldList": [
                                "exists"
                              ],
                              "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                              },
                              "formatSettings": {
                                "type": "JsonReadSettings"
                              }
                            }
                          },
                          {
                            "name": "Schema Not Found",
                            "type": "Fail",
                            "dependsOn": [
                              {
                                "activity": "Check Schema",
                                "dependencyConditions": [
                                  "Failed"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "message": {
                                "value": "@concat('The ', variables('schemaFile'), ' schema mapping file was not found. Please confirm version ', variables('exportDatasetVersion'), ' of the ', variables('exportDatasetType'), ' dataset is supported by this version of FinOps hubs. You may need to upgrade to a newer release. To add support for another dataset, you can create a custom mapping file.')",
                                "type": "Expression"
                              },
                              "errorCode": "SchemaNotFound"
                            }
                          },
                          {
                            "name": "Set Hub Dataset",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Set Export Dataset Type",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "hubDataset",
                              "value": {
                                "value": "@if(equals(toLower(variables('exportDatasetType')), 'focuscost'), 'Costs', if(equals(toLower(variables('exportDatasetType')), 'pricesheet'), 'Prices', if(equals(toLower(variables('exportDatasetType')), 'reservationdetails'), 'CommitmentDiscountUsage', if(equals(toLower(variables('exportDatasetType')), 'reservationrecommendations'), 'Recommendations', if(equals(toLower(variables('exportDatasetType')), 'reservationtransactions'), 'Transactions', toLower(variables('exportDatasetType')))))))",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Set Destination Folder",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Check Schema",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              },
                              {
                                "activity": "Set Hub Dataset",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "destinationFolder",
                              "value": {
                                "value": "@replace(concat(variables('hubDataset'),'/',substring(variables('date'), 0, 4),'/',substring(variables('date'), 4, 2),'/',toLower(variables('scope'))),'//','/')",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "For Each Blob",
                            "description": "Loop thru each exported file listed in the manifest.",
                            "type": "ForEach",
                            "dependsOn": [
                              {
                                "activity": "Set Destination Folder",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "items": {
                                "value": "@if(variables('hasNoRows'), json('[]'), activity('Read Manifest').output.firstRow.blobs)",
                                "type": "Expression"
                              },
                              "batchCount": "[if(parameters('enablePublicAccess'), 30, 4)]",
                              "isSequential": false,
                              "activities": [
                                {
                                  "name": "Execute",
                                  "description": "Run the ingestion ETL pipeline.",
                                  "type": "ExecutePipeline",
                                  "dependsOn": [],
                                  "policy": {
                                    "secureInput": false
                                  },
                                  "userProperties": [],
                                  "typeProperties": {
                                    "pipeline": {
                                      "referenceName": "[format('{0}_ETL_{1}', variables('safeExportContainerName'), variables('safeIngestionContainerName'))]",
                                      "type": "PipelineReference"
                                    },
                                    "waitOnCompletion": true,
                                    "parameters": {
                                      "blobPath": {
                                        "value": "@item().blobName",
                                        "type": "Expression"
                                      },
                                      "destinationFolder": {
                                        "value": "@variables('destinationFolder')",
                                        "type": "Expression"
                                      },
                                      "destinationFile": {
                                        "value": "@last(array(split(replace(replace(item().blobName, '.gz', ''), '.csv', '.parquet'), '/')))",
                                        "type": "Expression"
                                      },
                                      "ingestionId": {
                                        "value": "@activity('Read Manifest').output.firstRow.runInfo.runId",
                                        "type": "Expression"
                                      },
                                      "schemaFile": {
                                        "value": "@variables('schemaFile')",
                                        "type": "Expression"
                                      },
                                      "exportDatasetType": {
                                        "value": "@variables('exportDatasetType')",
                                        "type": "Expression"
                                      },
                                      "exportDatasetVersion": {
                                        "value": "@variables('exportDatasetVersion')",
                                        "type": "Expression"
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "Copy Manifest",
                            "description": "Copy the manifest to the ingestion container to trigger ADX ingestion",
                            "type": "Copy",
                            "dependsOn": [
                              {
                                "activity": "For Each Blob",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "timeout": "0.12:00:00",
                              "retry": 0,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                  "type": "AzureBlobFSReadSettings",
                                  "recursive": true,
                                  "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                  "type": "JsonReadSettings"
                                }
                              },
                              "sink": {
                                "type": "JsonSink",
                                "storeSettings": {
                                  "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                  "type": "JsonWriteSettings"
                                }
                              },
                              "enableStaging": false
                            },
                            "inputs": [
                              {
                                "referenceName": "manifest",
                                "type": "DatasetReference",
                                "parameters": {
                                  "fileName": "manifest.json",
                                  "folderPath": {
                                    "value": "@pipeline().parameters.folderPath",
                                    "type": "Expression"
                                  }
                                }
                              }
                            ],
                            "outputs": [
                              {
                                "referenceName": "manifest",
                                "type": "DatasetReference",
                                "parameters": {
                                  "fileName": "manifest.json",
                                  "folderPath": {
                                    "value": "[format('@concat(''{0}/'', variables(''destinationFolder''))', parameters('ingestionContainerName'))]",
                                    "type": "Expression"
                                  }
                                }
                              }
                            ]
                          }
                        ],
                        "parameters": {
                          "folderPath": {
                            "type": "string"
                          },
                          "fileName": {
                            "type": "string"
                          }
                        },
                        "variables": {
                          "date": {
                            "type": "String"
                          },
                          "destinationFolder": {
                            "type": "String"
                          },
                          "exportDatasetType": {
                            "type": "String"
                          },
                          "exportDatasetVersion": {
                            "type": "String"
                          },
                          "hasNoRows": {
                            "type": "Boolean"
                          },
                          "hubDataset": {
                            "type": "String"
                          },
                          "mcaColumnToCheck": {
                            "type": "String"
                          },
                          "schemaFile": {
                            "type": "String"
                          },
                          "scope": {
                            "type": "String"
                          }
                        },
                        "annotations": [
                          "New export"
                        ]
                      },
                      "dependsOn": [
                        "dataFactory",
                        "dataset_config",
                        "dataset_manifest",
                        "dataset_msexports",
                        "dataset_msexports_gzip",
                        "dataset_msexports_parquet",
                        "pipeline_ToIngestion"
                      ],
                      "metadata": {
                        "description": "Queues the msexports_ETL_ingestion pipeline."
                      }
                    },
                    "pipeline_ToIngestion": {
                      "type": "Microsoft.DataFactory/factories/pipelines",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), format('{0}_ETL_{1}', variables('safeExportContainerName'), variables('safeIngestionContainerName')))]",
                      "properties": {
                        "activities": [
                          {
                            "name": "Get Existing Parquet Files",
                            "description": "Get the previously ingested files so we can remove any older data. This is necessary to avoid data duplication in reports.",
                            "type": "GetMetadata",
                            "dependsOn": [],
                            "policy": {
                              "timeout": "0.12:00:00",
                              "retry": 0,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "dataset": {
                                "referenceName": "[format('{0}_files', variables('safeIngestionContainerName'))]",
                                "type": "DatasetReference",
                                "parameters": {
                                  "folderPath": "@pipeline().parameters.destinationFolder"
                                }
                              },
                              "fieldList": [
                                "childItems"
                              ],
                              "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "enablePartitionDiscovery": false
                              },
                              "formatSettings": {
                                "type": "ParquetReadSettings"
                              }
                            }
                          },
                          {
                            "name": "Filter Out Current Exports",
                            "description": "Remove existing files from the current export so those files do not get deleted.",
                            "type": "Filter",
                            "dependsOn": [
                              {
                                "activity": "Get Existing Parquet Files",
                                "dependencyConditions": [
                                  "Completed"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "items": {
                                "value": "@if(contains(activity('Get Existing Parquet Files').output, 'childItems'), activity('Get Existing Parquet Files').output.childItems, json('[]'))",
                                "type": "Expression"
                              },
                              "condition": {
                                "value": "[format('@and(endswith(item().name, ''.parquet''), not(startswith(item().name, concat(pipeline().parameters.ingestionId, ''{0}''))))', variables('ingestionIdFileNameSeparator'))]",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Load Schema Mappings",
                            "description": "Get schema mapping file to use for the CSV to parquet conversion.",
                            "type": "Lookup",
                            "dependsOn": [],
                            "policy": {
                              "timeout": "0.12:00:00",
                              "retry": 0,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                  "type": "AzureBlobFSReadSettings",
                                  "recursive": true,
                                  "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                  "type": "JsonReadSettings"
                                }
                              },
                              "dataset": {
                                "referenceName": "[variables('safeConfigContainerName')]",
                                "type": "DatasetReference",
                                "parameters": {
                                  "fileName": {
                                    "value": "@toLower(pipeline().parameters.schemaFile)",
                                    "type": "Expression"
                                  },
                                  "folderPath": "[format('{0}/schemas', parameters('configContainerName'))]"
                                }
                              }
                            }
                          },
                          {
                            "name": "Failed to Load Schema",
                            "type": "Fail",
                            "dependsOn": [
                              {
                                "activity": "Load Schema Mappings",
                                "dependencyConditions": [
                                  "Failed"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "message": {
                                "value": "@concat('Unable to load the ', pipeline().parameters.schemaFile, ' schema file. Please confirm the schema and version are supported for FinOps hubs ingestion. Unsupported files will remain in the msexports container.')",
                                "type": "Expression"
                              },
                              "errorCode": "SchemaLoadFailed"
                            }
                          },
                          {
                            "name": "Set Additional Columns",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Load Schema Mappings",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "additionalColumns",
                              "value": {
                                "value": "@intersection(array(json(concat('[{\"name\":\"x_SourceProvider\",\"value\":\"Microsoft\"},{\"name\":\"x_SourceName\",\"value\":\"Cost Management\"},{\"name\":\"x_SourceType\",\"value\":\"', pipeline().parameters.exportDatasetVersion, '\"},{\"name\":\"x_SourceVersion\",\"value\":\"', pipeline().parameters.exportDatasetVersion, '\"}'))), activity('Load Schema Mappings').output.firstRow.additionalColumns)",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "For Each Old File",
                            "description": "Loop thru each of the existing files from previous exports.",
                            "type": "ForEach",
                            "dependsOn": [
                              {
                                "activity": "Convert to Parquet",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              },
                              {
                                "activity": "Filter Out Current Exports",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "items": {
                                "value": "@activity('Filter Out Current Exports').output.Value",
                                "type": "Expression"
                              },
                              "activities": [
                                {
                                  "name": "Delete Old Ingested File",
                                  "description": "Delete the previously ingested files from older exports.",
                                  "type": "Delete",
                                  "dependsOn": [],
                                  "policy": {
                                    "timeout": "0.12:00:00",
                                    "retry": 0,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                  },
                                  "userProperties": [],
                                  "typeProperties": {
                                    "dataset": {
                                      "referenceName": "[variables('safeIngestionContainerName')]",
                                      "type": "DatasetReference",
                                      "parameters": {
                                        "blobPath": {
                                          "value": "@concat(pipeline().parameters.destinationFolder, '/', item().name)",
                                          "type": "Expression"
                                        }
                                      }
                                    },
                                    "enableLogging": false,
                                    "storeSettings": {
                                      "type": "AzureBlobFSReadSettings",
                                      "recursive": false,
                                      "enablePartitionDiscovery": false
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "Set Destination Path",
                            "type": "SetVariable",
                            "dependsOn": [],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "destinationPath",
                              "value": {
                                "value": "[format('@concat(pipeline().parameters.destinationFolder, ''/'', pipeline().parameters.ingestionId, ''{0}'', pipeline().parameters.destinationFile)', variables('ingestionIdFileNameSeparator'))]",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Convert to Parquet",
                            "description": "[format('Convert CSV to parquet and move the file to the {0} container.', parameters('ingestionContainerName'))]",
                            "type": "Switch",
                            "dependsOn": [
                              {
                                "activity": "Set Destination Path",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              },
                              {
                                "activity": "Load Schema Mappings",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              },
                              {
                                "activity": "Set Additional Columns",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "on": {
                                "value": "@last(array(split(pipeline().parameters.blobPath, '.')))",
                                "type": "Expression"
                              },
                              "cases": [
                                {
                                  "value": "csv",
                                  "activities": [
                                    {
                                      "name": "Convert CSV File",
                                      "type": "Copy",
                                      "dependsOn": [],
                                      "policy": {
                                        "timeout": "0.00:10:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                      },
                                      "userProperties": [],
                                      "typeProperties": {
                                        "source": {
                                          "type": "DelimitedTextSource",
                                          "additionalColumns": {
                                            "value": "@variables('additionalColumns')",
                                            "type": "Expression"
                                          },
                                          "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                          },
                                          "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                          }
                                        },
                                        "sink": {
                                          "type": "ParquetSink",
                                          "storeSettings": {
                                            "type": "AzureBlobFSWriteSettings"
                                          },
                                          "formatSettings": {
                                            "type": "ParquetWriteSettings",
                                            "fileExtension": ".parquet"
                                          }
                                        },
                                        "enableStaging": false,
                                        "parallelCopies": 1,
                                        "validateDataConsistency": false,
                                        "translator": {
                                          "value": "@activity('Load Schema Mappings').output.firstRow.translator",
                                          "type": "Expression"
                                        }
                                      },
                                      "inputs": [
                                        {
                                          "referenceName": "[variables('safeExportContainerName')]",
                                          "type": "DatasetReference",
                                          "parameters": {
                                            "blobPath": {
                                              "value": "@pipeline().parameters.blobPath",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      ],
                                      "outputs": [
                                        {
                                          "referenceName": "[variables('safeIngestionContainerName')]",
                                          "type": "DatasetReference",
                                          "parameters": {
                                            "blobPath": {
                                              "value": "@variables('destinationPath')",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "gz",
                                  "activities": [
                                    {
                                      "name": "Convert GZip CSV File",
                                      "type": "Copy",
                                      "dependsOn": [],
                                      "policy": {
                                        "timeout": "0.00:10:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                      },
                                      "userProperties": [],
                                      "typeProperties": {
                                        "source": {
                                          "type": "DelimitedTextSource",
                                          "additionalColumns": {
                                            "value": "@variables('additionalColumns')",
                                            "type": "Expression"
                                          },
                                          "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                          },
                                          "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                          }
                                        },
                                        "sink": {
                                          "type": "ParquetSink",
                                          "storeSettings": {
                                            "type": "AzureBlobFSWriteSettings"
                                          },
                                          "formatSettings": {
                                            "type": "ParquetWriteSettings",
                                            "fileExtension": ".parquet"
                                          }
                                        },
                                        "enableStaging": false,
                                        "parallelCopies": 1,
                                        "validateDataConsistency": false,
                                        "translator": {
                                          "value": "@activity('Load Schema Mappings').output.firstRow.translator",
                                          "type": "Expression"
                                        }
                                      },
                                      "inputs": [
                                        {
                                          "referenceName": "[format('{0}_gzip', variables('safeExportContainerName'))]",
                                          "type": "DatasetReference",
                                          "parameters": {
                                            "blobPath": {
                                              "value": "@pipeline().parameters.blobPath",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      ],
                                      "outputs": [
                                        {
                                          "referenceName": "[variables('safeIngestionContainerName')]",
                                          "type": "DatasetReference",
                                          "parameters": {
                                            "blobPath": {
                                              "value": "@variables('destinationPath')",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "parquet",
                                  "activities": [
                                    {
                                      "name": "Move Parquet File",
                                      "type": "Copy",
                                      "dependsOn": [],
                                      "policy": {
                                        "timeout": "0.00:05:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                      },
                                      "userProperties": [],
                                      "typeProperties": {
                                        "source": {
                                          "type": "ParquetSource",
                                          "additionalColumns": {
                                            "value": "@variables('additionalColumns')",
                                            "type": "Expression"
                                          },
                                          "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                          },
                                          "formatSettings": {
                                            "type": "ParquetReadSettings"
                                          }
                                        },
                                        "sink": {
                                          "type": "ParquetSink",
                                          "storeSettings": {
                                            "type": "AzureBlobFSWriteSettings"
                                          },
                                          "formatSettings": {
                                            "type": "ParquetWriteSettings",
                                            "fileExtension": ".parquet"
                                          }
                                        },
                                        "enableStaging": false,
                                        "parallelCopies": 1,
                                        "validateDataConsistency": false
                                      },
                                      "inputs": [
                                        {
                                          "referenceName": "[format('{0}_parquet', variables('safeExportContainerName'))]",
                                          "type": "DatasetReference",
                                          "parameters": {
                                            "blobPath": {
                                              "value": "@pipeline().parameters.blobPath",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      ],
                                      "outputs": [
                                        {
                                          "referenceName": "[variables('safeIngestionContainerName')]",
                                          "type": "DatasetReference",
                                          "parameters": {
                                            "blobPath": {
                                              "value": "@variables('destinationPath')",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ],
                              "defaultActivities": [
                                {
                                  "name": "Unsupported File Type",
                                  "type": "Fail",
                                  "dependsOn": [],
                                  "userProperties": [],
                                  "typeProperties": {
                                    "message": {
                                      "value": "@concat('Unable to ingest the specified export file because the file type is not supported. File: ', pipeline().parameters.blobPath)",
                                      "type": "Expression"
                                    },
                                    "errorCode": "UnsupportedExportFileType"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "Read Hub Config",
                            "description": "Read the hub config to determine if the export should be retained.",
                            "type": "Lookup",
                            "dependsOn": [],
                            "policy": {
                              "timeout": "0.12:00:00",
                              "retry": 0,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                  "type": "AzureBlobFSReadSettings",
                                  "recursive": false,
                                  "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                  "type": "JsonReadSettings"
                                }
                              },
                              "dataset": {
                                "referenceName": "[variables('safeConfigContainerName')]",
                                "type": "DatasetReference",
                                "parameters": {
                                  "fileName": "settings.json",
                                  "folderPath": "[parameters('configContainerName')]"
                                }
                              }
                            }
                          },
                          {
                            "name": "If Not Retaining Exports",
                            "description": "If the msexports retention period <= 0, delete the source file. The main reason to keep the source file is to allow for troubleshooting and reprocessing in the future.",
                            "type": "IfCondition",
                            "dependsOn": [
                              {
                                "activity": "Convert to Parquet",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              },
                              {
                                "activity": "Read Hub Config",
                                "dependencyConditions": [
                                  "Completed"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "expression": {
                                "value": "@lessOrEquals(coalesce(activity('Read Hub Config').output.firstRow.retention.msexports.days, 0), 0)",
                                "type": "Expression"
                              },
                              "ifTrueActivities": [
                                {
                                  "name": "Delete Source File",
                                  "description": "Delete the exported data file to keep storage costs down. This file is not referenced by any reporting systems.",
                                  "type": "Delete",
                                  "dependsOn": [],
                                  "policy": {
                                    "timeout": "0.12:00:00",
                                    "retry": 0,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                  },
                                  "userProperties": [],
                                  "typeProperties": {
                                    "dataset": {
                                      "referenceName": "[format('{0}_parquet', variables('safeExportContainerName'))]",
                                      "type": "DatasetReference",
                                      "parameters": {
                                        "blobPath": {
                                          "value": "@pipeline().parameters.blobPath",
                                          "type": "Expression"
                                        }
                                      }
                                    },
                                    "enableLogging": false,
                                    "storeSettings": {
                                      "type": "AzureBlobFSReadSettings",
                                      "recursive": true,
                                      "enablePartitionDiscovery": false
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "parameters": {
                          "blobPath": {
                            "type": "String"
                          },
                          "destinationFile": {
                            "type": "string"
                          },
                          "destinationFolder": {
                            "type": "string"
                          },
                          "ingestionId": {
                            "type": "string"
                          },
                          "schemaFile": {
                            "type": "string"
                          },
                          "exportDatasetType": {
                            "type": "string"
                          },
                          "exportDatasetVersion": {
                            "type": "string"
                          }
                        },
                        "variables": {
                          "additionalColumns": {
                            "type": "Array"
                          },
                          "destinationPath": {
                            "type": "String"
                          }
                        },
                        "annotations": []
                      },
                      "dependsOn": [
                        "dataFactory",
                        "dataset_config",
                        "dataset_ingestion",
                        "dataset_ingestion_files",
                        "dataset_msexports",
                        "dataset_msexports_gzip",
                        "dataset_msexports_parquet"
                      ],
                      "metadata": {
                        "description": "Transforms CSV data to a standard schema and converts to Parquet."
                      }
                    },
                    "pipeline_ToDataExplorer": {
                      "condition": "[variables('deployDataExplorer')]",
                      "type": "Microsoft.DataFactory/factories/pipelines",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), format('{0}_ETL_dataExplorer', variables('safeIngestionContainerName')))]",
                      "properties": {
                        "activities": [
                          {
                            "name": "Read Hub Config",
                            "description": "Read the hub config to determine how long data should be retained.",
                            "type": "Lookup",
                            "dependsOn": [],
                            "policy": {
                              "timeout": "0.12:00:00",
                              "retry": 0,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                  "type": "AzureBlobFSReadSettings",
                                  "recursive": false,
                                  "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                  "type": "JsonReadSettings"
                                }
                              },
                              "dataset": {
                                "referenceName": "[variables('safeConfigContainerName')]",
                                "type": "DatasetReference",
                                "parameters": {
                                  "fileName": "settings.json",
                                  "folderPath": "[parameters('configContainerName')]"
                                }
                              }
                            }
                          },
                          {
                            "name": "Set Final Retention Months",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Read Hub Config",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "finalRetentionMonths",
                              "value": {
                                "value": "@coalesce(activity('Read Hub Config').output.firstRow.retention.final.months, 999)",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Until Capacity Is Available",
                            "type": "Until",
                            "dependsOn": [
                              {
                                "activity": "Set Final Retention Months",
                                "dependencyConditions": [
                                  "Completed",
                                  "Skipped"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "expression": {
                                "value": "@equals(variables('tryAgain'), false)",
                                "type": "Expression"
                              },
                              "activities": [
                                {
                                  "name": "Confirm Ingestion Capacity",
                                  "type": "AzureDataExplorerCommand",
                                  "dependsOn": [],
                                  "policy": {
                                    "timeout": "0.12:00:00",
                                    "retry": 0,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                  },
                                  "userProperties": [],
                                  "typeProperties": {
                                    "command": ".show capacity | where Resource == 'Ingestions' | project Remaining",
                                    "commandTimeout": "00:20:00"
                                  },
                                  "linkedServiceName": {
                                    "referenceName": "[variables('hubDataExplorerName')]",
                                    "type": "LinkedServiceReference"
                                  }
                                },
                                {
                                  "name": "If Has Capacity",
                                  "type": "IfCondition",
                                  "dependsOn": [
                                    {
                                      "activity": "Confirm Ingestion Capacity",
                                      "dependencyConditions": [
                                        "Succeeded"
                                      ]
                                    }
                                  ],
                                  "userProperties": [],
                                  "typeProperties": {
                                    "expression": {
                                      "value": "@or(equals(activity('Confirm Ingestion Capacity').output.count, 0), greater(activity('Confirm Ingestion Capacity').output.value[0].Remaining, 0))",
                                      "type": "Expression"
                                    },
                                    "ifFalseActivities": [
                                      {
                                        "name": "Wait for Ingestion",
                                        "type": "Wait",
                                        "dependsOn": [],
                                        "userProperties": [],
                                        "typeProperties": {
                                          "waitTimeInSeconds": 15
                                        }
                                      },
                                      {
                                        "name": "Try Again",
                                        "type": "SetVariable",
                                        "dependsOn": [
                                          {
                                            "activity": "Wait for Ingestion",
                                            "dependencyConditions": [
                                              "Succeeded"
                                            ]
                                          }
                                        ],
                                        "policy": {
                                          "secureOutput": false,
                                          "secureInput": false
                                        },
                                        "userProperties": [],
                                        "typeProperties": {
                                          "variableName": "tryAgain",
                                          "value": true
                                        }
                                      }
                                    ],
                                    "ifTrueActivities": [
                                      {
                                        "name": "Pre-Ingest Cleanup",
                                        "description": "Cost Management exports include all month-to-date data from the previous export run. To ensure data is not double-reported, it must be dropped from the raw table before ingestion completes. Remove previous ingestions into the raw table for the month and any previous runs of the current ingestion month file in any table.",
                                        "type": "AzureDataExplorerCommand",
                                        "dependsOn": [],
                                        "policy": {
                                          "timeout": "0.12:00:00",
                                          "retry": 0,
                                          "retryIntervalInSeconds": 30,
                                          "secureOutput": false,
                                          "secureInput": false
                                        },
                                        "typeProperties": {
                                          "command": {
                                            "value": "@concat('.drop extents <| .show extents | where (TableName == \"', pipeline().parameters.table, '\" and Tags !has \"drop-by:', pipeline().parameters.ingestionId, '\" and Tags has \"drop-by:', pipeline().parameters.folderPath, '\") or (Tags has \"drop-by:', pipeline().parameters.ingestionId, '\" and Tags has \"drop-by:', pipeline().parameters.folderPath, '/', pipeline().parameters.originalFileName, '\")')",
                                            "type": "Expression"
                                          },
                                          "commandTimeout": "00:20:00"
                                        },
                                        "linkedServiceName": {
                                          "referenceName": "[variables('hubDataExplorerName')]",
                                          "type": "LinkedServiceReference",
                                          "parameters": {
                                            "database": "[parameters('dataExplorerIngestionDatabase')]"
                                          }
                                        }
                                      },
                                      {
                                        "name": "Ingest Data",
                                        "type": "AzureDataExplorerCommand",
                                        "dependsOn": [
                                          {
                                            "activity": "Pre-Ingest Cleanup",
                                            "dependencyConditions": [
                                              "Succeeded"
                                            ]
                                          }
                                        ],
                                        "policy": {
                                          "timeout": "0.12:00:00",
                                          "retry": 3,
                                          "retryIntervalInSeconds": 120,
                                          "secureOutput": false,
                                          "secureInput": false
                                        },
                                        "userProperties": [],
                                        "typeProperties": {
                                          "command": {
                                            "value": "[format('@concat(''.ingest into table '', pipeline().parameters.table, '' (\"abfss://{0}@{1}.dfs.{2}/'', pipeline().parameters.folderPath, ''/'', pipeline().parameters.fileName, '';managed_identity=system\") with (format=\"parquet\", ingestionMappingReference=\"'', pipeline().parameters.table, ''_mapping\", tags=\"[\\\"drop-by:'', pipeline().parameters.ingestionId, ''\\\", \\\"drop-by:'', pipeline().parameters.folderPath, ''/'', pipeline().parameters.originalFileName, ''\\\", \\\"drop-by:ftk-version-{3}\\\"]\"); print Success = assert(iff(toscalar($command_results | project-keep HasErrors) == false, true, false), \"Ingestion Failed\")'')', parameters('ingestionContainerName'), parameters('storageAccountName'), environment().suffixes.storage, variables('ftkVersion'))]",
                                            "type": "Expression"
                                          },
                                          "commandTimeout": "01:00:00"
                                        },
                                        "linkedServiceName": {
                                          "referenceName": "[variables('hubDataExplorerName')]",
                                          "type": "LinkedServiceReference",
                                          "parameters": {
                                            "database": "[parameters('dataExplorerIngestionDatabase')]"
                                          }
                                        }
                                      },
                                      {
                                        "name": "Post-Ingest Cleanup",
                                        "description": "Cost Management exports include all month-to-date data from the previous export run. To ensure data is not double-reported, it must be dropped after ingestion completes. Remove the current ingestion month file from raw and any old ingestions for the month from the final table.",
                                        "type": "AzureDataExplorerCommand",
                                        "dependsOn": [
                                          {
                                            "activity": "Ingest Data",
                                            "dependencyConditions": [
                                              "Completed"
                                            ]
                                          }
                                        ],
                                        "policy": {
                                          "timeout": "0.12:00:00",
                                          "retry": 0,
                                          "retryIntervalInSeconds": 30,
                                          "secureOutput": false,
                                          "secureInput": false
                                        },
                                        "typeProperties": {
                                          "command": {
                                            "value": "@concat('.drop extents <| .show extents | extend isOldFinalData = (TableName startswith \"', replace(pipeline().parameters.table, '_raw', '_final_v'), '\" and Tags !has \"drop-by:', pipeline().parameters.ingestionId, '\" and Tags has \"drop-by:', pipeline().parameters.folderPath, '\") | extend isPastFinalRetention = (TableName startswith \"', replace(pipeline().parameters.table, '_raw', '_final_v'), '\" and todatetime(substring(strcat(replace_string(extract(\"drop-by:[A-Za-z]+/(\\\\d{4}/\\\\d{2}(/\\\\d{2})?)\", 1, Tags), \"/\", \"-\"), \"-01\"), 0, 10)) < datetime_add(\"month\", -', if(lessOrEquals(variables('finalRetentionMonths'), 0), 0, variables('finalRetentionMonths')), ', startofmonth(now()))) | where isOldFinalData or isPastFinalRetention')",
                                            "type": "Expression"
                                          },
                                          "commandTimeout": "00:20:00"
                                        },
                                        "linkedServiceName": {
                                          "referenceName": "[variables('hubDataExplorerName')]",
                                          "type": "LinkedServiceReference",
                                          "parameters": {
                                            "database": "[parameters('dataExplorerIngestionDatabase')]"
                                          }
                                        }
                                      },
                                      {
                                        "name": "Ingestion Complete",
                                        "type": "SetVariable",
                                        "dependsOn": [
                                          {
                                            "activity": "Post-Ingest Cleanup",
                                            "dependencyConditions": [
                                              "Succeeded"
                                            ]
                                          }
                                        ],
                                        "policy": {
                                          "secureOutput": false,
                                          "secureInput": false
                                        },
                                        "userProperties": [],
                                        "typeProperties": {
                                          "variableName": "tryAgain",
                                          "value": false
                                        }
                                      },
                                      {
                                        "name": "Abort On Ingestion Error",
                                        "type": "SetVariable",
                                        "dependsOn": [
                                          {
                                            "activity": "Ingest Data",
                                            "dependencyConditions": [
                                              "Failed"
                                            ]
                                          }
                                        ],
                                        "policy": {
                                          "secureOutput": false,
                                          "secureInput": false
                                        },
                                        "userProperties": [],
                                        "typeProperties": {
                                          "variableName": "tryAgain",
                                          "value": false
                                        }
                                      },
                                      {
                                        "name": "Ingestion Failed Error",
                                        "type": "Fail",
                                        "dependsOn": [
                                          {
                                            "activity": "Abort On Ingestion Error",
                                            "dependencyConditions": [
                                              "Succeeded"
                                            ]
                                          }
                                        ],
                                        "userProperties": [],
                                        "typeProperties": {
                                          "message": {
                                            "value": "@concat('Data Explorer ingestion into the ', pipeline().parameters.table, ' table failed. Please fix the error and rerun ingestion for the following folder path: \"', pipeline().parameters.folderPath, '\". File: ', pipeline().parameters.originalFileName, '. Error: ', if(greater(length(activity('Ingest Data').output.errors), 0), activity('Ingest Data').output.errors[0].Message, 'Unknown'), ' (Code: ', if(greater(length(activity('Ingest Data').output.errors), 0), activity('Ingest Data').output.errors[0].Code, 'None'), ')')",
                                            "type": "Expression"
                                          },
                                          "errorCode": "DataExplorerIngestionFailed"
                                        }
                                      },
                                      {
                                        "name": "Abort On Pre-Ingest Drop Error",
                                        "type": "SetVariable",
                                        "dependsOn": [
                                          {
                                            "activity": "Pre-Ingest Cleanup",
                                            "dependencyConditions": [
                                              "Failed"
                                            ]
                                          }
                                        ],
                                        "policy": {
                                          "secureOutput": false,
                                          "secureInput": false
                                        },
                                        "userProperties": [],
                                        "typeProperties": {
                                          "variableName": "tryAgain",
                                          "value": false
                                        }
                                      },
                                      {
                                        "name": "Pre-Ingest Drop Failed Error",
                                        "type": "Fail",
                                        "dependsOn": [
                                          {
                                            "activity": "Abort On Pre-Ingest Drop Error",
                                            "dependencyConditions": [
                                              "Succeeded"
                                            ]
                                          }
                                        ],
                                        "userProperties": [],
                                        "typeProperties": {
                                          "message": {
                                            "value": "@concat('Data Explorer pre-ingestion cleanup (drop extents from raw table) for the ', pipeline().parameters.table, ' table failed. Ingestion was not completed. Please fix the error and rerun ingestion for the following folder path: \"', pipeline().parameters.folderPath, '\". File: ', pipeline().parameters.originalFileName, '. Error: ', if(greater(length(activity('Pre-Ingest Cleanup').output.errors), 0), activity('Pre-Ingest Cleanup').output.errors[0].Message, 'Unknown'), ' (Code: ', if(greater(length(activity('Pre-Ingest Cleanup').output.errors), 0), activity('Pre-Ingest Cleanup').output.errors[0].Code, 'None'), ')')",
                                            "type": "Expression"
                                          },
                                          "errorCode": "DataExplorerPreIngestionDropFailed"
                                        }
                                      },
                                      {
                                        "name": "Abort On Post-Ingest Drop Error",
                                        "type": "SetVariable",
                                        "dependsOn": [
                                          {
                                            "activity": "Post-Ingest Cleanup",
                                            "dependencyConditions": [
                                              "Failed"
                                            ]
                                          }
                                        ],
                                        "policy": {
                                          "secureOutput": false,
                                          "secureInput": false
                                        },
                                        "userProperties": [],
                                        "typeProperties": {
                                          "variableName": "tryAgain",
                                          "value": false
                                        }
                                      },
                                      {
                                        "name": "Post-Ingest Drop Failed Error",
                                        "type": "Fail",
                                        "dependsOn": [
                                          {
                                            "activity": "Abort On Post-Ingest Drop Error",
                                            "dependencyConditions": [
                                              "Succeeded"
                                            ]
                                          }
                                        ],
                                        "userProperties": [],
                                        "typeProperties": {
                                          "message": {
                                            "value": "@concat('Data Explorer post-ingestion cleanup (drop extents from final tables) for the ', replace(pipeline().parameters.table, '_raw', '_final_*'), ' table failed. Please fix the error and rerun ingestion for the following folder path: \"', pipeline().parameters.folderPath, '\". File: ', pipeline().parameters.originalFileName, '. Error: ', if(greater(length(activity('Post-Ingest Cleanup').output.errors), 0), activity('Post-Ingest Cleanup').output.errors[0].Message, 'Unknown'), ' (Code: ', if(greater(length(activity('Post-Ingest Cleanup').output.errors), 0), activity('Post-Ingest Cleanup').output.errors[0].Code, 'None'), ')')",
                                            "type": "Expression"
                                          },
                                          "errorCode": "DataExplorerPostIngestionDropFailed"
                                        }
                                      }
                                    ]
                                  }
                                }
                              ],
                              "timeout": "0.02:00:00"
                            }
                          }
                        ],
                        "parameters": {
                          "folderPath": {
                            "type": "string"
                          },
                          "fileName": {
                            "type": "string"
                          },
                          "originalFileName": {
                            "type": "string"
                          },
                          "ingestionId": {
                            "type": "string"
                          },
                          "table": {
                            "type": "string"
                          }
                        },
                        "variables": {
                          "tryAgain": {
                            "type": "Boolean",
                            "defaultValue": true
                          },
                          "logRetentionDays": {
                            "type": "Integer",
                            "defaultValue": 0
                          },
                          "finalRetentionMonths": {
                            "type": "Integer",
                            "defaultValue": 999
                          },
                          "scope": {
                            "type": "String"
                          }
                        },
                        "annotations": []
                      },
                      "dependsOn": [
                        "dataFactory",
                        "dataset_config",
                        "linkedService_dataExplorer",
                        "storageAccount"
                      ],
                      "metadata": {
                        "description": "Ingests parquet data into an Azure Data Explorer cluster."
                      }
                    },
                    "pipeline_ExecuteIngestionETL": {
                      "condition": "[variables('deployDataExplorer')]",
                      "type": "Microsoft.DataFactory/factories/pipelines",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), format('{0}_ExecuteETL', variables('safeIngestionContainerName')))]",
                      "properties": {
                        "concurrency": 1,
                        "activities": [
                          {
                            "name": "Wait",
                            "description": "Files may not be available immediately after being created.",
                            "type": "Wait",
                            "dependsOn": [],
                            "userProperties": [],
                            "typeProperties": {
                              "waitTimeInSeconds": 60
                            }
                          },
                          {
                            "name": "Set Container Folder Path",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Wait",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "containerFolderPath",
                              "value": {
                                "value": "@join(skip(array(split(pipeline().parameters.folderPath, '/')), 1), '/')",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Get Existing Parquet Files",
                            "description": "Get the previously ingested files so we can get file paths.",
                            "type": "GetMetadata",
                            "dependsOn": [
                              {
                                "activity": "Set Container Folder Path",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "on": {
                                "value": "@last(array(split(pipeline().parameters.blobPath, '.')))",
                                "type": "Expression"
                              },
                              "cases": [
                                {
                                  "value": "csv",
                                  "activities": [
                                    {
                                      "name": "Convert CSV File",
                                      "type": "Copy",
                                      "dependsOn": [],
                                      "policy": {
                                        "timeout": "0.00:10:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                      },
                                      "userProperties": [],
                                      "typeProperties": {
                                        "source": {
                                          "type": "DelimitedTextSource",
                                          "additionalColumns": {
                                            "type": "Expression",
                                            "value": "@activity('Load Schema Mappings').output.firstRow.additionalColumns"
                                          },
                                          "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                          },
                                          "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                          }
                                        },
                                        "sink": {
                                          "type": "ParquetSink",
                                          "storeSettings": {
                                            "type": "AzureBlobFSWriteSettings"
                                          },
                                          "formatSettings": {
                                            "type": "ParquetWriteSettings",
                                            "fileExtension": ".parquet"
                                          }
                                        },
                                        "enableStaging": false,
                                        "parallelCopies": 1,
                                        "validateDataConsistency": false,
                                        "translator": {
                                          "value": "@activity('Load Schema Mappings').output.firstRow.translator",
                                          "type": "Expression"
                                        }
                                      },
                                      "inputs": [
                                        {
                                          "referenceName": "[variables('safeExportContainerName')]",
                                          "type": "DatasetReference",
                                          "parameters": {
                                            "blobPath": {
                                              "value": "@pipeline().parameters.blobPath",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      ],
                                      "outputs": [
                                        {
                                          "referenceName": "[variables('safeIngestionContainerName')]",
                                          "type": "DatasetReference",
                                          "parameters": {
                                            "blobPath": {
                                              "value": "@concat(pipeline().parameters.destinationFolder, '/', pipeline().parameters.destinationFile)",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "gz",
                                  "activities": [
                                    {
                                      "name": "Convert GZip CSV File",
                                      "type": "Copy",
                                      "dependsOn": [],
                                      "policy": {
                                        "timeout": "0.00:10:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                      },
                                      "userProperties": [],
                                      "typeProperties": {
                                        "source": {
                                          "type": "DelimitedTextSource",
                                          "additionalColumns": {
                                            "type": "Expression",
                                            "value": "@activity('Load Schema Mappings').output.firstRow.additionalColumns"
                                          },
                                          "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                          },
                                          "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                          }
                                        },
                                        "sink": {
                                          "type": "ParquetSink",
                                          "storeSettings": {
                                            "type": "AzureBlobFSWriteSettings"
                                          },
                                          "formatSettings": {
                                            "type": "ParquetWriteSettings",
                                            "fileExtension": ".parquet"
                                          }
                                        },
                                        "enableStaging": false,
                                        "parallelCopies": 1,
                                        "validateDataConsistency": false,
                                        "translator": {
                                          "value": "@activity('Load Schema Mappings').output.firstRow.translator",
                                          "type": "Expression"
                                        }
                                      },
                                      "inputs": [
                                        {
                                          "referenceName": "[format('{0}_gzip', variables('safeExportContainerName'))]",
                                          "type": "DatasetReference",
                                          "parameters": {
                                            "blobPath": {
                                              "value": "@pipeline().parameters.blobPath",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      ],
                                      "outputs": [
                                        {
                                          "referenceName": "[variables('safeIngestionContainerName')]",
                                          "type": "DatasetReference",
                                          "parameters": {
                                            "blobPath": {
                                              "value": "@concat(pipeline().parameters.destinationFolder, '/', pipeline().parameters.destinationFile)",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "parquet",
                                  "activities": [
                                    {
                                      "name": "Move Parquet File",
                                      "type": "Copy",
                                      "dependsOn": [],
                                      "policy": {
                                        "timeout": "0.00:05:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                      },
                                      "userProperties": [],
                                      "typeProperties": {
                                        "source": {
                                          "type": "ParquetSource",
                                          "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                          },
                                          "formatSettings": {
                                            "type": "ParquetReadSettings"
                                          }
                                        },
                                        "sink": {
                                          "type": "ParquetSink",
                                          "storeSettings": {
                                            "type": "AzureBlobFSWriteSettings"
                                          },
                                          "formatSettings": {
                                            "type": "ParquetWriteSettings",
                                            "fileExtension": ".parquet"
                                          }
                                        },
                                        "enableStaging": false,
                                        "parallelCopies": 1,
                                        "validateDataConsistency": false
                                      },
                                      "inputs": [
                                        {
                                          "referenceName": "[format('{0}_parquet', variables('safeExportContainerName'))]",
                                          "type": "DatasetReference",
                                          "parameters": {
                                            "blobPath": {
                                              "value": "@pipeline().parameters.blobPath",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      ],
                                      "outputs": [
                                        {
                                          "referenceName": "[variables('safeIngestionContainerName')]",
                                          "type": "DatasetReference",
                                          "parameters": {
                                            "blobPath": {
                                              "value": "@concat(pipeline().parameters.destinationFolder, '/', pipeline().parameters.destinationFile)",
                                              "type": "Expression"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ],
                              "defaultActivities": [
                                {
                                  "name": "Unsupported File Type",
                                  "type": "Fail",
                                  "dependsOn": [],
                                  "userProperties": [],
                                  "typeProperties": {
                                    "message": {
                                      "value": "@concat('Unable to ingest the specified export file because the file type is not supported. File: ', pipeline().parameters.blobPath)",
                                      "type": "Expression"
                                    },
                                    "errorCode": "UnsupportedExportFileType"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "Get Existing Parquet Files",
                            "description": "Get the previously ingested files so we can remove any older data. This is necessary to avoid data duplication in reports.",
                            "type": "GetMetadata",
                            "dependsOn": [],
                            "policy": {
                              "timeout": "0.12:00:00",
                              "retry": 0,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "dataset": {
                                "referenceName": "[format('{0}_files', variables('safeIngestionContainerName'))]",
                                "type": "DatasetReference",
                                "parameters": {
                                  "folderPath": "@variables('containerFolderPath')"
                                }
                              },
                              "fieldList": [
                                "childItems"
                              ],
                              "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "enablePartitionDiscovery": false
                              },
                              "formatSettings": {
                                "type": "ParquetReadSettings"
                              }
                            }
                          },
                          {
                            "name": "Filter Out Folders",
                            "description": "Remove any folders or manifest files.",
                            "type": "Filter",
                            "dependsOn": [
                              {
                                "activity": "Get Existing Parquet Files",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "items": {
                                "value": "@if(contains(activity('Get Existing Parquet Files').output, 'childItems'), activity('Get Existing Parquet Files').output.childItems, json('[]'))",
                                "type": "Expression"
                              },
                              "condition": {
                                "value": "@and(equals(item().type, 'File'), not(contains(toLower(item().name), 'manifest.json')))",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Set Ingestion Timestamp",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Wait",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "timestamp",
                              "value": {
                                "value": "@utcNow()",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "For Each Old File",
                            "description": "Loop thru each of the existing files.",
                            "type": "ForEach",
                            "dependsOn": [
                              {
                                "activity": "Filter Out Folders",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              },
                              {
                                "activity": "Set Ingestion Timestamp",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "batchCount": "[parameters('dataExplorerIngestionCapacity')]",
                              "items": {
                                "value": "@activity('Filter Out Folders').output.Value",
                                "type": "Expression"
                              },
                              "activities": [
                                {
                                  "name": "Execute",
                                  "description": "Run the ADX ETL pipeline.",
                                  "type": "ExecutePipeline",
                                  "dependsOn": [],
                                  "policy": {
                                    "secureInput": false
                                  },
                                  "userProperties": [],
                                  "typeProperties": {
                                    "pipeline": {
                                      "referenceName": "[format('{0}_ETL_dataExplorer', variables('safeIngestionContainerName'))]",
                                      "type": "PipelineReference"
                                    },
                                    "waitOnCompletion": true,
                                    "parameters": {
                                      "folderPath": {
                                        "value": "@variables('containerFolderPath')",
                                        "type": "Expression"
                                      },
                                      "fileName": {
                                        "value": "@item().name",
                                        "type": "Expression"
                                      },
                                      "originalFileName": {
                                        "value": "[format('@last(array(split(item().name, ''{0}'')))', variables('ingestionIdFileNameSeparator'))]",
                                        "type": "Expression"
                                      },
                                      "ingestionId": {
                                        "value": "[format('@concat(first(array(split(item().name, ''{0}''))), ''_'', variables(''timestamp''))', variables('ingestionIdFileNameSeparator'))]",
                                        "type": "Expression"
                                      },
                                      "table": {
                                        "value": "@concat(first(array(split(variables('containerFolderPath'), '/'))), '_raw')",
                                        "type": "Expression"
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "If No Files",
                            "description": "If there are no files found, fail the pipeline.",
                            "type": "IfCondition",
                            "dependsOn": [
                              {
                                "activity": "Filter Out Folders",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "expression": {
                                "value": "@equals(length(activity('Filter Out Folders').output.Value), 0)",
                                "type": "Expression"
                              },
                              "ifTrueActivities": [
                                {
                                  "name": "Files Not Found",
                                  "type": "Fail",
                                  "dependsOn": [],
                                  "userProperties": [],
                                  "typeProperties": {
                                    "message": {
                                      "value": "@concat('Unable to locate parquet files to ingest from the ', pipeline().parameters.folderPath, ' path. Please confirm the folder path is the full path, including the \"ingestion\" container and not starting with or ending with a slash (\"/\").')",
                                      "type": "Expression"
                                    },
                                    "errorCode": "IngestionFilesNotFound"
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "parameters": {
                          "folderPath": {
                            "type": "string"
                          }
                        },
                        "variables": {
                          "containerFolderPath": {
                            "type": "string"
                          },
                          "timestamp": {
                            "type": "string"
                          }
                        },
                        "annotations": [
                          "New ingestion"
                        ]
                      },
                      "dependsOn": [
                        "dataFactory",
                        "dataset_ingestion",
                        "dataset_ingestion_files",
                        "dataset_msexports",
                        "dataset_msexports_gzip",
                        "dataset_msexports_parquet",
                        "pipeline_ToDataExplorer"
                      ],
                      "metadata": {
                        "description": "Queues the ingestion_ETL_dataExplorer pipeline to account for Data Factory pipeline trigger limits."
                      }
                    },
                    "startTriggers": {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}_startTriggers', parameters('dataFactoryName'))]",
                      "location": "[if(startsWith(parameters('location'), 'china'), 'chinaeast2', parameters('location'))]",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Resources/deploymentScripts'), parameters('tagsByResource')['Microsoft.Resources/deploymentScripts'], createObject()))]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_triggerManager', parameters('dataFactoryName'))))]": {}
                        }
                      },
                      "kind": "AzurePowerShell",
                      "properties": {
                        "azPowerShellVersion": "8.0",
                        "retentionInterval": "PT1H",
                        "cleanupPreference": "OnSuccess",
                        "scriptContent": "[variables('$fxv#2')]",
                        "environmentVariables": [
                          {
                            "name": "DataFactorySubscriptionId",
                            "value": "[subscription().id]"
                          },
                          {
                            "name": "DataFactoryResourceGroup",
                            "value": "[resourceGroup().name]"
                          },
                          {
                            "name": "DataFactoryName",
                            "value": "[parameters('dataFactoryName')]"
                          },
                          {
                            "name": "Triggers",
                            "value": "[join(variables('allHubTriggers'), '|')]"
                          },
                          {
                            "name": "Pipelines",
                            "value": "[join(createArray(format('{0}_InitializeHub', variables('safeConfigContainerName'))), '|')]"
                          }
                        ]
                      },
                      "dependsOn": [
                        "dataFactory",
                        "pipeline_InitializeHub",
                        "trigger_DailySchedule",
                        "trigger_ExportManifestAdded",
                        "trigger_IngestionManifestAdded",
                        "trigger_MonthlySchedule",
                        "trigger_SettingsUpdated",
                        "triggerManagerIdentity",
                        "triggerManagerRoleAssignments"
                      ]
                    },
                    "azuretimezones": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "azuretimezones",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.92.45157",
                              "templateHash": "1205334814332312156"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location to use for the managed identity and deployment script to auto-start triggers. Default = (resource group location)."
                              }
                            },
                            "timezoneobject": {
                              "type": "object",
                              "defaultValue": {
                                "australiaeast": "Australian Eastern Standard Time",
                                "australiasoutheast": "Australian Eastern Standard Time",
                                "brazilsouth": "Brasil Standard Time",
                                "canadacentral": "Central Standard Time",
                                "canadaeast": "Eastern Standard Time",
                                "centralindia": "India Standard Time",
                                "centralus": "Central Standard Time",
                                "eastasia": "China Standard Time",
                                "eastus": "Eastern Standard Time",
                                "eastus2": "Eastern Standard Time",
                                "francecentral": "Central European Time",
                                "germanynorth": "Central European Time",
                                "germanywestcentral": "Central European Time",
                                "japaneast": "Japan Standard Time",
                                "japanwest": "Japan Standard Time",
                                "koreacentral": "Korea Standard Time",
                                "koreasouth": "Korea Standard Time",
                                "northcentralus": "Central Standard Time",
                                "northeurope": "Central European Time",
                                "norwayeast": "Central European Time",
                                "norwaywest": "Central European Time",
                                "southcentralus": "Central Standard Time",
                                "southindia": "India Standard Time",
                                "southeastasia": "Singapore Standard Time",
                                "switzerlandnorth": "Central European Time",
                                "switzerlandwest": "Central European Time",
                                "uksouth": "Greenwich Mean Time",
                                "ukwest": "Greenwich Mean Time",
                                "westcentralus": "Central Standard Time",
                                "westeurope": "Central European Time",
                                "westindia": "India Standard Time",
                                "westus": "Pacific Standard Time",
                                "westus2": "Pacific Standard Time"
                              }
                            },
                            "utchrs": {
                              "type": "string",
                              "defaultValue": "[utcNow('hh')]"
                            },
                            "utcmins": {
                              "type": "string",
                              "defaultValue": "[utcNow('mm')]"
                            },
                            "utcsecs": {
                              "type": "string",
                              "defaultValue": "[utcNow('ss')]"
                            }
                          },
                          "variables": {
                            "loc": "[toLower(replace(parameters('location'), ' ', ''))]",
                            "timezone": "[coalesce(tryGet(parameters('timezoneobject'), variables('loc')), 'Universal Coordinated Time')]"
                          },
                          "resources": [],
                          "outputs": {
                            "AzureRegion": {
                              "type": "string",
                              "value": "[parameters('location')]"
                            },
                            "Timezone": {
                              "type": "string",
                              "value": "[variables('timezone')]"
                            },
                            "UtcHours": {
                              "type": "string",
                              "value": "[parameters('utchrs')]"
                            },
                            "UtcMinutes": {
                              "type": "string",
                              "value": "[parameters('utcmins')]"
                            },
                            "UtcSeconds": {
                              "type": "string",
                              "value": "[parameters('utcsecs')]"
                            }
                          }
                        }
                      }
                    },
                    "getStoragePrivateEndpointConnections": {
                      "condition": "[not(parameters('enablePublicAccess'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "GetStoragePrivateEndpointConnections",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.92.45157",
                              "templateHash": "17916993872776998595"
                            }
                          },
                          "parameters": {
                            "privateEndpointConnections": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of private endpoint connections. Pending ones will be approved."
                              }
                            },
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the storage account."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "privateEndpointConnection",
                                "count": "[length(parameters('privateEndpointConnections'))]"
                              },
                              "condition": "[equals(parameters('privateEndpointConnections')[copyIndex()].properties.privateLinkServiceConnectionState.status, 'Pending')]",
                              "type": "Microsoft.Storage/storageAccounts/privateEndpointConnections",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), last(array(split(parameters('privateEndpointConnections')[copyIndex()].id, '/'))))]",
                              "properties": {
                                "privateLinkServiceConnectionState": {
                                  "status": "Approved",
                                  "description": "Approved-by-pipeline",
                                  "actionRequired": "None"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "privateEndpointConnections": {
                              "type": "array",
                              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2023-04-01').privateEndpointConnections]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount",
                        "storageManagedPrivateEndpoint"
                      ]
                    },
                    "approveStoragePrivateEndpointConnections": {
                      "condition": "[not(parameters('enablePublicAccess'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "ApproveStoragePrivateEndpointConnections",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          },
                          "privateEndpointConnections": {
                            "value": "[reference('getStoragePrivateEndpointConnections').outputs.privateEndpointConnections.value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.92.45157",
                              "templateHash": "17916993872776998595"
                            }
                          },
                          "parameters": {
                            "privateEndpointConnections": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of private endpoint connections. Pending ones will be approved."
                              }
                            },
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the storage account."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "privateEndpointConnection",
                                "count": "[length(parameters('privateEndpointConnections'))]"
                              },
                              "condition": "[equals(parameters('privateEndpointConnections')[copyIndex()].properties.privateLinkServiceConnectionState.status, 'Pending')]",
                              "type": "Microsoft.Storage/storageAccounts/privateEndpointConnections",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), last(array(split(parameters('privateEndpointConnections')[copyIndex()].id, '/'))))]",
                              "properties": {
                                "privateLinkServiceConnectionState": {
                                  "status": "Approved",
                                  "description": "Approved-by-pipeline",
                                  "actionRequired": "None"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "privateEndpointConnections": {
                              "type": "array",
                              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2023-04-01').privateEndpointConnections]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "getStoragePrivateEndpointConnections",
                        "storageAccount"
                      ]
                    },
                    "getKeyVaultPrivateEndpointConnections": {
                      "condition": "[not(parameters('enablePublicAccess'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "GetKeyVaultPrivateEndpointConnections",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[parameters('keyVaultName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.92.45157",
                              "templateHash": "4255987524818929757"
                            }
                          },
                          "parameters": {
                            "privateEndpointConnections": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of private endpoint connections. Pending ones will be approved."
                              }
                            },
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the KeyVault."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "privateEndpointConnection",
                                "count": "[length(parameters('privateEndpointConnections'))]"
                              },
                              "condition": "[equals(parameters('privateEndpointConnections')[copyIndex()].properties.privateLinkServiceConnectionState.status, 'Pending')]",
                              "type": "Microsoft.KeyVault/vaults/privateEndpointConnections",
                              "apiVersion": "2023-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), last(array(split(parameters('privateEndpointConnections')[copyIndex()].id, '/'))))]",
                              "properties": {
                                "privateLinkServiceConnectionState": {
                                  "status": "Approved",
                                  "description": "Approved-by-pipeline"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "privateEndpointConnections": {
                              "type": "array",
                              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2023-07-01').privateEndpointConnections]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "keyVault",
                        "keyVaultManagedPrivateEndpoint"
                      ]
                    },
                    "approveKeyVaultPrivateEndpointConnections": {
                      "condition": "[not(parameters('enablePublicAccess'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "ApproveKeyVaultPrivateEndpointConnections",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[parameters('keyVaultName')]"
                          },
                          "privateEndpointConnections": {
                            "value": "[reference('getKeyVaultPrivateEndpointConnections').outputs.privateEndpointConnections.value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.92.45157",
                              "templateHash": "4255987524818929757"
                            }
                          },
                          "parameters": {
                            "privateEndpointConnections": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of private endpoint connections. Pending ones will be approved."
                              }
                            },
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the KeyVault."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "privateEndpointConnection",
                                "count": "[length(parameters('privateEndpointConnections'))]"
                              },
                              "condition": "[equals(parameters('privateEndpointConnections')[copyIndex()].properties.privateLinkServiceConnectionState.status, 'Pending')]",
                              "type": "Microsoft.KeyVault/vaults/privateEndpointConnections",
                              "apiVersion": "2023-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), last(array(split(parameters('privateEndpointConnections')[copyIndex()].id, '/'))))]",
                              "properties": {
                                "privateLinkServiceConnectionState": {
                                  "status": "Approved",
                                  "description": "Approved-by-pipeline"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "privateEndpointConnections": {
                              "type": "array",
                              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2023-07-01').privateEndpointConnections]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "getKeyVaultPrivateEndpointConnections",
                        "keyVault"
                      ]
                    },
                    "getDataExplorerPrivateEndpointConnections": {
                      "condition": "[and(variables('deployDataExplorer'), not(parameters('enablePublicAccess')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "GetDataExplorerPrivateEndpointConnections",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "dataExplorerName": {
                            "value": "[parameters('dataExplorerName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.92.45157",
                              "templateHash": "8791048478917296927"
                            }
                          },
                          "parameters": {
                            "privateEndpointConnections": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of private endpoint connections. Pending ones will be approved."
                              }
                            },
                            "dataExplorerName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the ADX cluster."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "privateEndpointConnection",
                                "count": "[length(parameters('privateEndpointConnections'))]"
                              },
                              "condition": "[equals(parameters('privateEndpointConnections')[copyIndex()].properties.privateLinkServiceConnectionState.status, 'Pending')]",
                              "type": "Microsoft.Kusto/clusters/privateEndpointConnections",
                              "apiVersion": "2023-08-15",
                              "name": "[format('{0}/{1}', parameters('dataExplorerName'), last(array(split(parameters('privateEndpointConnections')[copyIndex()].id, '/'))))]",
                              "properties": {
                                "privateLinkServiceConnectionState": {
                                  "status": "Approved",
                                  "description": "Approved-by-pipeline"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "privateEndpointConnections": {
                              "type": "array",
                              "value": "[reference(resourceId('Microsoft.Kusto/clusters', parameters('dataExplorerName')), '2023-08-15').privateEndpointConnections]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "dataExplorerManagedPrivateEndpoint"
                      ]
                    },
                    "approveDataExplorerPrivateEndpointConnections": {
                      "condition": "[and(variables('deployDataExplorer'), not(parameters('enablePublicAccess')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "ApproveDataExplorerPrivateEndpointConnections",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "dataExplorerName": {
                            "value": "[parameters('dataExplorerName')]"
                          },
                          "privateEndpointConnections": {
                            "value": "[reference('getDataExplorerPrivateEndpointConnections').outputs.privateEndpointConnections.value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.92.45157",
                              "templateHash": "8791048478917296927"
                            }
                          },
                          "parameters": {
                            "privateEndpointConnections": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of private endpoint connections. Pending ones will be approved."
                              }
                            },
                            "dataExplorerName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the ADX cluster."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "privateEndpointConnection",
                                "count": "[length(parameters('privateEndpointConnections'))]"
                              },
                              "condition": "[equals(parameters('privateEndpointConnections')[copyIndex()].properties.privateLinkServiceConnectionState.status, 'Pending')]",
                              "type": "Microsoft.Kusto/clusters/privateEndpointConnections",
                              "apiVersion": "2023-08-15",
                              "name": "[format('{0}/{1}', parameters('dataExplorerName'), last(array(split(parameters('privateEndpointConnections')[copyIndex()].id, '/'))))]",
                              "properties": {
                                "privateLinkServiceConnectionState": {
                                  "status": "Approved",
                                  "description": "Approved-by-pipeline"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "privateEndpointConnections": {
                              "type": "array",
                              "value": "[reference(resourceId('Microsoft.Kusto/clusters', parameters('dataExplorerName')), '2023-08-15').privateEndpointConnections]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "getDataExplorerPrivateEndpointConnections"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The Resource ID of the Data factory."
                      },
                      "value": "[resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The Name of the Azure Data Factory instance."
                      },
                      "value": "[parameters('dataFactoryName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'dataExplorer')]",
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]",
                "[resourceId('Microsoft.Resources/deployments', 'keyVault')]",
                "[resourceId('Microsoft.Resources/deployments', 'storage')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "keyVault",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "hubName": {
                    "value": "[parameters('hubName')]"
                  },
                  "uniqueSuffix": {
                    "value": "[variables('uniqueSuffix')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[variables('resourceTags')]"
                  },
                  "tagsByResource": {
                    "value": "[parameters('tagsByResource')]"
                  },
                  "storageAccountKey": {
                    "value": "[parameters('remoteHubStorageKey')]"
                  },
                  "virtualNetworkId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.vNetId.value]"
                  },
                  "privateEndpointSubnetId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.finopsHubSubnetId.value]"
                  },
                  "accessPolicies": {
                    "value": [
                      {
                        "objectId": "[reference(resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName')), '2018-06-01', 'full').identity.principalId]",
                        "tenantId": "[subscription().tenantId]",
                        "permissions": {
                          "secrets": [
                            "get"
                          ]
                        }
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.31.92.45157",
                      "templateHash": "6255233550446027795"
                    }
                  },
                  "parameters": {
                    "hubName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the hub. Used to ensure unique resource names."
                      }
                    },
                    "uniqueSuffix": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Suffix to add to the KeyVault instance name to ensure uniqueness."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "accessPolicies": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of access policies object."
                      }
                    },
                    "storageAccountKey": {
                      "type": "securestring",
                      "metadata": {
                        "description": "Optional. Create and store a key for a remote storage account."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "premium",
                      "allowedValues": [
                        "premium",
                        "standard"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies the SKU for the vault."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Resource tags."
                      }
                    },
                    "tagsByResource": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to apply to resources based on their resource type. Resource type specific tags will be merged with tags for all resources."
                      }
                    },
                    "virtualNetworkId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the virtual network for private endpoints."
                      }
                    },
                    "privateEndpointSubnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the subnet for private endpoints."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedAccessPolicies",
                        "count": "[length(parameters('accessPolicies'))]",
                        "input": {
                          "applicationId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'applicationId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].applicationId, '')]",
                          "objectId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'objectId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].objectId, '')]",
                          "permissions": "[parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].permissions]",
                          "tenantId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'tenantId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].tenantId, tenant().tenantId)]"
                        }
                      }
                    ],
                    "keyVaultPrefix": "[format('{0}-vault', replace(parameters('hubName'), '_', '-'))]",
                    "keyVaultSuffix": "[format('-{0}', parameters('uniqueSuffix'))]",
                    "keyVaultName": "[replace(format('{0}{1}', take(variables('keyVaultPrefix'), sub(24, length(variables('keyVaultSuffix')))), variables('keyVaultSuffix')), '--', '-')]",
                    "keyVaultSecretName": "[format('{0}-storage-key', toLower(parameters('hubName')))]",
                    "keyVaultPrivateDnsZoneName": "[format('privatelink{0}', replace(environment().suffixes.keyvaultDns, 'vault', 'vaultcore'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2023-02-01",
                      "name": "[variables('keyVaultName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.KeyVault/vaults'), parameters('tagsByResource')['Microsoft.KeyVault/vaults'], createObject()))]",
                      "properties": {
                        "enabledForDeployment": true,
                        "enabledForTemplateDeployment": true,
                        "enabledForDiskEncryption": true,
                        "enableSoftDelete": true,
                        "softDeleteRetentionInDays": 90,
                        "enableRbacAuthorization": false,
                        "createMode": "default",
                        "tenantId": "[subscription().tenantId]",
                        "accessPolicies": "[variables('formattedAccessPolicies')]",
                        "sku": {
                          "name": "[if(startsWith(parameters('location'), 'china'), 'standard', parameters('sku'))]",
                          "family": "A"
                        },
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "Deny"
                        }
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('accessPolicies')))]",
                      "type": "Microsoft.KeyVault/vaults/accessPolicies",
                      "apiVersion": "2023-02-01",
                      "name": "[format('{0}/{1}', variables('keyVaultName'), 'add')]",
                      "properties": {
                        "accessPolicies": "[variables('formattedAccessPolicies')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('storageAccountKey')))]",
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2023-02-01",
                      "name": "[format('{0}/{1}', variables('keyVaultName'), variables('keyVaultSecretName'))]",
                      "properties": {
                        "attributes": {
                          "enabled": true,
                          "exp": 1702648632,
                          "nbf": 10000
                        },
                        "value": "[parameters('storageAccountKey')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2024-06-01",
                      "name": "[variables('keyVaultPrivateDnsZoneName')]",
                      "location": "global",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.KeyVault/privateDnsZones'), parameters('tagsByResource')['Microsoft.KeyVault/privateDnsZones'], createObject()))]",
                      "properties": {}
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', variables('keyVaultPrivateDnsZoneName'), format('{0}-link', replace(variables('keyVaultPrivateDnsZoneName'), '.', '-')))]",
                      "location": "global",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Network/privateDnsZones/virtualNetworkLinks'), parameters('tagsByResource')['Microsoft.Network/privateDnsZones/virtualNetworkLinks'], createObject()))]",
                      "properties": {
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkId')]"
                        },
                        "registrationEnabled": false
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('keyVaultPrivateDnsZoneName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-11-01",
                      "name": "[format('{0}-ep', variables('keyVaultName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(parameters('tags'), if(contains(parameters('tagsByResource'), 'Microsoft.Network/privateEndpoints'), parameters('tagsByResource')['Microsoft.Network/privateEndpoints'], createObject()))]",
                      "properties": {
                        "subnet": {
                          "id": "[parameters('privateEndpointSubnetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "keyVaultLink",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                              "groupIds": [
                                "vault"
                              ]
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-11-01",
                      "name": "[format('{0}/{1}', format('{0}-ep', variables('keyVaultName')), 'keyvault-endpoint-zone')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[variables('keyVaultPrivateDnsZoneName')]",
                            "properties": {
                              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('keyVaultPrivateDnsZoneName'))]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-ep', variables('keyVaultName')))]",
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('keyVaultPrivateDnsZoneName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the key vault."
                      },
                      "value": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the key vault."
                      },
                      "value": "[variables('keyVaultName')]"
                    },
                    "uri": {
                      "type": "string",
                      "metadata": {
                        "description": "The URI of the key vault."
                      },
                      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '2023-02-01').vaultUri]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]",
                "[resourceId('Microsoft.Resources/deployments', 'vnet')]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the deployed hub instance."
              },
              "value": "[parameters('hubName')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure resource location resources were deployed to."
              },
              "value": "[parameters('location')]"
            },
            "dataFactorytName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Data Factory."
              },
              "value": "[variables('dataFactoryName')]"
            },
            "storageAccountId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the storage account created for the hub instance. This must be used when creating the Cost Management export."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.resourceId.value]"
            },
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Name of the storage account created for the hub instance. This must be used when connecting FinOps toolkit Power BI reports to your data."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.name.value]"
            },
            "storageUrlForPowerBI": {
              "type": "string",
              "metadata": {
                "description": "URL to use when connecting custom Power BI reports to your data."
              },
              "value": "[format('https://{0}.dfs.{1}/{2}', reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.name.value, environment().suffixes.storage, reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.ingestionContainer.value)]"
            },
            "clusterId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Data Explorer cluster."
              },
              "value": "[if(not(variables('deployDataExplorer')), '', reference(resourceId('Microsoft.Resources/deployments', 'dataExplorer'), '2022-09-01').outputs.clusterId.value)]"
            },
            "clusterUri": {
              "type": "string",
              "metadata": {
                "description": "The URI of the Data Explorer cluster."
              },
              "value": "[if(not(variables('deployDataExplorer')), '', reference(resourceId('Microsoft.Resources/deployments', 'dataExplorer'), '2022-09-01').outputs.clusterUri.value)]"
            },
            "ingestionDbName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Data Explorer database used for ingesting data."
              },
              "value": "[if(not(variables('deployDataExplorer')), '', reference(resourceId('Microsoft.Resources/deployments', 'dataExplorer'), '2022-09-01').outputs.ingestionDbName.value)]"
            },
            "hubDbName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Data Explorer database used for querying data."
              },
              "value": "[if(not(variables('deployDataExplorer')), '', reference(resourceId('Microsoft.Resources/deployments', 'dataExplorer'), '2022-09-01').outputs.hubDbName.value)]"
            },
            "managedIdentityId": {
              "type": "string",
              "metadata": {
                "description": "Object ID of the Data Factory managed identity. This will be needed when configuring managed exports."
              },
              "value": "[reference(resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName')), '2018-06-01', 'full').identity.principalId]"
            },
            "managedIdentityTenantId": {
              "type": "string",
              "metadata": {
                "description": "Azure AD tenant ID. This will be needed when configuring managed exports."
              },
              "value": "[tenant().tenantId]"
            }
          }
        }
      }
    }
  ],
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the resource group."
      },
      "value": "[parameters('hubName')]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the resources wer deployed to."
      },
      "value": "[parameters('location')]"
    },
    "dataFactorytName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Data Factory."
      },
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hub'), '2022-09-01').outputs.dataFactorytName.value]"
    },
    "storageAccountId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the deployed storage account."
      },
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hub'), '2022-09-01').outputs.storageAccountId.value]"
    },
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Name of the storage account created for the hub instance. This must be used when connecting FinOps toolkit Power BI reports to your data."
      },
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hub'), '2022-09-01').outputs.storageAccountName.value]"
    },
    "storageUrlForPowerBI": {
      "type": "string",
      "metadata": {
        "description": "URL to use when connecting custom Power BI reports to your data."
      },
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hub'), '2022-09-01').outputs.storageUrlForPowerBI.value]"
    },
    "clusterId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the Data Explorer cluster."
      },
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hub'), '2022-09-01').outputs.clusterId.value]"
    },
    "clusterUri": {
      "type": "string",
      "metadata": {
        "description": "The URI of the Data Explorer cluster."
      },
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hub'), '2022-09-01').outputs.clusterUri.value]"
    },
    "ingestionDbName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Data Explorer database used for ingesting data."
      },
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hub'), '2022-09-01').outputs.ingestionDbName.value]"
    },
    "hubDbName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Data Explorer database used for querying data."
      },
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hub'), '2022-09-01').outputs.hubDbName.value]"
    },
    "managedIdentityId": {
      "type": "string",
      "metadata": {
        "description": "Object ID of the Data Factory managed identity. This will be needed when configuring managed exports."
      },
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hub'), '2022-09-01').outputs.managedIdentityId.value]"
    },
    "managedIdentityTenantId": {
      "type": "string",
      "metadata": {
        "description": "Azure AD tenant ID. This will be needed when configuring managed exports."
      },
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hub'), '2022-09-01').outputs.managedIdentityTenantId.value]"
    }
  }
}