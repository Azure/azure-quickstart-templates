{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.17.1.54307",
      "templateHash": "5469889344985572378"
    }
  },
  "parameters": {
    "hubName": {
      "type": "string",
      "metadata": {
        "description": "Optional. Name of the hub. Used to ensure unique resource names. Default: \"finops-hub\"."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Azure location where all resources should be created. See https://aka.ms/azureregions. Default: Same as deployment."
      }
    },
    "storageSku": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "metadata": {
        "description": "Optional. Storage SKU to use. LRS = Lowest cost, ZRS = High availability. Note Standard SKUs are not available for Data Lake gen2 storage. Allowed: Premium_LRS, Premium_ZRS. Default: Premium_LRS."
      },
      "allowedValues": [
        "Premium_LRS",
        "Premium_ZRS"
      ]
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Tags to apply to all resources. We will also add the cm-resource-parent tag for improved cost roll-ups in Cost Management."
      }
    },
    "exportScopes": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. List of scope IDs to create exports for."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "hub",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "hubName": {
            "value": "[parameters('hubName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "storageSku": {
            "value": "[parameters('storageSku')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "exportScopes": {
            "value": "[parameters('exportScopes')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "11232620249191021236"
            }
          },
          "parameters": {
            "hubName": {
              "type": "string",
              "metadata": {
                "description": "Optional. Name of the hub. Used to ensure unique resource names. Default: \"finops-hub\"."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Azure location where all resources should be created. See https://aka.ms/azureregions. Default: (resource group location)."
              }
            },
            "storageSku": {
              "type": "string",
              "defaultValue": "Premium_LRS",
              "metadata": {
                "description": "Optional. Storage SKU to use. LRS = Lowest cost, ZRS = High availability. Note Standard SKUs are not available for Data Lake gen2 storage. Allowed: Premium_LRS, Premium_ZRS. Default: Premium_LRS."
              },
              "allowedValues": [
                "Premium_LRS",
                "Premium_ZRS"
              ]
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to apply to all resources. We will also add the cm-resource-parent tag for improved cost roll-ups in Cost Management."
              }
            },
            "exportScopes": {
              "type": "array",
              "metadata": {
                "description": "Optional. List of scope IDs to create exports for."
              }
            },
            "convertToParquet": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Indicates whether ingested data should be converted to Parquet. Default: true."
              }
            },
            "enableDefaultTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable telemetry to track anonymous module usage trends, monitor for bugs, and improve future releases."
              }
            }
          },
          "variables": {
            "resourceTags": "[union(parameters('tags'), createObject('cm-resource-parent', format('{0}/providers/Microsoft.Cloud/hubs/{1}', resourceGroup().id, parameters('hubName'))))]",
            "uniqueSuffix": "[uniqueString(parameters('hubName'), resourceGroup().id)]",
            "dataFactoryPrefix": "[format('{0}-engine', replace(parameters('hubName'), '_', '-'))]",
            "dataFactorySuffix": "[format('-{0}', variables('uniqueSuffix'))]",
            "dataFactoryName": "[replace(format('{0}{1}', take(variables('dataFactoryPrefix'), sub(63, length(variables('dataFactorySuffix')))), variables('dataFactorySuffix')), '--', '-')]",
            "telemetryId": "00f120b5-2007-6120-0000-40b000000000",
            "finOpsToolkitVersion": "0.0.1"
          },
          "resources": [
            {
              "condition": "[parameters('enableDefaultTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('pid-{0}-{1}', variables('telemetryId'), uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "FinOps toolkit",
                      "version": "[variables('finOpsToolkitVersion')]"
                    }
                  },
                  "resources": []
                }
              }
            },
            {
              "type": "Microsoft.DataFactory/factories",
              "apiVersion": "2018-06-01",
              "name": "[variables('dataFactoryName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": "[union(createObject(), createObject('globalConfigurations', createObject('PipelineBillingEnabled', 'true')))]"
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "storage",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "hubName": {
                    "value": "[parameters('hubName')]"
                  },
                  "uniqueSuffix": {
                    "value": "[variables('uniqueSuffix')]"
                  },
                  "sku": {
                    "value": "[parameters('storageSku')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[variables('resourceTags')]"
                  },
                  "exportScopes": {
                    "value": "[parameters('exportScopes')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "8503976379936439786"
                    }
                  },
                  "parameters": {
                    "hubName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the hub. Used to ensure unique resource names."
                      }
                    },
                    "uniqueSuffix": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Suffix to add to the storage account name to ensure uniqueness."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Azure location where all resources should be created. See https://aka.ms/azureregions. Default: (resource group location)."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "Premium_LRS",
                      "metadata": {
                        "description": "Optional. Storage SKU to use. LRS = Lowest cost, ZRS = High availability. Note Standard SKUs are not available for Data Lake gen2 storage. Allowed: Premium_LRS, Premium_ZRS. Default: Premium_LRS."
                      },
                      "allowedValues": [
                        "Premium_LRS",
                        "Premium_ZRS"
                      ]
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to apply to all resources. We will also add the cm-resource-parent tag for improved cost roll-ups in Cost Management."
                      }
                    },
                    "exportScopes": {
                      "type": "array",
                      "metadata": {
                        "description": "Optional. List of scope IDs to create exports for."
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "# Copyright (c) Microsoft Corporation.\r\n# Licensed under the MIT License.\r\n\r\n$json = [ordered]@{\r\n    '$schema'    = 'https://aka.ms/finops/hubs/settings-schema'\r\n    type         = 'HubInstance'\r\n    version      = '0.0.1'\r\n    learnMore    = 'https://aka.ms/finops/hubs'\r\n    exportScopes = @()\r\n}\r\n\r\n$json.exportScopes = $env:exportScopes.Split('|')\r\n$settingsFile = Join-Path -Path .\\ -ChildPath 'settings.json'\r\n$json | ConvertTo-Json | Out-File $settingsFile\r\n$ctx = New-AzStorageContext -StorageAccountName $env:storageAccountName -UseConnectedAccount\r\nSet-AzStorageBlobContent -Container $env:containerName -Context $ctx -File $settingsFile\r\n",
                    "safeHubName": "[replace(replace(toLower(parameters('hubName')), '-', ''), '_', '')]",
                    "storageAccountSuffix": "[parameters('uniqueSuffix')]",
                    "storageAccountName": "[format('{0}{1}', take(variables('safeHubName'), sub(24, length(variables('storageAccountSuffix')))), variables('storageAccountSuffix'))]",
                    "blobUploadRbacRoles": [
                      "ba92f5b4-2d11-453d-a403-e96b0029c9fe"
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-08-01",
                      "name": "[variables('storageAccountName')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "[parameters('sku')]"
                      },
                      "kind": "BlockBlobStorage",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "supportsHttpsTrafficOnly": true,
                        "isHnsEnabled": true,
                        "minimumTlsVersion": "TLS1_2",
                        "allowBlobPublicAccess": false
                      }
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2021-06-01",
                      "name": "[format('{0}/{1}', variables('storageAccountName'), 'default')]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2021-06-01",
                      "name": "[format('{0}/{1}/{2}', variables('storageAccountName'), 'default', 'config')]",
                      "properties": {
                        "publicAccess": "None",
                        "metadata": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2021-06-01",
                      "name": "[format('{0}/{1}/{2}', variables('storageAccountName'), 'default', 'msexports')]",
                      "properties": {
                        "publicAccess": "None",
                        "metadata": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2021-06-01",
                      "name": "[format('{0}/{1}/{2}', variables('storageAccountName'), 'default', 'ingestion')]",
                      "properties": {
                        "publicAccess": "None",
                        "metadata": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2023-01-31",
                      "name": "[format('{0}_blobManager', variables('storageAccountName'))]",
                      "location": "[parameters('location')]"
                    },
                    {
                      "copy": {
                        "name": "identityRoleAssignments",
                        "count": "[length(variables('blobUploadRbacRoles'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', variables('storageAccountName'))]",
                      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), variables('blobUploadRbacRoles')[copyIndex()], resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_blobManager', variables('storageAccountName'))))]",
                      "properties": {
                        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('blobUploadRbacRoles')[copyIndex()])]",
                        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_blobManager', variables('storageAccountName'))), '2023-01-31').principalId]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_blobManager', variables('storageAccountName')))]",
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "uploadSettings",
                      "kind": "AzurePowerShell",
                      "location": "[parameters('location')]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_blobManager', variables('storageAccountName'))))]": {}
                        }
                      },
                      "properties": {
                        "azPowerShellVersion": "8.0",
                        "retentionInterval": "PT1H",
                        "environmentVariables": [
                          {
                            "name": "exportScopes",
                            "value": "[join(parameters('exportScopes'), '|')]"
                          },
                          {
                            "name": "storageAccountName",
                            "value": "[variables('storageAccountName')]"
                          },
                          {
                            "name": "containerName",
                            "value": "config"
                          }
                        ],
                        "scriptContent": "[variables('$fxv#0')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('storageAccountName'), 'default', 'config')]",
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_blobManager', variables('storageAccountName')))]",
                        "identityRoleAssignments"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the storage account."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the storage account."
                      },
                      "value": "[variables('storageAccountName')]"
                    },
                    "configContainer": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the container used for configuration settings."
                      },
                      "value": "config"
                    },
                    "exportContainer": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the container used for Cost Management exports."
                      },
                      "value": "msexports"
                    },
                    "ingestionContainer": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the container used for normalized data ingestion."
                      },
                      "value": "ingestion"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "dataFactoryResources",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "dataFactoryName": {
                    "value": "[variables('dataFactoryName')]"
                  },
                  "convertToParquet": {
                    "value": "[parameters('convertToParquet')]"
                  },
                  "keyVaultName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'keyVault'), '2022-09-01').outputs.name.value]"
                  },
                  "storageAccountName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.name.value]"
                  },
                  "exportContainerName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.exportContainer.value]"
                  },
                  "ingestionContainerName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.ingestionContainer.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "12715468512837637762"
                    }
                  },
                  "parameters": {
                    "dataFactoryName": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. Name of the hub. Used to ensure unique resource names. Default: \"finops-hub\"."
                      }
                    },
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Azure Key Vault instance."
                      }
                    },
                    "storageAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Azure storage account instance."
                      }
                    },
                    "exportContainerName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the container where Cost Management data is exported."
                      }
                    },
                    "ingestionContainerName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the container where normalized data is ingested."
                      }
                    },
                    "convertToParquet": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Indicates whether ingested data should be converted to Parquet. Default: true."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location to use for the managed identity and deployment script to auto-start triggers. Default = (resource group location)."
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "# Copyright (c) Microsoft Corporation.\r\n# Licensed under the MIT License.\r\n\r\nParam(\r\n    [switch] $Stop\r\n)\r\n\r\n# Init outputs\r\n$DeploymentScriptOutputs = @{}\r\n\r\nif (-not $Stop) {\r\n    Start-Sleep -Seconds 10\r\n}\r\n\r\n# Loop thru triggers\r\n$env:Triggers.Split('|') `\r\n| ForEach-Object {\r\n    $trigger = $_\r\n    if ($Stop) {\r\n        Write-Host \"Stopping trigger $trigger...\" -NoNewline\r\n        $triggerOutput = Stop-AzDataFactoryV2Trigger `\r\n            -ResourceGroupName $env:DataFactoryResourceGroup `\r\n            -DataFactoryName $env:DataFactoryName `\r\n            -Name $trigger `\r\n            -Force `\r\n            -ErrorAction SilentlyContinue # Ignore errors, since the trigger may not exist\r\n    } else {\r\n        Write-Host \"Starting trigger $trigger...\" -NoNewline\r\n        $triggerOutput = Start-AzDataFactoryV2Trigger `\r\n            -ResourceGroupName $env:DataFactoryResourceGroup `\r\n            -DataFactoryName $env:DataFactoryName `\r\n            -Name $trigger `\r\n            -Force\r\n    }\r\n    if ($triggerOutput) { \r\n        Write-Host 'done'\r\n    } else {\r\n        Write-Host 'failed'\r\n    }\r\n    $DeploymentScriptOutputs[$trigger] = $triggerOutput\r\n}\r\n\r\nif ($Stop) {\r\n    Start-Sleep -Seconds 10\r\n}\r\n",
                    "$fxv#1": "# Copyright (c) Microsoft Corporation.\r\n# Licensed under the MIT License.\r\n\r\nParam(\r\n    [switch] $Stop\r\n)\r\n\r\n# Init outputs\r\n$DeploymentScriptOutputs = @{}\r\n\r\nif (-not $Stop) {\r\n    Start-Sleep -Seconds 10\r\n}\r\n\r\n# Loop thru triggers\r\n$env:Triggers.Split('|') `\r\n| ForEach-Object {\r\n    $trigger = $_\r\n    if ($Stop) {\r\n        Write-Host \"Stopping trigger $trigger...\" -NoNewline\r\n        $triggerOutput = Stop-AzDataFactoryV2Trigger `\r\n            -ResourceGroupName $env:DataFactoryResourceGroup `\r\n            -DataFactoryName $env:DataFactoryName `\r\n            -Name $trigger `\r\n            -Force `\r\n            -ErrorAction SilentlyContinue # Ignore errors, since the trigger may not exist\r\n    } else {\r\n        Write-Host \"Starting trigger $trigger...\" -NoNewline\r\n        $triggerOutput = Start-AzDataFactoryV2Trigger `\r\n            -ResourceGroupName $env:DataFactoryResourceGroup `\r\n            -DataFactoryName $env:DataFactoryName `\r\n            -Name $trigger `\r\n            -Force\r\n    }\r\n    if ($triggerOutput) { \r\n        Write-Host 'done'\r\n    } else {\r\n        Write-Host 'failed'\r\n    }\r\n    $DeploymentScriptOutputs[$trigger] = $triggerOutput\r\n}\r\n\r\nif ($Stop) {\r\n    Start-Sleep -Seconds 10\r\n}\r\n",
                    "datasetPropsDelimitedText": {
                      "columnDelimiter": ",",
                      "compressionLevel": "Optimal",
                      "escapeChar": "\"",
                      "firstRowAsHeader": true,
                      "quoteChar": "\""
                    },
                    "datasetPropsCommon": {
                      "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                          "value": "@{dataset().fileName}",
                          "type": "Expression"
                        },
                        "folderPath": {
                          "value": "@{dataset().folderName}",
                          "type": "Expression"
                        }
                      }
                    },
                    "safeExportContainerName": "[replace(format('{0}', parameters('exportContainerName')), '-', '_')]",
                    "safeIngestionContainerName": "[replace(format('{0}', parameters('ingestionContainerName')), '-', '_')]",
                    "extractExportTriggerName": "[parameters('exportContainerName')]",
                    "allHubTriggers": [
                      "[variables('extractExportTriggerName')]"
                    ],
                    "autoStartRbacRoles": [
                      "673868aa-7521-48a0-acc6-0f60742d39f5"
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2023-01-31",
                      "name": "[format('{0}_triggerManager', parameters('dataFactoryName'))]",
                      "location": "[parameters('location')]"
                    },
                    {
                      "copy": {
                        "name": "identityRoleAssignments",
                        "count": "[length(variables('autoStartRbacRoles'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.DataFactory/factories/{0}', parameters('dataFactoryName'))]",
                      "name": "[guid(resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName')), variables('autoStartRbacRoles')[copyIndex()], resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_triggerManager', parameters('dataFactoryName'))))]",
                      "properties": {
                        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('autoStartRbacRoles')[copyIndex()])]",
                        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_triggerManager', parameters('dataFactoryName'))), '2023-01-31').principalId]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_triggerManager', parameters('dataFactoryName')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}_stopHubTriggers', parameters('dataFactoryName'))]",
                      "location": "[parameters('location')]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_triggerManager', parameters('dataFactoryName'))))]": {}
                        }
                      },
                      "kind": "AzurePowerShell",
                      "properties": {
                        "azPowerShellVersion": "8.0",
                        "retentionInterval": "PT1H",
                        "cleanupPreference": "OnSuccess",
                        "scriptContent": "[variables('$fxv#0')]",
                        "arguments": "-Stop",
                        "environmentVariables": [
                          {
                            "name": "DataFactorySubscriptionId",
                            "value": "[subscription().id]"
                          },
                          {
                            "name": "DataFactoryResourceGroup",
                            "value": "[resourceGroup().name]"
                          },
                          {
                            "name": "DataFactoryName",
                            "value": "[parameters('dataFactoryName')]"
                          },
                          {
                            "name": "Triggers",
                            "value": "[join(variables('allHubTriggers'), '|')]"
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_triggerManager', parameters('dataFactoryName')))]",
                        "identityRoleAssignments"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/linkedservices",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), 'keyVault')]",
                      "properties": {
                        "annotations": [],
                        "parameters": {},
                        "type": "AzureKeyVault",
                        "typeProperties": {
                          "baseUrl": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2022-11-01').vaultUri]"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/linkedservices",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), 'storage')]",
                      "properties": {
                        "annotations": [],
                        "parameters": {},
                        "type": "AzureBlobFS",
                        "typeProperties": {
                          "url": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').primaryEndpoints.dfs]",
                          "accountKey": {
                            "type": "AzureKeyVaultSecret",
                            "store": {
                              "referenceName": "keyVault",
                              "type": "LinkedServiceReference"
                            },
                            "secretName": "[parameters('storageAccountName')]"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories/linkedservices', parameters('dataFactoryName'), 'keyVault')]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/datasets",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('safeExportContainerName'))]",
                      "properties": {
                        "annotations": [],
                        "parameters": {
                          "fileName": {
                            "type": "String"
                          },
                          "folderName": {
                            "type": "String"
                          }
                        },
                        "type": "DelimitedText",
                        "typeProperties": "[union(variables('datasetPropsCommon'), variables('datasetPropsDelimitedText'), createObject('compressionCodec', 'none'))]",
                        "linkedServiceName": {
                          "parameters": {},
                          "referenceName": "storage",
                          "type": "LinkedServiceReference"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories/linkedservices', parameters('dataFactoryName'), 'keyVault')]",
                        "[resourceId('Microsoft.DataFactory/factories/linkedservices', parameters('dataFactoryName'), 'storage')]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/datasets",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('safeIngestionContainerName'))]",
                      "properties": {
                        "annotations": [],
                        "parameters": {
                          "fileName": {
                            "type": "String"
                          },
                          "folderName": {
                            "type": "String"
                          }
                        },
                        "type": "[if(parameters('convertToParquet'), 'Parquet', 'DelimitedText')]",
                        "typeProperties": "[union(variables('datasetPropsCommon'), if(parameters('convertToParquet'), createObject(), variables('datasetPropsDelimitedText')), createObject('compressionCodec', 'gzip'))]",
                        "linkedServiceName": {
                          "parameters": {},
                          "referenceName": "storage",
                          "type": "LinkedServiceReference"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories/linkedservices', parameters('dataFactoryName'), 'keyVault')]",
                        "[resourceId('Microsoft.DataFactory/factories/linkedservices', parameters('dataFactoryName'), 'storage')]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/triggers",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), variables('safeExportContainerName'))]",
                      "properties": {
                        "annotations": [],
                        "pipelines": [
                          {
                            "pipelineReference": {
                              "referenceName": "[format('{0}_extract', parameters('exportContainerName'))]",
                              "type": "PipelineReference"
                            },
                            "parameters": {
                              "folderName": "@triggerBody().folderPath",
                              "fileName": "@triggerBody().fileName"
                            }
                          }
                        ],
                        "type": "BlobEventsTrigger",
                        "typeProperties": {
                          "blobPathBeginsWith": "[format('/{0}/blobs/', parameters('exportContainerName'))]",
                          "blobPathEndsWith": ".csv",
                          "ignoreEmptyBlobs": true,
                          "scope": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                          "events": [
                            "Microsoft.Storage.BlobCreated"
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories/pipelines', parameters('dataFactoryName'), format('{0}_extract', variables('safeExportContainerName')))]",
                        "[resourceId('Microsoft.Resources/deploymentScripts', format('{0}_stopHubTriggers', parameters('dataFactoryName')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/pipelines",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), format('{0}_extract', variables('safeExportContainerName')))]",
                      "properties": {
                        "activities": [
                          {
                            "name": "Execute",
                            "type": "ExecutePipeline",
                            "dependsOn": [],
                            "userProperties": [],
                            "typeProperties": {
                              "pipeline": {
                                "referenceName": "[format('{0}_transform', variables('safeExportContainerName'))]",
                                "type": "PipelineReference"
                              },
                              "waitOnCompletion": false,
                              "parameters": {
                                "folderName": {
                                  "value": "@pipeline().parameters.folderName",
                                  "type": "Expression"
                                },
                                "fileName": {
                                  "value": "@pipeline().parameters.fileName",
                                  "type": "Expression"
                                }
                              }
                            }
                          }
                        ],
                        "parameters": {
                          "folderName": {
                            "type": "string"
                          },
                          "fileName": {
                            "type": "string"
                          }
                        },
                        "annotations": []
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories/pipelines', parameters('dataFactoryName'), format('{0}_transform', variables('safeExportContainerName')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/pipelines",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('dataFactoryName'), format('{0}_transform', variables('safeExportContainerName')))]",
                      "properties": {
                        "activities": [
                          {
                            "name": "Wait",
                            "type": "Wait",
                            "dependsOn": [],
                            "userProperties": [],
                            "typeProperties": {
                              "waitTimeInSeconds": 60
                            }
                          },
                          {
                            "name": "Set Scope",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Wait",
                                "dependencyConditions": [
                                  "Completed"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "scope",
                              "value": {
                                "value": "[format('@replace(split(pipeline().parameters.folderName,split(pipeline().parameters.folderName, ''/'')[sub(length(split(pipeline().parameters.folderName, ''/'')), 4)])[0],''{0}'',''{1}'')', parameters('exportContainerName'), parameters('ingestionContainerName'))]",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Set Metric",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Set Scope",
                                "dependencyConditions": [
                                  "Completed"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "metric",
                              "value": {
                                "value": "amortizedcost",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Set Date",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Set Metric",
                                "dependencyConditions": [
                                  "Completed"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "date",
                              "value": {
                                "value": "@split(pipeline().parameters.folderName, '/')[sub(length(split(pipeline().parameters.folderName, '/')), 3)]",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Set Destination File Name",
                            "description": "",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Set Date",
                                "dependencyConditions": [
                                  "Completed"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "destinationFile",
                              "value": {
                                "value": "[format('@replace(pipeline().parameters.fileName, ''.csv'', ''{0}'')', if(parameters('convertToParquet'), '.parquet', '.csv.gz'))]",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Set Destination Folder Name",
                            "type": "SetVariable",
                            "dependsOn": [
                              {
                                "activity": "Set Destination File Name",
                                "dependencyConditions": [
                                  "Completed"
                                ]
                              }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                              "variableName": "destinationFolder",
                              "value": {
                                "value": "@replace(concat(variables('scope'),variables('date'),'/',variables('metric')),'//','/')",
                                "type": "Expression"
                              }
                            }
                          },
                          {
                            "name": "Delete Target",
                            "type": "Delete",
                            "dependsOn": [
                              {
                                "activity": "Set Destination Folder Name",
                                "dependencyConditions": [
                                  "Completed"
                                ]
                              }
                            ],
                            "policy": {
                              "timeout": "0.12:00:00",
                              "retry": 0,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "dataset": {
                                "referenceName": "[variables('safeIngestionContainerName')]",
                                "type": "DatasetReference",
                                "parameters": {
                                  "folderName": {
                                    "value": "@variables('destinationFolder')",
                                    "type": "Expression"
                                  },
                                  "fileName": {
                                    "value": "@variables('destinationFile')",
                                    "type": "Expression"
                                  }
                                }
                              },
                              "enableLogging": false,
                              "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                              }
                            }
                          },
                          {
                            "name": "Convert CSV",
                            "type": "Copy",
                            "dependsOn": [
                              {
                                "activity": "Delete Target",
                                "dependencyConditions": [
                                  "Completed"
                                ]
                              }
                            ],
                            "policy": {
                              "timeout": "0.12:00:00",
                              "retry": 0,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                  "type": "AzureBlobFSReadSettings",
                                  "recursive": true,
                                  "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                  "type": "DelimitedTextReadSettings"
                                }
                              },
                              "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                  "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": "[if(parameters('convertToParquet'), createObject('type', 'ParquetWriteSettings', 'fileExtension', '.parquet'), createObject('type', 'DelimitedTextWriteSettings', 'quoteAllText', true(), 'fileExtension', '.csv.gz'))]"
                              },
                              "enableStaging": false,
                              "parallelCopies": 1,
                              "validateDataConsistency": false
                            },
                            "inputs": [
                              {
                                "referenceName": "[variables('safeExportContainerName')]",
                                "type": "DatasetReference",
                                "parameters": {
                                  "folderName": {
                                    "value": "@pipeline().parameters.folderName",
                                    "type": "Expression"
                                  },
                                  "fileName": {
                                    "value": "@pipeline().parameters.fileName",
                                    "type": "Expression"
                                  }
                                }
                              }
                            ],
                            "outputs": [
                              {
                                "referenceName": "[variables('safeIngestionContainerName')]",
                                "type": "DatasetReference",
                                "parameters": {
                                  "folderName": {
                                    "value": "@variables('destinationFolder')",
                                    "type": "Expression"
                                  },
                                  "fileName": {
                                    "value": "@variables('destinationFile')",
                                    "type": "Expression"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "name": "Delete CSV",
                            "type": "Delete",
                            "dependsOn": [
                              {
                                "activity": "Convert CSV",
                                "dependencyConditions": [
                                  "Succeeded"
                                ]
                              }
                            ],
                            "policy": {
                              "timeout": "0.12:00:00",
                              "retry": 0,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "dataset": {
                                "referenceName": "[variables('safeExportContainerName')]",
                                "type": "DatasetReference",
                                "parameters": {
                                  "folderName": {
                                    "value": "@pipeline().parameters.folderName",
                                    "type": "Expression"
                                  },
                                  "fileName": {
                                    "value": "@pipeline().parameters.fileName",
                                    "type": "Expression"
                                  }
                                }
                              },
                              "enableLogging": false,
                              "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                              }
                            }
                          }
                        ],
                        "parameters": {
                          "fileName": {
                            "type": "string"
                          },
                          "folderName": {
                            "type": "string"
                          }
                        },
                        "variables": {
                          "destinationFile": {
                            "type": "String"
                          },
                          "destinationFolder": {
                            "type": "String"
                          },
                          "scope": {
                            "type": "String"
                          },
                          "date": {
                            "type": "String"
                          },
                          "metric": {
                            "type": "String"
                          }
                        },
                        "annotations": []
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories/datasets', parameters('dataFactoryName'), variables('safeIngestionContainerName'))]",
                        "[resourceId('Microsoft.DataFactory/factories/datasets', parameters('dataFactoryName'), variables('safeExportContainerName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}_startHubTriggers', parameters('dataFactoryName'))]",
                      "location": "[parameters('location')]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_triggerManager', parameters('dataFactoryName'))))]": {}
                        }
                      },
                      "kind": "AzurePowerShell",
                      "properties": {
                        "azPowerShellVersion": "8.0",
                        "retentionInterval": "PT1H",
                        "cleanupPreference": "OnSuccess",
                        "scriptContent": "[variables('$fxv#1')]",
                        "environmentVariables": [
                          {
                            "name": "DataFactorySubscriptionId",
                            "value": "[subscription().id]"
                          },
                          {
                            "name": "DataFactoryResourceGroup",
                            "value": "[resourceGroup().name]"
                          },
                          {
                            "name": "DataFactoryName",
                            "value": "[parameters('dataFactoryName')]"
                          },
                          {
                            "name": "Triggers",
                            "value": "[join(variables('allHubTriggers'), '|')]"
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_triggerManager', parameters('dataFactoryName')))]",
                        "identityRoleAssignments",
                        "[resourceId('Microsoft.DataFactory/factories/triggers', parameters('dataFactoryName'), variables('safeExportContainerName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The Resource ID of the Data factory."
                      },
                      "value": "[resourceId('Microsoft.DataFactory/factories', parameters('dataFactoryName'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The Name of the Azure Data Factory instance."
                      },
                      "value": "[parameters('dataFactoryName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'keyVault')]",
                "[resourceId('Microsoft.Resources/deployments', 'storage')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "keyVault",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "hubName": {
                    "value": "[parameters('hubName')]"
                  },
                  "uniqueSuffix": {
                    "value": "[variables('uniqueSuffix')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[variables('resourceTags')]"
                  },
                  "storageAccountName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.name.value]"
                  },
                  "accessPolicies": {
                    "value": [
                      {
                        "objectId": "[reference(resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName')), '2018-06-01', 'full').identity.principalId]",
                        "tenantId": "[subscription().tenantId]",
                        "permissions": {
                          "secrets": [
                            "get"
                          ]
                        }
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "1559898424852271302"
                    }
                  },
                  "parameters": {
                    "hubName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the hub. Used to ensure unique resource names."
                      }
                    },
                    "uniqueSuffix": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Suffix to add to the KeyVault instance name to ensure uniqueness."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "accessPolicies": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of access policies object."
                      }
                    },
                    "storageAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the storage account to store access keys for."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "premium",
                      "allowedValues": [
                        "premium",
                        "standard"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies the SKU for the vault."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Resource tags."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedAccessPolicies",
                        "count": "[length(parameters('accessPolicies'))]",
                        "input": {
                          "applicationId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'applicationId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].applicationId, '')]",
                          "objectId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'objectId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].objectId, '')]",
                          "permissions": "[parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].permissions]",
                          "tenantId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'tenantId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].tenantId, tenant().tenantId)]"
                        }
                      }
                    ],
                    "keyVaultPrefix": "[format('{0}-vault', replace(parameters('hubName'), '_', '-'))]",
                    "keyVaultSuffix": "[format('-{0}', parameters('uniqueSuffix'))]",
                    "keyVaultName": "[replace(format('{0}{1}', take(variables('keyVaultPrefix'), sub(24, length(variables('keyVaultSuffix')))), variables('keyVaultSuffix')), '--', '-')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2022-11-01",
                      "name": "[variables('keyVaultName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "enabledForDeployment": true,
                        "enabledForTemplateDeployment": true,
                        "enabledForDiskEncryption": true,
                        "enableSoftDelete": true,
                        "softDeleteRetentionInDays": 90,
                        "enableRbacAuthorization": false,
                        "createMode": "default",
                        "tenantId": "[subscription().tenantId]",
                        "accessPolicies": "[variables('formattedAccessPolicies')]",
                        "sku": {
                          "name": "[parameters('sku')]",
                          "family": "A"
                        }
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('accessPolicies')))]",
                      "type": "Microsoft.KeyVault/vaults/accessPolicies",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', variables('keyVaultName'), 'add')]",
                      "properties": {
                        "accessPolicies": "[variables('formattedAccessPolicies')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', variables('keyVaultName'), parameters('storageAccountName'))]",
                      "properties": {
                        "attributes": {
                          "enabled": true,
                          "exp": 1702648632,
                          "nbf": 10000
                        },
                        "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').keys[0].value]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the key vault."
                      },
                      "value": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the key vault."
                      },
                      "value": "[variables('keyVaultName')]"
                    },
                    "uri": {
                      "type": "string",
                      "metadata": {
                        "description": "The URI of the key vault."
                      },
                      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '2022-11-01').vaultUri]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]",
                "[resourceId('Microsoft.Resources/deployments', 'storage')]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the deployed hub instance."
              },
              "value": "[parameters('hubName')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure resource location resources were deployed to."
              },
              "value": "[parameters('location')]"
            },
            "dataFactorytName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Data Factory."
              },
              "value": "[variables('dataFactoryName')]"
            },
            "storageAccountId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the storage account created for the hub instance. This must be used when creating the Cost Management export."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.resourceId.value]"
            },
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Name of the storage account created for the hub instance. This must be used when connecting FinOps toolkit Power BI reports to your data."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.name.value]"
            },
            "storageUrlForPowerBI": {
              "type": "string",
              "metadata": {
                "description": "URL to use when connecting custom Power BI reports to your data."
              },
              "value": "[format('https://{0}.dfs.{1}/{2}', reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.name.value, environment().suffixes.storage, reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.ingestionContainer.value)]"
            }
          }
        }
      }
    }
  ],
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the resource group."
      },
      "value": "[parameters('hubName')]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the resources wer deployed to."
      },
      "value": "[parameters('location')]"
    },
    "dataFactorytName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Data Factory."
      },
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hub'), '2022-09-01').outputs.dataFactorytName.value]"
    },
    "storageAccountId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the deployed storage account."
      },
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hub'), '2022-09-01').outputs.storageAccountId.value]"
    },
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Name of the storage account created for the hub instance. This must be used when connecting FinOps toolkit Power BI reports to your data."
      },
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hub'), '2022-09-01').outputs.storageAccountName.value]"
    },
    "storageUrlForPowerBI": {
      "type": "string",
      "metadata": {
        "description": "URL to use when connecting custom Power BI reports to your data."
      },
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'hub'), '2022-09-01').outputs.storageUrlForPowerBI.value]"
    }
  }
}