{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_B2s",
            "metadata": {
                "description": "Size of virtual machine sizes"
            }
        },
        "remoteAccessUsername": {
            "type": "string",
            "metadata": {
                "description": "Username for remote access"
            }
        },
        "remoteAccessPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for remote access"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Deployment location"
            }
        },
        "sigOverrideParam1": {
            "type": "string",
            "metadata": {
                "description": "Intruder Detection - Signature Overrodes Id 1"
            },
            "defaultValue": "2024897"
        },
        "sigOverrideParam2": {
            "type": "string",
            "metadata": {
                "description": "Intruder Detection - Signature Overrodes Id 2"
            },
            "defaultValue": "2024898"
        }
    },
    "variables": {
        "vnetAddressSpace": "10.0.0.0/16",
        "workerAddressSpace": "10.0.10.0/24",
        "workerPrivateIPAddress": "10.0.10.10",
        "bastionAddressSpace": "10.0.20.0/24",
        "firewallAddressSpace": "10.0.100.0/24",
        "firewallPrivateIPAddress": "10.0.100.4",
        "keyVaultName": "[concat('fw-quick-', uniqueString(subscription().id, resourceGroup().id))]",
        "keyVaultCASecretName": "CACert"
    },
    "resources": [
        {
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "2020-10-01",
            "name": "CreateAndDeployCertificates",
            "location": "[parameters('location')]",
            "kind": "AzurePowerShell",
            "properties": {
                "forceUpdateTag": "2",
                "azPowerShellVersion": "3.0",
                "scriptContent": "# Write the config to file\n$opensslConfig=@'\n[ req ]\ndefault_bits        = 4096\ndistinguished_name  = req_distinguished_name\nstring_mask         = utf8only\ndefault_md          = sha512\n\n[ req_distinguished_name ]\ncountryName                     = Country Name (2 letter code)\nstateOrProvinceName             = State or Province Name\nlocalityName                    = Locality Name\n0.organizationName              = Organization Name\norganizationalUnitName          = Organizational Unit Name\ncommonName                      = Common Name\nemailAddress                    = Email Address\n\n[ rootCA_ext ]\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid:always,issuer\nbasicConstraints = critical, CA:true\nkeyUsage = critical, digitalSignature, cRLSign, keyCertSign\n\n[ interCA_ext ]\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid:always,issuer\nbasicConstraints = critical, CA:true, pathlen:1\nkeyUsage = critical, digitalSignature, cRLSign, keyCertSign\n\n[ server_ext ]\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid:always,issuer\nbasicConstraints = critical, CA:false\nkeyUsage = critical, digitalSignature\nextendedKeyUsage = serverAuth\n'@\n\nSet-Content -Path openssl.cnf -Value $opensslConfig\n\n# Create root CA\nopenssl req -x509 -new -nodes -newkey rsa:4096 -keyout rootCA.key -sha256 -days 3650 -out rootCA.crt -subj '/C=US/ST=US/O=Self Signed/CN=Self Signed Root CA' -config openssl.cnf -extensions rootCA_ext\n\n# Create intermediate CA request\nopenssl req -new -nodes -newkey rsa:4096 -keyout interCA.key -sha256 -out interCA.csr -subj '/C=US/ST=US/O=Self Signed/CN=Self Signed Intermediate CA'\n\n# Sign on the intermediate CA\nopenssl x509 -req -in interCA.csr -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -out interCA.crt -days 3650 -sha256 -extfile openssl.cnf -extensions interCA_ext\n\n# Export the intermediate CA into PFX\nopenssl pkcs12 -export -out interCA.pfx -inkey interCA.key -in interCA.crt -password 'pass:'\n\n# Convert the PFX and public key into base64\n$interCa = [Convert]::ToBase64String((Get-Content -Path interCA.pfx -AsByteStream -Raw))\n$rootCa = [Convert]::ToBase64String((Get-Content -Path rootCA.crt -AsByteStream -Raw))\n\n# Assign outputs\n$DeploymentScriptOutputs = @{}\n$DeploymentScriptOutputs['interca'] = $interCa\n$DeploymentScriptOutputs['rootca'] = $rootCa\n",
                "timeout": "PT5M",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"
            }
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "apiVersion": "2018-11-30",
            "name": "DemoIdentity",
            "location": "[parameters('location')]"
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2019-09-01",
            "name": "[variables('keyVaultName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'DemoIdentity')]"
            ],
            "properties": {
                "enabledForDeployment": false,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": false,
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": [
                    {
                        "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'DemoIdentity'), '2018-11-30').principalId]",
                        "tenantId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'DemoIdentity'), '2018-11-30').tenantId]",
                        "permissions": {
                            "secrets": [
                                "get",
                                "list"
                            ]
                        }
                    }
                ],
                "sku": {
                    "name": "Standard",
                    "family": "A"
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2019-09-01",
            "name": "[concat(variables('keyVaultName'), '/', variables('keyVaultCASecretName'))]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                "[resourceId('Microsoft.Resources/deploymentScripts', 'CreateAndDeployCertificates')]"
            ],
            "properties": {
                "value": "[reference('CreateAndDeployCertificates').outputs.interca]"
            }
        },
        {
            "type": "Microsoft.Network/routeTables",
            "apiVersion": "2020-05-01",
            "name": "WorkerRoute",
            "location": "[parameters('location')]",
            "properties": {
                "routes": [
                    {
                        "name": "WorkerRouteFirewall",
                        "properties": {
                            "addressPrefix": "0.0.0.0/0",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[variables('firewallPrivateIPAddress')]"
                        }
                    }
                ],
                "disableBgpRoutePropagation": false
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2020-07-01",
            "name": "DemoVnet",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/routeTables', 'WorkerRoute')]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('vnetAddressSpace')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "WorkerSubnet",
                        "properties": {
                            "addressPrefix": "[variables('workerAddressSpace')]",
                            "routeTable": {
                                "id": "[resourceId('Microsoft.Network/routeTables', 'WorkerRoute')]"
                            }
                        }
                    },
                    {
                        "name": "AzureBastionSubnet",
                        "properties": {
                            "addressPrefix": "[variables('bastionAddressSpace')]"
                        }
                    },
                    {
                        "name": "AzureFirewallSubnet",
                        "properties": {
                            "addressPrefix": "[variables('firewallAddressSpace')]"
                        }
                    }
                ]
            }            
        },        
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2020-07-01",
            "name": "WorkerNIC",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', 'DemoVnet')]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "WorkerIPConfiguration",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', 'DemoVnet', 'WorkerSubnet')]"
                            },
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[variables('workerPrivateIPAddress')]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2020-06-01",
            "name": "WorkerVM",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', 'WorkerNIC')]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "MicrosoftWindowsDesktop",
                        "offer": "Windows-10",
                        "sku": "20h1-pro",
                        "version": "latest"
                    },
                    "osDisk": {
                        "createOption": "FromImage"
                    }
                },
                "osProfile": {
                    "computerName": "WorkerVM",
                    "adminUsername": "[parameters('remoteAccessUsername')]",
                    "adminPassword": "[parameters('remoteAccessPassword')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', 'WorkerNIC')]"
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2020-06-01",
            "name": "WorkerVM/Bootstrap",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', 'WorkerVM')]",
                "[resourceId('Microsoft.Resources/deploymentScripts', 'CreateAndDeployCertificates')]"
            ],
            "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.7",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "commandToExecute": "[concat('echo ', reference('CreateAndDeployCertificates').outputs.rootca, ' > c:\\root.pem.base64 && powershell \"Set-Content -Path c:\\root.pem -Value ([Text.Encoding]::UTF8.GetString([convert]::FromBase64String((Get-Content -Path c:\\root.pem.base64))))\" && certutil -addstore root c:\\root.pem')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/publicIpAddresses",
            "apiVersion": "2020-07-01",
            "name": "BastionPublicIP",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            }
        },
        {
            "type": "Microsoft.Network/bastionHosts",
            "apiVersion": "2020-07-01",
            "name": "DemoBastion",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', 'DemoVnet')]",
                "[resourceId('Microsoft.Network/publicIpAddresses', 'BastionPublicIP')]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "BastionIpConfiguration",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', 'DemoVnet', 'AzureBastionSubnet')]"
                            },
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIpAddresses', 'BastionPublicIP')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIpAddresses",
            "apiVersion": "2020-07-01",
            "name": "FirewallPublicIP",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            }
        },
        {
            "type": "Microsoft.Network/firewallPolicies",
            "apiVersion": "2020-07-01",
            "name": "DemoFirewallPolicy",
            "location": "[parameters('location')]",
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'DemoIdentity')]": {}
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('keyVaultCASecretName'))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'DemoIdentity')]"
            ],
            "properties": {
                "sku": {
                    "tier": "Premium"
                },
                "transportSecurity": {
                    "certificateAuthority": {
                        "name": "[variables('keyVaultCASecretName')]",
                        "keyVaultSecretId": "[concat(reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '2019-09-01').vaultUri, 'secrets/', variables('keyVaultCASecretName'), '/')]"
                    }
                },
                "intrusionDetection": {
                    "mode": "Alert",
                    "configuration": {
                        "signatureOverrides": [
                            {
                                "id": "[parameters('sigOverrideParam1')]",
                                "mode": "Deny"
                            },
                            {
                                "id": "[parameters('sigOverrideParam2')]",
                                "mode": "Alert"
                            }
                        ],
                        "bypassTrafficSettings": [
                            {
                                "name": "SecretBypass",
                                "protocol": "TCP",
                                "sourceAddresses": [
                                    "*"
                                ],
                                "destinationAddresses": [
                                    "1.1.1.1"
                                ],
                                "destinationPorts": [
                                    "80"
                                ]
                            }
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.Network/firewallPolicies/ruleCollectionGroups",
            "apiVersion": "2020-07-01",
            "name": "DemoFirewallPolicy/PolicyRules",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/firewallPolicies', 'DemoFirewallPolicy')]"
            ],
            "properties": {
                "priority": 200,
                "ruleCollections": [
                    {
                        "name": "AllowWeb",
                        "priority": 101,
                        "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
                        "action": {
                            "type": "Allow"
                        },
                        "rules": [
                            {
                                "ruleType": "ApplicationRule",
                                "name": "AllowAzure",
                                "protocols": [
                                    {
                                        "protocolType": "Https",
                                        "port": 443
                                    }
                                ],
                                "targetFqdns": [
                                    "*azure.com",
                                    "*microsoft.com"
                                ],
                                "sourceAddresses": [
                                    "*"
                                ],
                                "terminateTLS": true
                            },
                            {
                                "ruleType": "ApplicationRule",
                                "name": "AllowNews",
                                "protocols": [
                                    {
                                        "protocolType": "Https",
                                        "port": 443
                                    }
                                ],
                                "webCategories": [
                                    "business",
                                    "webbasedemail"
                                ],
                                "sourceAddresses": [
                                    "*"
                                ],
                                "terminateTLS": true
                            }
                        ]
                    },
                    {
                        "name": "BlockPage",
                        "priority": 100,
                        "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
                        "action": {
                            "type": "Deny"
                        },
                        "rules": [
                            {
                                "ruleType": "ApplicationRule",
                                "name": "BlockAzureEvents",
                                "protocols": [
                                    {
                                        "protocolType": "Https",
                                        "port": 443
                                    }
                                ],
                                "targetUrls": [
                                    "azure.microsoft.com/en-us/community/events",
                                    "azure.microsoft.com/en-us/community/events/*"
                                ],
                                "sourceAddresses": [
                                    "*"
                                ],
                                "terminateTLS": true
                            }
                        ]
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/azureFirewalls",
            "apiVersion": "2020-07-01",
            "name": "DemoFirewall",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', 'DemoVnet')]",
                "[resourceId('Microsoft.Network/publicIpAddresses', 'FirewallPublicIP')]",
                "[resourceId('Microsoft.Network/firewallPolicies', 'DemoFirewallPolicy')]",
                "[resourceId('Microsoft.Network/firewallPolicies/ruleCollectionGroups', 'DemoFirewallPolicy', 'PolicyRules')]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "FirewallIPConfiguration",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', 'DemoVnet', 'AzureFirewallSubnet')]"
                            },
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'FirewallPublicIP')]"
                            }
                        }
                    }
                ],
                "firewallPolicy": {
                    "id": "[resourceId('Microsoft.Network/firewallPolicies', 'DemoFirewallPolicy')]"
                },
                "sku": {
                    "name": "AZFW_VNet",
                    "tier": "Premium"
                }
            }
        }
    ]
}
