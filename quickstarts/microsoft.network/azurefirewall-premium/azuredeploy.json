{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.17.1.54307",
      "templateHash": "18260060405729365013"
    }
  },
  "parameters": {
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_B2s",
      "metadata": {
        "description": "Size of virtual machine sizes"
      }
    },
    "remoteAccessUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for remote access"
      }
    },
    "remoteAccessPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for remote access"
      }
    },
    "OSVersion": {
      "type": "string",
      "defaultValue": "2022-datacenter-azure-edition",
      "allowedValues": [
        "2016-datacenter-gensecond",
        "2016-datacenter-server-core-g2",
        "2016-datacenter-server-core-smalldisk-g2",
        "2016-datacenter-smalldisk-g2",
        "2016-datacenter-with-containers-g2",
        "2016-datacenter-zhcn-g2",
        "2019-datacenter-core-g2",
        "2019-datacenter-core-smalldisk-g2",
        "2019-datacenter-core-with-containers-g2",
        "2019-datacenter-core-with-containers-smalldisk-g2",
        "2019-datacenter-gensecond",
        "2019-datacenter-smalldisk-g2",
        "2019-datacenter-with-containers-g2",
        "2019-datacenter-with-containers-smalldisk-g2",
        "2019-datacenter-zhcn-g2",
        "2022-datacenter-azure-edition",
        "2022-datacenter-azure-edition-core",
        "2022-datacenter-azure-edition-core-smalldisk",
        "2022-datacenter-azure-edition-smalldisk",
        "2022-datacenter-core-g2",
        "2022-datacenter-core-smalldisk-g2",
        "2022-datacenter-g2",
        "2022-datacenter-smalldisk-g2"
      ],
      "metadata": {
        "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version."
      }
    },
    "secureBoot": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Secure Boot setting of the virtual machine."
      }
    },
    "vTPM": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "vTPM setting of the virtual machine."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Deployment location"
      }
    },
    "sigOverrideParam1": {
      "type": "string",
      "defaultValue": "2024897",
      "metadata": {
        "description": "Intruder Detection - Signature Overrodes Id 1"
      }
    },
    "sigOverrideParam2": {
      "type": "string",
      "defaultValue": "2024898",
      "metadata": {
        "description": "Intruder Detection - Signature Overrodes Id 2"
      }
    }
  },
  "variables": {
    "vnetAddressSpace": "10.0.0.0/16",
    "workerAddressSpace": "10.0.10.0/24",
    "workerPrivateIPAddress": "10.0.10.10",
    "bastionAddressSpace": "10.0.20.0/24",
    "firewallAddressSpace": "10.0.100.0/24",
    "firewallPrivateIPAddress": "10.0.100.4",
    "keyVaultName": "[format('fw-quick-{0}', uniqueString(subscription().id, resourceGroup().id))]",
    "keyVaultCASecretName": "CACert",
    "extensionName": "GuestAttestation",
    "extensionPublisher": "Microsoft.Azure.Security.WindowsAttestation",
    "extensionVersion": "1.0",
    "maaTenantName": "GuestAttestation"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "CreateAndDeployCertificates",
      "location": "[parameters('location')]",
      "kind": "AzurePowerShell",
      "properties": {
        "forceUpdateTag": "2",
        "azPowerShellVersion": "3.0",
        "scriptContent": "# Write the config to file\n$opensslConfig=@'\n[ req ]\ndefault_bits        = 4096\ndistinguished_name  = req_distinguished_name\nstring_mask         = utf8only\ndefault_md          = sha512\n\n[ req_distinguished_name ]\ncountryName                     = Country Name (2 letter code)\nstateOrProvinceName             = State or Province Name\nlocalityName                    = Locality Name\n0.organizationName              = Organization Name\norganizationalUnitName          = Organizational Unit Name\ncommonName                      = Common Name\nemailAddress                    = Email Address\n\n[ rootCA_ext ]\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid:always,issuer\nbasicConstraints = critical, CA:true\nkeyUsage = critical, digitalSignature, cRLSign, keyCertSign\n\n[ interCA_ext ]\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid:always,issuer\nbasicConstraints = critical, CA:true, pathlen:1\nkeyUsage = critical, digitalSignature, cRLSign, keyCertSign\n\n[ server_ext ]\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid:always,issuer\nbasicConstraints = critical, CA:false\nkeyUsage = critical, digitalSignature\nextendedKeyUsage = serverAuth\n'@\n\nSet-Content -Path openssl.cnf -Value $opensslConfig\n\n# Create root CA\nopenssl req -x509 -new -nodes -newkey rsa:4096 -keyout rootCA.key -sha256 -days 3650 -out rootCA.crt -subj '/C=US/ST=US/O=Self Signed/CN=Self Signed Root CA' -config openssl.cnf -extensions rootCA_ext\n\n# Create intermediate CA request\nopenssl req -new -nodes -newkey rsa:4096 -keyout interCA.key -sha256 -out interCA.csr -subj '/C=US/ST=US/O=Self Signed/CN=Self Signed Intermediate CA'\n\n# Sign on the intermediate CA\nopenssl x509 -req -in interCA.csr -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -out interCA.crt -days 3650 -sha256 -extfile openssl.cnf -extensions interCA_ext\n\n# Export the intermediate CA into PFX\nopenssl pkcs12 -export -out interCA.pfx -inkey interCA.key -in interCA.crt -password 'pass:'\n\n# Convert the PFX and public key into base64\n$interCa = [Convert]::ToBase64String((Get-Content -Path interCA.pfx -AsByteStream -Raw))\n$rootCa = [Convert]::ToBase64String((Get-Content -Path rootCA.crt -AsByteStream -Raw))\n\n# Assign outputs\n$DeploymentScriptOutputs = @{}\n$DeploymentScriptOutputs['interca'] = $interCa\n$DeploymentScriptOutputs['rootca'] = $rootCa\n",
        "timeout": "PT5M",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "P1D"
      }
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "DemoIdentity",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2019-09-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": false,
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [
          {
            "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'DemoIdentity'), '2018-11-30').principalId]",
            "tenantId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'DemoIdentity'), '2018-11-30').tenantId]",
            "permissions": {
              "secrets": [
                "get",
                "list"
              ]
            }
          }
        ],
        "sku": {
          "name": "standard",
          "family": "A"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'DemoIdentity')]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), variables('keyVaultCASecretName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', 'CreateAndDeployCertificates'), '2020-10-01').outputs.interca]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deploymentScripts', 'CreateAndDeployCertificates')]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/routeTables",
      "apiVersion": "2020-05-01",
      "name": "WorkerRoute",
      "location": "[parameters('location')]",
      "properties": {
        "routes": [
          {
            "name": "WorkerRouteFirewall",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('firewallPrivateIPAddress')]"
            }
          }
        ],
        "disableBgpRoutePropagation": false
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-07-01",
      "name": "DemoVnet",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetAddressSpace')]"
          ]
        },
        "subnets": [
          {
            "name": "WorkerSubnet",
            "properties": {
              "addressPrefix": "[variables('workerAddressSpace')]",
              "routeTable": {
                "id": "[resourceId('Microsoft.Network/routeTables', 'WorkerRoute')]"
              }
            }
          },
          {
            "name": "AzureBastionSubnet",
            "properties": {
              "addressPrefix": "[variables('bastionAddressSpace')]"
            }
          },
          {
            "name": "AzureFirewallSubnet",
            "properties": {
              "addressPrefix": "[variables('firewallAddressSpace')]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/routeTables', 'WorkerRoute')]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-07-01",
      "name": "WorkerNIC",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "WorkerIPConfiguration",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', 'DemoVnet', 'WorkerSubnet')]"
              },
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('workerPrivateIPAddress')]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', 'DemoVnet')]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-03-01",
      "name": "WorkerVM",
      "location": "[parameters('location')]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "[parameters('OSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage"
          }
        },
        "osProfile": {
          "computerName": "WorkerVM",
          "adminUsername": "[parameters('remoteAccessUsername')]",
          "adminPassword": "[parameters('remoteAccessPassword')]"
        },
        "securityProfile": {
          "uefiSettings": {
            "secureBootEnabled": "[parameters('secureBoot')]",
            "vTpmEnabled": "[parameters('vTPM')]"
          },
          "securityType": "TrustedLaunch"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', 'WorkerNIC')]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', 'WorkerNIC')]"
      ]
    },
    {
      "condition": "[and(parameters('vTPM'), parameters('secureBoot'))]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2022-03-01",
      "name": "[format('{0}/{1}', 'WorkerVM', variables('extensionName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "[variables('extensionPublisher')]",
        "type": "[variables('extensionName')]",
        "typeHandlerVersion": "[variables('extensionVersion')]",
        "autoUpgradeMinorVersion": true,
        "enableAutomaticUpgrade": true,
        "settings": {
          "AttestationConfig": {
            "MaaSettings": {
              "maaEndpoint": "",
              "maaTenantName": "[variables('maaTenantName')]"
            },
            "AscSettings": {
              "ascReportingEndpoint": "",
              "ascReportingFrequency": ""
            },
            "useCustomToken": "false",
            "disableAlerts": "false"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', 'WorkerVM')]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', 'WorkerVM', 'Bootstrap')]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.7",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "commandToExecute": "[format('echo {0} > c:\\root.pem.base64 && powershell \"Set-Content -Path c:\\root.pem -Value ([Text.Encoding]::UTF8.GetString([convert]::FromBase64String((Get-Content -Path c:\\root.pem.base64))))\" && certutil -addstore root c:\\root.pem', reference(resourceId('Microsoft.Resources/deploymentScripts', 'CreateAndDeployCertificates'), '2020-10-01').outputs.rootca)]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deploymentScripts', 'CreateAndDeployCertificates')]",
        "[resourceId('Microsoft.Compute/virtualMachines', 'WorkerVM')]"
      ]
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-07-01",
      "name": "BastionPublicIP",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "type": "Microsoft.Network/bastionHosts",
      "apiVersion": "2020-07-01",
      "name": "DemoBastion",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "BastionIpConfiguration",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', 'DemoVnet', 'AzureBastionSubnet')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'BastionPublicIP')]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', 'BastionPublicIP')]",
        "[resourceId('Microsoft.Network/virtualNetworks', 'DemoVnet')]"
      ]
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-07-01",
      "name": "FirewallPublicIP",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "type": "Microsoft.Network/firewallPolicies",
      "apiVersion": "2020-07-01",
      "name": "DemoFirewallPolicy",
      "location": "[parameters('location')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'DemoIdentity'))]": {}
        }
      },
      "properties": {
        "sku": {
          "tier": "Premium"
        },
        "transportSecurity": {
          "certificateAuthority": {
            "name": "[variables('keyVaultCASecretName')]",
            "keyVaultSecretId": "[format('{0}secrets/{1}/', reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '2019-09-01').vaultUri, variables('keyVaultCASecretName'))]"
          }
        },
        "intrusionDetection": {
          "mode": "Alert",
          "configuration": {
            "signatureOverrides": [
              {
                "id": "[parameters('sigOverrideParam1')]",
                "mode": "Deny"
              },
              {
                "id": "[parameters('sigOverrideParam2')]",
                "mode": "Alert"
              }
            ],
            "bypassTrafficSettings": [
              {
                "name": "SecretBypass",
                "protocol": "TCP",
                "sourceAddresses": [
                  "*"
                ],
                "destinationAddresses": [
                  "1.1.1.1"
                ],
                "destinationPorts": [
                  "80"
                ]
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'DemoIdentity')]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('keyVaultCASecretName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/firewallPolicies/ruleCollectionGroups",
      "apiVersion": "2020-07-01",
      "name": "[format('{0}/{1}', 'DemoFirewallPolicy', 'PolicyRules')]",
      "location": "[parameters('location')]",
      "properties": {
        "priority": 200,
        "ruleCollections": [
          {
            "name": "AllowWeb",
            "priority": 101,
            "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
            "action": {
              "type": "Allow"
            },
            "rules": [
              {
                "ruleType": "ApplicationRule",
                "name": "AllowAzure",
                "protocols": [
                  {
                    "protocolType": "Https",
                    "port": 443
                  }
                ],
                "targetFqdns": [
                  "*azure.com",
                  "*microsoft.com"
                ],
                "sourceAddresses": [
                  "*"
                ],
                "terminateTLS": true
              },
              {
                "ruleType": "ApplicationRule",
                "name": "AllowNews",
                "protocols": [
                  {
                    "protocolType": "Https",
                    "port": 443
                  }
                ],
                "webCategories": [
                  "business",
                  "webbasedemail"
                ],
                "sourceAddresses": [
                  "*"
                ],
                "terminateTLS": true
              }
            ]
          },
          {
            "name": "BlockPage",
            "priority": 100,
            "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
            "action": {
              "type": "Deny"
            },
            "rules": [
              {
                "ruleType": "ApplicationRule",
                "name": "BlockAzureEvents",
                "protocols": [
                  {
                    "protocolType": "Https",
                    "port": 443
                  }
                ],
                "targetUrls": [
                  "azure.microsoft.com/en-us/community/events",
                  "azure.microsoft.com/en-us/community/events/*"
                ],
                "sourceAddresses": [
                  "*"
                ],
                "terminateTLS": true
              }
            ]
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/firewallPolicies', 'DemoFirewallPolicy')]"
      ]
    },
    {
      "type": "Microsoft.Network/azureFirewalls",
      "apiVersion": "2020-07-01",
      "name": "DemoFirewall",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "FirewallIPConfiguration",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', 'DemoVnet', 'AzureFirewallSubnet')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'FirewallPublicIP')]"
              }
            }
          }
        ],
        "firewallPolicy": {
          "id": "[resourceId('Microsoft.Network/firewallPolicies', 'DemoFirewallPolicy')]"
        },
        "sku": {
          "name": "AZFW_VNet",
          "tier": "Premium"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/firewallPolicies', 'DemoFirewallPolicy')]",
        "[resourceId('Microsoft.Network/firewallPolicies/ruleCollectionGroups', 'DemoFirewallPolicy', 'PolicyRules')]",
        "[resourceId('Microsoft.Network/virtualNetworks', 'DemoVnet')]",
        "[resourceId('Microsoft.Network/publicIPAddresses', 'FirewallPublicIP')]"
      ]
    }
  ]
}