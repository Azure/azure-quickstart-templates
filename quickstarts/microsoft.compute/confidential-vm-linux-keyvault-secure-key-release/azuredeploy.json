{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.14.85.62628",
      "templateHash": "4701497330889937872"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Required. Specifies the Azure location where the key vault should be created."
      }
    },
    "cvmName": {
      "type": "string",
      "metadata": {
        "description": "Required. Name of the Confidential Virtual Machine."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Required. Admin username of the Virtual Machine."
      }
    },
    "adminPasswordOrKey": {
      "type": "securestring",
      "metadata": {
        "description": "Required. Password or ssh key for the Virtual Machine."
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "password",
        "sshPublicKey"
      ],
      "metadata": {
        "description": "Optional. Type of authentication to use on the Virtual Machine."
      }
    },
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Required. Specifies the name of the key vault."
      }
    },
    "keyNotBefore": {
      "type": "int",
      "defaultValue": "[dateTimeToEpoch(utcNow())]",
      "metadata": {
        "description": "Optional. Not before date for the Key Vault Key in seconds since 1970-01-01T00:00:00Z."
      }
    },
    "keyExpiration": {
      "type": "int",
      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1Y'))]",
      "metadata": {
        "description": "Optional. Expiry date the Key Vault Key in seconds since 1970-01-01T00:00:00Z."
      }
    }
  },
  "variables": {
    "$fxv#0": "I2Nsb3VkLWNvbmZpZwpwYWNrYWdlX3VwZ3JhZGU6IHRydWUKcGFja2FnZXM6CiAgLSBidWlsZC1lc3NlbnRpYWwKICAtIGNtYWtlCiAgLSBnaXQKICAtIGxpYmN1cmw0LW9wZW5zc2wtZGV2CiAgLSBsaWJqc29uY3BwLWRldgogIC0gbGliYm9vc3QtYWxsLWRldgogIC0gbmxvaG1hbm4tanNvbjMtZGV2CiAgLSB1bnppcApydW5jbWQ6CiAgLSBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL0F6dXJlL2NvbmZpZGVudGlhbC1jb21wdXRpbmctY3ZtLWd1ZXN0LWF0dGVzdGF0aW9uLmdpdAogIC0gd2dldCBodHRwczovL3BhY2thZ2VzLm1pY3Jvc29mdC5jb20vcmVwb3MvYXp1cmVjb3JlL3Bvb2wvbWFpbi9hL2F6Z3Vlc3RhdHRlc3RhdGlvbjEvYXpndWVzdGF0dGVzdGF0aW9uMV8xLjAuMl9hbWQ2NC5kZWIgLS1kaXJlY3RvcnktcHJlZml4PS9vcHQKICAtIGRwa2cgLWkgL29wdC9hemd1ZXN0YXR0ZXN0YXRpb24xXzEuMC4yX2FtZDY0LmRlYg==",
    "$fxv#1": "ewogICAgInZlcnNpb24iOiAiMS4wLjAiLAogICAgImFueU9mIjogWwogICAgICAgIHsKICAgICAgICAgICAgImF1dGhvcml0eSI6ICJodHRwczovL3NoYXJlZHdldS53ZXUuYXR0ZXN0LmF6dXJlLm5ldCIsCiAgICAgICAgICAgICJhbGxPZiI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAiY2xhaW0iOiAieC1tcy1pc29sYXRpb24tdGVlLngtbXMtYXR0ZXN0YXRpb24tdHlwZSIsCiAgICAgICAgICAgICAgICAgICAgImVxdWFscyI6ICJzZXZzbnB2bSIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgImNsYWltIjogIngtbXMtaXNvbGF0aW9uLXRlZS54LW1zLWNvbXBsaWFuY2Utc3RhdHVzIiwKICAgICAgICAgICAgICAgICAgICAiZXF1YWxzIjogImF6dXJlLWNvbXBsaWFudC1jdm0iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICB9CiAgICBdCn0="
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "cvm",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPasswordOrKey": {
            "value": "[parameters('adminPasswordOrKey')]"
          },
          "authenticationType": {
            "value": "[parameters('authenticationType')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "vmName": {
            "value": "[parameters('cvmName')]"
          },
          "osImageName": {
            "value": "Ubuntu 20.04 LTS Gen 2"
          },
          "cvmSize": {
            "value": "Standard_DC2as_v5"
          },
          "securityType": {
            "value": "DiskWithVMGuestState"
          },
          "bootDiagnostics": {
            "value": false
          },
          "osDiskType": {
            "value": "Standard_LRS"
          },
          "customData": {
            "value": "[variables('$fxv#0')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.14.85.62628",
              "templateHash": "17886342908535329058"
            }
          },
          "parameters": {
            "vmName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Virtual Machine."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Required. Location of the Virtual Machine."
              }
            },
            "adminUsername": {
              "type": "string",
              "metadata": {
                "description": "Required. Admin username of the Virtual Machine."
              }
            },
            "adminPasswordOrKey": {
              "type": "securestring",
              "metadata": {
                "description": "Required. Password or ssh key for the Virtual Machine."
              }
            },
            "cvmSize": {
              "type": "string",
              "defaultValue": "Standard_DC2as_v5",
              "allowedValues": [
                "Standard_DC2as_v5",
                "Standard_DC2ads_v5",
                "Standard_EC2as_v5",
                "Standard_EC2ads_v5"
              ],
              "metadata": {
                "description": "Optional. Size of the VM."
              }
            },
            "osImageName": {
              "type": "string",
              "defaultValue": "Ubuntu 20.04 LTS Gen 2",
              "allowedValues": [
                "Ubuntu 20.04 LTS Gen 2",
                "Ubuntu 22.04 LTS Gen 2"
              ],
              "metadata": {
                "description": "Optional. OS Image for the Virtual Machine"
              }
            },
            "osDiskType": {
              "type": "string",
              "defaultValue": "Premium_LRS",
              "allowedValues": [
                "Premium_LRS",
                "Standard_LRS",
                "StandardSSD_LRS"
              ],
              "metadata": {
                "description": "Optional. OS disk type of the Virtual Machine."
              }
            },
            "authenticationType": {
              "type": "string",
              "defaultValue": "password",
              "allowedValues": [
                "password",
                "sshPublicKey"
              ],
              "metadata": {
                "description": "Optional. Type of authentication to use on the Virtual Machine."
              }
            },
            "bootDiagnostics": {
              "type": "bool",
              "defaultValue": false,
              "allowedValues": [
                true,
                false
              ],
              "metadata": {
                "description": "Optional. Enable boot diagnostics setting of the Virtual Machine."
              }
            },
            "securityType": {
              "type": "string",
              "defaultValue": "DiskWithVMGuestState",
              "allowedValues": [
                "VMGuestStateOnly",
                "DiskWithVMGuestState"
              ],
              "metadata": {
                "description": "Optional. Specifies the EncryptionType of the managed disk. It is set to DiskWithVMGuestState for encryption of the managed disk along with VMGuestState blob, and VMGuestStateOnly for encryption of just the VMGuestState blob. NOTE: It can be set for only Confidential VMs."
              }
            },
            "maaEndpoint": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Custom Attestation Endpoint to attest to. By default, MAA and ASC endpoints are empty and Azure values are populated based on the location of the VM."
              }
            },
            "customData": {
              "type": "string",
              "metadata": {
                "description": "Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. Note: Do not pass any secrets or passwords in customData property This property cannot be updated after the VM is created. customData is passed to the VM to be saved as a file."
              }
            }
          },
          "variables": {
            "virtualNetworkName": "[format('{0}-vnet', parameters('vmName'))]",
            "subnetName": "[format('{0}-vnet-sn', parameters('vmName'))]",
            "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
            "addressPrefix": "10.0.0.0/16",
            "subnetPrefix": "10.0.0.0/24",
            "extensionName": "GuestAttestation",
            "extensionPublisher": "Microsoft.Azure.Security.LinuxAttestation",
            "extensionVersion": "1.0",
            "maaTenantName": "GuestAttestation",
            "disableAlerts": "false",
            "useAlternateToken": "false",
            "imageList": {
              "Ubuntu 20.04 LTS Gen 2": {
                "publisher": "canonical",
                "offer": "0001-com-ubuntu-confidential-vm-focal",
                "sku": "20_04-lts-cvm",
                "version": "latest"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}-ip', parameters('vmName'))]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Basic"
              },
              "properties": {
                "publicIPAllocationMethod": "Dynamic"
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}-nsg', parameters('vmName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "SSH",
                    "properties": {
                      "priority": 100,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "22"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2022-07-01",
              "name": "[variables('virtualNetworkName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[variables('addressPrefix')]"
                  ]
                },
                "subnets": [
                  {
                    "name": "[variables('subnetName')]",
                    "properties": {
                      "addressPrefix": "[variables('subnetPrefix')]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('vmName')))]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('vmName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}-nic', parameters('vmName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[variables('subnetResourceId')]"
                      },
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-ip', parameters('vmName')))]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-ip', parameters('vmName')))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-11-01",
              "name": "[parameters('vmName')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": "[parameters('bootDiagnostics')]"
                  }
                },
                "hardwareProfile": {
                  "vmSize": "[parameters('cvmSize')]"
                },
                "storageProfile": {
                  "osDisk": {
                    "createOption": "FromImage",
                    "managedDisk": {
                      "storageAccountType": "[parameters('osDiskType')]",
                      "securityProfile": {
                        "securityEncryptionType": "[parameters('securityType')]"
                      }
                    }
                  },
                  "imageReference": "[variables('imageList')[parameters('osImageName')]]"
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', parameters('vmName')))]"
                    }
                  ]
                },
                "osProfile": {
                  "computerName": "[parameters('vmName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPasswordOrKey')]",
                  "customData": "[parameters('customData')]",
                  "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), createObject('disablePasswordAuthentication', 'true', 'ssh', createObject('publicKeys', createArray(createObject('keyData', parameters('adminPasswordOrKey'), 'path', format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername')))))))]"
                },
                "securityProfile": {
                  "uefiSettings": {
                    "secureBootEnabled": true,
                    "vTpmEnabled": true
                  },
                  "securityType": "ConfidentialVM"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', parameters('vmName')))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2022-11-01",
              "name": "[format('{0}/{1}', parameters('vmName'), variables('extensionName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "[variables('extensionPublisher')]",
                "type": "[variables('extensionName')]",
                "typeHandlerVersion": "[variables('extensionVersion')]",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "[parameters('maaEndpoint')]",
                      "maaTenantName": "[variables('maaTenantName')]"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "[substring(parameters('maaEndpoint'), 0, 0)]",
                      "ascReportingFrequency": "[substring(parameters('maaEndpoint'), 0, 0)]"
                    },
                    "useCustomToken": "[variables('useAlternateToken')]",
                    "disableAlerts": "[variables('disableAlerts')]"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            }
          ],
          "outputs": {
            "systemAssignedPrincipalId": {
              "type": "string",
              "value": "[if(contains(reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2022-11-01', 'full').identity, 'principalId'), reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2022-11-01', 'full').identity.principalId, '')]",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "akv",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "objectId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cvm'), '2020-10-01').outputs.systemAssignedPrincipalId.value]"
          },
          "keysPermissions": {
            "value": [
              "release"
            ]
          },
          "keyName": {
            "value": "myskrkey"
          },
          "keyType": {
            "value": "RSA-HSM"
          },
          "keySize": {
            "value": 4096
          },
          "keyExportable": {
            "value": true
          },
          "keyEnabled": {
            "value": true
          },
          "keyOps": {
            "value": [
              "encrypt",
              "decrypt"
            ]
          },
          "keyNotBefore": {
            "value": "[parameters('keyNotBefore')]"
          },
          "keyExpiration": {
            "value": "[parameters('keyExpiration')]"
          },
          "releasePolicyContentType": {
            "value": "application/json; charset=utf-8"
          },
          "releasePolicyData": {
            "value": "[variables('$fxv#1')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.14.85.62628",
              "templateHash": "16181099848548158281"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the name of the key vault."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Required. Specifies the Azure location where the key vault should be created."
              }
            },
            "enabledForDeployment": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
              }
            },
            "enabledForDiskEncryption": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
              }
            },
            "enabledForTemplateDeployment": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
              }
            },
            "tenantId": {
              "type": "string",
              "defaultValue": "[subscription().tenantId]",
              "metadata": {
                "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
              }
            },
            "objectId": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets."
              }
            },
            "keysPermissions": {
              "type": "array",
              "defaultValue": [
                "release"
              ],
              "metadata": {
                "description": "Optional. Specifies the permissions to keys in the vault. Valid values are: all, encrypt, decrypt, wrapKey, unwrapKey, sign, verify, get, list, create, update, import, delete, backup, restore, recover, and purge."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "premium",
              "allowedValues": [
                "premium"
              ],
              "metadata": {
                "description": "Optional. Specifies whether the key vault is a standard vault or a premium vault."
              }
            },
            "keyName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the Key Vault Key that you want to create."
              }
            },
            "keyType": {
              "type": "string",
              "allowedValues": [
                "EC-HSM",
                "RSA-HSM"
              ],
              "metadata": {
                "description": "The type of the Key Vault Key. Must be backed by HSM, for secure key release. For valid values, see JsonWebKeyType."
              }
            },
            "keyExportable": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Specifies whether the key should be exportable, \"true\" is required for secure key release."
              }
            },
            "keyNotBefore": {
              "type": "int",
              "defaultValue": -1,
              "metadata": {
                "description": "Optional. Not before date for the Key Vault Key in seconds since 1970-01-01T00:00:00Z."
              }
            },
            "keyEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Determines whether or not the Key Vault Key is enabled, \"true\" is required for secure key release."
              }
            },
            "keyExpiration": {
              "type": "int",
              "defaultValue": -1,
              "metadata": {
                "description": "Optional. Expiry date for the Key Vault Key in seconds since 1970-01-01T00:00:00Z."
              }
            },
            "curveName": {
              "type": "string",
              "defaultValue": "P-256",
              "allowedValues": [
                "P-256",
                "P-256K",
                "P-384",
                "P-521"
              ],
              "metadata": {
                "description": "Optional. Key Vault Key elliptic curve name. For valid values, see JsonWebKeyCurveName."
              }
            },
            "keySize": {
              "type": "int",
              "defaultValue": -1,
              "metadata": {
                "description": "Optional. The Key Vault Key size in bits. For example: 2048, 3072, or 4096 for RSA."
              }
            },
            "keyOps": {
              "type": "array",
              "defaultValue": [],
              "allowedValues": [
                "decrypt",
                "encrypt",
                "import",
                "sign",
                "unwrapKey",
                "verify",
                "wrapKey"
              ],
              "metadata": {
                "description": "Optional. Specifies the Key Vault Key operations that can be perform on the specific key. String array containing any of: \"decrypt\", \"encrypt\", \"import\", \"release\", \"sign\", \"unwrapKey\", \"verify\", \"wrapKey\""
              }
            },
            "releasePolicyContentType": {
              "type": "string",
              "defaultValue": "application/json; charset=utf-8",
              "metadata": {
                "description": "Optional. Content type and version of Key Vault Key release policy."
              }
            },
            "releasePolicyData": {
              "type": "string",
              "metadata": {
                "description": "Required. Blob encoding the policy rules under which the Key Vault Key can be released. Blob must be base64 encoded."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "properties": {
                "enabledForDeployment": "[parameters('enabledForDeployment')]",
                "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
                "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
                "tenantId": "[parameters('tenantId')]",
                "accessPolicies": [
                  {
                    "objectId": "[parameters('objectId')]",
                    "tenantId": "[parameters('tenantId')]",
                    "permissions": {
                      "keys": "[parameters('keysPermissions')]"
                    }
                  }
                ],
                "sku": {
                  "name": "[parameters('skuName')]",
                  "family": "A"
                },
                "networkAcls": {
                  "defaultAction": "Allow",
                  "bypass": "AzureServices"
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/keys",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('keyName'))]",
              "properties": {
                "kty": "[parameters('keyType')]",
                "attributes": {
                  "exportable": "[parameters('keyExportable')]",
                  "enabled": "[parameters('keyEnabled')]",
                  "nbf": "[if(equals(parameters('keyNotBefore'), -1), null(), parameters('keyNotBefore'))]",
                  "exp": "[if(equals(parameters('keyExpiration'), -1), null(), parameters('keyExpiration'))]"
                },
                "curveName": "[parameters('curveName')]",
                "keySize": "[if(equals(parameters('keySize'), -1), null(), parameters('keySize'))]",
                "keyOps": "[parameters('keyOps')]",
                "release_policy": {
                  "contentType": "[parameters('releasePolicyContentType')]",
                  "data": "[parameters('releasePolicyData')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'cvm')]"
      ]
    }
  ]
}