{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "dev",
      "templateHash": "10859804720469133213"
    }
  },
  "parameters": {
    "sqlLogicalServer": {
      "type": "object",
      "metadata": {
        "description": "SQL Logical server."
      }
    },
    "password": {
      "type": "secureString",
      "metadata": {
        "description": "The SQL Logical Server password."
      }
    },
    "tags": {
      "type": "object"
    }
  },
  "functions": [],
  "variables": {
    "defaultAuditActionsAndGroups": [
      "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP",
      "FAILED_DATABASE_AUTHENTICATION_GROUP",
      "BATCH_COMPLETED_GROUP"
    ],
    "defaultSqlDatabaseProperties": {
      "name": "",
      "status": "",
      "tags": {},
      "skuName": "",
      "tier": "",
      "zoneRedundant": false,
      "collation": "SQL_Latin1_General_CP1_CI_AS",
      "dataMaxSize": 0,
      "hybridBenefit": false,
      "readReplicas": 0,
      "minimumCores": 0,
      "autoPauseDelay": 0,
      "dataEncryption": "Enabled",
      "shortTermBackupRetention": 0,
      "longTermBackup": {
        "enabled": false,
        "weeklyRetention": "P1W",
        "monthlyRetention": "P4W",
        "yearlyRetention": "P52W",
        "weekOfYear": 1
      },
      "azureDefender": {
        "enabled": false,
        "emailAccountAdmins": false,
        "emailAddresses": [],
        "disabledRules": [],
        "vulnerabilityAssessments": {
          "recurringScans": false,
          "storageAccount": {
            "resourceGroupName": "",
            "name": "",
            "containerName": ""
          },
          "emailSubscriptionAdmins": false,
          "emails": []
        }
      },
      "auditActionsAndGroups": [],
      "diagnosticLogsAndMetrics": {
        "name": "",
        "resourceGroupName": "",
        "subscriptionId": "[subscription().subscriptionId]",
        "logs": [],
        "metrics": [],
        "auditLogs": false
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2021-02-01-preview",
      "name": "[parameters('sqlLogicalServer').name]",
      "location": "[resourceGroup().location]",
      "tags": "[parameters('tags')]",
      "identity": {
        "type": "[if(parameters('sqlLogicalServer').systemManagedIdentity, 'SystemAssigned', 'None')]"
      },
      "properties": {
        "administratorLogin": "[parameters('sqlLogicalServer').userName]",
        "administratorLoginPassword": "[parameters('password')]",
        "version": "12.0",
        "minimalTlsVersion": "[parameters('sqlLogicalServer').minimalTlsVersion]",
        "publicNetworkAccess": "[parameters('sqlLogicalServer').publicNetworkAccess]"
      }
    },
    {
      "condition": "[not(empty(parameters('sqlLogicalServer').azureActiveDirectoryAdministrator.objectId))]",
      "type": "Microsoft.Sql/servers/administrators",
      "apiVersion": "2021-02-01-preview",
      "name": "[format('{0}/{1}', parameters('sqlLogicalServer').name, 'activeDirectory')]",
      "properties": {
        "administratorType": "ActiveDirectory",
        "login": "[parameters('sqlLogicalServer').azureActiveDirectoryAdministrator.name]",
        "sid": "[parameters('sqlLogicalServer').azureActiveDirectoryAdministrator.objectId]",
        "tenantId": "[parameters('sqlLogicalServer').azureActiveDirectoryAdministrator.tenantId]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('sqlLogicalServer').name)]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers/securityAlertPolicies",
      "apiVersion": "2021-02-01-preview",
      "name": "[format('{0}/{1}', parameters('sqlLogicalServer').name, 'Default')]",
      "properties": {
        "state": "[if(parameters('sqlLogicalServer').azureDefender.enabled, 'Enabled', 'Disabled')]",
        "emailAddresses": "[parameters('sqlLogicalServer').azureDefender.emailAddresses]",
        "emailAccountAdmins": "[parameters('sqlLogicalServer').azureDefender.emailAccountAdmins]",
        "disabledAlerts": "[parameters('sqlLogicalServer').azureDefender.disabledRules]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('sqlLogicalServer').name)]"
      ]
    },
    {
      "condition": "[and(and(parameters('sqlLogicalServer').azureDefender.enabled, parameters('sqlLogicalServer').azureDefender.vulnerabilityAssessments.recurringScans), not(empty(parameters('sqlLogicalServer').azureDefender.vulnerabilityAssessments.storageAccount.name)))]",
      "type": "Microsoft.Sql/servers/vulnerabilityAssessments",
      "apiVersion": "2021-02-01-preview",
      "name": "[format('{0}/{1}', parameters('sqlLogicalServer').name, 'Default')]",
      "properties": {
        "recurringScans": {
          "isEnabled": "[parameters('sqlLogicalServer').azureDefender.vulnerabilityAssessments.recurringScans]",
          "emailSubscriptionAdmins": "[parameters('sqlLogicalServer').azureDefender.vulnerabilityAssessments.emailSubscriptionAdmins]",
          "emails": "[parameters('sqlLogicalServer').azureDefender.vulnerabilityAssessments.emails]"
        },
        "storageContainerPath": "[if(not(empty(parameters('sqlLogicalServer').azureDefender.vulnerabilityAssessments.storageAccount.name)), format('{0}{1}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('sqlLogicalServer').azureDefender.vulnerabilityAssessments.storageAccount.resourceGroupName), 'Microsoft.Storage/storageAccounts', parameters('sqlLogicalServer').azureDefender.vulnerabilityAssessments.storageAccount.name), '2021-04-01').primaryEndpoints.blob, parameters('sqlLogicalServer').azureDefender.vulnerabilityAssessments.storageAccount.containerName), '')]",
        "storageAccountAccessKey": "[if(not(empty(parameters('sqlLogicalServer').azureDefender.vulnerabilityAssessments.storageAccount.name)), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('sqlLogicalServer').azureDefender.vulnerabilityAssessments.storageAccount.resourceGroupName), 'Microsoft.Storage/storageAccounts', parameters('sqlLogicalServer').azureDefender.vulnerabilityAssessments.storageAccount.name), '2021-04-01').keys[0].value, '')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers/securityAlertPolicies', parameters('sqlLogicalServer').name, 'Default')]",
        "[resourceId('Microsoft.Sql/servers', parameters('sqlLogicalServer').name)]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers/auditingSettings",
      "apiVersion": "2021-02-01-preview",
      "name": "[format('{0}/{1}', parameters('sqlLogicalServer').name, 'Default')]",
      "properties": {
        "state": "[if(parameters('sqlLogicalServer').diagnosticLogsAndMetrics.auditLogs, 'Enabled', 'Disabled')]",
        "auditActionsAndGroups": "[if(not(empty(parameters('sqlLogicalServer').auditActionsAndGroups)), parameters('sqlLogicalServer').auditActionsAndGroups, variables('defaultAuditActionsAndGroups'))]",
        "storageEndpoint": "",
        "storageAccountAccessKey": "",
        "storageAccountSubscriptionId": "00000000-0000-0000-0000-000000000000",
        "retentionDays": 0,
        "isAzureMonitorTargetEnabled": "[parameters('sqlLogicalServer').diagnosticLogsAndMetrics.auditLogs]",
        "isDevopsAuditEnabled": "[parameters('sqlLogicalServer').diagnosticLogsAndMetrics.microsoftSupportOperationsAuditLogs]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('sqlLogicalServer').name)]"
      ]
    },
    {
      "condition": "[and(parameters('sqlLogicalServer').diagnosticLogsAndMetrics.auditLogs, not(empty(parameters('sqlLogicalServer').diagnosticLogsAndMetrics.name)))]",
      "copy": {
        "name": "dummyDeployments",
        "count": "[length(range(0, 5))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "[format('dummyTemplateSqlServer-{0}-{1}', uniqueString(parameters('sqlLogicalServer').name), copyIndex())]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('sqlLogicalServer').name)]"
      ]
    },
    {
      "condition": "[parameters('sqlLogicalServer').diagnosticLogsAndMetrics.auditLogs]",
      "type": "microsoft.insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.Sql/servers/{0}/databases/{1}', parameters('sqlLogicalServer').name, 'master')]",
      "name": "SQLSecurityAuditEvents_3d229c42-c7e7-4c97-9a99-ec0d0d8b86c1",
      "properties": {
        "workspaceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sqlLogicalServer').diagnosticLogsAndMetrics.subscriptionId, parameters('sqlLogicalServer').diagnosticLogsAndMetrics.resourceGroupName), 'Microsoft.OperationalInsights/workspaces', parameters('sqlLogicalServer').diagnosticLogsAndMetrics.name)]",
        "logs": [
          {
            "category": "SQLSecurityAuditEvents",
            "enabled": true
          },
          {
            "category": "DevOpsOperationsAudit",
            "enabled": "[parameters('sqlLogicalServer').diagnosticLogsAndMetrics.microsoftSupportOperationsAuditLogs]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers/auditingSettings', parameters('sqlLogicalServer').name, 'Default')]",
        "dummyDeployments",
        "sqlDatabases",
        "[resourceId('Microsoft.Sql/servers', parameters('sqlLogicalServer').name)]"
      ]
    },
    {
      "condition": "[not(empty(parameters('sqlLogicalServer').diagnosticLogsAndMetrics.name))]",
      "type": "microsoft.insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.Sql/servers/{0}/databases/{1}', parameters('sqlLogicalServer').name, 'master')]",
      "name": "sendLogsAndMetrics",
      "properties": {
        "copy": [
          {
            "name": "logs",
            "count": "[length(parameters('sqlLogicalServer').diagnosticLogsAndMetrics.logs)]",
            "input": {
              "category": "[parameters('sqlLogicalServer').diagnosticLogsAndMetrics.logs[copyIndex('logs')]]",
              "enabled": true
            }
          },
          {
            "name": "metrics",
            "count": "[length(parameters('sqlLogicalServer').diagnosticLogsAndMetrics.metrics)]",
            "input": {
              "category": "[parameters('sqlLogicalServer').diagnosticLogsAndMetrics.metrics[copyIndex('metrics')]]",
              "enabled": true
            }
          }
        ],
        "workspaceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sqlLogicalServer').diagnosticLogsAndMetrics.subscriptionId, parameters('sqlLogicalServer').diagnosticLogsAndMetrics.resourceGroupName), 'Microsoft.OperationalInsights/workspaces', parameters('sqlLogicalServer').diagnosticLogsAndMetrics.name)]"
      },
      "dependsOn": [
        "dummyDeployments",
        "sqlDatabases",
        "[resourceId('Microsoft.Sql/servers', parameters('sqlLogicalServer').name)]"
      ]
    },
    {
      "copy": {
        "name": "sqlFirewallRules",
        "count": "[length(parameters('sqlLogicalServer').firewallRules)]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "[format('sqlFirewallRule-{0}-{1}', uniqueString(parameters('sqlLogicalServer').name), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "sqlFirewallRule": {
            "value": "[parameters('sqlLogicalServer').firewallRules[copyIndex()]]"
          },
          "sqlServerName": {
            "value": "[parameters('sqlLogicalServer').name]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "dev",
              "templateHash": "14005243826429444249"
            }
          },
          "parameters": {
            "sqlFirewallRule": {
              "type": "object",
              "metadata": {
                "description": "Firewall rule"
              }
            },
            "sqlServerName": {
              "type": "string",
              "metadata": {
                "description": "The name of the SQL Logical server."
              }
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2021-02-01-preview",
              "name": "[format('{0}/{1}', parameters('sqlServerName'), parameters('sqlFirewallRule').name)]",
              "properties": {
                "startIpAddress": "[parameters('sqlFirewallRule').startIpAddress]",
                "endIpAddress": "[parameters('sqlFirewallRule').endIpAddress]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('sqlLogicalServer').name)]"
      ]
    },
    {
      "copy": {
        "name": "sqlDatabases",
        "count": "[length(parameters('sqlLogicalServer').databases)]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "[format('sqlDb-{0}-{1}', uniqueString(parameters('sqlLogicalServer').name), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "sqlServerName": {
            "value": "[parameters('sqlLogicalServer').name]"
          },
          "sqlDatabase": {
            "value": "[union(variables('defaultSqlDatabaseProperties'), parameters('sqlLogicalServer').databases[copyIndex()])]"
          },
          "tags": {
            "value": "[union(parameters('tags'), union(variables('defaultSqlDatabaseProperties'), parameters('sqlLogicalServer').databases[copyIndex()]).tags)]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "dev",
              "templateHash": "12560223677407066596"
            }
          },
          "parameters": {
            "sqlServerName": {
              "type": "string",
              "metadata": {
                "description": "The name of the SQL server."
              }
            },
            "sqlDatabase": {
              "type": "object",
              "metadata": {
                "description": "The SQL database parameters object."
              }
            },
            "tags": {
              "type": "object"
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Sql/servers/databases",
              "apiVersion": "2020-02-02-preview",
              "name": "[format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name)]",
              "location": "[resourceGroup().location]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('sqlDatabase').skuName]",
                "tier": "[parameters('sqlDatabase').tier]"
              },
              "properties": {
                "zoneRedundant": "[parameters('sqlDatabase').zoneRedundant]",
                "collation": "[parameters('sqlDatabase').collation]",
                "maxSizeBytes": "[if(equals(parameters('sqlDatabase').dataMaxSize, 0), null(), mul(mul(mul(1024, 1024), 1024), parameters('sqlDatabase').dataMaxSize))]",
                "licenseType": "[if(parameters('sqlDatabase').hybridBenefit, 'BasePrice', 'LicenseIncluded')]",
                "readScale": "[if(equals(parameters('sqlDatabase').readReplicas, 0), 'Disabled', 'Enabled')]",
                "readReplicaCount": "[parameters('sqlDatabase').readReplicas]",
                "minCapacity": "[if(equals(parameters('sqlDatabase').minimumCores, 0), null(), parameters('sqlDatabase').minimumCores)]",
                "autoPauseDelay": "[if(equals(parameters('sqlDatabase').autoPauseDelay, 0), null(), parameters('sqlDatabase').autoPauseDelay)]"
              }
            },
            {
              "type": "Microsoft.Sql/servers/databases/transparentDataEncryption",
              "apiVersion": "2014-04-01",
              "name": "[format('{0}/{1}/{2}', split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[0], split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[1], 'current')]",
              "properties": {
                "status": "[parameters('sqlDatabase').dataEncryption]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[0], split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[1])]"
              ]
            },
            {
              "condition": "[parameters('sqlDatabase').longTermBackup.enabled]",
              "type": "Microsoft.Sql/servers/databases/backupLongTermRetentionPolicies",
              "apiVersion": "2021-02-01-preview",
              "name": "[format('{0}/{1}/{2}', split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[0], split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[1], 'Default')]",
              "properties": {
                "weeklyRetention": "[parameters('sqlDatabase').longTermBackup.weeklyRetention]",
                "monthlyRetention": "[parameters('sqlDatabase').longTermBackup.monthlyRetention]",
                "yearlyRetention": "[parameters('sqlDatabase').longTermBackup.yearlyRetention]",
                "weekOfYear": "[parameters('sqlDatabase').longTermBackup.weekOfYear]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('shortTermBackup-{0}', uniqueString(parameters('sqlServerName'), parameters('sqlDatabase').name)))]",
                "[resourceId('Microsoft.Sql/servers/databases', split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[0], split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[1])]",
                "[resourceId('Microsoft.Sql/servers/databases/transparentDataEncryption', split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[0], split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[1], 'current')]"
              ]
            },
            {
              "condition": "[and(and(parameters('sqlDatabase').azureDefender.enabled, parameters('sqlDatabase').azureDefender.vulnerabilityAssessments.recurringScans), not(empty(parameters('sqlDatabase').azureDefender.vulnerabilityAssessments.storageAccount.name)))]",
              "type": "Microsoft.Sql/servers/databases/vulnerabilityAssessments",
              "apiVersion": "2021-02-01-preview",
              "name": "[format('{0}/{1}/{2}', split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[0], split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[1], 'Default')]",
              "properties": {
                "recurringScans": {
                  "isEnabled": "[parameters('sqlDatabase').azureDefender.vulnerabilityAssessments.recurringScans]",
                  "emailSubscriptionAdmins": "[parameters('sqlDatabase').azureDefender.vulnerabilityAssessments.emailSubscriptionAdmins]",
                  "emails": "[parameters('sqlDatabase').azureDefender.vulnerabilityAssessments.emails]"
                },
                "storageContainerPath": "[if(not(empty(parameters('sqlDatabase').azureDefender.vulnerabilityAssessments.storageAccount.name)), format('{0}{1}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('sqlDatabase').azureDefender.vulnerabilityAssessments.storageAccount.resourceGroupName), 'Microsoft.Storage/storageAccounts', parameters('sqlDatabase').azureDefender.vulnerabilityAssessments.storageAccount.name), '2021-04-01').primaryEndpoints.blob, parameters('sqlDatabase').azureDefender.vulnerabilityAssessments.storageAccount.containerName), '')]",
                "storageAccountAccessKey": "[if(not(empty(parameters('sqlDatabase').azureDefender.vulnerabilityAssessments.storageAccount.name)), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('sqlDatabase').azureDefender.vulnerabilityAssessments.storageAccount.resourceGroupName), 'Microsoft.Storage/storageAccounts', parameters('sqlDatabase').azureDefender.vulnerabilityAssessments.storageAccount.name), '2021-04-01').keys[0].value, '')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('azureDefender-{0}', uniqueString(parameters('sqlServerName'), parameters('sqlDatabase').name)))]",
                "[resourceId('Microsoft.Sql/servers/databases', split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[0], split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[1])]",
                "[resourceId('Microsoft.Sql/servers/databases/transparentDataEncryption', split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[0], split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[1], 'current')]"
              ]
            },
            {
              "condition": "[parameters('sqlDatabase').diagnosticLogsAndMetrics.auditLogs]",
              "type": "microsoft.insights/diagnosticSettings",
              "apiVersion": "2017-05-01-preview",
              "scope": "[format('Microsoft.Sql/servers/{0}/databases/{1}', split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[0], split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[1])]",
              "name": "SQLSecurityAuditEvents_3d229c42-c7e7-4c97-9a99-ec0d0d8b86c1",
              "properties": {
                "workspaceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sqlDatabase').diagnosticLogsAndMetrics.subscriptionId, parameters('sqlDatabase').diagnosticLogsAndMetrics.resourceGroupName), 'Microsoft.OperationalInsights/workspaces', parameters('sqlDatabase').diagnosticLogsAndMetrics.name)]",
                "logs": [
                  {
                    "category": "SQLSecurityAuditEvents",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('auditSettings-{0}', uniqueString(parameters('sqlServerName'), parameters('sqlDatabase').name)))]",
                "[resourceId('Microsoft.Sql/servers/databases', split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[0], split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[1])]",
                "[resourceId('Microsoft.Sql/servers/databases/transparentDataEncryption', split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[0], split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[1], 'current')]"
              ]
            },
            {
              "condition": "[not(empty(parameters('sqlDatabase').diagnosticLogsAndMetrics.name))]",
              "type": "microsoft.insights/diagnosticSettings",
              "apiVersion": "2017-05-01-preview",
              "scope": "[format('Microsoft.Sql/servers/{0}/databases/{1}', split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[0], split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[1])]",
              "name": "sendLogsAndMetrics",
              "properties": {
                "copy": [
                  {
                    "name": "logs",
                    "count": "[length(parameters('sqlDatabase').diagnosticLogsAndMetrics.logs)]",
                    "input": {
                      "category": "[parameters('sqlDatabase').diagnosticLogsAndMetrics.logs[copyIndex('logs')]]",
                      "enabled": true
                    }
                  },
                  {
                    "name": "metrics",
                    "count": "[length(parameters('sqlDatabase').diagnosticLogsAndMetrics.metrics)]",
                    "input": {
                      "category": "[parameters('sqlDatabase').diagnosticLogsAndMetrics.metrics[copyIndex('metrics')]]",
                      "enabled": true
                    }
                  }
                ],
                "workspaceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sqlDatabase').diagnosticLogsAndMetrics.subscriptionId, parameters('sqlDatabase').diagnosticLogsAndMetrics.resourceGroupName), 'Microsoft.OperationalInsights/workspaces', parameters('sqlDatabase').diagnosticLogsAndMetrics.name)]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[0], split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[1])]",
                "[resourceId('Microsoft.Sql/servers/databases/transparentDataEncryption', split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[0], split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[1], 'current')]"
              ]
            },
            {
              "condition": "[not(equals(parameters('sqlDatabase').shortTermBackupRetention, 0))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "[format('shortTermBackup-{0}', uniqueString(parameters('sqlServerName'), parameters('sqlDatabase').name))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "sqlDatabase": {
                    "value": "[parameters('sqlDatabase')]"
                  },
                  "sqlServerName": {
                    "value": "[parameters('sqlServerName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "dev",
                      "templateHash": "13857232367360321477"
                    }
                  },
                  "parameters": {
                    "sqlDatabase": {
                      "type": "object"
                    },
                    "sqlServerName": {
                      "type": "string"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "type": "Microsoft.Sql/servers/databases/backupShortTermRetentionPolicies",
                      "apiVersion": "2021-02-01-preview",
                      "name": "[format('{0}/{1}/Default', parameters('sqlServerName'), parameters('sqlDatabase').name)]",
                      "properties": {
                        "retentionDays": "[parameters('sqlDatabase').shortTermBackupRetention]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[0], split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[1])]",
                "[resourceId('Microsoft.Sql/servers/databases/transparentDataEncryption', split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[0], split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[1], 'current')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "[format('azureDefender-{0}', uniqueString(parameters('sqlServerName'), parameters('sqlDatabase').name))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "sqlDatabase": {
                    "value": "[parameters('sqlDatabase')]"
                  },
                  "sqlServerName": {
                    "value": "[parameters('sqlServerName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "dev",
                      "templateHash": "2829092679645401993"
                    }
                  },
                  "parameters": {
                    "sqlDatabase": {
                      "type": "object"
                    },
                    "sqlServerName": {
                      "type": "string"
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "type": "Microsoft.Sql/servers/databases/securityAlertPolicies",
                      "apiVersion": "2021-02-01-preview",
                      "name": "[format('{0}/{1}/Default', parameters('sqlServerName'), parameters('sqlDatabase').name)]",
                      "properties": {
                        "state": "[if(parameters('sqlDatabase').azureDefender.enabled, 'Enabled', 'Disabled')]",
                        "emailAddresses": "[parameters('sqlDatabase').azureDefender.emailAddresses]",
                        "emailAccountAdmins": "[parameters('sqlDatabase').azureDefender.emailAccountAdmins]",
                        "disabledAlerts": "[parameters('sqlDatabase').azureDefender.disabledRules]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[0], split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[1])]",
                "[resourceId('Microsoft.Sql/servers/databases/transparentDataEncryption', split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[0], split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[1], 'current')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "[format('auditSettings-{0}', uniqueString(parameters('sqlServerName'), parameters('sqlDatabase').name))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "sqlDatabase": {
                    "value": "[parameters('sqlDatabase')]"
                  },
                  "sqlServerName": {
                    "value": "[parameters('sqlServerName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "dev",
                      "templateHash": "5447449594683998530"
                    }
                  },
                  "parameters": {
                    "sqlDatabase": {
                      "type": "object"
                    },
                    "sqlServerName": {
                      "type": "string"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "defaultAuditActionsAndGroups": [
                      "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP",
                      "FAILED_DATABASE_AUTHENTICATION_GROUP",
                      "BATCH_COMPLETED_GROUP"
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Sql/servers/databases/auditingSettings",
                      "apiVersion": "2021-02-01-preview",
                      "name": "[format('{0}/{1}/Default', parameters('sqlServerName'), parameters('sqlDatabase').name)]",
                      "properties": {
                        "state": "[if(parameters('sqlDatabase').diagnosticLogsAndMetrics.auditLogs, 'Enabled', 'Disabled')]",
                        "auditActionsAndGroups": "[if(not(empty(parameters('sqlDatabase').auditActionsAndGroups)), parameters('sqlDatabase').auditActionsAndGroups, variables('defaultAuditActionsAndGroups'))]",
                        "storageEndpoint": "",
                        "storageAccountAccessKey": "",
                        "storageAccountSubscriptionId": "00000000-0000-0000-0000-000000000000",
                        "retentionDays": 0,
                        "isAzureMonitorTargetEnabled": "[parameters('sqlDatabase').diagnosticLogsAndMetrics.auditLogs]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[0], split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[1])]",
                "[resourceId('Microsoft.Sql/servers/databases/transparentDataEncryption', split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[0], split(format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabase').name), '/')[1], 'current')]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('sqlLogicalServer').name)]"
      ]
    }
  ]
}