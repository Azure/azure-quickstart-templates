{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmName": {
      "type": "string",
      "metadata": {
        "description": "name of the vm, will be used as DNS Name for the Public IP used to access the Virtual Machine"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for the Virtual Machine"
      }
    },
    "sshKeyData": {
      "type": "string",
      "metadata": {
        "description": "Please copy the content of your SSH RSA public key and paste it here. You can use \"ssh-keygen -t rsa -b 2048\" to generate your SSH key pairs."
      }
    },
    "environment": {
      "type": "string",
      "allowedValues": [
        "AzureCloud",
        "AzureChinaCloud"
      ],
      "metadata": {
        "description": "Different environments in Azure. Choose AzureCloud for Global Azure, and choose AzureChinaCloud for Mooncake (Azure China Cloud)."
      }
    },
    "tenantID": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36,
      "metadata": {
        "description": "ID of the tenant. See https://github.com/cloudfoundry-incubator/bosh-azure-cpi-release/blob/master/docs/guidance.md"
      }
    },
    "clientID": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36,
      "metadata": {
        "description": "ID of the client. See https://github.com/cloudfoundry-incubator/bosh-azure-cpi-release/blob/master/docs/guidance.md"
      }
    },
    "clientSecret": {
      "type": "securestring",
      "metadata": {
        "description": "secret of the client. See https://github.com/cloudfoundry-incubator/bosh-azure-cpi-release/blob/master/docs/guidance.md"
      }
    },
    "autoDeployBosh": {
      "type": "string",
      "defaultValue": "enabled",
      "allowedValues": [
        "enabled",
        "disabled"
      ],
      "metadata": {
        "description": "The flag allowing to deploy Bosh automatically or not"
      }
    }
  },
  "variables": {
    "apiVersion": "2015-06-15",

    "defaultStorageAccountName": "[concat(uniqueString(resourceGroup().id), 'cfdefaultsa')]",
    "storageAccountType": "Standard_RAGRS",
    "vmStorageAccountContainerName": "vhds",
    "storageid": "[resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccountName'))]",

    "virtualNetworkName": "boshvnet-crp",
    "virtualNetworkAddressSpace": "10.0.0.0/16",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
    "subnetNameForBosh": "Bosh",
    "subnetAddressRangeForBosh": "10.0.0.0/24",
    "subnetRefForBosh": "[concat(variables('vnetID'),'/subnets/', variables('subnetNameForBosh'))]",
    "subnetNameForCloudFoundry": "CloudFoundry",
    "subnetAddressRangeForCloudFoundry": "10.0.16.0/20",
    "subnetNameForDiego": "Diego",
    "subnetAddressRangeForDiego": "10.0.32.0/20",
    "devboxNetworkSecurityGroup": "nsg-devbox",
    "boshNetworkSecurityGroup": "nsg-bosh",
    "cfNetworkSecurityGroup": "nsg-cf",

    "vmSize": "Standard_D1",
    "nicName": "[parameters('vmName')]",
    "devboxPrivateIPAddress": "10.0.0.100",
    "imagePublisher": "Canonical",
    "imageOffer": "UbuntuServer",
    "ubuntuOSVersion": "14.04.3-LTS",
    "sshKeyPath": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",

    "baseUriAzureCloud": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/bosh-setup/",
    "baseUriAzureChinaCloud": "https://cloudfoundry.blob.core.chinacloudapi.cn/",

    "filesToDownloadAzureCloud": [
      "[uri(variables('baseUriAzureCloud'), 'scripts/setup_env')]",
      "[uri(variables('baseUriAzureCloud'), 'scripts/setup_env.py')]",
      "[uri(variables('baseUriAzureCloud'), 'scripts/create_cert.sh')]",
      "[uri(variables('baseUriAzureCloud'), 'scripts/init.sh')]",
      "[uri(variables('baseUriAzureCloud'), 'scripts/deploy_bosh.sh')]",
      "[uri(variables('baseUriAzureCloud'), 'scripts/deploy_cloudfoundry.sh')]",
      "[uri(variables('baseUriAzureCloud'), 'manifests/bosh.yml')]",
      "[uri(variables('baseUriAzureCloud'), 'manifests/single-vm-cf.yml')]",
      "[uri(variables('baseUriAzureCloud'), 'manifests/multiple-vm-cf.yml')]",
      "http://go-cli.s3-website-us-east-1.amazonaws.com/releases/v6.14.1/cf-cli-installer_6.14.1_x86-64.deb"
    ],
    "filesToDownloadAzureChinaCloud": [
      "[uri(variables('baseUriAzureChinaCloud'), 'scripts/setup_env')]",
      "[uri(variables('baseUriAzureChinaCloud'), 'scripts/setup_env.py')]",
      "[uri(variables('baseUriAzureChinaCloud'), 'scripts/create_cert.sh')]",
      "[uri(variables('baseUriAzureChinaCloud'), 'scripts/init.sh')]",
      "[uri(variables('baseUriAzureChinaCloud'), 'scripts/deploy_bosh.sh')]",
      "[uri(variables('baseUriAzureChinaCloud'), 'scripts/deploy_cloudfoundry.sh')]",
      "[uri(variables('baseUriAzureChinaCloud'), 'manifests/bosh.yml')]",
      "[uri(variables('baseUriAzureChinaCloud'), 'manifests/single-vm-cf.yml')]",
      "[uri(variables('baseUriAzureChinaCloud'), 'manifests/multiple-vm-cf.yml')]",
      "[uri(variables('baseUriAzureChinaCloud'), 'cf-cli/cf.deb')]"
    ],
    "filesToDownload": "[variables(concat('filesToDownload', parameters('environment')))]",

    "environmentAzureCloud": {
      "serviceHostBase": "core.windows.net",
      "boshReleaseUrl": "https://bosh.io/d/github.com/cloudfoundry/bosh?v=256.2",
      "boshReleaseSha1": "ff2f4e16e02f66b31c595196052a809100cfd5a8",
      "boshAzureCPIReleaseUrl": "https://bosh.io/d/github.com/cloudfoundry-incubator/bosh-azure-cpi-release?v=12",
      "boshAzureCPIReleaseSha1": "180e44f14812f7dd365c9a13928ca97a192f5d74",
      "stemcellUrl": "https://bosh.io/d/stemcells/bosh-azure-hyperv-ubuntu-trusty-go_agent?v=3232.5",
      "stemcellSha1": "d71b1092f0edc68544f0e1796e75491d0d3678ce",
      "boshInitUrl": "https://s3.amazonaws.com/bosh-init-artifacts/bosh-init-0.0.81-linux-amd64",
      "cfReleaseUrl": "https://bosh.io/d/github.com/cloudfoundry/cf-release?v=231"
    },
    "environmentAzureChinaCloud": {
      "serviceHostBase": "core.chinacloudapi.cn",
      "boshReleaseUrl": "[uri(variables('baseUriAzureChinaCloud'), 'releases/bosh-256.2.tgz')]",
      "boshReleaseSha1": "ff2f4e16e02f66b31c595196052a809100cfd5a8",
      "boshAzureCPIReleaseUrl": "[uri(variables('baseUriAzureChinaCloud'), 'releases/bosh-azure-cpi-release-12.tgz')]",
      "boshAzureCPIReleaseSha1": "180e44f14812f7dd365c9a13928ca97a192f5d74",
      "stemcellUrl": "[uri(variables('baseUriAzureChinaCloud'), 'stemcells/bosh-stemcell-3232.5-azure-hyperv-ubuntu-trusty-go_agent.tgz')]",
      "stemcellSha1": "d71b1092f0edc68544f0e1796e75491d0d3678ce",
      "boshInitUrl": "[uri(variables('baseUriAzureChinaCloud'), 'bosh-init/bosh-init-0.0.81-linux-amd64')]",
      "cfReleaseUrl": "[uri(variables('baseUriAzureChinaCloud'), 'releases/cf-release-231.tgz')]"
    },
    "environment": "[variables(concat('environment', parameters('environment')))]",

    "keepUnreachableVMs": "false"
  },
  "resources": [
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('boshNetworkSecurityGroup')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "ssh",
            "properties": {
              "description": "Allow SSH",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound"
            }
          },
          {
            "name": "bosh-agent",
            "properties": {
              "description": "Allow bosh-agent",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "6868",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 201,
              "direction": "Inbound"
            }
          },
          {
            "name": "bosh-director",
            "properties": {
              "description": "Allow bosh-director",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "25555",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 202,
              "direction": "Inbound"
            }
          },
          {
            "name": "dns",
            "properties": {
              "description": "Allow DNS",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "53",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 203,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('devboxNetworkSecurityGroup')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "ssh",
            "properties": {
              "description": "Allow SSH",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('cfNetworkSecurityGroup')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "cf-https",
            "properties": {
              "description": "Allow cf-https",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound"
            }
          },
          {
            "name": "cf-log",
            "properties": {
              "description": "Allow cf-log",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "4443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 201,
              "direction": "Inbound"
            }
          },
          {
            "name": "cf-http",
            "properties": {
              "description": "Allow cf-http",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 202,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('defaultStorageAccountName')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(parameters('vmName'),'-devbox')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[concat(toLower(parameters('vmName')), '-', uniqueString(resourceGroup().id))]"
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(parameters('vmName'),'-bosh')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "static"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(parameters('vmName'), '-cf')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "static"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('virtualNetworkAddressSpace')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetNameForBosh')]",
            "properties": {
              "addressPrefix": "[variables('subnetAddressRangeForBosh')]"
            }
          },
          {
            "name": "[variables('subnetNameForCloudFoundry')]",
            "properties": {
              "addressPrefix": "[variables('subnetAddressRangeForCloudFoundry')]"
            }
          },
          {
            "name": "[variables('subnetNameForDiego')]",
            "properties": {
              "addressPrefix": "[variables('subnetAddressRangeForDiego')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', concat(parameters('vmName'), '-devbox'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('devboxNetworkSecurityGroup'))]"
      ],
      "properties": {
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('devboxNetworkSecurityGroup'))]"
        },
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('devboxPrivateIPAddress')]",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('vmName'), '-devbox'))]"
              },
              "subnet": {
                "id": "[variables('subnetRefForBosh')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiversion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[parameters('vmName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/',variables('defaultStorageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/',variables('nicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKeyData')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[variables('ubuntuOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://',variables('defaultStorageAccountName'),'.blob.',variables('environment').serviceHostBase,'/',variables('vmStorageAccountContainerName'),'/',parameters('vmName'),'-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('vmName'),'/initdevbox')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.4",
        "settings": {
          "fileUris": "[variables('filesToDownload')]",
          "enableInternalDNSCheck": false,
          "VNET_NAME": "[variables('virtualNetworkName')]",
          "SUBNET_NAME_FOR_BOSH": "[variables('subnetNameForBosh')]",
          "SUBNET_ADDRESS_RANGE_FOR_BOSH": "[variables('subnetAddressRangeForBosh')]",
          "SUBNET_NAME_FOR_CLOUD_FOUNDRY": "[variables('subnetNameForCloudFoundry')]",
          "SUBNET_ADDRESS_RANGE_FOR_CLOUD_FOUNDRY": "[variables('subnetAddressRangeForCloudFoundry')]",
          "CLOUD_FOUNDRY_PUBLIC_IP": "[reference(concat(parameters('vmName'),'-cf')).ipAddress]",
          "BOSH_PUBLIC_IP": "[reference(concat(parameters('vmName'),'-bosh')).ipAddress]",
          "NSG_NAME_FOR_BOSH": "[variables('boshNetworkSecurityGroup')]",
          "NSG_NAME_FOR_CLOUD_FOUNDRY": "[variables('cfNetworkSecurityGroup')]",
          "SUBSCRIPTION_ID": "[subscription().subscriptionId]",
          "RESOURCE_GROUP_NAME": "[resourceGroup().name]",
          "DEFAULT_STORAGE_ACCOUNT_NAME": "[variables('defaultStorageAccountName')]",
          "STORAGE_ACCESS_KEY": "[listKeys(variables('storageid'), variables('apiVersion')).key1]",
          "ADMIN_USER_NAME": "[parameters('adminUserName')]",
          "ENVIRONMENT": "[parameters('environment')]",
          "SERVICE_HOST_BASE": "[variables('environment').serviceHostBase]",
          "BOSH_RELEASE_URL": "[variables('environment').boshReleaseUrl]",
          "BOSH_RELEASE_SHA1": "[variables('environment').boshReleaseSha1]",
          "BOSH_AZURE_CPI_RELEASE_URL": "[variables('environment').boshAzureCPIReleaseUrl]",
          "BOSH_AZURE_CPI_RELEASE_SHA1": "[variables('environment').boshAzureCPIReleaseSha1]",
          "STEMCELL_URL": "[variables('environment').stemcellUrl]",
          "STEMCELL_SHA1": "[variables('environment').stemcellSha1]",
          "CF_RELEASE_URL": "[variables('environment').cfReleaseUrl]",
          "BOSH_INIT_URL": "[variables('environment').boshInitUrl]",
          "KEEP_UNREACHABLE_VMS": "[variables('keepUnreachableVMs')]",
          "AUTO_DEPLOY_BOSH": "[parameters('autoDeployBosh')]"
        },
        "protectedSettings": {
          "commandToExecute": "[concat('./setup_env', ' ', parameters('tenantID'), ' ', parameters('clientID'), ' \"', parameters('clientSecret'), '\"')]"
        }
      }
    }
  ],
  "outputs": {
    "sshDevBox": {
      "type": "string",
      "value": "[concat('ssh ', parameters('adminUsername'), '@', reference(concat('Microsoft.Network/publicIPAddresses/', parameters('vmName'), '-devbox')).dnsSettings.fqdn)]"
    },
    "cloudFoundryIP": {
      "type": "string",
      "value": "[reference(concat(parameters('vmName'),'-cf')).ipAddress]"
    }
  }
}
