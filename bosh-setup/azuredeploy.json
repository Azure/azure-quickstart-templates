{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmName": {
      "type": "string",
      "metadata": {
        "description": "name of the vm, will be used as DNS Name for the Public IP used to access the Virtual Machine"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for the Virtual Machine"
      }
    },
    "sshKeyData": {
      "type": "string",
      "metadata": {
        "description": "Please copy the content of your SSH RSA public key and paste it here. You can use \"ssh-keygen -t rsa -b 2048\" to generate your SSH key pairs."
      }
    },
    "tenantID": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36,
      "metadata": {
        "description": "ID of the tenant. See https://github.com/cloudfoundry-incubator/bosh-azure-cpi-release/blob/master/docs/guidance.md"
      }
    },
    "clientID": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36,
      "metadata": {
        "description": "ID of the client. See https://github.com/cloudfoundry-incubator/bosh-azure-cpi-release/blob/master/docs/guidance.md"
      }
    },
    "clientSecret": {
      "type": "securestring",
      "metadata": {
        "description": "secret of the client. See https://github.com/cloudfoundry-incubator/bosh-azure-cpi-release/blob/master/docs/guidance.md"
      }
    },
    "autoDeployBosh": {
      "type": "string",
      "defaultValue": "enabled",
      "allowedValues": [
        "enabled",
        "disabled"
      ],
      "metadata": {
        "description": "The flag allowing to deploy Bosh automatically or not"
      }
    }
  },
  "variables": {
    "apiVersion": "2015-06-15",
    "location": "[resourceGroup().location]",

    "defaultStorageAccountName": "[concat(uniqueString(resourceGroup().id), 'cfdefaultsa')]",
    "storageAccountType": "Standard_RAGRS",
    "vmStorageAccountContainerName": "vhds",
    "storageid": "[resourceId('Microsoft.Storage/storageAccounts', variables('defaultStorageAccountName'))]",

    "virtualNetworkName": "boshvnet-crp",
    "virtualNetworkAddressSpace": "10.0.0.0/16",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
    "subnetNameForBosh": "Bosh",
    "subnetAddressRangeForBosh": "10.0.0.0/24",
    "subnetRefForBosh": "[concat(variables('vnetID'),'/subnets/', variables('subnetNameForBosh'))]",
    "subnetNameForCloudFoundry": "CloudFoundry",
    "subnetAddressRangeForCloudFoundry": "10.0.16.0/20",

    "vmSize": "Standard_D1",
    "nicName": "[parameters('vmName')]",
    "devboxPrivateIPAddress": "10.0.0.100",
    "imagePublisher": "Canonical",
    "imageOffer": "UbuntuServer",
    "ubuntuOSVersion": "14.04.3-LTS",
    "sshKeyPath": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",

    "baseUri": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/bosh-setup/",

    "environment": "AzureCloud",
    "serviceHostBase": "core.windows.net",
    "keepUnreachableVMs": "false"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('defaultStorageAccountName')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[variables('location')]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(parameters('vmName'),'-devbox')]",
      "location": "[variables('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[concat(toLower(parameters('vmName')), '-', uniqueString(resourceGroup().id))]"
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(parameters('vmName'),'-bosh')]",
      "location": "[variables('location')]",
      "properties": {
        "publicIPAllocationMethod": "static"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(parameters('vmName'), '-cf')]",
      "location": "[variables('location')]",
      "properties": {
        "publicIPAllocationMethod": "static"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[variables('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('virtualNetworkAddressSpace')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetNameForBosh')]",
            "properties": {
              "addressPrefix": "[variables('subnetAddressRangeForBosh')]"
            }
          },
          {
            "name": "[variables('subnetNameForCloudFoundry')]",
            "properties": {
              "addressPrefix": "[variables('subnetAddressRangeForCloudFoundry')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', concat(parameters('vmName'), '-devbox'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('devboxPrivateIPAddress')]",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('vmName'), '-devbox'))]"
              },
              "subnet": {
                "id": "[variables('subnetRefForBosh')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiversion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[parameters('vmName')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/',variables('defaultStorageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/',variables('nicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKeyData')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[variables('ubuntuOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://',variables('defaultStorageAccountName'),'.blob.',variables('serviceHostBase'),'/',variables('vmStorageAccountContainerName'),'/',parameters('vmName'),'-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('vmName'),'/initdevbox')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.4",
        "settings": {
          "fileUris": [
            "[uri(variables('baseUri'), 'scripts/setup_env')]",
            "[uri(variables('baseUri'), 'scripts/setup_env.py')]",
            "[uri(variables('baseUri'), 'scripts/create_cert.sh')]",
            "[uri(variables('baseUri'), 'scripts/init.sh')]",
            "[uri(variables('baseUri'), 'scripts/deploy_bosh.sh')]",
            "[uri(variables('baseUri'), 'scripts/deploy_cloudfoundry.sh')]",
            "[uri(variables('baseUri'), 'manifests/bosh.yml')]",
            "[uri(variables('baseUri'), 'manifests/single-vm-cf.yml')]",
            "[uri(variables('baseUri'), 'manifests/multiple-vm-cf.yml')]"
          ],
          "enableInternalDNSCheck": false
        },
        "protectedSettings": {
          "commandToExecute": "[concat('./setup_env', ' ', '\"VNET_NAME:', variables('virtualNetworkName'), ';SUBNET_NAME_FOR_BOSH:', variables('subnetNameForBosh'), ';SUBNET_ADDRESS_RANGE_FOR_BOSH:', variables('subnetAddressRangeForBosh'), ';SUBNET_NAME_FOR_CLOUD_FOUNDRY:', variables('subnetNameForCloudFoundry'), ';SUBNET_ADDRESS_RANGE_FOR_CLOUD_FOUNDRY:', variables('subnetAddressRangeForCloudFoundry'), ';CLOUD_FOUNDRY_PUBLIC_IP:', reference(concat(parameters('vmName'),'-cf')).ipAddress, ';SUBSCRIPTION_ID:', subscription().subscriptionId, ';DEFAULT_STORAGE_ACCOUNT_NAME:', variables('defaultStorageAccountName'), ';STORAGE_ACCESS_KEY:', listKeys(variables('storageid'), variables('apiVersion')).key1, ';RESOURCE_GROUP_NAME:', resourceGroup().name, ';KEEP_UNREACHABLE_VMS:', variables('keepUnreachableVMs'), '\" ', parameters('tenantID'), ' ', parameters('clientID'), ' \"', parameters('clientSecret'), '\" ', parameters('adminUserName'), ' ', parameters('autoDeployBosh'))]"
        }
      }
    }
  ],
  "outputs": {
    "sshDevBox": {
      "type": "string",
      "value": "[concat('ssh ', parameters('adminUsername'), '@', reference(concat('Microsoft.Network/publicIPAddresses/', parameters('vmName'), '-devbox')).dnsSettings.fqdn)]"
    },
    "cloudFoundryIP": {
      "type": "string",
      "value": "[reference(concat(parameters('vmName'),'-cf')).ipAddress]"
    }
  }
}
