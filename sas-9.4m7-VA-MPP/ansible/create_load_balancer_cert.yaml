---
- hosts: localhost
  vars:
    SSL_WORKING_FOLDER: "/exports/bastion/setup/ssl"
    SSL_CERT_FILE: "{{ SSL_WORKING_FOLDER }}/loadbalancer.crt.pem"
    SSL_KEY_FILE: "{{ SSL_WORKING_FOLDER }}/loadbalancer.key.pem"
    SSL_PFX_FILE: "{{ SSL_WORKING_FOLDER }}/loadbalancer.pfx"
    SSL_HOSTNAME: "sas-viya"
    SSL_SHORT_HOSTNAME: "{{ SSL_HOSTNAME.split('.')[0] }}"
    SSL_PASSWORD_FILE: "{{ SSL_WORKING_FOLDER }}/password.txt"
    SSL_PFX_BASE64: "{{ SSL_WORKING_FOLDER }}/loadbalancer.pfx.b64"
    ARM_CERTIFICATE_FILE: "{{ SSL_WORKING_FOLDER }}/loadbalancer.pfx.json"
    SSL_KEY_PASSWORD: "{{ lookup('password', SSL_PASSWORD_FILE) }}"
    SSL_CA_CERT_FILE: "{{ SSL_WORKING_FOLDER }}/sas_certificate_ca.crt"
    SSL_CA_KEY_FILE: "{{ SSL_WORKING_FOLDER }}/sas_certificate_ca.key"
    SSL_CA_BASE64: "{{ SSL_WORKING_FOLDER }}/sas_certificate_ca.crt.b64"
    ARM_CA_FILE: "{{ SSL_WORKING_FOLDER }}/sas_certificate_ca.crt.b64.txt"
  tasks:

    - name: create local file
      file:
        state: directory
        path: "{{ SSL_WORKING_FOLDER }}"

    - name: create certificate and convert the pem versions over to a PFX file
      shell:
        cmd: |-
          cat > "{{ SSL_WORKING_FOLDER }}/lb_cert_config_file.cfg"<<-EOF
          dir					= .

          [req]
          default_bits = 4096
          prompt = no
          default_md = sha512
          req_extensions = req_ext
          distinguished_name = dn

          [ dn ]
          C=US
          O=Self-Signed Viya Certificate
          OU=SASViya
          CN = {{ SSL_SHORT_HOSTNAME }}

          [ req_ext ]
          subjectAltName = @alt_names

          [ alt_names ]
          DNS.1 = {{ SSL_SHORT_HOSTNAME }}
          DNS.2 = {{ SSL_HOSTNAME }}

          EOF
          cat > "{{ SSL_WORKING_FOLDER }}/mintLBCert.sh"<<-EOF
          openssl req -x509 -newkey rsa:4096 -keyout "{{ SSL_KEY_FILE }}" -out "{{ SSL_CERT_FILE }}" -days 3650 -nodes -config "{{ SSL_WORKING_FOLDER }}/lb_cert_config_file.cfg" -extensions req_ext -passout "file:{{ SSL_PASSWORD_FILE }}"
          EOF
          echo "{{ SSL_KEY_PASSWORD }}" > "{{ SSL_PASSWORD_FILE }}"
          ln -s "{{ SSL_PASSWORD_FILE }}" "{{ SSL_PASSWORD_FILE }}.2.txt"
          chmod +x "{{ SSL_WORKING_FOLDER }}/mintLBCert.sh"
          bash "{{ SSL_WORKING_FOLDER }}/mintLBCert.sh"

          #echo "{{ SSL_KEY_PASSWORD }}" > "{{ SSL_PASSWORD_FILE }}"
          #ln -s "{{ SSL_PASSWORD_FILE }}" "{{ SSL_PASSWORD_FILE }}.2.txt"
          ## Createing the ssl cert key pair
          #openssl req -x509 -newkey rsa:4096 -keyout "{{ SSL_KEY_FILE }}" -out "{{ SSL_CERT_FILE }}" -days 3650 -subj "/CN={{ SSL_SHORT_HOSTNAME }}/subjectAltName={{ SSL_HOSTNAME }}" -sha256 -passout "file:{{ SSL_PASSWORD_FILE }}"
          ## converting the ssl certificate key pair to a micrsoft acceptable document
          openssl pkcs12 -export -in "{{ SSL_CERT_FILE }}" -inkey "{{ SSL_KEY_FILE }}" -out "{{ SSL_PFX_FILE }}" -passin "file:{{ SSL_PASSWORD_FILE }}" -passout "file:{{ SSL_PASSWORD_FILE }}.2.txt"
          # Converting the doc to base64 for web consumption
          cat "{{ SSL_PFX_FILE }}" | base64 -w 0 > "{{ SSL_PFX_BASE64 }}"

          # Creating the CA for the local install
          openssl req -x509 -newkey rsa:2048 -keyout "{{ SSL_CA_KEY_FILE }}" -out "{{ SSL_CA_CERT_FILE }}" -days 3650 -subj "/CN=sasInstallCA" -sha256 -nodes
          # Converting the doc to base64 for web consumption
          cat "{{ SSL_CA_CERT_FILE }}" | base64 -w 0 > "{{ SSL_CA_BASE64 }}"


    - name: load base64 encoded certificate
      set_fact:
        SSL_CERT_ARM_JSON:
          data: "{{ (lookup('file', SSL_PFX_BASE64)) }}"
          password: "{{ SSL_KEY_PASSWORD }}"
        SSL_CA_ARM_JSON:
          name: "SASInstallCA.crt"
          properties:
            data: "{{ lookup('file', SSL_CA_BASE64 ) }}"
          type: "Microsoft.Network/applicationGateways/authenticationCertificates"

    - name: outputting everything to the certificate file (part1 because we only get 4096 char of output)
      blockinfile:
        marker: "#DATA#"
        path: "{{ ARM_CERTIFICATE_FILE }}.1"
        block: >-
          {{ ('' ~ (SSL_CERT_ARM_JSON ) ).replace("{u'", "{'").replace(" u'", " '")[0:4000] }}
        create: yes
    - name: outputting everything to the certificate file (part2 because we only get 4096 char of output)
      blockinfile:
        marker: "#DATA#"
        path: "{{ ARM_CERTIFICATE_FILE }}.2"
        block: >-
          {{ ('' ~ (SSL_CERT_ARM_JSON)).replace("{u'", "{'").replace(" u'", " '")[4000:] }}
        create: yes
    - name: outputting the crt file with the data markers
      blockinfile:
        marker: "#DATA#"
        path: "{{ ARM_CA_FILE }}"
        block: >-
          {{ lookup('file', SSL_CA_BASE64 ) }}
        create: yes
