---
- name:  define the folders on the servcies box that will be used for a mirror download
  set_fact:
    ORCHESTRATION_MIRROR_MANAGER: "/tmp/mirrormgr"
    ORCHESTRATION_DIRECTORY: "/tmp"
- name: mirror creation block
  block:
  - name: Preexisting mirror
    block:
    - name: set mirror usage to true
      set_fact:
        USE_MIRROR: "True"
        MIRROR_IS_ZIP: "False"
        MIRROR_IS_AZURE_BLOB_FOLDER: "False"

    - name: Archive mirror
      block:
      - name: set that mirror is zip
        set_fact:
          MIRROR_IS_ZIP: "True"
      - name: get archive_name
        set_fact:
          ARCHIVE_NAME: "archive.{{ DEPLOYMENT_MIRROR.split('?')[0].split('.')[-1]}}"

      - name: set archive path
        set_fact:
          FULL_ARCHIVE_PATH: "/mnt/resource/{{ ARCHIVE_NAME }}"
          LOCAL_ARCHIVE_UNZIP_PATH: "/mnt/resource/mirror_temp"

      - name: download the archive
        get_url:
          url: "{{ DEPLOYMENT_MIRROR }}"
          dest: "{{ FULL_ARCHIVE_PATH }}"
        async: 5400

      - name: create storage folder
        file:
          path: "{{ MIRROR_DIR }}"
          state: directory

      - name: "Unpack the mirror files from compressed archive"
        unarchive:
          remote_src: yes
          src: "{{ FULL_ARCHIVE_PATH }}"
          dest: "{{ MIRROR_DIR }}"
          extra_opts:
          - '--no-acls'
          - '--no-same-owner'
          - '--no-same-permissions'
          - '--no-selinux'
          - '--no-xattrs'
          - '--touch'

      when: "DEPLOYMENT_MIRROR.split('?')[0].endswith('.zip') or DEPLOYMENT_MIRROR.split('?')[0].endswith('.tgz') or DEPLOYMENT_MIRROR.split('?')[0].endswith('.tar.gz') or DEPLOYMENT_MIRROR.split('?')[0].endswith('.tar.bz2') or DEPLOYMENT_MIRROR.split('?')[0].endswith('.tbz') or DEPLOYMENT_MIRROR.split('?')[0].endswith('.tar.xz') or DEPLOYMENT_MIRROR.split('?')[0].endswith('.txz')"

    - name: azure blob folder with sas key
      block:
      - name: set that we are using azure blob folder mirror
        set_fact:
          MIRROR_IS_AZURE_BLOB_FOLDER: "TRUE"

      - name: install azcopy prerequisites
        yum:
          name: "{{ item }}"
          state: "latest"
        with_items:
        - libunwind
        - icu

      - name: create install folder
        file:
          state: directory
          path: /tmp/azcopy_install

      - name: downloading azcopy from microsoft
        become: yes
        unarchive:
          remote_src: yes
          src: "https://aka.ms/downloadazcopylinux64"
          dest: "/tmp/azcopy_install"
        register: task_result
        until: task_result | success
        retries: 10
        delay: 5

      - name: install azcopy
        become: yes
        shell: >-
          /tmp/azcopy_install/install.sh

      - name: remove install directory
        file:
          state: absent
          path: /tmp/azcopy_install

      - name: create storage folder
        file:
          path: "{{ MIRROR_DIR }}"
          state: directory

      - name: use azsync to download mirror
        become: yes
        shell: >-
          timeout -k 7140 7000 azcopy --source "{{ DEPLOYMENT_MIRROR }}" --destination "{{ MIRROR_DIR }}" --recursive
        async: 7200
        failed_when: false
        register: copy_ret1

      - name: use azsync to download mirror retry 1
        become: yes
        shell: |-
          timeout -k 7140 7000 azcopy --source "{{ DEPLOYMENT_MIRROR }}" --destination "{{ MIRROR_DIR }}" --recursive<<END
          yes
          END
        async: 7200
        failed_when: false
        register: copy_ret2
        when: "copy_ret1.rc != 0"

      - name: use azsync to download mirror retry 2
        become: yes
        shell: |-
          timeout -k 7140 7000 azcopy --source "{{ DEPLOYMENT_MIRROR }}" --destination "{{ MIRROR_DIR }}" --recursive<<END
          yes
          END
        async: 7200
        failed_when: false
        register: copy_ret3
        when: "copy_ret1.rc != 0 and copy_ret2.rc != 0"

      - name: use azsync to download mirror retry 3
        become: yes
        shell: |-
          timeout -k 7140 7000 azcopy --source "{{ DEPLOYMENT_MIRROR }}" --destination "{{ MIRROR_DIR }}" --recursive<<END
          yes
          END
        async: 7200
        failed_when: false
        register: copy_ret4
        when: "copy_ret1.rc != 0 and copy_ret2.rc != 0 and copy_ret3.rc != 0"

      - name: use azsync to download mirror retry 4
        become: yes
        shell: |-
          timeout -k 7140 7000 azcopy --source "{{ DEPLOYMENT_MIRROR }}" --destination "{{ MIRROR_DIR }}" --recursive<<END
          yes
          END
        async: 7200
        register: copy_ret5
        when: "copy_ret1.rc != 0 and copy_ret2.rc != 0 and copy_ret3.rc != 0 and copy_ret4.rc != 0"

      when: "DEPLOYMENT_MIRROR.split('?')[0].endswith('/') and 'blob.core.windows.net' in DEPLOYMENT_MIRROR  and not MIRROR_IS_ZIP"

    - fail:
        msg: "Supplied Mirror must be an archive of file type zip, .tar.gz, .tar.bz2, or .tar.xz; or an azure blob storage folder with sas key"
      when: "not (MIRROR_IS_ZIP or MIRROR_IS_AZURE_BLOB_FOLDER)"
    when: "DEPLOYMENT_MIRROR != ''"

  - name: Mirror needing downloading from sas (only works 3.4 and above, otherwise will be done as part of install).
    block:
    - name: create orchestration directory on download box (services)
      shell: >-
        mkdir -p "{{ ORCHESTRATION_DIRECTORY }}"

    - set_fact:
        LICENSE_TEMP_LOCATION: "{{ ORCHESTRATION_DIRECTORY }}/license.zip"

    - name: Copy license file to the orchestration download directory
      copy:
        src: "{{ TEMPORARY_SOE_FILE }}"
        dest: "{{ LICENSE_TEMP_LOCATION }}"

    - name: "Download and unpack the mirror manager files for sas from: {{ MIRROR_MANAGER_URL }}"
      unarchive:
        remote_src: yes
        src: "{{ MIRROR_MANAGER_URL }}"
        dest: "/tmp"
        creates: "{{ ORCHESTRATION_MIRROR_MANAGER }}"
      register: task_result
      until: task_result | success
      retries: 10
      delay: 5

    - name: create storage folder
      file:
        path: "{{ MIRROR_DIR }}"
        state: directory

    - name: "Use mirror manager to download a copy of the mirror from sas"
      shell: |-
        set -o pipefail
        timeout -k 3660 3600 "{{ ORCHESTRATION_MIRROR_MANAGER }}" mirror --deployment-data "{{ LICENSE_TEMP_LOCATION }}" --latest --platform x64-redhat-linux-6 --workers 20 -p "{{ MIRROR_DIR }}" -d 2>&1 | tee -a /tmp/viya_mirror_download.log
      retries: 5
      delay: 10
      register: result
      until: result | success


    when: "USE_MIRROR and DEPLOYMENT_MIRROR == ''"

