---
# tasks file for getLocalVIRK

- name: set facts if possible
  set_fact:
    ORCHESTRATION_URL: "{{ SAS[SAS_LICENSE.viya_version].ORCHESTRATION_URL }}"
    VIRK_COMMIT: "{{ SAS[SAS_LICENSE.viya_version].VIRK_COMMIT }}"
    MIRROR_MANAGER_URL: "{{ SAS[SAS_LICENSE.viya_version].MIRROR_MANAGER_URL }}"
    ORCHESTRATION_MIRROR_MANAGER: "{{ SAS[SAS_LICENSE.viya_version].ORCHESTRATION_MIRROR_MANAGER }}"
    USE_MIRROR: "{{ SAS[SAS_LICENSE.viya_version].USE_MIRROR }}"


  
- name: Ensuring that Git and java are installed
  yum:
    name: "{{ item }}"
    state: "latest"
  with_items: 
  - git
  - java-1.8.0-openjdk
  delegate_to: localhost
  run_once: true
    
- name: create local orchestration directory
  file:
    path: "{{ ORCHESTRATION_DIRECTORY }}"
    state: directory
  become: no
  delegate_to: localhost
  run_once: true

- name: mirror creation block
  block:
  - name: Preexisting mirror
    block:
    - name: set mirror usage to true
      set_fact:
        USE_MIRROR: "True"
        MIRROR_IS_ZIP: "False"
        MIRROR_IS_AZURE_BLOB_FOLDER: "False"

    - name: Archive mirror
      block:
      - name: set that mirror is zip
        set_fact:
          MIRROR_IS_ZIP: "True"
      - name: get archive_name
        set_fact:
          ARCHIVE_NAME: "archive.{{ MIRROR_HTTP.split('?')[0].split('.')[-1]}}"

      - name: set archive path
        set_fact:
          FULL_ARCHIVE_PATH: "/mnt/resource/{{ ARCHIVE_NAME }}"
          LOCAL_ARCHIVE_UNZIP_PATH: "/mnt/resource/mirror_temp"

      - name: download the archive
        get_url:
          url: "{{ MIRROR_HTTP }}"
          dest: "{{ FULL_ARCHIVE_PATH }}"
        async: 5400

      - name: create storage folder
        file:
          path: "{{ LOCAL_DIRECTORY_MIRROR }}"
          state: directory

      - name: "Unpack the mirror files from compressed archive"
        unarchive:
          remote_src: yes
          src: "{{ FULL_ARCHIVE_PATH }}"
          dest: "{{ LOCAL_DIRECTORY_MIRROR }}"
          extra_opts:
          - '--no-acls'
          - '--no-same-owner'
          - '--no-same-permissions'
          - '--no-selinux'
          - '--no-xattrs'
          - '--touch'

#      - name: move the unziped files to cifs
#        shell: >-
#          mv -f {{ LOCAL_ARCHIVE_UNZIP_PATH }}/* "{{ LOCAL_DIRECTORY_MIRROR }}"

      when: "MIRROR_HTTP.split('?')[0].endswith('.zip') or MIRROR_HTTP.split('?')[0].endswith('.tgz') or MIRROR_HTTP.split('?')[0].endswith('.tar.gz') or MIRROR_HTTP.split('?')[0].endswith('.tar.bz2') or MIRROR_HTTP.split('?')[0].endswith('.tbz') or MIRROR_HTTP.split('?')[0].endswith('.tar.xz') or MIRROR_HTTP.split('?')[0].endswith('.txz')"

    - name: azure blob folder with sas key
      block:
      - name: set that we are using azure blob folder mirror
        set_fact:
          MIRROR_IS_AZURE_BLOB_FOLDER: "TRUE"

      - name: install azcopy prerequisites
        yum:
          name: "{{ item }}"
          state: "latest"
        with_items:
        - libunwind
        - icu

      - name: create install folder
        file:
          state: directory
          path: /tmp/azcopy_install

      - name: downloading azcopy from microsoft
        become: yes
        unarchive:
          remote_src: yes
          src: "https://aka.ms/downloadazcopylinux64"
          dest: "/tmp/azcopy_install"
        register: task_result
        until: task_result | success
        retries: 10
        delay: 5

      - name: install azcopy
        become: yes
        shell: >-
          /tmp/azcopy_install/install.sh

      - name: remove install directory
        file:
          state: absent
          path: /tmp/azcopy_install

      - name: create storage folder
        file:
          path: "{{ LOCAL_DIRECTORY_MIRROR }}"
          state: directory

      - name: use azsync to download mirror
        become: yes
        shell: >-
          timeout -k 7140 7000 azcopy --source "{{ MIRROR_HTTP }}" --destination "{{ LOCAL_DIRECTORY_MIRROR }}" --recursive
        async: 7200
        failed_when: false
        register: copy_ret1

      - name: use azsync to download mirror retry 1
        become: yes
        shell: |-
          timeout -k 7140 7000 azcopy --source "{{ MIRROR_HTTP }}" --destination "{{ LOCAL_DIRECTORY_MIRROR }}" --recursive<<END
          yes
          END
        async: 7200
        failed_when: false
        register: copy_ret2
        when: "copy_ret1.rc != 0"

      - name: use azsync to download mirror retry 2
        become: yes
        shell: |-
          timeout -k 7140 7000 azcopy --source "{{ MIRROR_HTTP }}" --destination "{{ LOCAL_DIRECTORY_MIRROR }}" --recursive<<END
          yes
          END
        async: 7200
        failed_when: false
        register: copy_ret3
        when: "copy_ret1.rc != 0 and copy_ret2.rc != 0"

      - name: use azsync to download mirror retry 3
        become: yes
        shell: |-
          timeout -k 7140 7000 azcopy --source "{{ MIRROR_HTTP }}" --destination "{{ LOCAL_DIRECTORY_MIRROR }}" --recursive<<END
          yes
          END
        async: 7200
        failed_when: false
        register: copy_ret4
        when: "copy_ret1.rc != 0 and copy_ret2.rc != 0 and copy_ret3.rc != 0"

      - name: use azsync to download mirror retry 4
        become: yes
        shell: |-
          timeout -k 7140 7000 azcopy --source "{{ MIRROR_HTTP }}" --destination "{{ LOCAL_DIRECTORY_MIRROR }}" --recursive<<END
          yes
          END
        async: 7200
        register: copy_ret5
        when: "copy_ret1.rc != 0 and copy_ret2.rc != 0 and copy_ret3.rc != 0 and copy_ret4.rc != 0"

      when: "MIRROR_HTTP.split('?')[0].endswith('/') and 'blob.core.windows.net' in MIRROR_HTTP  and not MIRROR_IS_ZIP"

    - fail:
        msg: "Supplied Mirror must be an archive of file type zip, .tar.gz, .tar.bz2, or .tar.xz; or an azure blob storage folder with sas key"
      when: "not (MIRROR_IS_ZIP or MIRROR_IS_AZURE_BLOB_FOLDER)"
    when: "MIRROR_HTTP != ''"

  - name: Mirror needing downloading from sas (only works 3.4 and above, otherwise will be done as part of install).
    block:
    - name: create orchestration directory on download box (services)
      shell: >-
        mkdir -p "{{ ORCHESTRATION_DIRECTORY }}"

    - set_fact:
        LICENSE_TEMP_LOCATION: "{{ ORCHESTRATION_DIRECTORY }}/license.zip"

    - name: Copy license file to the orchestration download directory
      copy:
        src: "{{ LICENSE_FILE }}"
        dest: "{{ LICENSE_TEMP_LOCATION }}"

    - name: "Download and unpack the mirror manager files for sas from: {{ MIRROR_MANAGER_URL }}"
      unarchive:
        remote_src: yes
        src: "{{ MIRROR_MANAGER_URL }}"
        dest: "{{ ORCHESTRATION_DIRECTORY }}"
        creates: "{{ ORCHESTRATION_MIRROR_MANAGER }}"
      register: task_result
      until: task_result | success
      retries: 10
      delay: 5

    - name: create storage folder
      file:
        path: "{{ LOCAL_DIRECTORY_MIRROR }}"
        state: directory

    - name: "Use mirror manager to download a copy of the mirror from sas"
      shell: |-
        set -o pipefail
        timeout -k 3660 3600 "{{ ORCHESTRATION_MIRROR_MANAGER }}" mirror --deployment-data "{{ LICENSE_TEMP_LOCATION }}" --latest --platform x64-redhat-linux-6 --workers 20 -p "{{ LOCAL_DIRECTORY_MIRROR }}" -d 2>&1 | tee -a /tmp/viya_mirror_download.log
      retries: 5
      delay: 10
      register: result
      until: result | success

#    - debug:
#        var: job_result
#
#    - name: "Failed to download prior, retrying: Use mirror manager to download a copy of the mirror from sas"
#      shell: >-
#        "{{ ORCHESTRATION_MIRROR_MANAGER }}" mirror --deployment-data "{{ LICENSE_TEMP_LOCATION }}" --latest --platform x64-redhat-linux-6 --workers 4 -p "{{ LOCAL_DIRECTORY_MIRROR }}" -d 2>&1 | tee -a /tmp/viya_mirror_download.log
#      register: MIRROR_MANAGER_ASYNC
#      async: 1800
#      poll: 0
#      when: "job_result.rc != 0"
#
#    - name: resync with the mirror manager job
#      async_status:
#        jid: "{{ MIRROR_MANAGER_ASYNC.ansible_job_id }}"
#      register: job_result
#      until: job_result.finished
#      retries: 2000

    when: "USE_MIRROR and MIRROR_HTTP == ''"

  - name: Install nfs and configure share
    block:
      - name: install nfs software
        yum:
          name: "{{ item }}"
          state: "latest"
        with_items:
        - nfs-utils
        - libnfsidmap

      - name: add export to exports file
        lineinfile:
          path: /etc/exports
          state: present
          regexp: '^{{ LOCAL_DIRECTORY_MIRROR }}'
          line: '{{ LOCAL_DIRECTORY_MIRROR }} *(ro)'
          create: yes

      - name: enable nfs services
        systemd:
          name: "{{ item }}"
          state: started
          enabled: True
        with_items:
        - rpcbind
        - nfs-server
        - rpc-statd
        - nfs-idmapd

      - firewalld:
          service: "{{ item }}"
          permanent: true
          state: enabled
          immediate: yes
        with_items:
          - nfs
          - mountd
          - rpc-bind


    when: "USE_MIRROR"
  when: "inventory_hostname == groups['sas-services'][0]"

- name: "mounts the mirror on other systems that also need it, if we have a mirror"
  block:
    - name: install nfs software
      yum:
        name: "{{ item }}"
        state: "latest"
      with_items:
      - nfs-utils
      - rpcbind
      - postfix

    - name: enable nfs services
      systemd:
        name: "{{ item }}"
        state: started
        enabled: True
      with_items:
      - postfix

    - name: create the mount point for the mirror
      file:
        path: "{{ LOCAL_DIRECTORY_MIRROR }}"
        state: directory

    - name: mount the mirror
      mount:
        name: "{{ LOCAL_DIRECTORY_MIRROR }}"
        src: "{{hostvars[groups['sas-services'][0]]['ansible_hostname']}}:{{ LOCAL_DIRECTORY_MIRROR }}"
        fstype: nfs
        opts: defaults
        state: mounted

  when: "inventory_hostname != groups['sas-services'][0] and USE_MIRROR"

#- name: resync with the yum update job
#  async_status:
#    jid: "{{ YUM_ASYNC.ansible_job_id }}"
#  register: job_result
#  until: job_result.finished
#  retries: 200

#- name: "Unpack the mirror files from compressed archive"
#  unarchive:
#    remote_src: yes
#    src: "{{ MIRROR_HTTP }}"
#    dest: "{{ REMOTE_DIRECTORY_MIRROR }}"
#    extra_opts:
#    - '--no-acls'
#    - '--no-same-owner'
#    - '--no-same-permissions'
#    - '--no-selinux'
#    - '--no-xattrs'
#    - '--touch'
#    - '-v'
#  when: "inventory_hostname == groups['CasControllerServers'][0] and MIRROR_IS_ZIP"

- name: "Download and unpack the orchestration files for sas from: {{ ORCHESTRATION_URL }}"
  unarchive:
    remote_src: yes
    src: "{{ ORCHESTRATION_URL }}"
    dest: "{{ ORCHESTRATION_DIRECTORY }}"
    creates: "{{ ORCHESTRATION_DIRECTORY }}/sas-orchestration"
  become: no
  delegate_to: localhost
  run_once: true
  register: task_result
  until: task_result | success
  retries: 10
  delay: 5


    
- name: Build Orchestration block for sas
  shell: >-
    {{ ORCHESTRATION_DIRECTORY }}/sas-orchestration --verbose build --input {{ LICENSE_FILE }} --output "{{ ORCHESTRATION_DIRECTORY }}/SAS_Viya_playbook.tgz" {% if USE_MIRROR %} --repository-warehouse "file://{{ LOCAL_DIRECTORY_MIRROR }}" {% endif %}
  args:
    chdir: "{{ ORCHESTRATION_DIRECTORY }}"
    creates: "{{ ORCHESTRATION_DIRECTORY }}/SAS_Viya_playbook.tgz"
  become: no
  delegate_to: localhost
  run_once: true
  
- name: Download and unpack the orchestration files for sas
  unarchive:
    remote_src: yes
    src: "{{ ORCHESTRATION_DIRECTORY }}/SAS_Viya_playbook.tgz"
    dest: "{{ ORCHESTRATION_DIRECTORY }}"
    creates: "{{ ORCHESTRATION_DIRECTORY }}/sas_viya_playbook"
  become: no
  delegate_to: localhost
  run_once: true

- name: create local virk directory
  file:
    path: "{{ VIRK_CLONE_DIRECTORY }}"
    state: directory
  become: no
  delegate_to: localhost
  run_once: true

- name: clone the virk directory
  command: >-
    git clone {{ VIRK_ORIGIN_CONNECTOR }} {{ VIRK_CLONE_DIRECTORY }}
  args:
    creates: "{{ VIRK_CLONE_DIRECTORY }}/.git"
  become: no
  delegate_to: localhost
  run_once: true

- name: checkout the proper branch if a VIRK_COMMIT is specified
  command: >-
    git checkout {{ VIRK_COMMIT }} -b workbranch
  args:
    chdir: "{{ VIRK_CLONE_DIRECTORY }}"
  when: "VIRK_COMMIT != ''"
  become: no
  delegate_to: localhost
  run_once: true
  failed_when: false

- name: Create local certificate folder
  file:
    state: directory
    path: "{{ SSL_WORKING_FOLDER }}/{{ ansible_host }}"
  delegate_to: localhost

#- name: Create local certificate authority and
#  shell:
#    cmd: |
#      cat > "{{ SSL_WORKING_FOLDER }}/{{ ansible_host }}/cert_config_file.cfg"<<-EOF
#      dir					= .
#
#      [req]
#      default_bits = 2048
#      prompt = no
#      default_md = sha512
#      req_extensions = req_ext
#      distinguished_name = dn
#
#      [ dn ]
#      C=US
#      O=Self-Signed CA signed Certificate
#      OU=SASViya
#      CN = {{ inventory_hostname }}
#
#      [ req_ext ]
#      subjectAltName = @alt_names
#
#      [ alt_names ]
#      DNS.1 = {{ inventory_hostname }}
#      DNS.2 = {{ ansible_host }}
#      DNS.3 = *.{{ ansible_host }}
#      DNS.4 = *.{{ inventory_hostname }}
#      DNS.5 = localhost
#      IP.1 = 127.0.0.1
#      IP.2 = 0:0:0:0:0:0:0:1
#      EOF
#      cat > "{{ SSL_WORKING_FOLDER }}/{{ ansible_host }}/mintCert.sh"<<-EOF
#      openssl req -new -newkey rsa:2048 -keyout "{{ SSL_WORKING_FOLDER }}/{{ ansible_host }}/{{ SSL_CHILD_KEY_FILENAME }}" -out "{{ SSL_WORKING_FOLDER }}/{{ ansible_host }}/{{ SSL_CHILD_CERT_FILENAME }}.req" -days 3650 -nodes -config "{{ SSL_WORKING_FOLDER }}/{{ ansible_host }}/cert_config_file.cfg"
#      openssl  x509 -req -sha512 -CA "{{ SSL_WORKING_FOLDER }}/{{SSL_CA_CERT_FILENAME}}" -CAkey "{{ SSL_WORKING_FOLDER }}/{{SSL_CA_KEY_FILENAME}}" -in "{{ SSL_WORKING_FOLDER }}/{{ ansible_host }}/{{ SSL_CHILD_CERT_FILENAME }}.req" -out "{{ SSL_WORKING_FOLDER }}/{{ ansible_host }}/{{ SSL_CHILD_CERT_FILENAME }}" -days 3650 -CAcreateserial -extensions req_ext -extfile "{{ SSL_WORKING_FOLDER }}/{{ ansible_host }}/cert_config_file.cfg"
#      EOF
#      chmod +x "{{ SSL_WORKING_FOLDER }}/{{ ansible_host }}/mintCert.sh"
#      bash "{{ SSL_WORKING_FOLDER }}/{{ ansible_host }}/mintCert.sh"
#      # chaining certificates
#      # cat "{{ SSL_WORKING_FOLDER }}/{{SSL_CA_CERT_FILENAME}}" >> "{{ SSL_WORKING_FOLDER }}/{{ ansible_host }}/{{ SSL_CHILD_CERT_FILENAME }}"
#
#
#  delegate_to: localhost
#
#- name: make sure the security folders exist on the services
#  shell:
#    cmd: |-
#      mkdir -p "{{ SSL_CLIENT_CERT_TARGET_FOLDER }}"
#      mkdir -p "{{ SSL_CLIENT_KEY_TARGET_FOLDER }}"
#- name: copy child cert to all services
#  copy:
#    src: "{{ SSL_WORKING_FOLDER }}/{{ ansible_host }}/{{ SSL_CHILD_CERT_FILENAME }}"
#    dest: "{{ SSL_CLIENT_CERT_TARGET_FOLDER }}/{{SSL_CHILD_CERT_FILENAME}}"
#    mode: 0644
#
#- name: copy child key to all services
#  copy:
#    src: "{{ SSL_WORKING_FOLDER }}/{{ ansible_host }}/{{ SSL_CHILD_KEY_FILENAME }}"
#    dest: "{{ SSL_CLIENT_KEY_TARGET_FOLDER }}/{{SSL_CHILD_KEY_FILENAME}}"
#    mode: 0600
#
#- name: copy CA cert to all services
#  copy:
#    src: "{{ SSL_WORKING_FOLDER }}/{{SSL_CA_CERT_FILENAME}}"
#    dest: "{{ SSL_CLIENT_CERT_TARGET_FOLDER }}/server-chain.crt"
#    mode: 0644

#- name: set CA as parent in ssl chain
#  lineinfile:
#    path: /etc/httpd/conf.d/ssl.conf
#    regexp: '^SSLCertificateChainFile +.+'
#    line: 'SSLCertificateChainFile {{ SSL_CLIENT_CERT_TARGET_FOLDER }}/server-chain.crt'