{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspaceName": {
      "type": "string",
      "metadata": {
        "description": "Specifies the name of the Azure Machine Learning workspace."
      }
    },
    "location": {
      "type": "string",
      "allowedValues": [
        "australiaeast",
        "brazilsouth",
        "canadacentral",
        "centralus",
        "eastasia",
        "eastus",
        "eastus2",
        "francecentral",
        "japaneast",
        "koreacentral",
        "northcentralus",
        "northeurope",
        "southeastasia",
        "southcentralus",
        "uksouth",
        "westcentralus",
        "westus",
        "westus2",
        "westeurope"
      ],
      "metadata": {
        "description": "Specifies the location for all resources."
      }
    },
    "sku": {
      "type": "string",
      "defaultValue": "basic",
      "allowedValues": [
        "basic",
        "enterprise"
      ],
      "metadata": {
        "description": "Specifies the sku, also referred as 'edition' of the Azure Machine Learning workspace."
      }
    },
    "storageAccountOption": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Determines whether or not a new storage should be provisioned."
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": ""
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Standard_ZRS",
        "Premium_LRS",
        "Premium_ZRS",
        "Standard_GZRS",
        "Standard_RAGZRS"
      ]
    },
    "storageAccountBehindVNet": {
      "type": "string",
      "defaultValue": "false",
      "allowedValues": [
        "true",
        "false"
      ]
    },
    "storageAccountResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]"
    },
    "keyVaultOption": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Determines whether or not a new key vault should be provisioned."
      }
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": ""
    },
    "keyVaultBehindVNet": {
      "type": "string",
      "defaultValue": "false",
      "allowedValues": [
        "true",
        "false"
      ]
    },
    "keyVaultResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]"
    },
    "applicationInsightsOption": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Determines whether or not new ApplicationInsights should be provisioned."
      }
    },
    "applicationInsightsName": {
      "type": "string",
      "defaultValue": ""
    },
    "applicationInsightsResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]"
    },
    "containerRegistryOption": {
      "type": "string",
      "defaultValue": "none",
      "allowedValues": [
        "new",
        "existing",
        "none"
      ],
      "metadata": {
        "description": "Determines whether or not a new container registry should be provisioned."
      }
    },
    "containerRegistryName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The container registry bind to the workspace."
      }
    },
    "containerRegistrySku": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ]
    },
    "containerRegistryResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]"
    },
    "containerRegistryBehindVNet": {
      "type": "string",
      "defaultValue": "false",
      "allowedValues": [
        "true",
        "false"
      ]
    },
    "vnetOption": {
      "type": "string",
      "defaultValue": "none",
      "allowedValues": [
        "new",
        "existing",
        "none"
      ]
    },
    "vnetName": {
      "type": "string",
      "defaultValue": ""
    },
    "vnetResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]"
    },
    "addressPrefixes": {
      "type": "array",
      "defaultValue": [
        "10.0.0.0/16"
      ],
      "metadata": {
        "description": "Address prefix of the virtual network"
      }
    },
    "subnetOption": {
      "type": "string",
      "defaultValue": "none",
      "allowedValues": [
        "new",
        "existing",
        "none"
      ]
    },
    "subnetName": {
      "type": "string",
      "defaultValue": ""
    },
    "subnetPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/24",
      "metadata": {
        "description": "Subnet prefix of the virtual network"
      }
    },
    "adbWorkspace": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Azure Databrick workspace to be linked to the workspace"
      }
    },
    "confidential_data":{
      "type": "string",
      "defaultValue": "false",
      "allowedValues": [
        "false",
        "true"
      ],
      "metadata": {
        "description": "Specifies that the Azure Machine Learning workspace holds highly confidential data."
      }
    },
    "encryption_status":{
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "Specifies if the Azure Machine Learning workspace should be encrypted with customer managed key."
      }
    },
    "cmk_keyvault":{
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the customer managed keyVault arm id."
      }
    },
    "resource_cmk_uri":{
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies if the customer managed keyvault key uri."
      }
    },
    "privateEndpointType": {
      "type": "string",
      "defaultValue": "none",
      "allowedValues": [
        "AutoApproval",
        "ManualApproval",
        "none"
      ]
    }

  },
  "variables": {
    "storageAccountName": "[if(empty(parameters('storageAccountName')), concat('sa',uniqueString(resourceGroup().id, parameters('location'))), parameters('storageAccountName'))]",
    "keyVaultName": "[if(empty(parameters('keyVaultName')), concat('kv',uniqueString(resourceGroup().id, parameters('location'))), parameters('keyVaultName'))]",
    "applicationInsightsName": "[if(empty(parameters('applicationInsightsName')), concat('ai',uniqueString(resourceGroup().id, parameters('location'))), parameters('applicationInsightsName'))]",
    "containerRegistryName": "[if(empty(parameters('containerRegistryName')), concat('cr',uniqueString(resourceGroup().id, parameters('location'))), parameters('containerRegistryName'))]",
    "vnetName": "[if(empty(parameters('vnetName')), concat('vn',uniqueString(resourceGroup().id, parameters('location'))), parameters('vnetName'))]",
    "subnetName": "[if(empty(parameters('subnetName')), concat('sn',uniqueString(resourceGroup().id, parameters('location'))), parameters('subnetName'))]",
    "tenantId": "[subscription().tenantId]",
    "storageAccount": "[resourceId(parameters('storageAccountResourceGroupName'), 'Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
    "keyVault": "[resourceId(parameters('keyVaultResourceGroupName'), 'Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
    "containerRegistry": "[resourceId(parameters('containerRegistryResourceGroupName'), 'Microsoft.ContainerRegistry/registries', variables('containerRegistryName'))]",
    "applicationInsights": "[resourceId(parameters('applicationInsightsResourceGroupName'), 'Microsoft.Insights/components', variables('applicationInsightsName'))]",
    "vnet": "[resourceId(parameters('vnetResourceGroupName'), 'Microsoft.Network/virtualNetworks', variables('vnetName'))]",
    "subnet": "[resourceId(parameters('vnetResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnetName'))]",
    "privateDnsGuid": "[guid(resourceGroup().id, deployment().name)]",
    "locationsPEAvailable": [
      "southcentralus",
      "eastus",
      "westus2"
    ],
    "isLocationValid": "[or(equals(parameters('privateEndpointType'), 'none'), contains(variables('locationsPEAvailable'), parameters('location')))]",
    "networkRuleSetBehindVNet": {
      "defaultAction": "deny",
      "virtualNetworkRules": [
        {
          "action": "Allow",
          "id": "[variables('subnet')]"
        }
      ]
    },
    "defaultNetworkAcls": {
      "networkAcls": "[variables('networkRuleSetBehindVNet')]"
    },
    "defaultNetworkRuleSet": {
      "networkRuleSet": "[variables('networkRuleSetBehindVNet')]"
    },
    "privateEndpointSettings": {
      "name": "[concat(parameters('workspaceName'), '-PrivateEndpoint')]",
      "properties": {
        "privateLinkServiceId": "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('workspaceName'))]",
        "groupIds": [
          "amlworkspace"
        ]
      }
    },
    "defaultPEConnections": "[array(variables('privateEndpointSettings'))]"
  },
  "resources": [    
    {
      "condition": "[or(not(equals(parameters('vnetOption'), 'none')), not(equals(parameters('privateEndpointType'), 'none')))]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2019-09-01",
      "name": "[variables('vnetName')]",
      "location": "[if(variables('isLocationValid'), parameters('location'), 'InvalidLocation')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": "[parameters('addressPrefixes')]"
        },
        "virtualNetworkPeerings": [],
        "enableDdosProtection": false,
        "enableVmProtection": false
      }
    },
    {
      "condition": "[or(not(equals(parameters('subnetOption'), 'none')), not(equals(parameters('privateEndpointType'), 'none')))]",
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2019-09-01",
      "name": "[concat(variables('vnetName'), '/', variables('subnetName'))]",
      "dependsOn": [
        "[variables('vnet')]"
      ],
      "properties": {
        "addressPrefix": "[parameters('subnetPrefix')]",
        "delegations": [],
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "serviceEndpoints": [
          {
            "service": "Microsoft.Storage"
          },
          {
            "service": "Microsoft.KeyVault"
          },
          {
            "service": "Microsoft.ContainerRegistry"
          }
        ]
      }
    },
    {
      "condition": "[equals(parameters('storageAccountOption'), 'new')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-04-01",
      "name": "[variables('storageAccountName')]",
      "location": "[if(variables('isLocationValid'), parameters('location'), 'InvalidLocation')]",
      "sku": {
        "name": "[parameters('storageAccountType')]"
      },
      "kind": "StorageV2",
      "properties": {
        "encryption": {
          "services": {
            "blob": {
              "enabled": true
              },
            "file": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "supportsHttpsTrafficOnly": true
    }
    },
    {
      "condition": "[equals(parameters('storageAccountBehindVNet'), 'true')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "name": "UpdateStorageAcls",
      "dependsOn": [
          "[variables('subnet')]",
          "[variables('storageAccount')]"
      ],
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2019-04-01",
              "name": "[variables('storageAccountName')]",
              "location": "[if(variables('isLocationValid'), parameters('location'), 'InvalidLocation')]",
              "properties": "[union(reference(variables('storageAccount'), '2019-04-01'), variables('defaultNetworkAcls'))]"
            }
          ]
        }
      }
    },
    {
      "condition": "[equals(parameters('keyVaultOption'), 'new')]",
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2019-09-01",
      "name": "[variables('keyVaultName')]",
      "location": "[if(variables('isLocationValid'), parameters('location'), 'InvalidLocation')]",
      "properties": {
        "tenantId": "[variables('tenantId')]",
        "sku": {
            "name": "standard",
            "family": "A"
        },
        "accessPolicies": []
      }
    },
    {
      "condition": "[equals(parameters('keyVaultBehindVNet'), 'true')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "name": "UpdateKeyVaultAcls",
      "dependsOn": [
          "[variables('subnet')]",
          "[variables('keyVault')]"
      ],
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2019-09-01",
              "name": "[variables('keyVaultName')]",
              "location": "[if(variables('isLocationValid'), parameters('location'), 'InvalidLocation')]",
              "properties": "[union(reference(variables('keyVault'), '2019-09-01'), variables('defaultNetworkAcls'))]"
            }
          ]
        }
      }
    },
    {
      "condition": "[equals(parameters('containerRegistryOption'), 'new')]",
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2019-05-01",
      "name": "[variables('containerRegistryName')]",
      "location": "[if(variables('isLocationValid'), parameters('location'), 'InvalidLocation')]",
      "sku": {
        "name": "[parameters('containerRegistrySku')]"
      },
      "properties": {
        "adminUserEnabled": true
      }
    },
    {
      "condition": "[and(not(equals(parameters('containerRegistryOption'), 'none')) ,equals(parameters('containerRegistryBehindVNet'), 'true'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "name": "UpdateContainerRegistryNetworkRuleSet",
      "dependsOn": [
          "[variables('subnet')]"
      ],
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2019-05-01",
              "name": "[variables('containerRegistryName')]",
              "location": "[if(variables('isLocationValid'), parameters('location'), 'InvalidLocation')]",
              "sku": {
                "name": "Premium"
              },
              "properties": "[if(equals(parameters('containerRegistryBehindVNet'), 'true'),
                union(reference(variables('containerRegistry'), '2019-05-01'), variables('defaultNetworkRuleSet')), json('null'))]"
            }
          ]
        }
      }
    },
    {
      "condition": "[equals(parameters('applicationInsightsOption'), 'new')]",
      "type": "Microsoft.Insights/components",
      "apiVersion": "2018-05-01-preview",
      "name": "[variables('applicationInsightsName')]",
      "location": "[if(or(equals(parameters('location'),'eastus2'), equals(parameters('location'),'westcentralus')),'southcentralus',parameters('location'))]",
      "kind": "web",
      "properties": {
          "Application_Type": "web"
      }
    },
    {
      "type": "Microsoft.MachineLearningServices/workspaces",
      "apiVersion": "2020-04-01",
      "name": "[parameters('workspaceName')]",
      "location": "[if(variables('isLocationValid'), parameters('location'), 'InvalidLocation')]",
      "dependsOn": [
        "[variables('storageAccount')]",
        "[variables('keyVault')]",
        "[variables('applicationInsights')]"
      ],
      "identity": {
        "type": "systemAssigned"
      },
      "sku": {
        "tier": "[parameters('sku')]",
        "name": "[parameters('sku')]"
      },
      "properties": {
        "friendlyName": "[parameters('workspaceName')]",
        "storageAccount": "[resourceId(parameters('storageAccountResourceGroupName'), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
        "keyVault": "[variables('keyVault')]",
        "applicationInsights": "[variables('applicationInsights')]",
        "containerRegistry": "[if(not(equals(parameters('containerRegistryOption'), 'none')), variables('containerRegistry'), json('null'))]",
        "adbWorkspace": "[if(empty(parameters('adbWorkspace')), json('null'), parameters('adbWorkspace'))]",
        "encryption": {
          "status": "[parameters('encryption_status')]",
          "keyVaultProperties": {
            "keyVaultArmId": "[parameters('cmk_keyvault')]",
            "keyIdentifier": "[parameters('resource_cmk_uri')]"
          }
        },
        "hbiWorkspace": "[parameters('confidential_data')]"
      }
    },
    {
      "condition": "[not(equals(parameters('privateEndpointType'), 'none'))]",
      "apiVersion": "2019-04-01",
      "name": "[concat(parameters('workspaceName'), '-PrivateEndpoint')]",
      "type": "Microsoft.Network/privateEndpoints",
      "location": "[if(variables('isLocationValid'), parameters('location'), 'InvalidLocation')]",
      "dependsOn": [
        "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('workspaceName'))]",
        "[variables('subnet')]"
      ],
      "properties": {
        "privateLinkServiceConnections":"[if(equals(parameters('privateEndpointType'), 'AutoApproval'), variables('defaultPEConnections'), json('null'))]",
        "manualPrivateLinkServiceConnections": "[if(equals(parameters('privateEndpointType'), 'ManualApproval'), variables('defaultPEConnections'), json('null'))]",
        "subnet": {
          "id": "[variables('subnet')]"
        }
      }
    },
    {
      "condition": "[equals(parameters('privateEndpointType'), 'AutoApproval')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "name": "[concat('PrivateDns-', variables('privateDnsGuid'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', concat(parameters('workspaceName'), '-PrivateEndpoint'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2018-09-01",
              "name": "privatelink.api.azureml.ms",
              "location": "global",
              "tags": {},
              "properties": {}
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2018-09-01",
              "name": "[concat('privatelink.api.azureml.ms', '/', uniqueString(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))))]",
              "location": "global",
              "dependsOn": [
                "privatelink.api.azureml.ms"
              ],
              "properties": {
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                },
                "registrationEnabled": false
              }
            },
            {
              "apiVersion": "2017-05-10",
              "name": "[concat('EndpointDnsRecords-', variables('privateDnsGuid'))]",
              "type": "Microsoft.Resources/deployments",
              "dependsOn": [
                "privatelink.api.azureml.ms"
              ],
              "properties": {
                "mode": "Incremental",
                "templatelink": {
                  "contentVersion": "1.0.0.0",
                  "uri": "https://network.hosting.portal.azure.net/network/Content/4.13.392.925/DeploymentTemplates/PrivateDnsForPrivateEndpoint.json"
                },
                "parameters": {
                  "privateDnsName": {
                    "value": "privatelink.api.azureml.ms"
                  },
                  "privateEndpointNicResourceId": {
                    "value": "[if(equals(parameters('privateEndpointType'), 'AutoApproval'),
                                    reference(resourceId('Microsoft.Network/privateEndpoints',concat(parameters('workspaceName'), '-PrivateEndpoint'))).networkInterfaces[0].id,
                                    resourceId('Microsoft.Network/privateEndpoints',concat(parameters('workspaceName'), '-PrivateEndpoint')).networkInterfaces[0].id)]"

                  },
                  "nicRecordsTemplateUri": {
                    "value": "https://network.hosting.portal.azure.net/network/Content/4.13.392.925/DeploymentTemplates/PrivateDnsForPrivateEndpointNic.json"
                  },
                  "ipConfigRecordsTemplateUri": {
                    "value": "https://network.hosting.portal.azure.net/network/Content/4.13.392.925/DeploymentTemplates/PrivateDnsForPrivateEndpointIpConfig.json"
                  },
                  "uniqueId": {
                    "value": "[variables('privateDnsGuid')]"
                  },
                  "existingRecords": {
                    "value": {}
                  }
                }
              }
            }
          ]
        }
      },
      "resourceGroup": "[resourceGroup().name]"
    }
  ]
}