{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "baseUrl": {
            "type": "string",
            "metadata": {
                "description": "Base URL",
                "artifactsBaseUrl": ""
            },
            "defaultValue": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/docker-datacenter-2.0/"
        },
          "imagePublisher": {
      "type": "string",
      "defaultValue": "UbuntuServer",
      "allowedValues": [
        "UbuntuServer",
        "CentOS"
      ],
      "metadata": {
        "description": "openlogic/Canonical are the respective CentOS/Ubuntu Distributor in Azure Market Place"
      }
    },
    "imageOffer": {
      "type": "string",
      "defaultValue": "Canonical",
      "allowedValues": [
        "Canonical",
        "openlogic"
      ],
      "metadata": {
        "description": "New CentOS/UbuntuServer Image Offer"
      }
    },
    "imageSku": {
      "type": "string",
      "defaultValue": "16.04.0-LTS",
      "allowedValues": [
        "16.04.0-LTS",
        "6.5",
        "6.6",
        "7.1",
        "7.2"
      ],
      "metadata": {
        "description": "Skus "
      }
    },
        "clusterPrefix": {
            "type": "string",
            "defaultValue": "ucpclus",
            "metadata": {
                "description": "UCP Cluster Prefix"
            }
        },
        "ucpControllerSize": {
            "type": "string",
            "defaultValue": "Standard_DS2_v2",
            "metadata": {
                "description": "Size of the UCP Controller VMs"
            }
        },
        "ucpControllerCount": {
            "type": "int",
            "defaultValue": 3,
            "allowedValues": [
                3,
                5
            ],
            "metadata": {
                "description": "The Number of UCP Controller Nodes"
            }
        },
        "ucpNodeSize": {
            "type": "string",
            "defaultValue": "Standard_DS2_v2",
            "metadata": {
                "description": "Size of the UCP node VMs"
            }
        },
        "ucpNodeCount": {
            "type": "int",
            "defaultValue": 6,
            "metadata": {
                "description": "Number of UCP node VMs"
            }
        },
        "ucpDtrNodeSize": {
            "type": "string",
            "defaultValue": "Standard_DS2_v2",
            "metadata": {
                "description": "Size of the DTR node VMs"
            }
        },
        "ucpDtrNodeCount": {
            "type": "int",
            "defaultValue": 2,
            "metadata": {
                "description": "Number of DTR node VMs"
            }
        },
        "adminUsername": {
            "type": "string",
            "defaultValue": "ucpadmin",
            "metadata": {
                "description": "OS Admin User Name for UCP Controller Nodes, UCP Nodes and DTR Nodes"
            }
        },
        "sshPublicKey": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "SSH public key"
            }
        },
        "virtualNetworkName": {
            "type": "string",
            "defaultValue": "ucpvnet",
            "metadata": {
                "description": "Name of the Virtual Network"
            }
        },
        "virtualNetworkAddressPrefix": {
            "type": "string",
            "defaultValue": "10.2.0.0/16",
            "metadata": {
                "description": "The virtual network address space"
            }
        },
        "controllerSubnetName": {
            "type": "string",
            "defaultValue": "ucp-controller-subnet",
            "metadata": {
                "description": "The Subnet name for UCP Controller Nodes"
            }
        },
        "controllerSubnetPrefix": {
            "type": "string",
            "defaultValue": "10.2.0.0/24",
            "metadata": {
                "description": "The Subnet prefix for UCP Controller Nodes"
            }
        },
        "nodeSubnetName": {
            "type": "string",
            "defaultValue": "ucp-node-subnet",
            "metadata": {
                "description": "The Subnet name for UCP Nodes and DTR Nodes"
            }
        },
        "nodeSubnetPrefix": {
            "type": "string",
            "defaultValue": "10.2.1.0/24",
            "metadata": {
                "description": "The Subnet prefix for UCP Nodes and DTR Nodes"
            }
        },
        "controllerLbPublicIpAddress": {
            "type": "string",
            "defaultValue": "clbpip",
            "metadata": {
                "description": "Name of IP Address for Controller Load Balancer"
            }
        },
        "controllerLbPublicIpDnsName": {
            "type": "string",
            "defaultValue": "clbpipddcdev01",
            "metadata": {
                "description": "DNS label of Public IP for Controller Load Balancer"
            }
        },
        "nodeLbPublicIpAddress": {
            "type": "string",
            "defaultValue": "nlbpip",
            "metadata": {
                "description": "Name of IP Address for Node Load Balancer"
            }
        },
        "nodeLbPublicIpDnsName": {
            "type": "string",
            "defaultValue": "nlbpipddcdev01",
            "metadata": {
                "description": "DNS label for Node Load Balancer"
            }
        },
        "nodeDtrLbPublicIpAddress": {
            "type": "string",
            "defaultValue": "dlbpip",
            "metadata": {
                "description": "Public IP Address name of DTR Load Balancer"
            }
        },
        "nodeDtrLbPublicIpDnsName": {
            "type": "string",
            "defaultValue": "dlbpipddcdev01",
            "metadata": {
                "description": "DNS label of Public IP for DTR Load Balancer"
            }
        },
        "ucpLicenseKey": {
            "type": "string",
            "metadata": {
                "description": "License Key Contents for UCP 2.0 Beta/GA "
            }
        },
        "ucpAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for UCP Admin Account"
            }
        }
    },
    "variables": {
        "imagePublisher": "[parameters('imagePublisher')]",
        "imageOffer": "[parameters('imageOffer')]",
        "imageSKU": "[parameters('imageSku')]",
        "apiVersionCompute": "2015-06-15",
        "apiVersionNetwork": "2015-06-15",
        "apiVersionStorage": "2015-06-15",
        "linkTemplateApiVersion": "2015-01-01",
        "storageNameAppend": "abcdef",
        "ucpNamingFix": "[substring(toLower(concat(parameters('clusterPrefix'), variables('storageNameAppend'))),0,8)]",
        "controllerStorageRandomString": "[uniqueString(concat(resourceGroup().id, 'ctrlsa'))]",
        "nodeStorageRandomString": "[uniqueString(concat(resourceGroup().id, 'nodesa'))]",
        "nodeDtrStorageRandomString": "[uniqueString(concat(resourceGroup().id, 'dtrsa'))]",
        "ucpControllerStorageAccountName": "[concat(variables('ucpNamingFix'), 'csa', variables('controllerStorageRandomString'))]",
        "ucpNodeStorageAccountName": "[concat(variables('ucpNamingFix'), 'nsa', variables('nodeStorageRandomString'))]",
        "ucpNodeDtrStorageAccountName": "[concat(variables('ucpNamingFix'), 'dsa', variables('nodeDtrStorageRandomString'))]",
        "controllerLbName": "[concat(variables('ucpNamingFix'), 'ctrllb')]",
        "nodeLbName": "[concat(variables('ucpNamingFix'), 'nodelb')]",
        "nodeDtrLbName": "[concat(variables('ucpNamingFix'), 'nodedtrlb')]",
        "availabilitySetNameUcpControllers": "[concat(variables('ucpNamingFix'), 'ctrl-avail-set')]",
        "availabilitySetNameUcpNodes": "[concat(variables('ucpNamingFix'), 'node-avail-set')]",
        "availabilitySetNameUcpNodesDtr": "[concat(variables('ucpNamingFix'), 'node-dtr-avail-set')]",
        "networkSecurityGroupUcpControllers": "[concat('nsgucpctrl-', variables('ucpNamingFix'))]",
        "networkSecurityGroupUcpNode": "[concat('nsgucpnode-', variables('ucpNamingFix'))]",
        "ucpReplicaCount": "[sub(parameters('ucpControllerCount'), 1)]",
        "ucpNodeReplicaCount": "[sub(parameters('ucpNodeCount'), 1)]",
        "ucpDtrReplicaCount": "[sub(parameters('ucpDtrNodeCount'), 1)]",
        "controllerLbId": "[resourceId('Microsoft.Network/loadBalancers',variables('controllerLbName'))]",
        "controllerLbIpConfigName": "[concat(parameters('clusterPrefix'), '-ctrl-lbFrontEnd')]",
        "controllerLbIpConfigId": "[concat(variables('controllerLbId'),'/frontendIPConfigurations/', variables('controllerLbIpConfigName'))]",
        "controllerLbBackendPoolName": "[concat(parameters('clusterPrefix'), '-ctrl-pool')]",
        "nodeLbId": "[resourceId('Microsoft.Network/loadBalancers',variables('nodeLbName'))]",
        "nodeLbIpConfigName": "[concat(parameters('clusterPrefix'), '-node-lbFrontEnd')]",
        "nodeLbIpConfigId": "[concat(variables('nodeLbId'),'/frontendIPConfigurations/', variables('nodeLbIpConfigName'))]",
        "nodeLbBackendPoolName": "[concat(parameters('clusterPrefix'), '-node-pool')]",
        "nodeDtrLbId": "[resourceId('Microsoft.Network/loadBalancers',variables('nodeDtrLbName'))]",
        "nodeDtrLbIpConfigName": "[concat(parameters('clusterPrefix'), '-nodeDtr-lbFrontEnd')]",
        "nodeDtrLbIpConfigId": "[concat(variables('nodeDtrLbId'),'/frontendIPConfigurations/', variables('nodeDtrLbIpConfigName'))]",
        "nodeDtrLbBackendPoolName": "[concat(parameters('clusterPrefix'), '-nodeDtr-pool')]",
        "vnetTemplate": "[concat(parameters('baseUrl'), '/', 'newvnet.json')]",
        "ucpControllerTemplateLink": "[concat(parameters('baseUrl'), '/ucpcontroller.json')]",
        "ucpNodeTemplateLink": "[concat(parameters('baseUrl'), '/ucpnode.json')]",
        "ucpDtrNodeTemplateLink": "[concat(parameters('baseUrl'), '/ucpdtrnode.json')]",
        "ucpControllerScriptUri": "[concat(parameters('baseUrl'), '/setup-controller.sh')]",
        "ucpReplicaScriptUri": "[concat(parameters('baseUrl'), '/setup-replica.sh')]",
        "ucpNodeScriptUri": "[concat(parameters('baseUrl'), '/setup-ucp-node.sh')]",
        "ucpDtrNodeScriptUri": "[concat(parameters('baseUrl'), '/setup-ucp-dtr-node.sh')]",
        "ucpDtrNodeReplicaScriptUri": "[concat(parameters('baseUrl'), '/setup-ucp-dtr-replica.sh')]",
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks',parameters('virtualNetworkName'))]",
        "controllerSubnetRef": "[concat(variables('vnetId'),'/subnets/',parameters('controllerSubnetName'))]",
        "nodeSubnetRef": "[concat(variables('vnetId'),'/subnets/',parameters('nodeSubnetName'))]",
        "ucpDtrReplicaId": "badf00dcafe",
        "vmSizesMap": {
            "Standard_D1": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D4": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D11": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D12": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D13": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D14": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D1_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D2_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D3_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D4_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D5_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D11_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D12_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D13_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D14_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_G1": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_G2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_G3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_G4": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_G5": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_DS1": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS4": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS11": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS12": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS13": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS14": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS1_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS2_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS3_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS4_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS5_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS11_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS12_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS13_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS14_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS15_v2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS1": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS4": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS5": {
                "storageAccountType": "Premium_LRS"
            }
        }
    },
    "resources": [
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('availabilitySetNameUcpControllers')]",
            "apiVersion": "[variables('apiVersionCompute')]",
            "location": "[resourceGroup().location]"
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('availabilitySetNameUcpNodes')]",
            "apiVersion": "[variables('apiVersionCompute')]",
            "location": "[resourceGroup().location]"
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('availabilitySetNameUcpNodesDtr')]",
            "apiVersion": "[variables('apiVersionCompute')]",
            "location": "[resourceGroup().location]"
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('ucpControllerStorageAccountName')]",
            "apiVersion": "[variables('apiVersionStorage')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "accountType": "[variables('vmSizesMap')[parameters('ucpControllerSize')].storageAccountType]"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('ucpNodeStorageAccountName')]",
            "apiVersion": "[variables('apiVersionStorage')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "accountType": "[variables('vmSizesMap')[parameters('ucpNodeSize')].storageAccountType]"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('ucpNodeDtrStorageAccountName')]",
            "apiVersion": "[variables('apiVersionStorage')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "accountType": "[variables('vmSizesMap')[parameters('ucpDtrNodeSize')].storageAccountType]"
            }
        },
        {
            "apiVersion": "[variables('apiVersionNetwork')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[parameters('controllerLbPublicIpAddress')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('controllerLbPublicIpDnsName')]"
                }
            }
        },
        {
            "apiVersion": "[variables('apiVersionNetwork')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[parameters('nodeLbPublicIpAddress')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('nodeLbPublicIpDnsName')]"
                }
            }
        },
        {
            "apiVersion": "[variables('apiVersionNetwork')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[parameters('nodeDtrLbPublicIpAddress')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('nodeDtrLbPublicIpDnsName')]"
                }
            }
        },
        {
            "apiVersion": "[variables('linkTemplateApiVersion')]",
            "name": "VirtualNetworkTemplate",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "incremental",
                "templateLink": {
                    "uri": "[variables('vnetTemplate')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[resourceGroup().location]"
                    },
                    "virtualNetworkName": {
                        "value": "[parameters('virtualNetworkName')]"
                    },
                    "virtualNetworkAddressPrefix": {
                        "value": "[parameters('virtualNetworkAddressPrefix')]"
                    },
                    "controllerSubnetName": {
                        "value": "[parameters('controllerSubnetName')]"
                    },
                    "controllerSubnetPrefix": {
                        "value": "[parameters('controllerSubnetPrefix')]"
                    },
                    "nodeSubnetName": {
                        "value": "[parameters('nodeSubnetName')]"
                    },
                    "nodeSubnetPrefix": {
                        "value": "[parameters('nodeSubnetPrefix')]"
                    },
                    "apiVersion": {
                        "value": "[variables('apiVersionNetwork')]"
                    }
                }
            }
        },
        {
            "apiVersion": "[variables('apiVersionNetwork')]",
            "name": "[variables('controllerLbName')]",
            "type": "Microsoft.Network/loadBalancers",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', parameters('controllerLbPublicIpAddress'))]"
            ],
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "[variables('controllerLbIpConfigName')]",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('controllerLbPublicIpAddress'))]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "[variables('controllerLbBackendPoolName')]"
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "controllerLbRule",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('controllerLbIpConfigId')]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(variables('controllerLbId'), '/backendAddressPools/', variables('controllerLbBackendPoolName'))]"
                            },
                            "protocol": "tcp",
                            "frontendPort": 443,
                            "backendPort": 443,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[concat(variables('controllerLbId'),'/probes/controllerTcpProbe')]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "controllerTcpProbe",
                        "properties": {
                            "protocol": "tcp",
                            "port": 443,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "[variables('apiVersionNetwork')]",
            "type": "Microsoft.Network/loadBalancers/inboundNatRules",
            "name": "[concat(variables('controllerLbName'), '/', 'SSH-', parameters('clusterPrefix'), '0')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[variables('controllerLbId')]"
            ],
            "properties": {
                "frontendIPConfiguration": {
                    "id": "[variables('controllerLbIpConfigId')]"
                },
                "protocol": "tcp",
                "frontendPort": 2200,
                "backendPort": 22,
                "enableFloatingIP": false
            }
        },
        {
            "apiVersion": "[variables('apiVersionNetwork')]",
            "type": "Microsoft.Network/loadBalancers/inboundNatRules",
            "name": "[concat(variables('controllerLbName'), '/', 'SSH-', parameters('clusterPrefix'), copyIndex(1))]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "controllerLbLoopNode",
                "count": "[sub(parameters('ucpControllerCount'),1)]"
            },
            "dependsOn": [
                "[variables('controllerLbId')]",
                "[concat(variables('controllerLbId'),'/inboundNatRules/SSH-', parameters('clusterPrefix'), copyIndex())]"
            ],
            "properties": {
                "frontendIPConfiguration": {
                    "id": "[variables('controllerLbIpConfigId')]"
                },
                "protocol": "tcp",
                "frontendPort": "[copyIndex(2201)]",
                "backendPort": 22,
                "enableFloatingIP": false
            }
        },
        {
            "apiVersion": "[variables('apiVersionNetwork')]",
            "name": "[variables('nodeLbName')]",
            "type": "Microsoft.Network/loadBalancers",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', parameters('nodeLbPublicIpAddress'))]"
            ],
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "[variables('nodeLbIpConfigName')]",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('nodeLbPublicIpAddress'))]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "[variables('nodeLbBackendPoolName')]"
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "nodeLbRuleHTTPS",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('nodeLbIpConfigId')]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(variables('nodeLbId'), '/backendAddressPools/', variables('nodeLbBackendPoolName'))]"
                            },
                            "protocol": "tcp",
                            "frontendPort": 443,
                            "backendPort": 443,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[concat(variables('nodeLbId'),'/probes/nodeTcp443Probe')]"
                            }
                        }
                    },
                    {
                        "name": "nodeLbRuleHTTP",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('nodeLbIpConfigId')]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(variables('nodeLbId'), '/backendAddressPools/', variables('nodeLbBackendPoolName'))]"
                            },
                            "protocol": "tcp",
                            "frontendPort": 80,
                            "backendPort": 80,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[concat(variables('nodeLbId'),'/probes/nodeTcp80Probe')]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "nodeTcp443Probe",
                        "properties": {
                            "protocol": "tcp",
                            "port": 443,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "nodeTcp80Probe",
                        "properties": {
                            "protocol": "tcp",
                            "port": 80,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "[variables('apiVersionNetwork')]",
            "type": "Microsoft.Network/loadBalancers/inboundNatRules",
            "name": "[concat(variables('nodeLbName'), '/', 'SSH-', parameters('clusterPrefix'), '0')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[variables('nodeLbId')]"
            ],
            "properties": {
                "frontendIPConfiguration": {
                    "id": "[variables('nodeLbIpConfigId')]"
                },
                "protocol": "tcp",
                "frontendPort": 2200,
                "backendPort": 22,
                "enableFloatingIP": false
            }
        },
        {
            "apiVersion": "[variables('apiVersionNetwork')]",
            "type": "Microsoft.Network/loadBalancers/inboundNatRules",
            "name": "[concat(variables('nodeLbName'), '/', 'SSH-', parameters('clusterPrefix'), copyIndex(1))]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "nodeLbLoopNode",
                "count": "[sub(parameters('ucpNodeCount'),1)]"
            },
            "dependsOn": [
                "[variables('nodeLbId')]",
                "[concat(variables('nodeLbId'),'/inboundNatRules/SSH-', parameters('clusterPrefix'), copyIndex())]"
            ],
            "properties": {
                "frontendIPConfiguration": {
                    "id": "[variables('nodeLbIpConfigId')]"
                },
                "protocol": "tcp",
                "frontendPort": "[copyIndex(2201)]",
                "backendPort": 22,
                "enableFloatingIP": false
            }
        },
        {
            "apiVersion": "[variables('apiVersionNetwork')]",
            "name": "[variables('nodeDtrLbName')]",
            "type": "Microsoft.Network/loadBalancers",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', parameters('nodeDtrLbPublicIpAddress'))]"
            ],
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "[variables('nodeDtrLbIpConfigName')]",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('nodeDtrLbPublicIpAddress'))]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "[variables('nodeDtrLbBackendPoolName')]"
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "nodeDtrLbRule",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('nodeDtrLbIpConfigId')]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(variables('nodeDtrLbId'), '/backendAddressPools/', variables('nodeDtrLbBackendPoolName'))]"
                            },
                            "protocol": "tcp",
                            "frontendPort": 443,
                            "backendPort": 443,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[concat(variables('nodeDtrLbId'),'/probes/nodeDtrTcpProbe')]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "nodeDtrTcpProbe",
                        "properties": {
                            "protocol": "tcp",
                            "port": 443,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "[variables('apiVersionNetwork')]",
            "type": "Microsoft.Network/loadBalancers/inboundNatRules",
            "name": "[concat(variables('nodeDtrLbName'), '/', 'SSH-', parameters('clusterPrefix'), '0')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[variables('nodeDtrLbId')]"
            ],
            "properties": {
                "frontendIPConfiguration": {
                    "id": "[variables('nodeDtrLbIpConfigId')]"
                },
                "protocol": "tcp",
                "frontendPort": 2200,
                "backendPort": 22,
                "enableFloatingIP": false
            }
        },
        {
            "apiVersion": "[variables('apiVersionNetwork')]",
            "type": "Microsoft.Network/loadBalancers/inboundNatRules",
            "name": "[concat(variables('nodeDtrLbName'), '/', 'SSH-', parameters('clusterPrefix'), copyIndex(1))]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "nodeDtrLbLoopNode",
                "count": "[sub(parameters('ucpDtrNodeCount'),1)]"
            },
            "dependsOn": [
                "[variables('nodeDtrLbId')]",
                "[concat(variables('nodeDtrLbId'),'/inboundNatRules/SSH-', parameters('clusterPrefix'), copyIndex())]"
            ],
            "properties": {
                "frontendIPConfiguration": {
                    "id": "[variables('nodeDtrLbIpConfigId')]"
                },
                "protocol": "tcp",
                "frontendPort": "[copyIndex(2201)]",
                "backendPort": 22,
                "enableFloatingIP": false
            }
        },
        {
            "apiVersion": "[variables('linkTemplateApiVersion')]",
            "name": "[concat('ucpController', copyindex())]",
            "type": "Microsoft.Resources/deployments",
            "copy": {
                "name": "ucpControllerSet",
                "count": "[parameters('ucpControllerCount')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/loadBalancers', variables('controllerLbName'))]",
                "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetNameUcpControllers'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('ucpControllerStorageAccountName'))]",
                "[concat(variables('controllerLbId'),'/inboundNatRules/SSH-', parameters('clusterPrefix'),copyIndex())]",
                "VirtualNetworkTemplate"
            ],
            "properties": {
                "mode": "incremental",
                "templateLink": {
                    "uri": "[variables('ucpControllerTemplateLink')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "imagePublisher": {
                        "value": "[variables('imagePublisher')]"
                    },
                    "imageOffer": {
                        "value": "[variables('imageOffer')]"
                    },
                    "imageSKU": {
                        "value": "[variables('imageSKU')]"
                    },
                    "apiVersionCompute": {
                        "value": "[variables('apiVersionCompute')]"
                    },
                    "apiVersionNetwork": {
                        "value": "[variables('apiVersionNetwork')]"
                    },
                    "location": {
                        "value": "[resourceGroup().location]"
                    },
                    "vmNamePrefix": {
                        "value": "[concat(parameters('clusterPrefix'), copyindex())]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "sshPublicKey": {
                        "value": "[parameters('sshPublicKey')]"
                    },
                    "vmSize": {
                        "value": "[parameters('ucpControllerSize')]"
                    },
                    "availabilitySetName": {
                        "value": "[variables('availabilitySetNameUcpControllers')]"
                    },
                    "controllerSubnetRef": {
                        "value": "[variables('controllerSubnetRef')]"
                    },
                    "controllerLbBackendPoolName": {
                        "value": "[variables('controllerLbBackendPoolName')]"
                    },
                    "controllerLbId": {
                        "value": "[variables('controllerLbId')]"
                    },
                    "StorageAccountName": {
                        "value": "[variables('ucpControllerStorageAccountName')]"
                    }
                }
            }
        },
        {
            "apiVersion": "[variables('linkTemplateApiVersion')]",
            "name": "[concat('ucpNode', copyindex())]",
            "type": "Microsoft.Resources/deployments",
            "copy": {
                "name": "ucpNodeSet",
                "count": "[parameters('ucpNodeCount')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/loadBalancers', variables('nodeLbName'))]",
                "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetNameUcpNodes'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('ucpNodeStorageAccountName'))]",
                "[concat(variables('nodeLbId'),'/inboundNatRules/SSH-', parameters('clusterPrefix'),copyIndex())]",
                "VirtualNetworkTemplate"
            ],
            "properties": {
                "mode": "incremental",
                "templateLink": {
                    "uri": "[variables('ucpNodeTemplateLink')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "imagePublisher": {
                        "value": "[variables('imagePublisher')]"
                    },
                    "imageOffer": {
                        "value": "[variables('imageOffer')]"
                    },
                    "imageSKU": {
                        "value": "[variables('imageSKU')]"
                    },
                    "apiVersionCompute": {
                        "value": "[variables('apiVersionCompute')]"
                    },
                    "apiVersionNetwork": {
                        "value": "[variables('apiVersionNetwork')]"
                    },
                    "location": {
                        "value": "[resourceGroup().location]"
                    },
                    "vmNamePrefix": {
                        "value": "[concat(parameters('clusterPrefix'), copyindex())]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "sshPublicKey": {
                        "value": "[parameters('sshPublicKey')]"
                    },
                    "vmSize": {
                        "value": "[parameters('ucpNodeSize')]"
                    },
                    "availabilitySetName": {
                        "value": "[variables('availabilitySetNameUcpNodes')]"
                    },
                    "nodeSubnetRef": {
                        "value": "[variables('nodeSubnetRef')]"
                    },
                    "nodeLbBackendPoolName": {
                        "value": "[variables('nodeLbBackendPoolName')]"
                    },
                    "nodeLbId": {
                        "value": "[variables('nodeLbId')]"
                    },
                    "storageAccountName": {
                        "value": "[variables('ucpNodeStorageAccountName')]"
                    }
                }
            }
        },
        {
            "apiVersion": "[variables('linkTemplateApiVersion')]",
            "name": "[concat('ucpDtrNode', copyindex())]",
            "type": "Microsoft.Resources/deployments",
            "copy": {
                "name": "ucpDtrNodeSet",
                "count": "[parameters('ucpDtrNodeCount')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/loadBalancers', variables('nodeDtrLbName'))]",
                "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetNameUcpNodesDtr'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('ucpNodeDtrStorageAccountName'))]",
                "[concat(variables('nodeDtrLbId'),'/inboundNatRules/SSH-', parameters('clusterPrefix'),copyIndex())]",
                "VirtualNetworkTemplate"
            ],
            "properties": {
                "mode": "incremental",
                "templateLink": {
                    "uri": "[variables('ucpDtrNodeTemplateLink')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "imagePublisher": {
                        "value": "[variables('imagePublisher')]"
                    },
                    "imageOffer": {
                        "value": "[variables('imageOffer')]"
                    },
                    "imageSKU": {
                        "value": "[variables('imageSKU')]"
                    },
                    "apiVersionCompute": {
                        "value": "[variables('apiVersionCompute')]"
                    },
                    "apiVersionNetwork": {
                        "value": "[variables('apiVersionNetwork')]"
                    },
                    "location": {
                        "value": "[resourceGroup().location]"
                    },
                    "vmNamePrefix": {
                        "value": "[concat(parameters('clusterPrefix'), copyindex())]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "sshPublicKey": {
                        "value": "[parameters('sshPublicKey')]"
                    },
                    "vmSize": {
                        "value": "[parameters('ucpDtrNodeSize')]"
                    },
                    "availabilitySetName": {
                        "value": "[variables('availabilitySetNameUcpNodesDtr')]"
                    },
                    "nodeSubnetRef": {
                        "value": "[variables('nodeSubnetRef')]"
                    },
                    "nodeLbBackendPoolName": {
                        "value": "[variables('nodeDtrLbBackendPoolName')]"
                    },
                    "nodeLbId": {
                        "value": "[variables('nodeDtrLbId')]"
                    },
                    "storageAccountName": {
                        "value": "[variables('ucpNodeDtrStorageAccountName')]"
                    }
                }
            }
        },
        {
            "apiVersion": "[variables('apiVersionCompute')]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('clusterPrefix'), '0-ucpctrl/ucpControllerConfig')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "ucpController0"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[variables('ucpControllerScriptUri')]"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "[concat('bash setup-controller.sh \"', parameters('ucpAdminPassword'), '\" \"', reference(parameters('controllerLbPublicIpAddress')).dnsSettings.fqdn, '\" \"', parameters('ucpLicenseKey'), '\" \"', reference('ucpController0').outputs.privateIp.value, '\"')]"
                }
            }
        },
        {
            "apiVersion": "[variables('apiVersionCompute')]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('clusterPrefix'), copyIndex(1), '-ucpctrl/ucpControllerConfig')]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "ucpReplicaScriptSet",
                "count": "[variables('ucpReplicaCount')]"
            },
            "dependsOn": [
                "[concat('ucpController', copyindex(1))]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', concat(parameters('clusterPrefix'), '0-ucpdtrnode'), 'ucpDtrNodeConfig')]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[variables('ucpReplicaScriptUri')]"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "[concat('bash setup-replica.sh \"', parameters('ucpAdminPassword'), '\" \"', reference(parameters('controllerLbPublicIpAddress')).dnsSettings.fqdn, '\" \"', reference('ucpController0').outputs.privateIp.value, '\" \"', mul(copyIndex(), 6), '\"')]"
                }
            }
        },
        {
            "apiVersion": "[variables('apiVersionCompute')]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('clusterPrefix'), copyindex(), '-ucpnode/ucpNodeConfig')]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "ucpNodeScriptSet",
                "count": "[parameters('ucpNodeCount')]"
            },
            "dependsOn": [
                "[concat('ucpNode', copyindex())]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', concat(parameters('clusterPrefix'), '0-ucpctrl'), 'ucpControllerConfig')]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[variables('ucpNodeScriptUri')]"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "[concat('bash setup-ucp-node.sh \"', parameters('ucpAdminPassword'), '\" \"', reference(parameters('controllerLbPublicIpAddress')).dnsSettings.fqdn, '\" \"', reference('ucpController0').outputs.privateIp.value, '\" \"', mul(copyIndex(), 6), '\"')]"
                }
            }
        },
        {
            "apiVersion": "[variables('apiVersionCompute')]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('clusterPrefix'), '0-ucpdtrnode/ucpDtrNodeConfig')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "ucpDtrNode0",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', concat(parameters('clusterPrefix'), variables('ucpNodeReplicaCount'), '-ucpnode'), 'ucpNodeConfig')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', concat(parameters('clusterPrefix'), '0-ucpctrl'), 'ucpControllerConfig')]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[variables('ucpDtrNodeScriptUri')]"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "[concat('bash setup-ucp-dtr-node.sh \"', parameters('ucpAdminPassword'), '\" \"', reference(parameters('controllerLbPublicIpAddress')).dnsSettings.fqdn, '\" \"', reference(parameters('nodeDtrLbPublicIpAddress')).dnsSettings.fqdn, '\" \"', variables('ucpDtrReplicaId'), '\" \"', reference('ucpController0').outputs.privateIp.value, '\" \"', parameters('clusterPrefix'), '\" \"', variables('ucpDtrReplicaCount'), '\" \"', mul(parameters('ucpNodeCount'), 1), '\"')]"
                }
            }
        },
        {
            "apiVersion": "[variables('apiVersionCompute')]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('clusterPrefix'), copyindex(1), '-ucpdtrnode/ucpDtrNodeConfig')]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "ucpDtrNodeScriptSet",
                "count": "[variables('ucpDtrReplicaCount')]"
            },
            "dependsOn": [
                "[concat('ucpDtrNode', copyindex(1))]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', concat(parameters('clusterPrefix'), '0-ucpctrl'), 'ucpControllerConfig')]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[variables('ucpDtrNodeReplicaScriptUri')]"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "[concat('bash setup-ucp-dtr-replica.sh \"', parameters('ucpAdminPassword'), '\" \"', reference(parameters('controllerLbPublicIpAddress')).dnsSettings.fqdn, '\" \"', variables('ucpDtrReplicaId'), '\" \"', reference('ucpController0').outputs.privateIp.value, '\" \"', mul(copyIndex(), 1), '\"')]"
                }
            }
        }
    ],
    "outputs": {
        "ucpConsoleAddress": {
            "value": "[concat('https://', reference(parameters('controllerLbPublicIpAddress')).dnsSettings.fqdn)]",
            "type": "string"
        },
        "dtrConsoleAddress": {
            "value": "[concat('https://', reference(parameters('nodeDtrLbPublicIpAddress')).dnsSettings.fqdn)]",
            "type": "string"
        },
        "ucpNodeLoadBalancer": {
            "value": "[concat('https://', reference(parameters('nodeLbPublicIpAddress')).dnsSettings.fqdn)]",
            "type": "string"
        }
    }
}
