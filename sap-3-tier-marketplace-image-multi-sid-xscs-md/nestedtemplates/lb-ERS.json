{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "loadBalancerName": {
            "type": "string",
            "metadata": {
                "description": "The name of the the load balancer"
            }
        },
        "stackType": {
            "type": "string",
            "metadata": {
                "description": "The stack type of the SAP system."
            }
        },
        "osType": {
            "type": "string",
            "metadata": {
                "description": "The type of the Operating System"
            }
        },
        "ersASCSInstanceNumber": {
            "type": "int",
            "defaultValue": 2,
            "metadata": {
                "description": "The instance number of the ABAP ERS instance"
            }
        },
        "ersSCSInstanceNumber": {
            "type": "int",
            "defaultValue": 3,
            "metadata": {
                "description": "The instance number of the JAVA ERS instance"
            }
        },
        "subnetId": {
            "type": "string",
            "metadata": {
                "description": "The id of the subnet you want to use."
            }
        },
        "nicBackAddressPoolsArray": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "The array that contains the backaddress pools for the Network Interface creation"
            }
        },
        "frontendIPConfigurationsArray": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "The array that contains the frontend IP configurations for the Load Balancer creation"
            }
        },
        "backendAddressPoolsArray": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "The array that contains the backend address pools for the Load Balancer creation"
            }
        },
        "loadBalancingRulesArray": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "The array that contains the fload balancing rules for the Load Balancer creation"
            }
        },
        "probesArray": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "The array that contains the probes for the Load Balancer creation"
            }
        }
    },
    "variables": {
        "lbPrefix": "[concat('lb', padLeft(parameters('ersASCSInstanceNumber'), 2, '0'))]",
        "lbrulePrefix": "[concat(variables('lbPrefix'), 'Rule')]",
        "backendPoolERS": "[concat(variables('lbPrefix'), 'BackendPoolERS')]",
        "loadBalancerFrontendERS": "[concat(variables('lbPrefix'), 'FrontendERS')]",
        "lbProbePortERS": "[concat(variables('lbPrefix'), 'ProbePortERS')]",
        "lbProbePortInternalERS": "[add(62100, parameters('ersASCSInstanceNumber'))]",
        "idleTimeoutInMinutesERS": 30,
        "loadBalancingRulesASCS": {
            "Windows": [],
            "Linux": [
                {
                    "properties": {
                        "frontendIPConfiguration": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('loadBalancerName'), variables('loadBalancerFrontendERS'))]"
                        },
                        "backendAddressPool": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancerName'), variables('backendPoolERS'))]"
                        },
                        "probe": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('loadBalancerName'), variables('lbProbePortERS'))]"
                        },
                        "protocol": "Tcp",
                        "frontendPort": "[add(3300, parameters('ersASCSInstanceNumber'))]",
                        "backendPort": "[add(3300, parameters('ersASCSInstanceNumber'))]",
                        "enableFloatingIP": true,
                        "idleTimeoutInMinutes": "[variables('idleTimeoutInMinutesERS')]"
                    },
                    "name": "[concat(variables('lbrulePrefix'), '33', padLeft(parameters('ersASCSInstanceNumber'), 2, '0'))]"
                },
                {
                    "properties": {
                        "frontendIPConfiguration": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('loadBalancerName'), variables('loadBalancerFrontendERS'))]"
                        },
                        "backendAddressPool": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancerName'), variables('backendPoolERS'))]"
                        },
                        "probe": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('loadBalancerName'), variables('lbProbePortERS'))]"
                        },
                        "protocol": "Tcp",
                        "frontendPort": "[add(50013, mul(parameters('ersASCSInstanceNumber'), 100))]",
                        "backendPort": "[add(50013, mul(parameters('ersASCSInstanceNumber'), 100))]",
                        "enableFloatingIP": true,
                        "idleTimeoutInMinutes": "[variables('idleTimeoutInMinutesERS')]"
                    },
                    "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('ersASCSInstanceNumber'), 2, '0'), '13')]"
                },
                {
                    "properties": {
                        "frontendIPConfiguration": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('loadBalancerName'), variables('loadBalancerFrontendERS'))]"
                        },
                        "backendAddressPool": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancerName'), variables('backendPoolERS'))]"
                        },
                        "probe": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('loadBalancerName'), variables('lbProbePortERS'))]"
                        },
                        "protocol": "Tcp",
                        "frontendPort": "[add(50014, mul(parameters('ersASCSInstanceNumber'), 100))]",
                        "backendPort": "[add(50014, mul(parameters('ersASCSInstanceNumber'), 100))]",
                        "enableFloatingIP": true,
                        "idleTimeoutInMinutes": "[variables('idleTimeoutInMinutesERS')]"
                    },
                    "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('ersASCSInstanceNumber'), 2, '0'), '14')]"
                },
                {
                    "properties": {
                        "frontendIPConfiguration": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('loadBalancerName'), variables('loadBalancerFrontendERS'))]"
                        },
                        "backendAddressPool": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancerName'), variables('backendPoolERS'))]"
                        },
                        "probe": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('loadBalancerName'), variables('lbProbePortERS'))]"
                        },
                        "protocol": "Tcp",
                        "frontendPort": "[add(50016, mul(parameters('ersASCSInstanceNumber'), 100))]",
                        "backendPort": "[add(50016, mul(parameters('ersASCSInstanceNumber'), 100))]",
                        "enableFloatingIP": true,
                        "idleTimeoutInMinutes": "[variables('idleTimeoutInMinutesERS')]"
                    },
                    "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('ersASCSInstanceNumber'), 2, '0'), '16')]"
                }
            ]
        },
        "loadBalancingRulesSCS": {
            "Windows": [],
            "Linux": [
                {
                    "properties": {
                        "frontendIPConfiguration": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('loadBalancerName'), variables('loadBalancerFrontendERS'))]"
                        },
                        "backendAddressPool": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancerName'), variables('backendPoolERS'))]"
                        },
                        "probe": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('loadBalancerName'), variables('lbProbePortERS'))]"
                        },
                        "protocol": "Tcp",
                        "frontendPort": "[add(3300, parameters('ersSCSInstanceNumber'))]",
                        "backendPort": "[add(3300, parameters('ersSCSInstanceNumber'))]",
                        "enableFloatingIP": true,
                        "idleTimeoutInMinutes": "[variables('idleTimeoutInMinutesERS')]"
                    },
                    "name": "[concat(variables('lbrulePrefix'), '33', padLeft(parameters('ersSCSInstanceNumber'), 2, '0'))]"
                },
                {
                    "properties": {
                        "frontendIPConfiguration": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('loadBalancerName'), variables('loadBalancerFrontendERS'))]"
                        },
                        "backendAddressPool": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancerName'), variables('backendPoolERS'))]"
                        },
                        "probe": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('loadBalancerName'), variables('lbProbePortERS'))]"
                        },
                        "protocol": "Tcp",
                        "frontendPort": "[add(50013, mul(parameters('ersSCSInstanceNumber'), 100))]",
                        "backendPort": "[add(50013, mul(parameters('ersSCSInstanceNumber'), 100))]",
                        "enableFloatingIP": true,
                        "idleTimeoutInMinutes": "[variables('idleTimeoutInMinutesERS')]"
                    },
                    "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('ersSCSInstanceNumber'), 2, '0'), '13')]"
                },
                {
                    "properties": {
                        "frontendIPConfiguration": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('loadBalancerName'), variables('loadBalancerFrontendERS'))]"
                        },
                        "backendAddressPool": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancerName'), variables('backendPoolERS'))]"
                        },
                        "probe": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('loadBalancerName'), variables('lbProbePortERS'))]"
                        },
                        "protocol": "Tcp",
                        "frontendPort": "[add(50014, mul(parameters('ersSCSInstanceNumber'), 100))]",
                        "backendPort": "[add(50014, mul(parameters('ersSCSInstanceNumber'), 100))]",
                        "enableFloatingIP": true,
                        "idleTimeoutInMinutes": "[variables('idleTimeoutInMinutesERS')]"
                    },
                    "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('ersSCSInstanceNumber'), 2, '0'), '14')]"
                },
                {
                    "properties": {
                        "frontendIPConfiguration": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('loadBalancerName'), variables('loadBalancerFrontendERS'))]"
                        },
                        "backendAddressPool": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancerName'), variables('backendPoolERS'))]"
                        },
                        "probe": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('loadBalancerName'), variables('lbProbePortERS'))]"
                        },
                        "protocol": "Tcp",
                        "frontendPort": "[add(50016, mul(parameters('ersSCSInstanceNumber'), 100))]",
                        "backendPort": "[add(50016, mul(parameters('ersSCSInstanceNumber'), 100))]",
                        "enableFloatingIP": true,
                        "idleTimeoutInMinutes": "[variables('idleTimeoutInMinutesERS')]"
                    },
                    "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('ersSCSInstanceNumber'), 2, '0'), '16')]"
                }
            ]
        },
        "loadBalancingRules": {
            "ABAP": "[variables('loadBalancingRulesASCS')[parameters('osType')]]",
            "JAVA": "[variables('loadBalancingRulesSCS')[parameters('osType')]]",
            "ABAP+JAVA": "[concat(variables('loadBalancingRulesASCS')[parameters('osType')], variables('loadBalancingRulesSCS')[parameters('osType')])]"
        },
        "nicBackAddressPoolsResult": {
            "Windows": [],
            "Linux": [
                {
                    "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancerName'), variables('backendPoolERS'))]"
                }
            ]
        },
        "frontendIPConfigurationsResult": {
            "Windows": [],
            "Linux": [
                {
                    "properties": {
                        "subnet": {
                            "id": "[parameters('subnetId')]"
                        },
                        "privateIPAllocationMethod": "Dynamic"
                    },
                    "name": "[variables('loadBalancerFrontendERS')]"
                }
            ]
        },
        "backendAddressPoolsResult": {
            "Windows": [],
            "Linux": [
                {
                    "name": "[variables('backendPoolERS')]"
                }
            ]
        },
        "loadBalancingRulesResult": "[variables('loadBalancingRules')[parameters('stackType')]]",
        "probesResult": {
            "Windows": [],
            "Linux": [
                {
                    "properties": {
                        "protocol": "Tcp",
                        "port": "[variables('lbProbePortInternalERS')]",
                        "intervalInSeconds": 5,
                        "numberOfProbes": 2
                    },
                    "name": "[variables('lbProbePortERS')]"
                }
            ]
        }
    },
    "resources": [],
    "outputs": {
        "nicBackAddressPools": {
            "value": "[concat(parameters('nicBackAddressPoolsArray'), variables('nicBackAddressPoolsResult')[parameters('osType')])]",
            "type": "array"
        },
        "frontendIPConfigurations": {
            "value": "[concat(parameters('frontendIPConfigurationsArray'), variables('frontendIPConfigurationsResult')[parameters('osType')])]",
            "type": "array"
        },
        "backendAddressPools": {
            "value": "[concat(parameters('backendAddressPoolsArray'), variables('backendAddressPoolsResult')[parameters('osType')])]",
            "type": "array"
        },
        "loadBalancingRules": {
            "value": "[concat(parameters('loadBalancingRulesArray'), variables('loadBalancingRulesResult'))]",
            "type": "array"
        },
        "probes": {
            "value": "[concat(parameters('probesArray'), variables('probesResult')[parameters('osType')])]",
            "type": "array"
        }
    }
}