{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin username used when provisioning virtual machines"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password used when provisioning virtual machines"
      }
    },
    "location": {
      "type": "string",
      "allowedValues": [
        "ResourceGroup",
        "West US",
        "East US",
        "East US 2",
        "Central US",
        "South Central US",
        "North Central US",
        "East Asia",
        "Southeast Asia",
        "West Europe",
        "North Europe"
      ],
      "defaultValue": "ResourceGroup",
      "metadata": {
        "description": "Location where resources will be provisioned.  A value of 'ResourceGroup' will deploy the resource to the same location of the resource group the resources are provisioned into"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "defaultValue": "es-vnet",
      "metadata": {
        "description": "Virtual Network"
      }
    },
    "OS": {
      "type": "string",
      "defaultValue": "ubuntu",
      "allowedValues": [
        "ubuntu",
        "windows"
      ],
      "metadata": {
        "description": "The operating system to deploy Elasticsearch cluster on"
      }
    },
    "loadBalancerType": {
      "type": "string",
      "defaultValue": "internal",
      "allowedValues": [
        "internal",
        "external"
      ],
      "metadata": {
        "description": "Setup the load balancer internal or external.  If you are setting up Elasticsearch on an external endpoint you will need to secure your nodes with a product like Elasticsearch Shield"
      }
    },
    "jumpbox": {
      "type": "string",
      "defaultValue": "Yes",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Optionally add a virtual machine to the deployment which you can use to connect and manage virtual machines on the internal network"
      }
    },
    "vmClientNodeCount": {
      "type": "int",
      "defaultValue": 1,
      "allowedValues": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "metadata": {
        "description": "Number of Elasticsearch client nodes to provision (Setting this to zero puts the data nodes on the load balancer)"
      }
    },
    "vmSizeClientNodes": {
      "type": "string",
      "defaultValue": "Standard_D2_v2",
      "allowedValues": [
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS13"
      ],
      "metadata": {
        "description": "Size of the Elasticsearch cluster client nodes"
      }
    },
    "vmSizeMasterNodes": {
      "type": "string",
      "defaultValue": "Standard_D2_v2",
      "allowedValues": [
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS13"
      ],
      "metadata": {
        "description": "Size of the Elasticsearch master nodes"
      }
    },
    "vmSizeDataNodes": {
      "type": "string",
      "defaultValue": "Standard_D2_v2",
      "allowedValues": [
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS13",
        "Standard_DS14"
      ],
      "metadata": {
        "description": "Size of the Elasticsearch data nodes"
      }
    },
    "vmDataNodeCount": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Number of Elasticsearch data nodes"
      }
    },
    "esClusterName": {
      "type": "string",
      "defaultValue": "elasticsearch",
      "metadata": {
        "description": "The name of the Elasticsearch cluster"
      }
    },
    "esVersion": {
      "type": "string",
      "defaultValue": "2.2.0",
      "allowedValues": [
        "2.2.0",
        "2.1.2",
        "1.7.5"
      ],
      "metadata": {
        "description": "Elasticsearch version to install"
      }
    },
    "afs": {
      "type": "string",
      "defaultValue": "no",
      "allowedValues": [
        "yes",
        "no"
      ],
      "metadata": {
        "description": "Setup an Azure File Service share to store the Elasticsearch data (ubuntu, elasticsearch 2.x only)"
      }
    },
    "marvel": {
      "type":"string",
      "defaultValue":"yes",
      "allowedValues": [
        "yes",
        "no"
      ],
      "metadata": {
        "description": "Install the marvel agent in the cluster"
      }
    },
    "kibana":{
      "type":"string",
      "defaultValue":"yes",
      "allowedValues": [
        "yes",
        "no"
      ],
      "metadata": {
        "description": "Provision a machine with Kibana on it"
      }
    },
    "sense":{
      "type":"string",
      "defaultValue":"yes",
      "allowedValues": [
        "yes",
        "no"
      ],
      "metadata": {
        "description": "Install the Sense plugin (2.x only, requires Kibana)"
      }
    },
    "templateBase": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master",
      "metadata": {
        "description": "Change this value to your repo name if deploying from a fork"
      } 
    }
  },
  "variables": {
    "templateBaseUrl": "[concat(parameters('templateBase'), '/elasticsearch/')]",
    "scriptBaseUrl": "[concat(parameters('templateBase'), '/shared_scripts/ubuntu/')]",
    "locationMap": {
        "ResourceGroup":"[resourceGroup().location]",
        "West US":"[parameters('location')]",
        "East US":"[parameters('location')]",
        "East US 2":"[parameters('location')]",
        "Central US":"[parameters('location')]",
        "South Central US":"[parameters('location')]",
        "North Central US":"[parameters('location')]",
        "East Asia":"[parameters('location')]",
        "Southeast Asia":"[parameters('location')]",
        "West Europe":"[parameters('location')]",
        "North Europe":"[parameters('location')]"
    },
    "location":"[variables('locationMap')[parameters('location')]]",
    "storageAccountPrefix": "[concat(substring(uniqueString(resourceGroup().id, parameters('esClusterName')), 0, 6), substring(parameters('esClusterName'), 0, 3))]",
    "storageAccountNameShared": "[concat(variables('storageAccountPrefix'), 'sh')]",
    "masterNodesIpPrefix": "10.0.0.1",
    "networkSettings": {
      "virtualNetworkName": "[parameters('virtualNetworkName')]",
      "addressPrefix": "10.0.0.0/16",
      "subnet": {
        "master": {
          "name": "master",
          "prefix": "10.0.0.0/24",
          "vnet": "[parameters('virtualNetworkName')]"
        },
        "data": {
          "name": "data",
          "prefix": "10.0.1.0/24",
          "vnet": "[parameters('virtualNetworkName')]"
        },
        "other": {
          "name": "other",
          "prefix": "10.0.2.0/24",
          "vnet": "[parameters('virtualNetworkName')]"
        }
      }
    },
    "esSettings": {
      "clusterName": "[parameters('esClusterName')]",
      "version": "[parameters('esVersion')]",
      "discoveryHosts": "[concat(variables('masterNodesIpPrefix'), '-3')]"
    },
    "sharedTemplateUrl": "[concat(variables('templateBaseUrl'), 'shared-resources.json')]",
    "masterTemplateUrl": "[concat(variables('templateBaseUrl'), 'master-nodes-resources.json')]",
    "clientTemplates": [
      "empty-resources.json",
      "client-nodes-resources.json"
    ],
    "clientTemplateUrl": "[concat(variables('templateBaseUrl'), variables('clientTemplates')[mod(add(parameters('vmClientNodeCount'),2),add(parameters('vmClientNodeCount'),1))])]",
    "lbBackEndPoolsAdded": {
      "backendPools": [
        {
          "id": "[concat(resourceId('Microsoft.Network/loadBalancers','es-load-balancer'),'/backendAddressPools/LBBE')]"
        }
      ]
    },
    "lbBackendPoolsRemoved": {
      "backendPools": []
    },
    "dataLBSettingOptions": [
      "[variables('lbBackEndPoolsAdded')]",
      "[variables('lbBackendPoolsRemoved')]"
    ],
    "dataLBSettings": "[variables('dataLBSettingOptions')[mod(add(parameters('vmClientNodeCount'),2),add(parameters('vmClientNodeCount'),1))]]",
    "jumpboxTemplateYes": "jumpbox-resources.json",
    "jumpboxTemplateNo": "empty-resources.json",
    "jumpboxTemplateUrl": "[concat(variables('templateBaseUrl'), variables(concat('jumpboxTemplate',parameters('jumpbox'))))]",
    "senseParam": {  
        "yes":" -s ",
        "no":""
    },
    "marvelParam": {
      "ubuntu": {
        "yes":" -m ",
        "no":""
      },
      "windows": {
        "yes":" -m ",
        "no":""
      }
    },
    "afsParam": {
      "ubuntu": {
        "yes": "[concat(' -a ', variables('storageAccountNameShared'), ' -c -k ')]",
        "no": "[concat(' -a ', variables('storageAccountNameShared'), ' -k ')]"
      },
      "windows": {
        "yes":"",
        "no":""
      } 
    },
    "senseParamValue": "[variables('senseParam')[parameters('sense')]]",
    "marvelParamValue": "[variables('marvelParam')[parameters('OS')][parameters('marvel')]]",
    "afsParamValue": "[variables('afsParam')[parameters('OS')][parameters('afs')]]",
    "kibanaTemplates": {
      "yes": "kibana-resources.json",
      "no": "empty-resources.json"
    },
    "kibanaTemplateUrl":"[concat(variables('templateBaseUrl'), variables('kibanaTemplates')[parameters('kibana')], '')]",
    "scriptParams": [
      "[concat('version=', parameters('esVersion'), ';')]",
      "[concat('clusterName=', parameters('esClusterName'), ';')]",
      "[concat('discoveryHosts=', variables('masterNodesIpPrefix'), '-3', ';')]",
      "[concat('installMarvel=', parameters('marvel'), ';')]"
    ],
    "scriptParamString":"[concat(variables('scriptParams')[0], variables('scriptParams')[1], variables('scriptParams')[2], variables('scriptParams')[3] )]",
    "ubuntuScripts": [
      "[concat(variables('templateBaseUrl'), 'elasticsearch-ubuntu-install.sh')]",
      "[concat(variables('templateBaseUrl'), 'kibana-install.sh')]",
      "[concat(variables('scriptBaseUrl'), 'vm-disk-utils-0.1.sh')]",
      "[concat(variables('scriptBaseUrl'), 'afs-utils-0.1.sh')]"
    ],
    "windowsScripts": [
      "[concat(variables('templateBaseUrl'), 'elasticsearch-windows-install.ps1')]"
    ],
    "ubuntuSettings": {
      "imageReference":{
        "publisher": "Canonical",
        "offer": "UbuntuServer",
        "sku": "14.04.2-LTS",
        "version": "latest"
      },
      "managementPort":"22",
      "extensionSettings":{
        "master": {
            "publisher": "Microsoft.OSTCExtensions",
            "type": "CustomScriptForLinux",
            "typeHandlerVersion": "1.2",
            "settings": {
              "fileUris": "[variables('ubuntuScripts')]",
              "commandToExecute": "[concat('bash elasticsearch-ubuntu-install.sh -xn ', variables('esSettings').clusterName, ' -v ', variables('esSettings').version, ' -d ', variables('esSettings').discoveryHosts, variables('marvelParamValue'), variables('afsParamValue'))]"
            }
          },
        "client": {
            "publisher": "Microsoft.OSTCExtensions",
            "type": "CustomScriptForLinux",
            "typeHandlerVersion": "1.2",
            "settings": {
              "fileUris": "[variables('ubuntuScripts')]",
              "commandToExecute": "[concat('bash elasticsearch-ubuntu-install.sh -yn ', variables('esSettings').clusterName, ' -v ', variables('esSettings').version, ' -d ', variables('esSettings').discoveryHosts, variables('marvelParamValue'), variables('afsParamValue'))]"
            }
          },
        "data": {
          "publisher": "Microsoft.OSTCExtensions",
          "type": "CustomScriptForLinux",
          "typeHandlerVersion": "1.2",
          "settings": {
            "fileUris": "[variables('ubuntuScripts')]",
            "commandToExecute": "[concat('bash elasticsearch-ubuntu-install.sh -zn ', variables('esSettings').clusterName, ' -v ', variables('esSettings').version, ' -d ', variables('esSettings').discoveryHosts, variables('marvelParamValue'), variables('afsParamValue'))]"
          }
        },
        "kibana": {
          "publisher": "Microsoft.OSTCExtensions",
          "type": "CustomScriptForLinux",
          "typeHandlerVersion": "1.2",
          "settings": {
            "fileUris": "[variables('ubuntuScripts')]",
            "commandToExecute": "[concat('bash kibana-install.sh -v ', variables('esSettings').version, variables('marvelParamValue'), variables('senseParamValue'), ' -t http://', variables('masterNodesIpPrefix'), '0:9200')]"
          }
        }
      }
    },
    "windowsSettings": {
      "imageReference":{
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2012-R2-Datacenter",
        "version": "latest"
      },
      "managementPort":"3389",
      "extensionSettings":{
        "master": {
          "publisher": "Microsoft.Compute",
          "type": "CustomScriptExtension",
          "typeHandlerVersion": "1.4",
          "settings": {
            "fileUris": "[variables('windowsScripts')]",
            "commandToExecute": "[concat('powershell.exe -File elasticsearch-windows-install.ps1 -elasticSearchVersion ', variables('esSettings').version,' -elasticClusterName ', variables('esSettings').clusterName,' -discoveryEndpoints ', variables('esSettings').discoveryHosts, ' -masterOnlyNode -installMarvel -storageKey ')]"
          }
        },
        "client": {
          "publisher": "Microsoft.Compute",
          "type": "CustomScriptExtension",
          "typeHandlerVersion": "1.4",
          "settings": {
            "fileUris": "[variables('windowsScripts')]",
            "commandToExecute": "[concat('powershell.exe -File elasticsearch-windows-install.ps1 -elasticSearchVersion ', variables('esSettings').version,' -elasticClusterName ', variables('esSettings').clusterName,' -discoveryEndpoints ', variables('esSettings').discoveryHosts, ' -clientOnlyNode -installMarvel -storageKey ')]"
          }
        },
        "data": {
          "publisher": "Microsoft.Compute",
          "type": "CustomScriptExtension",
          "typeHandlerVersion": "1.4",
          "settings": {
            "fileUris": "[variables('windowsScripts')]",
            "commandToExecute": "[concat('powershell.exe -File elasticsearch-windows-install.ps1 -elasticSearchVersion ', variables('esSettings').version,' -elasticClusterName ', variables('esSettings').clusterName,' -discoveryEndpoints ', variables('esSettings').discoveryHosts, ' -dataOnlyNode -installMarvel -storageKey ')]"
          }
        }
      }
    },
    "osSettings": "[variables(concat(parameters('OS'), 'Settings'))]",
    "dataSkuSettings": {
      "Standard_D1_v2": {
        "dataDisks":2,
        "nodesPerStorageAccount":6,
        "storageAccountType":"Standard_LRS"
      },
      "Standard_D2_v2": {
        "dataDisks":4,
        "nodesPerStorageAccount":4,
        "storageAccountType":"Standard_LRS"
      },
      "Standard_D3_v2": {
        "dataDisks":8,
        "nodesPerStorageAccount":3,
        "storageAccountType":"Standard_LRS"
      },
      "Standard_D4_v2": {
        "dataDisks":16,
        "nodesPerStorageAccount":2,
        "storageAccountType":"Standard_LRS"
      },
      "Standard_DS1": {
        "dataDisks":2,
        "nodesPerStorageAccount":6,
        "storageAccountType":"Premium_LRS"
      },
      "Standard_DS2": {
        "dataDisks":4,
        "nodesPerStorageAccount":4,
        "storageAccountType":"Premium_LRS"
      },
      "Standard_DS3": {
        "dataDisks":8,
        "nodesPerStorageAccount":4,
        "storageAccountType":"Premium_LRS"
      },
      "Standard_DS4": {
        "dataDisks":16,
        "nodesPerStorageAccount":2,
        "storageAccountType":"Premium_LRS"
      },
      "Standard_DS13": {
        "dataDisks":16,
        "nodesPerStorageAccount":2,
        "storageAccountType":"Premium_LRS"
      },
      "Standard_DS14": {
        "dataDisks":16,
        "nodesPerStorageAccount":2,
        "storageAccountType":"Premium_LRS"
      },
      "Standard_A2": {
        "dataDisks":4,
        "nodesPerStorageAccount":6,
        "storageAccountType":"Standard_LRS"
      },
      "Standard_A3": {
        "dataDisks":8,
        "nodesPerStorageAccount":4,
        "storageAccountType":"Standard_LRS"
      },
      "Standard_A4": {
        "dataDisks":16,
        "nodesPerStorageAccount":2,
        "storageAccountType":"Standard_LRS"
      },
      "Standard_A7": {
        "dataDisks":16,
        "nodesPerStorageAccount":2,
        "storageAccountType":"Standard_LRS"
      }
    },
    "nodesPerStorageAccount":"[variables('dataSkuSettings')[parameters('vmSizeDataNodes')].nodesPerStorageAccount]",
    "storageBinPackMap": [
      "[div(sub(add(1, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(2, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(3, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(4, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(5, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(6, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(7, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(8, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(9, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(10, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(11, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(12, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(13, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(14, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(15, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(16, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(17, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(18, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(19, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(20, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(21, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(22, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(23, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(24, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(25, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(26, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(27, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(28, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(29, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(30, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(31, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(32, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(33, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(34, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(35, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(36, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(37, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(38, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(39, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(40, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(51, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(52, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(53, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(54, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(55, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(56, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(57, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(58, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(59, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(60, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]"
    ],
    "dataNodeStorageSettings": {
      "count":"[div(sub(add(parameters('vmDataNodeCount'), variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "mapping":"[variables('storageBinPackMap')]",
      "accountType":"[variables('dataSkuSettings')[parameters('vmSizeDataNodes')].storageAccountType]",
      "shared":"[variables('storageAccountNameShared')]",
      "prefix":"[concat(variables('storageAccountPrefix'), 'da')]"
    },
    "dataTemplateUrl": {
        "afs-yes": "[concat(variables('templateBaseUrl'), 'data-nodes-0disk-resources.json')]",
        "afs-no": "[concat(variables('templateBaseUrl'), 'data-nodes-', string(variables('dataSkuSettings')[parameters('vmSizeDataNodes')].dataDisks), 'disk-resources.json')]"
    }
  },
  "resources": [
    {
      "name": "master-nodes",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'shared')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('masterTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "storageAccountName": {
            "value": "[variables('storageAccountNameShared')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "masterNodesIpPrefix": {
            "value": "[variables('masterNodesIpPrefix')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "vmSize": {
            "value": "[parameters('vmSizeMasterNodes')]"
          },
          "subnet": {
            "value": "[variables('networkSettings').subnet.master]"
          },
          "osSettings": {
            "value": "[variables('osSettings')]"
          },
          "namespace": {
            "value": "[concat(parameters('esClusterName'), '-master')]"
          }
        }
      }
    },
    {
      "name": "shared",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('sharedTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[variables('location')]"
          },
          "networkSettings": {
            "value": "[variables('networkSettings')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountNameShared')]"
          },
          "loadBalancerType": {
            "value": "[parameters('loadBalancerType')]"
          },
          "ilbIpAddress": {
            "value": "10.0.2.100"
          }
        }
      }
    },
    {
      "name": "client-nodes",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'shared')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('clientTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountNameShared')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "subnet": {
            "value": "[variables('networkSettings').subnet.other]"
          },
          "vmSize": {
            "value": "[parameters('vmSizeClientNodes')]"
          },
          "osSettings": {
            "value": "[variables('osSettings')]"
          },
          "vmCount": {
            "value": "[parameters('vmClientNodeCount')]"
          },
          "lbBackendPools": {
            "value": "[variables('lbBackEndPoolsAdded')]"
          },
          "namespace": {
            "value": "[concat(parameters('esClusterName'), '-client')]"
          }
        }
      }
    },
    {
      "name": "data-nodes",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'shared')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('dataTemplateUrl')[concat('afs-', parameters('afs'))]]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "storageSettings": {
            "value": "[variables('dataNodeStorageSettings')]"
          },
          "subnet": {
            "value": "[variables('networkSettings').subnet.data]"
          },
          "vmSize": {
            "value": "[parameters('vmSizeDataNodes')]"
          },
          "vmCount": {
            "value": "[parameters('vmDataNodeCount')]"
          },
          "namespace": {
            "value": "[concat(parameters('esClusterName'), '-data')]"
          },
          "osSettings": {
            "value": "[variables('osSettings')]"
          },
          "lbBackendPools": {
            "value": "[variables('dataLBSettings')]"
          }
        }
      }
    },
    {
      "name": "jumpbox",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'shared')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('jumpboxTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "storageAccountName": {
            "value": "[variables('storageAccountNameShared')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "subnet": {
            "value": "[variables('networkSettings').subnet.other]"
          },
          "osSettings": {
            "value": "[variables('osSettings')]"
          },
          "namespace": {
            "value": "[concat(parameters('esClusterName'), '-jumpbox')]"
          }
        }
      }
    },
    {
      "name": "kibana",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'shared')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('kibanaTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "storageAccountName": {
            "value": "[variables('storageAccountNameShared')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "subnet": {
            "value": "[variables('networkSettings').subnet.other]"
          },
          "osSettings": {
            "value": "[variables('ubuntuSettings')]"
          },
          "namespace": {
            "value": "[concat(parameters('esClusterName'), '-kibana')]"
          }
        }
      }
    }
  ]
}
