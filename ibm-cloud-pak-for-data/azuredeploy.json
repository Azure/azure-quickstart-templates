{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"_artifactsLocation": {
			"type": "string",
			"metadata": {
				"description": "The base URL where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
			},
			"defaultValue": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/ibm-cloud-pak-for-data/"
		},
		"_artifactsLocationSasToken": {
			"type": "secureString",
			"metadata": {
				"description": "Token for the base URL where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
			},
			"defaultValue": ""
		},
		"location": {
			"type": "string",
			"metadata": {
				"description": "Region where the resources should be created in"
			},
			"defaultValue": "[resourceGroup().location]"
		},
		"newOrExistingNetwork": {
			"type": "string",
			"defaultValue": "new",
			"allowedValues": [
				"new",
				"existing"
			],
			"metadata": {
				"description": "Deploy in new cluster or in existing cluster. If existing cluster, make sure the new resources are in the same zone"
			}
		},
		"existingVnetResourceGroupName": {
			"type": "string",
			"defaultValue": "myResourceGroup",
			"metadata": {
				"description": "Resource Group for Existing Vnet."
			}
		},
		"virtualNetworkName": {
			"type": "string",
			"defaultValue": "myVNet",
			"metadata": {
				"description": "Name of new or existing virtual network"
			}
		},
		"addressPrefix": {
			"type": "string",
			"defaultValue": "10.0.0.0/8",
			"metadata": {
				"description": "VNet Address Prefix"
			}
		},
		"masterSubnetName": {
			"type": "string",
			"defaultValue": "masterSubnet",
			"metadata": {
				"description": "Name of new or existing master subnet"
			}
		},
		"masterSubnetPrefix": {
			"type": "string",
			"defaultValue": "10.1.0.0/16",
			"metadata": {
				"description": "Master subnet address prefix"
			}
		},
		"workerSubnetName": {
			"type": "string",
			"defaultValue": "workerSubnet",
			"metadata": {
				"description": "Name of new or existing worker subnet"
			}
		},
		"workerSubnetPrefix": {
			"type": "string",
			"defaultValue": "10.2.0.0/16",
			"metadata": {
				"description": "Worker subnet address prefix"
			}
		},
		"bastionSubnetName": {
			"type": "string",
			"defaultValue": "bastionSubnet",
			"metadata": {
				"description": "Name of new or existing bastion subnet"
			}
		},
		"bastionSubnetPrefix": {
			"type": "string",
			"defaultValue": "10.3.0.0/27",
			"metadata": {
				"description": "Worker subnet address prefix"
			}
		},
		"bastionVmSize": {
			"type": "string",
			"defaultValue": "Standard_D8s_v3",
			"metadata": {
				"description": "Bastion Host VM size. Use VMs with Premium Storage support only."
			}
		},
		"masterVmSize": {
			"type": "string",
			"defaultValue": "Standard_D8s_v3",
			"metadata": {
				"description": "OpenShift Master VM size. Use VMs with Premium Storage support only."
			}
		},
		"nodeVmSize": {
			"type": "string",
			"defaultValue": "Standard_D16s_v3",
			"metadata": {
				"description": "OpenShift Node VM(s) size. Use VMs with Premium Storage support only."
			}
		},
		"infraVmSize": {
			"type": "string",
			"defaultValue": "Standard_D8s_v3",
			"metadata": {
				"description": "OpenShift Infra Node VM(s) size. Use VMs with Premium Storage support only."
			}
		},
		"openshiftClusterPrefix": {
			"type": "string",
			"defaultValue": "mycluster",
			"minLength": 2,
			"maxLength": 20,
			"metadata": {
				"description": "OpenShift cluster prefix.  Used to generate master, infra and node hostnames.  Maximum of 20 characters."
			}
		},
		"bastionInstanceCount": {
			"type": "int",
			"defaultValue": 1,
			"allowedValues": [
				1,
				2,
				3
			],
			"metadata": {
				"description": "Number of Bastion Hosts."
			}
		},
		"masterInstanceCount": {
			"type": "int",
			"defaultValue": 3,
			"allowedValues": [
				1,
				3,
				5
			],
			"metadata": {
				"description": "Number of OpenShift masters."
			}
		},
		"infraInstanceCount": {
			"type": "int",
			"defaultValue": 3,
			"allowedValues": [
				1,
				3,
				5
			],
			"metadata": {
				"description": "Number of OpenShift infra nodes."
			}
		},
		"nodeInstanceCount": {
			"type": "int",
			"defaultValue": 3,
			"allowedValues": [
				3,
				4,
				5,
				6,
				7,
				8,
				9,
				10
			],
			"metadata": {
				"description": "Number of OpenShift nodes"
			}
		},
		"dataDiskSize": {
			"type": "int",
			"defaultValue": 1024,
			"allowedValues": [
				512,
				1024,
				2048
			],
			"metadata": {
				"description": "Size of Datadisk in GB for Docker volume"
			}
		},
		"adminUsername": {
			"type": "string",
			"minLength": 4,
			"metadata": {
				"description": "Administrator username on all VMs and first user created for OpenShift login"
			}
		},
		"openshiftPassword": {
			"type": "securestring",
			"minLength": 12,
			"metadata": {
				"description": "Password for OpenShift user to login to OpenShift Console"
			}
		},
		"sshPublicKey": {
			"type": "string",
			"metadata": {
				"description": "SSH public key for all VMs"
			}
		},
		"enableMetrics": {
			"type": "bool",
			"defaultValue": false,
			"allowedValues": [
				true,
				false
			],
			"metadata": {
				"description": "Enable OpenShift Metrics: true or false"
			}
		},
		"enableLogging": {
			"type": "bool",
			"defaultValue": false,
			"allowedValues": [
				true,
				false
			],
			"metadata": {
				"description": "Enable OpenShift Logging: true or false"
			}
		},
		"keyVaultResourceGroup": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Resource Group that contains the Key Vault"
			}
		},
		"keyVaultName": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Name of the Key Vault"
			}
		},
		"keyVaultSecretName": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Key Vault Secret Name that contains the Private Key"
			}
		},
		"aadClientId": {
			"type": "string",
			"metadata": {
				"description": "Azure AD Client ID"
			}
		},
		"aadClientSecret": {
			"type": "securestring",
			"metadata": {
				"description": "Azure AD Client Secret"
			}
		},
		"rhelUsername": {
			"type": "string",
			"metadata": {
				"description": "RHEL Subscription Username"
			}
		},
		"rhelPassword": {
			"type": "securestring",
			"metadata": {
				"description": "RHEL Subscription Password"
			}
		},
		"rhelPoolID": {
			"type": "securestring",
			"metadata": {
				"description": "RHEL Subscription Pool ID"
			}
		},
		"defaultSubDomainType": {
			"type": "string",
			"defaultValue": "nipio",
			"allowedValues": [
				"nipio",
				"none"
			],
			"metadata": {
				"description": "Default Subdomain type - nip.io"
			}
		},
		"singleZoneOrMultiZone": {
			"type": "string",
			"defaultValue": "single",
			"allowedValues": [
				"single",
				"multi"
			],
			"metadata": {
				"description": "Deploy to a Single AZ or multiple AZs"
			}
		},
		"zone": {
			"type": "int",
			"defaultValue": 1,
			"allowedValues": [
				1,
				2,
				3
			],
			"metadata": {
				"description": "Zone to deploy resources (if single zone selected)"
			}
		},
		"enableBackup": {
			"type": "bool",
			"defaultValue": false,
			"allowedValues": [
				true,
				false
			],
			"metadata": {
				"description": "Enable Backup on NFS Node"
			}
		},
		"projectName": {
			"type": "string",
			"defaultValue": "zen",
			"metadata": {
				"description": "Project name to deploy CloudPak for Data to"
			}
		},
		"installWatsonStudioLibrary": {
			"type": "string",
			"defaultValue": "no",
			"allowedValues": [
				"yes",
				"no"
			],
			"metadata": {
				"description": "Install Watson Studio Library"
			}
		},
		"installWatsonMachineLearning": {
			"type": "string",
			"defaultValue": "no",
			"allowedValues": [
				"yes",
				"no"
			],
			"metadata": {
				"description": "Install Watson Machine Learning"
			}
		},
		"installWatsonKnowledgeCatalog": {
			"type": "string",
			"defaultValue": "no",
			"allowedValues": [
				"yes",
				"no"
			],
			"metadata": {
				"description": "Install Watson Knowledge Catalog"
			}
		},
		"installDataVirtualization": {
			"type": "string",
			"defaultValue": "no",
			"allowedValues": [
				"yes",
				"no"
			],
			"metadata": {
				"description": "Install Data Virtualization"
			}
		},
		"installWatsonOpenscaleAndWatsonMachineLearning": {
			"type": "string",
			"defaultValue": "no",
			"allowedValues": [
				"yes",
				"no"
			],
			"metadata": {
				"description": "Install Watson OpenScale and Watson Machine Learning"
			}
		},
		"apiKeyUsername": {
			"type": "string",
			"metadata": {
				"description": "registry entitlement key username"
			}
		},
		"apiKey": {
			"type": "securestring",
			"metadata": {
				"description": "registry entitlement key"
			}
		},
		"cloudPakLicenseAgreement": {
			"type": "string",
			"defaultValue": "yes",
			"allowedValues": [
				"no",
				"yes"
			],
			"metadata": {
				"description": "Agree to license agreement in https://ibm.biz/BdqRuM. If no is selected, only the OCP cluster will be deployed"
			}
		}
	},
	"variables": {
		"storageOption": "nfs",
		"networkResourceGroup": "[if(equals(parameters('newOrExistingNetwork'), 'existing'), parameters('existingVnetResourceGroupName'), resourceGroup().name)]",
		"virtualNetworkName": "[parameters('virtualNetworkName')]",
		"masterSubnetName": "[parameters('masterSubnetName')]",
		"nodeSubnetName": "[parameters('workerSubnetName')]",
		"bastionSubnetName": "[parameters('bastionSubnetName')]",
		"nfsSubnetName": "[parameters('workerSubnetName')]",
		"addressPrefix": "[parameters('addressPrefix')]",
		"masterSubnetPrefix": "[parameters('masterSubnetPrefix')]",
		"nodeSubnetPrefix": "[parameters('workerSubnetPrefix')]",
		"bastionSubnetPrefix": "[parameters('bastionSubnetPrefix')]",
		"location": "[parameters('location')]",
		"namingInfix": "[toLower(parameters('openshiftClusterPrefix'))]",
		"openshiftMasterHostname": "[concat(variables('namingInfix'), '-master')]",
		"bastionHostname": "[concat(variables('namingInfix'), '-bastion')]",
		"nfsHostname": "[concat(variables('namingInfix'), '-nfs')]",
		"openshiftNodeHostname": "[concat(variables('namingInfix'), '-node')]",
		"openshiftInfraHostname": "[concat(variables('namingInfix'), '-infra')]",
		"diagStorageAccount": "[concat('diag', uniqueString(resourceGroup().id))]",
		"dataStorageAccount": "[concat('data', uniqueString(resourceGroup().id))]",
		"newStorageAccountRegistry": "[concat('registry', uniqueString(resourceGroup().id))]",
		"newStorageAccountArray": [
			{
				"name": "[variables('diagStorageAccount')]",
				"tagName": "DiagnosticsStorageAccount",
				"skuName": "[variables('storageSkuObject').diagnostics.skuName]",
				"skuTier": "[variables('storageSkuObject').diagnostics.skuTier]"
			},
			{
				"name": "[variables('newStorageAccountRegistry')]",
				"tagName": "RegistryStorageAccount",
				"skuName": "[variables('storageSkuObject').registry.skuName]",
				"skuTier": "[variables('storageSkuObject').registry.skuTier]"
			},
			{
				"name": "[variables('dataStorageAccount')]",
				"tagName": "DataStorageAccount",
				"skuName": "[variables('storageSkuObject').dataStorage.skuName]",
				"skuTier": "[variables('storageSkuObject').dataStorage.skuTier]"
			}
		],
		"availabilitySetArray": [
			{
				"name": "masteravailabilityset",
				"tagName": "MasterAvailabilitySet"
			},
			{
				"name": "infraavailabilityset",
				"tagName": "InfraAvailabilitySet"
			},
			{
				"name": "nodeavailabilityset",
				"tagName": "NodeAvailabilitySet"
			},
			{
				"name": "bastionavailabilityset",
				"tagName": "BastionAvailabilitySet"
			}
		],
		"availabilitySetSku": "Aligned",
		"platformFaultDomainCount": 2,
		"nfsVmSize": "[parameters('masterVmSize')]",
		"nfsInstanceCount": 1,
		"storageSkuObject": {
			"diagnostics": {
				"skuName": "Standard_LRS",
				"skuTier": "Standard"
			},
			"registry": {
				"skuName": "Standard_LRS",
				"skuTier": "Standard"
			},
			"dataStorage": {
				"skuName": "Premium_LRS",
				"skuTier": "Premium"
			}
		},
		"storageLoopCount": 3,
		"bastionPublicIpDnsLabel": "[concat('bastiondns', uniqueString(resourceGroup().id))]",
		"infraLbPublicIpDnsLabel": "[concat('infradns', uniqueString(resourceGroup().id))]",
		"openshiftMasterPublicIpDnsLabel": "[concat('masterdns', uniqueString(resourceGroup().id))]",
		"nfsPublicIpDnsLabel": "[concat('nfsdns', uniqueString(resourceGroup().id))]",
		"masterLoadBalancerName": "[concat(variables('openshiftMasterHostname'), 'lb')]",
		"infraLoadBalancerName": "[concat(variables('openshiftInfraHostname'), 'lb')]",
		"imageReference": {
			"publisher": "RedHat",
			"offer": "RHEL",
			"sku": "7-RAW",
			"version": "latest"
		},
		"redHatTags": {
			"app": "OpenShiftEnterprise",
			"version": "3.11",
			"platform": "AzurePublic",
			"provider": "9d2c71fc-96ba-4b4a-93b3-14def5bc96fc"
		},
		"sshKeyPath": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
		"nodePrepScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/nodePrep.sh', parameters('_artifactsLocationSasToken'))]",
		"masterPrepScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/masterPrep.sh', parameters('_artifactsLocationSasToken'))]",
		"openshiftDeploymentScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/deployOpenShift.sh', parameters('_artifactsLocationSasToken'))]",
		"cloudPakLiteDeploymentScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/deployCloudPakDataLite.sh', parameters('_artifactsLocationSasToken'))]",
		"cloudPakWSLDeploymentScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/deployCloudPakDataWsl.sh', parameters('_artifactsLocationSasToken'))]",
		"cloudPakWMLDeploymentScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/deployCloudPakDataWml.sh', parameters('_artifactsLocationSasToken'))]",
		"cloudPakPreWKCDeploymentScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/deployCloudPakDataPreWkc.sh', parameters('_artifactsLocationSasToken'))]",
		"cloudPakWKCDeploymentScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/deployCloudPakDataWkc.sh', parameters('_artifactsLocationSasToken'))]",
		"cloudPakDVDeploymentScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/deployCloudPakDataDv.sh', parameters('_artifactsLocationSasToken'))]",
		"cloudPakWOSDeploymentScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/deployCloudPakDataWos.sh', parameters('_artifactsLocationSasToken'))]",
		"bastionPrepScriptUrl": "[concat(parameters('_artifactsLocation'), 'scripts/bastionPrep.sh', parameters('_artifactsLocationSasToken'))]",
		"nodePrepScriptFileName": "nodePrep.sh",
		"masterPrepScriptFileName": "masterPrep.sh",
		"bastionPrepScriptFileName": "bastionPrep.sh",
		"openshiftDeploymentScriptFileName": "deployOpenShift.sh",
		"cloudPakLiteDeploymentScriptFileName": "deployCloudPakDataLite.sh",
		"cloudPakWSLDeploymentScriptFileName": "deployCloudPakDataWsl.sh",
		"cloudPakWMLDeploymentScriptFileName": "deployCloudPakDataWml.sh",
		"cloudPakPreWKCDeploymentScriptFileName": "deployCloudPakDataPreWkc.sh",
		"cloudPakWKCDeploymentScriptFileName": "deployCloudPakDataWkc.sh",
		"cloudPakDVDeploymentScriptFileName": "deployCloudPakDataDv.sh",
		"cloudPakWOSDeploymentScriptFileName": "deployCloudPakDataWos.sh",
		"clusterNodeDeploymentTemplateUrl": "[concat(parameters('_artifactsLocation'), 'nested/clusternode.json', parameters('_artifactsLocationSasToken'))]",
		"openshiftDeploymentTemplateUrl": "[concat(parameters('_artifactsLocation'), 'nested/openshiftdeploy.json', parameters('_artifactsLocationSasToken'))]",
		"cloudPakDeploymentTemplateUrl": "[concat(parameters('_artifactsLocation'), 'nested/cloudpakdeploy.json', parameters('_artifactsLocationSasToken'))]",
		"nfsNodeDeploymentTemplateUrl": "[concat(parameters('_artifactsLocation'), 'nested/nfsnode.json', parameters('_artifactsLocationSasToken'))]",
		"vaultName": "[concat(variables('namingInfix'), '-vault')]",
		"vmName": "[concat(variables('nfsHostname'), '-0')]",
		"backupFabric": "Azure",
		"backupPolicyName": "DefaultPolicy",
		"protectionContainer": "[concat('iaasvmcontainer;iaasvmcontainerv2;', resourceGroup().name, ';', variables('vmName'))]",
		"protectedItem": "[concat('vm;iaasvmcontainerv2;', resourceGroup().name, ';', variables('vmName'))]",
		"tempPassword": "[concat(uniqueString(subscription().subscriptionId), '5Y')]"
	},
	"resources": [
		{
			"apiVersion": "2019-05-01",
			"name": "pid-06f07fff-296b-5beb-9092-deab0c6bb8ea",
			"type": "Microsoft.Resources/deployments",
			"properties": {
				"mode": "Incremental",
				"template": {
					"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
					"contentVersion": "1.0.0.0",
					"resources": [
					]
				}
			}
		},
		{
			"apiVersion": "2019-09-01",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[concat(variables('bastionHostname'), '-nsg')]",
			"location": "[variables('location')]",
			"tags": {
				"displayName": "BastionNSG",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"

			},
			"properties": {
				"securityRules": [
					{
						"name": "allowSSHin_all",
						"properties": {
							"description": "Allow SSH in from all locations",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "22",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 100,
							"direction": "Inbound"
						}
					}
				]
			}
		},
		{
			"condition": "[equals(variables('storageOption'), 'nfs')]",
			"apiVersion": "2019-09-01",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[concat(variables('nfsHostname'), '-nsg')]",
			"location": "[variables('location')]",
			"tags": {
				"displayName": "nfsNSG",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"

			},
			"properties": {
				"securityRules": [
					{
						"name": "allowNFSin",
						"properties": {
							"description": "NFS Protocol Port",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "2049",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 100,
							"direction": "Inbound"
						}
					},
					{
						"name": "allowSSHin",
						"properties": {
							"description": "SSHin",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "22",
							"sourceAddressPrefix": "[variables('bastionSubnetPrefix')]",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 110,
							"direction": "Inbound"
						}
					}
				]
			}
		},
		{
			"apiVersion": "2019-09-01",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[concat(variables('openshiftMasterHostname'), '-nsg')]",
			"location": "[variables('location')]",
			"tags": {
				"displayName": "MasterNSG",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"

			},
			"properties": {
				"securityRules": [
					{
						"name": "allowSSHin_all",
						"properties": {
							"description": "Allow SSH in from all locations",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "22",
							"sourceAddressPrefix": "[variables('bastionSubnetPrefix')]",
							"destinationAddressPrefix": "[variables('masterSubnetPrefix')]",
							"access": "Allow",
							"priority": 100,
							"direction": "Inbound"
						}
					},
					{
						"name": "allowHTTPS_all",
						"properties": {
							"description": "Allow HTTPS connections from all locations",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "443",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 200,
							"direction": "Inbound"
						}
					}
				]
			}
		},
		{
			"apiVersion": "2019-09-01",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[concat(variables('openshiftInfraHostname'), '-nsg')]",
			"location": "[variables('location')]",
			"tags": {
				"displayName": "InfraNSG",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"properties": {
				"securityRules": [
					{
						"name": "allowSSHin_all",
						"properties": {
							"description": "Allow SSH in from all locations",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "22",
							"sourceAddressPrefix": "[variables('bastionSubnetPrefix')]",
							"destinationAddressPrefix": "[variables('masterSubnetPrefix')]",
							"access": "Allow",
							"priority": 100,
							"direction": "Inbound"
						}
					},
					{
						"name": "allowHTTPSIn_all",
						"properties": {
							"description": "Allow HTTPS connections from all locations",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "443",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 200,
							"direction": "Inbound"
						}
					},
					{
						"name": "allowHTTPIn_all",
						"properties": {
							"description": "Allow HTTP connections from all locations",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "80",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 300,
							"direction": "Inbound"
						}
					}
				]
			}
		},
		{
			"apiVersion": "2019-09-01",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[concat(variables('openshiftNodeHostname'), '-nsg')]",
			"location": "[variables('location')]",
			"tags": {
				"displayName": "NodeNSG",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"properties": {
				"securityRules": [
					{
						"name": "allowSSHin_all",
						"properties": {
							"description": "Allow SSH in from all locations",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "22",
							"sourceAddressPrefix": "[variables('bastionSubnetPrefix')]",
							"destinationAddressPrefix": "[variables('nodeSubnetPrefix')]",
							"access": "Allow",
							"priority": 100,
							"direction": "Inbound"
						}
					},
					{
						"name": "allowHTTPS_all",
						"properties": {
							"description": "Allow HTTPS connections from all locations",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "443",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 200,
							"direction": "Inbound"
						}
					},
					{
						"name": "allowHTTPIn_all",
						"properties": {
							"description": "Allow HTTP connections from all locations",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "80",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 300,
							"direction": "Inbound"
						}
					}
				]
			}
		},
		{
			"condition": "[equals(parameters('newOrExistingNetwork'), 'new')]",
			"type": "Microsoft.Network/virtualNetworks",
			"name": "[variables('virtualNetworkName')]",
			"location": "[variables('location')]",
			"tags": {
				"displayName": "VirtualNetwork",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"apiVersion": "2019-09-01",
			"properties": {
				"addressSpace": {
					"addressPrefixes": [
						"[variables('addressPrefix')]"
					]
				},
				"subnets": [
					{
						"name": "[variables('masterSubnetName')]",
						"properties": {
							"addressPrefix": "[variables('masterSubnetPrefix')]"
						}
					},
					{
						"name": "[variables('nodeSubnetName')]",
						"properties": {
							"addressPrefix": "[variables('nodeSubnetPrefix')]"
						}
					},
					{
						"name": "[variables('bastionSubnetName')]",
						"properties": {
							"addressPrefix": "[variables('bastionSubnetPrefix')]"
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Storage/storageAccounts",
			"name": "[variables('newStorageAccountArray')[copyIndex()].name]",
			"location": "[variables('location')]",
			"kind": "Storage",
			"apiVersion": "2019-06-01",
			"tags": {
				"displayName": "[variables('newStorageAccountArray')[copyIndex()].tagName]",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"copy": {
				"name": "storageLoop",
				"count": "[variables('storageLoopCount')]"
			},
			"sku": {
				"name": "[variables('newStorageAccountArray')[copyIndex()].skuName]",
				"tier": "[variables('newStorageAccountArray')[copyIndex()].skuTier]"
			}
		},
		{
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[variables('infraLbPublicIpDnsLabel')]",
			"location": "[variables('location')]",
			"apiVersion": "2019-09-01",
			"sku": {
				"name": "Standard"
			},
			"tags": {
				"displayName": "OpenShiftInfraLBPublicIP",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"properties": {
				"publicIPAllocationMethod": "Static",
				"dnsSettings": {
					"domainNameLabel": "[variables('infraLbPublicIpDnsLabel')]"
				}
			}
		},
		{
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[variables('openshiftMasterPublicIpDnsLabel')]",
			"location": "[variables('location')]",
			"sku": {
				"name": "Standard"
			},
			"apiVersion": "2019-09-01",
			"tags": {
				"displayName": "OpenShiftMasterPublicIP",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"properties": {
				"publicIPAllocationMethod": "Static",
				"dnsSettings": {
					"domainNameLabel": "[variables('openshiftMasterPublicIpDnsLabel')]"
				}
			}
		},
		{
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[variables('bastionPublicIpDnsLabel')]",
			"location": "[variables('location')]",
			"sku": {
				"name": "Standard"
			},
			"apiVersion": "2019-09-01",
			"tags": {
				"displayName": "BastionPublicIP",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"properties": {
				"publicIPAllocationMethod": "Static",
				"dnsSettings": {
					"domainNameLabel": "[variables('bastionPublicIpDnsLabel')]"
				}
			}
		},
		{
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[variables('nfsPublicIpDnsLabel')]",
			"location": "[variables('location')]",
			"apiVersion": "2019-09-01",
			"tags": {
				"displayName": "nfsPublicIP",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"properties": {
				"publicIPAllocationMethod": "Static",
				"dnsSettings": {
					"domainNameLabel": "[variables('nfsPublicIpDnsLabel')]"
				}
			}
		},
		{
			"condition": "[equals(parameters('singleZoneOrMultiZone'), 'single')]",
			"type": "Microsoft.Compute/availabilitySets",
			"name": "[variables('availabilitySetArray')[copyIndex()].name]",
			"location": "[variables('location')]",
			"apiVersion": "2019-03-01",
			"sku": {
				"name": "[variables('availabilitySetSku')]"
			},
			"tags": {
				"displayName": "[variables('availabilitySetArray')[copyIndex()].tagName]",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"copy": {
				"name": "availabiltySetLoop",
				"count": "[length(variables('availabilitySetArray'))]"
			},
			"properties": {
				"platformFaultDomainCount": "[variables('platformFaultDomainCount')]",
				"platformUpdateDomainCount": 5
			}
		},
		{
			"condition": "[equals(variables('storageOption'), 'nfs')]",
			"type": "Microsoft.Compute/availabilitySets",
			"name": "nfsavailabilityset",
			"location": "[variables('location')]",
			"apiVersion": "2019-03-01",
			"sku": {
				"name": "[variables('availabilitySetSku')]"
			},

			"tags": {
				"displayName": "NfsAvailabilitySet",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"properties": {
				"platformFaultDomainCount": "[variables('platformFaultDomainCount')]",
				"platformUpdateDomainCount": 5
			}
		},
		{
			"type": "Microsoft.Network/loadBalancers",
			"name": "[variables('masterLoadBalancerName')]",
			"location": "[variables('location')]",
			"sku": {
				"name": "Standard"
			},
			"apiVersion": "2019-09-01",
			"tags": {
				"displayName": "OpenShiftMasterLB",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Network/publicIPAddresses/', variables('openshiftMasterPublicIpDnsLabel'))]"
			],
			"properties": {
				"frontendIPConfigurations": [
					{
						"name": "LoadBalancerFrontEnd",
						"properties": {
							"publicIPAddress": {
								"id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('openshiftMasterPublicIpDnsLabel'))]"
							}
						}
					}
				],
				"backendAddressPools": [
					{
						"name": "loadBalancerBackEnd"
					}
				],
				"loadBalancingRules": [
					{
						"name": "OpenShiftAdminConsole",
						"properties": {
							"frontendIPConfiguration": {
								"id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('masterLoadBalancerName'),'loadBalancerFrontEnd')]"
							},
							"backendAddressPool": {
								"id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('masterLoadBalancerName'), 'loadBalancerBackend')]"
							},
							"protocol": "Tcp",
							"loadDistribution": "SourceIP",
							"idleTimeoutInMinutes": 30,
							"frontendPort": 443,
							"backendPort": 443,
							"probe": {
								"id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('masterLoadBalancerName'),'httpsProbe')]"
							}
						}
					}
				],
				"probes": [
					{
						"name": "httpsProbe",
						"properties": {
							"protocol": "Tcp",
							"port": 443,
							"intervalInSeconds": 5,
							"numberOfProbes": 2
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Network/loadBalancers",
			"name": "[variables('infraLoadBalancerName')]",
			"location": "[variables('location')]",
			"sku": {
				"name": "Standard"
			},
			"apiVersion": "2019-09-01",
			"tags": {
				"displayName": "OpenShiftInfraLB",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Network/publicIPAddresses/', variables('infraLbPublicIpDnsLabel'))]"
			],
			"properties": {
				"frontendIPConfigurations": [
					{
						"name": "LoadBalancerFrontEnd",
						"properties": {
							"publicIPAddress": {
								"id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('infraLbPublicIpDnsLabel'))]"
							}
						}
					}
				],
				"backendAddressPools": [
					{
						"name": "loadBalancerBackEnd"
					}
				],
				"loadBalancingRules": [
					{
						"name": "OpenShiftRouterHTTP",
						"properties": {
							"frontendIPConfiguration": {
								"id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('infraLoadBalancerName'),'loadBalancerFrontEnd')]"
							},
							"backendAddressPool": {
								"id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('infraLoadBalancerName'), 'loadBalancerBackend')]"
							},
							"protocol": "Tcp",
							"frontendPort": 80,
							"backendPort": 80,
							"probe": {
								"id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('infraLoadBalancerName'),'httpProbe')]"
							}
						}
					},
					{
						"name": "OpenShiftRouterHTTPS",
						"properties": {
							"frontendIPConfiguration": {
								"id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('infraLoadBalancerName'),'loadBalancerFrontEnd')]"
							},
							"backendAddressPool": {
								"id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('infraLoadBalancerName'), 'loadBalancerBackend')]"
							},
							"protocol": "Tcp",
							"frontendPort": 443,
							"backendPort": 443,
							"probe": {
								"id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('infraLoadBalancerName'),'httpsProbe')]"
							}
						}
					}
				],
				"probes": [
					{
						"name": "httpProbe",
						"properties": {
							"protocol": "Tcp",
							"port": 80,
							"intervalInSeconds": 5,
							"numberOfProbes": 2
						}
					},
					{
						"name": "httpsProbe",
						"properties": {
							"protocol": "Tcp",
							"port": 443,
							"intervalInSeconds": 5,
							"numberOfProbes": 2
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('bastionHostname'), '-', copyIndex(), '-nic')]",
			"location": "[variables('location')]",
			"apiVersion": "2019-09-01",
			"tags": {
				"displayName": "BastionNetworkInterface",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
				"[resourceId('Microsoft.Network/networkSecurityGroups/', concat(variables('bastionHostname'), '-nsg'))]",
				"[resourceId('Microsoft.Network/publicIPAddresses/', variables('bastionPublicIpDnsLabel'))]"
			],
			"copy": {
				"name": "bastionNicLoop",
				"count": "[parameters('bastionInstanceCount')]"
			},
			"properties": {
				"ipConfigurations": [
					{
						"name": "[concat(variables('bastionHostname'), copyIndex(), 'ipconfig')]",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"subnet": {
								"id": "[resourceId(variables('networkResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('bastionSubnetName'))]"
							},
							"publicIPAddress": {
								"id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('bastionPublicIpDnsLabel'))]"
							}
						}
					}
				],
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('bastionHostname'), '-nsg'))]"
				}
			}
		},
		{
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('nfsHostname'), '-', copyIndex(), '-nic')]",
			"location": "[variables('location')]",
			"apiVersion": "2019-09-01",
			"tags": {
				"displayName": "nfsNetworkInterface",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
				"[resourceId('Microsoft.Network/networkSecurityGroups/', concat(variables('nfsHostname'), '-nsg'))]",
				"[resourceId('Microsoft.Network/publicIPAddresses/', variables('nfsPublicIpDnsLabel'))]"
			],
			"copy": {
				"name": "nfsNicLoop",
				"count": "[variables('nfsInstanceCount')]"
			},
			"properties": {
				"ipConfigurations": [
					{
						"name": "[concat(variables('nfsHostname'), copyIndex(), 'ipconfig')]",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"subnet": {
								"id": "[resourceId(variables('networkResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('nfsSubnetName'))]"
							},
							"publicIPAddress": {
								"id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('nfsPublicIpDnsLabel'))]"
							}
						}
					}
				],
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('nfsHostname'), '-nsg'))]"
				}
			}
		},
		{
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('openshiftMasterHostname'), '-', copyIndex(), '-nic')]",
			"location": "[variables('location')]",
			"apiVersion": "2019-09-01",
			"tags": {
				"displayName": "OpenShiftMasterNetworkInterface",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
				"[resourceId('Microsoft.Network/loadBalancers/', variables('masterLoadBalancerName'))]",
				"[resourceId('Microsoft.Network/networkSecurityGroups/', concat(variables('openshiftMasterHostname'), '-nsg'))]"
			],
			"copy": {
				"name": "masterNicLoop",
				"count": "[parameters('masterInstanceCount')]"
			},
			"properties": {
				"ipConfigurations": [
					{
						"name": "[concat(variables('openshiftMasterHostname'), copyIndex(), 'ipconfig')]",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"subnet": {
								"id": "[resourceId(variables('networkResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('masterSubnetName'))]"
							},
							"loadBalancerBackendAddressPools": [
								{
									"id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('masterLoadBalancerName'), 'loadBalancerBackEnd')]"
								}
							]
						}
					}
				],
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('openshiftMasterHostname'), '-nsg'))]"
				}
			}
		},
		{
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('openshiftInfraHostname'), '-', copyIndex(), '-nic')]",
			"location": "[variables('location')]",
			"apiVersion": "2019-09-01",
			"tags": {
				"displayName": "OpenShiftInfraNetworkInterfaces",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
				"[resourceId('Microsoft.Network/loadBalancers/', variables('infraLoadBalancerName'))]",
				"[resourceId('Microsoft.Network/networkSecurityGroups/', concat(variables('openshiftInfraHostname'), '-nsg'))]"
			],
			"copy": {
				"name": "infraNicLoop",
				"count": "[parameters('infraInstanceCount')]"
			},
			"properties": {
				"ipConfigurations": [
					{
						"name": "[concat(variables('openshiftInfraHostname'), copyIndex(), 'ipconfig')]",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"subnet": {
								"id": "[resourceId(variables('networkResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('masterSubnetName'))]"
							},
							"loadBalancerBackendAddressPools": [
								{
									"id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('infraLoadBalancerName'), 'loadBalancerBackEnd')]"
								}
							]
						}
					}
				],
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('openshiftInfraHostname'), '-nsg'))]"
				}
			}
		},
		{
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('openshiftNodeHostname'), '-', copyIndex(), '-nic')]",
			"location": "[variables('location')]",
			"apiVersion": "2019-09-01",
			"tags": {
				"displayName": "OpenShiftNodeNetworkInterfaces",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
				"[resourceId('Microsoft.Network/networkSecurityGroups/', concat(variables('openshiftNodeHostname'), '-nsg'))]"
			],
			"copy": {
				"name": "nodeNicLoop",
				"count": "[parameters('nodeInstanceCount')]"
			},
			"properties": {
				"ipConfigurations": [
					{
						"name": "[concat(variables('openshiftNodeHostname'), copyIndex(), 'ipconfig')]",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"subnet": {
								"id": "[resourceId(variables('networkResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('nodeSubnetName'))]"
							}
						}
					}
				],
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('openshiftNodeHostname'), '-nsg'))]"
				}
			}
		},
		{
			"name": "[concat('masterVmDeployment', copyindex())]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('diagStorageAccount'))]",
				"masterNicLoop",
				"masteravailabilityset"
			],
			"copy": {
				"name": "masterVmLoop",
				"count": "[parameters('masterInstanceCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('clusterNodeDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"sshKeyPath": {
						"value": "[variables('sshKeyPath')]"
					},
					"sshPublicKey": {
						"value": "[parameters('sshPublicKey')]"
					},
					"adminPassword": {
						"value": "[variables('tempPassword')]"
					},
					"dataDiskSize": {
						"value": "[parameters('dataDiskSize')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"vmSize": {
						"value": "[parameters('masterVmSize')]"
					},
					"availabilitySet": {
						"value": "masteravailabilityset"
					},
					"hostname": {
						"value": "[concat(variables('openshiftMasterHostname'), '-', copyIndex())]"
					},
					"role": {
						"value": "masternode"
					},
					"vmStorageType": {
						"value": "Premium_LRS"
					},
					"diagStorageAccount": {
						"value": "[variables('diagStorageAccount')]"
					},
					"imageReference": {
						"value": "[variables('imageReference')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"singleZoneOrMultiZone": {
						"value": "[parameters('singleZoneOrMultiZone')]"
					},
					"zone": {
						"value": "[if(equals(parameters('singleZoneOrMultiZone'), 'single'), parameters('zone'), add(mod(copyIndex(), 3), 1))]"
					}
				}
			}
		},
		{
			"name": "[concat('infraVmDeployment', copyindex())]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('diagStorageAccount'))]",
				"infraNicLoop",
				"infraavailabilityset"
			],
			"copy": {
				"name": "infraVmLoop",
				"count": "[parameters('infraInstanceCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('clusterNodeDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"sshKeyPath": {
						"value": "[variables('sshKeyPath')]"
					},
					"sshPublicKey": {
						"value": "[parameters('sshPublicKey')]"
					},
					"adminPassword": {
						"value": "[variables('tempPassword')]"
					},
					"dataDiskSize": {
						"value": "[parameters('dataDiskSize')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"vmSize": {
						"value": "[parameters('infraVmSize')]"
					},
					"availabilitySet": {
						"value": "infraavailabilityset"
					},
					"hostname": {
						"value": "[concat(variables('openshiftInfraHostname'), '-', copyIndex())]"
					},
					"role": {
						"value": "infranode"
					},
					"vmStorageType": {
						"value": "Premium_LRS"
					},
					"diagStorageAccount": {
						"value": "[variables('diagStorageAccount')]"
					},
					"imageReference": {
						"value": "[variables('imageReference')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"singleZoneOrMultiZone": {
						"value": "[parameters('singleZoneOrMultiZone')]"
					},
					"zone": {
						"value": "[if(equals(parameters('singleZoneOrMultiZone'), 'single'), parameters('zone'), add(mod(copyIndex(), 3), 1))]"
					}
				}
			}
		},
		{
			"name": "[concat('nodeVmDeployment', copyindex())]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('diagStorageAccount'))]",
				"nodeNicLoop",
				"nodeavailabilityset"
			],
			"copy": {
				"name": "nodeVmLoop",
				"count": "[parameters('nodeInstanceCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('clusterNodeDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"sshKeyPath": {
						"value": "[variables('sshKeyPath')]"
					},
					"sshPublicKey": {
						"value": "[parameters('sshPublicKey')]"
					},
					"adminPassword": {
						"value": "[variables('tempPassword')]"
					},
					"dataDiskSize": {
						"value": "[parameters('dataDiskSize')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"vmSize": {
						"value": "[parameters('nodeVmSize')]"
					},
					"availabilitySet": {
						"value": "nodeavailabilityset"
					},
					"hostname": {
						"value": "[concat(variables('openshiftNodeHostname'), '-', copyIndex())]"
					},
					"role": {
						"value": "appnode"
					},
					"vmStorageType": {
						"value": "Premium_LRS"
					},
					"diagStorageAccount": {
						"value": "[variables('diagStorageAccount')]"
					},
					"imageReference": {
						"value": "[variables('imageReference')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"singleZoneOrMultiZone": {
						"value": "[parameters('singleZoneOrMultiZone')]"
					},
					"zone": {
						"value": "[if(equals(parameters('singleZoneOrMultiZone'), 'single'), parameters('zone'), add(mod(copyIndex(), 3), 1))]"
					}
				}
			}
		},
		{
			"name": "[concat('BastionVmDeployment', copyindex())]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('diagStorageAccount'))]",
				"bastionNicLoop",
				"bastionavailabilityset"
			],
			"copy": {
				"name": "bastionVmLoop",
				"count": "[parameters('bastionInstanceCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('clusterNodeDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"sshKeyPath": {
						"value": "[variables('sshKeyPath')]"
					},
					"sshPublicKey": {
						"value": "[parameters('sshPublicKey')]"
					},
					"adminPassword": {
						"value": "[variables('tempPassword')]"
					},
					"dataDiskSize": {
						"value": "[parameters('dataDiskSize')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"vmSize": {
						"value": "[parameters('bastionVmSize')]"
					},
					"availabilitySet": {
						"value": "bastionavailabilityset"
					},
					"hostname": {
						"value": "[concat(variables('bastionHostname'), '-', copyIndex())]"
					},
					"role": {
						"value": "bootnode"
					},
					"vmStorageType": {
						"value": "Premium_LRS"
					},
					"diagStorageAccount": {
						"value": "[variables('diagStorageAccount')]"
					},
					"imageReference": {
						"value": "[variables('imageReference')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"singleZoneOrMultiZone": {
						"value": "[parameters('singleZoneOrMultiZone')]"
					},
					"zone": {
						"value": "[add(mod(copyIndex(), 3), 1)]"
					}
				}
			}
		},
		{
			"name": "[concat('nfsVmDeployment', copyindex())]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('diagStorageAccount'))]",
				"nfsNicLoop",
				"nfsavailabilityset"
			],
			"copy": {
				"name": "nfsVmLoop",
				"count": "[variables('nfsInstanceCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('nfsNodeDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"sshKeyPath": {
						"value": "[variables('sshKeyPath')]"
					},
					"sshPublicKey": {
						"value": "[parameters('sshPublicKey')]"
					},
					"dataDiskSize": {
						"value": "[parameters('dataDiskSize')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"adminPassword": {
						"value": "[variables('tempPassword')]"
					},
					"vmSize": {
						"value": "[variables('nfsVmSize')]"
					},
					"availabilitySet": {
						"value": "nfsavailabilityset"
					},
					"hostname": {
						"value": "[concat(variables('nfsHostname'), '-', copyIndex())]"
					},
					"role": {
						"value": "datanode"
					},
					"vmStorageType": {
						"value": "Premium_LRS"
					},
					"diagStorageAccount": {
						"value": "[variables('diagStorageAccount')]"
					},
					"imageReference": {
						"value": "[variables('imageReference')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					}
				}
			}
		},
		{
			"condition": "[equals(variables('storageOption'), 'nfs')]",
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('nfsHostname'), '-', copyIndex(), '/prepNodes')]",
			"location": "[variables('location')]",
			"apiVersion": "2019-07-01",
			"tags": {
				"displayName": "PrepNodes",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[concat('nfsVmDeployment', copyindex())]"
			],
			"copy": {
				"name": "nfsPrepLoop",
				"count": "[variables('nfsInstanceCount')]"
			},
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('nodePrepScriptUrl')]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('bash ', variables('nodePrepScriptFileName'))]"
				}
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('openshiftMasterHostname'), '-', copyIndex(), '/prepMaster')]",
			"location": "[variables('location')]",
			"apiVersion": "2019-07-01",
			"tags": {
				"displayName": "PrepMaster",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[concat('masterVmDeployment', copyindex())]"
			],
			"copy": {
				"name": "masterPrepLoop",
				"count": "[parameters('masterInstanceCount')]"
			},
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('masterPrepScriptUrl')]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('bash ', variables('masterPrepScriptFileName'), ' ', parameters('adminUsername'), ' ', variables('location'))]"
				}
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('openshiftInfraHostname'), '-', copyIndex(), '/prepNodes')]",
			"location": "[variables('location')]",
			"apiVersion": "2019-07-01",
			"tags": {
				"displayName": "PrepInfra",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[concat('infraVmDeployment', copyindex())]"
			],
			"copy": {
				"name": "infraPrepLoop",
				"count": "[parameters('infraInstanceCount')]"
			},
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('nodePrepScriptUrl')]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('bash ', variables('nodePrepScriptFileName'))]"
				}
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('openshiftNodeHostname'), '-', copyIndex(), '/prepNodes')]",
			"location": "[variables('location')]",
			"apiVersion": "2019-07-01",
			"tags": {
				"displayName": "PrepNodes",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[concat('nodeVmDeployment', copyindex())]"
			],
			"copy": {
				"name": "nodePrepLoop",
				"count": "[parameters('nodeInstanceCount')]"
			},
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('nodePrepScriptUrl')]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('bash ', variables('nodePrepScriptFileName'))]"
				}
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('bastionHostname'), '-', copyIndex(), '/deployOpenShift')]",
			"location": "[variables('location')]",
			"apiVersion": "2019-07-01",
			"tags": {
				"displayName": "PrepBastion",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[concat('BastionVmDeployment', copyindex())]"
			],
			"copy": {
				"name": "bastionPrepLoop",
				"count": "[parameters('bastionInstanceCount')]"
			},
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('bastionPrepScriptUrl')]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('bash ', variables('bastionPrepScriptFileName'), ' \"', parameters('rhelUsername'), '\"', ' \"' , parameters('rhelPassword'), '\"', ' \"', parameters('rhelPoolID'), '\"', ' \"', parameters('adminUsername'), '\"')]"
				}
			}
		},
		{
			"name": "OpenShiftDeployment",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountRegistry'))]",
				"masterPrepLoop",
				"infraPrepLoop",
				"nodePrepLoop",
				"bastionPrepLoop"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('openshiftDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"location": {
						"value": "[variables('location')]"
					},
					"openshiftDeploymentScriptUrl": {
						"value": "[variables('openshiftDeploymentScriptUrl')]"
					},
					"openshiftDeploymentScriptFileName": {
						"value": "[variables('openshiftDeploymentScriptFileName')]"
					},
					"newStorageAccountRegistry": {
						"value": "[variables('newStorageAccountRegistry')]"
					},
					"newStorageAccountKey": {
						"value": "[listKeys(variables('newStorageAccountRegistry'), '2019-06-01').keys[0].value]"
					},
					"openshiftMasterHostname": {
						"value": "[variables('openshiftMasterHostname')]"
					},
					"openshiftMasterPublicIpFqdn": {
						"value": "[reference(variables('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn]"
					},
					"openshiftMasterPublicIpAddress": {
						"value": "[reference(variables('openshiftMasterPublicIpDnsLabel')).ipAddress]"
					},
					"openshiftInfraHostname": {
						"value": "[variables('openshiftInfraHostname')]"
					},
					"openshiftNodeHostname": {
						"value": "[variables('openshiftNodeHostname')]"
					},
					"masterInstanceCount": {
						"value": "[parameters('masterInstanceCount')]"
					},
					"infraInstanceCount": {
						"value": "[parameters('infraInstanceCount')]"
					},
					"nodeInstanceCount": {
						"value": "[parameters('nodeInstanceCount')]"
					},
					"storageKind": {
						"value": "managed"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"openshiftPassword": {
						"value": "[parameters('openshiftPassword')]"
					},
					"enableMetrics": {
						"value": "[parameters('enableMetrics')]"
					},
					"enableLogging": {
						"value": "[parameters('enableLogging')]"
					},
					"enableAzure": {
						"value": true
					},
					"aadClientId": {
						"value": "[parameters('aadClientId')]"
					},
					"aadClientSecret": {
						"value": "[parameters('aadClientSecret')]"
					},
					"subDomainChosen": {
						"value": "[parameters('defaultSubDomainType')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"sshPrivateKey": {
						"reference": {
							"keyvault": {
								"id": "[resourceId(parameters('keyVaultResourceGroup'), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
							},
							"secretName": "[parameters('keyVaultSecretName')]"
						}
					},
					"rhelUsername": {
						"value": "[parameters('rhelUsername')]"
					},
					"rhelPassword": {
						"value": "[parameters('rhelPassword')]"
					},
					"dataStorageAccount": {
						"value": "[variables('dataStorageAccount')]"
					},
					"virtualNetworkName": {
						"value": "[variables('virtualNetworkName')]"
					},
					"nodeSecurityGroup": {
						"value": "[concat(variables('openshiftNodeHostname'), '-nsg')]"
					},
					"nodeAvailabilitySet": {
						"value": "nodeavailabilityset"
					},
					"rhelPoolID": {
						"value": "[parameters('rhelPoolID')]"
					},
					"storageOption": {
						"value": "[variables('storageOption')]"
					},
					"bastionHostname": {
						"value": "[variables('bastionHostname')]"
					},
					"nfsHostname": {
						"value": "[variables('nfsHostname')]"
					},
					"singleZoneOrMultiZone": {
						"value": "[parameters('singleZoneOrMultiZone')]"
					},
					"infraIp": {
						"value": "[reference(variables('infraLbPublicIpDnsLabel')).ipAddress]"
					},
					"tempPassword": {
						"value": "[variables('tempPassword')]"
					}
				}
			}
		},
		{
			"name": "CloudPakLiteDeployment",
			"condition": "[equals(parameters('cloudPakLicenseAgreement'), 'yes')]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountRegistry'))]",
				"[resourceId('Microsoft.Storage/storageAccounts', variables('dataStorageAccount'))]",
				"masterPrepLoop",
				"infraPrepLoop",
				"nodePrepLoop",
				"OpenShiftDeployment"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('cloudPakDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"cloudPakDeploymentScriptUrl": {
						"value": "[variables('cloudPakLiteDeploymentScriptUrl')]"
					},
					"cloudPakDeploymentScriptFileName": {
						"value": "[variables('cloudPakLiteDeploymentScriptFileName')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"ocuser": {
						"value": "[parameters('adminUsername')]"
					},
					"ocpassword": {
						"value": "[parameters('openshiftPassword')]"
					},
					"storageOption": {
						"value": "[variables('storageOption')]"
					},
					"masterPublicHostname": {
						"value": "[reference(variables('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn]"
					},
					"bastionHostname": {
						"value": "[variables('bastionHostname')]"
					},
					"projectName": {
						"value": "[parameters('projectName')]"
					},
					"apiKeyUsername": {
						"value": "[parameters('apiKeyUsername')]"
					},
					"apiKey": {
						"value": "[parameters('apiKey')]"
					},
					"location": {
						"value": "[variables('location')]"
					}
				}
			}
		},
		{
			"name": "CloudPakWSLDeployment",
			"condition": "[and(equals(parameters('cloudPakLicenseAgreement'), 'yes'), equals(parameters('installWatsonStudioLibrary'), 'yes'))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountRegistry'))]",
				"[resourceId('Microsoft.Storage/storageAccounts', variables('dataStorageAccount'))]",
				"masterPrepLoop",
				"infraPrepLoop",
				"nodePrepLoop",
				"OpenShiftDeployment",
				"CloudPakDVDeployment"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('cloudPakDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"cloudPakDeploymentScriptUrl": {
						"value": "[variables('cloudPakWSLDeploymentScriptUrl')]"
					},
					"cloudPakDeploymentScriptFileName": {
						"value": "[variables('cloudPakWSLDeploymentScriptFileName')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"ocuser": {
						"value": "[parameters('adminUsername')]"
					},
					"ocpassword": {
						"value": "[parameters('openshiftPassword')]"
					},
					"storageOption": {
						"value": "[variables('storageOption')]"
					},
					"masterPublicHostname": {
						"value": "[reference(variables('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn]"
					},
					"bastionHostname": {
						"value": "[variables('bastionHostname')]"
					},
					"projectName": {
						"value": "[parameters('projectName')]"
					},
					"apiKeyUsername": {
						"value": "[parameters('apiKeyUsername')]"
					},
					"apiKey": {
						"value": "[parameters('apiKey')]"
					},
					"location": {
						"value": "[variables('location')]"
					}
				}
			}
		},
		{
			"name": "CloudPakWMLDeployment",
			"condition": "[and(equals(parameters('cloudPakLicenseAgreement'), 'yes'), or(equals(parameters('installWatsonMachineLearning'), 'yes'), equals(parameters('installWatsonOpenscaleAndWatsonMachineLearning'), 'yes')))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountRegistry'))]",
				"[resourceId('Microsoft.Storage/storageAccounts', variables('dataStorageAccount'))]",
				"masterPrepLoop",
				"infraPrepLoop",
				"nodePrepLoop",
				"OpenShiftDeployment",
				"CloudPakWSLDeployment"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('cloudPakDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"cloudPakDeploymentScriptUrl": {
						"value": "[variables('cloudPakWMLDeploymentScriptUrl')]"
					},
					"cloudPakDeploymentScriptFileName": {
						"value": "[variables('cloudPakWMLDeploymentScriptFileName')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"ocuser": {
						"value": "[parameters('adminUsername')]"
					},
					"ocpassword": {
						"value": "[parameters('openshiftPassword')]"
					},
					"storageOption": {
						"value": "[variables('storageOption')]"
					},
					"masterPublicHostname": {
						"value": "[reference(variables('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn]"
					},
					"bastionHostname": {
						"value": "[variables('bastionHostname')]"
					},
					"projectName": {
						"value": "[parameters('projectName')]"
					},
					"apiKeyUsername": {
						"value": "[parameters('apiKeyUsername')]"
					},
					"apiKey": {
						"value": "[parameters('apiKey')]"
					},
					"location": {
						"value": "[variables('location')]"
					}
				}
			}
		},
		{
			"name": "CloudPakPreWKCDeployment",
			"condition": "[and(equals(parameters('cloudPakLicenseAgreement'), 'yes'), equals(parameters('installWatsonKnowledgeCatalog'), 'yes'))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountRegistry'))]",
				"[resourceId('Microsoft.Storage/storageAccounts', variables('dataStorageAccount'))]",
				"masterPrepLoop",
				"infraPrepLoop",
				"nodePrepLoop",
				"OpenShiftDeployment",
				"CloudPakWMLDeployment"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('cloudPakDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"cloudPakDeploymentScriptUrl": {
						"value": "[variables('cloudPakPreWKCDeploymentScriptUrl')]"
					},
					"cloudPakDeploymentScriptFileName": {
						"value": "[variables('cloudPakPreWKCDeploymentScriptFileName')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"ocuser": {
						"value": "[parameters('adminUsername')]"
					},
					"ocpassword": {
						"value": "[parameters('openshiftPassword')]"
					},
					"storageOption": {
						"value": "[variables('storageOption')]"
					},
					"masterPublicHostname": {
						"value": "[reference(variables('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn]"
					},
					"bastionHostname": {
						"value": "[variables('bastionHostname')]"
					},
					"projectName": {
						"value": "[parameters('projectName')]"
					},
					"apiKeyUsername": {
						"value": "[parameters('apiKeyUsername')]"
					},
					"apiKey": {
						"value": "[parameters('apiKey')]"
					},
					"location": {
						"value": "[variables('location')]"
					}
				}
			}
		},
		{
			"name": "CloudPakWKCDeployment",
			"condition": "[and(equals(parameters('cloudPakLicenseAgreement'), 'yes'), equals(parameters('installWatsonKnowledgeCatalog'), 'yes'))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountRegistry'))]",
				"[resourceId('Microsoft.Storage/storageAccounts', variables('dataStorageAccount'))]",
				"masterPrepLoop",
				"infraPrepLoop",
				"nodePrepLoop",
				"OpenShiftDeployment",
				"CloudPakPreWKCDeployment"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('cloudPakDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"cloudPakDeploymentScriptUrl": {
						"value": "[variables('cloudPakWKCDeploymentScriptUrl')]"
					},
					"cloudPakDeploymentScriptFileName": {
						"value": "[variables('cloudPakWKCDeploymentScriptFileName')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"ocuser": {
						"value": "[parameters('adminUsername')]"
					},
					"ocpassword": {
						"value": "[parameters('openshiftPassword')]"
					},
					"storageOption": {
						"value": "[variables('storageOption')]"
					},
					"masterPublicHostname": {
						"value": "[reference(variables('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn]"
					},
					"bastionHostname": {
						"value": "[variables('bastionHostname')]"
					},
					"projectName": {
						"value": "[parameters('projectName')]"
					},
					"apiKeyUsername": {
						"value": "[parameters('apiKeyUsername')]"
					},
					"apiKey": {
						"value": "[parameters('apiKey')]"
					},
					"location": {
						"value": "[variables('location')]"
					}
				}
			}
		},
		{
			"name": "CloudPakDVDeployment",
			"condition": "[and(equals(parameters('cloudPakLicenseAgreement'), 'yes'), equals(parameters('installDataVirtualization'), 'yes'))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountRegistry'))]",
				"[resourceId('Microsoft.Storage/storageAccounts', variables('dataStorageAccount'))]",
				"masterPrepLoop",
				"infraPrepLoop",
				"nodePrepLoop",
				"OpenShiftDeployment",
				"CloudPakLiteDeployment"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('cloudPakDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"cloudPakDeploymentScriptUrl": {
						"value": "[variables('cloudPakDVDeploymentScriptUrl')]"
					},
					"cloudPakDeploymentScriptFileName": {
						"value": "[variables('cloudPakDVDeploymentScriptFileName')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"ocuser": {
						"value": "[parameters('adminUsername')]"
					},
					"ocpassword": {
						"value": "[parameters('openshiftPassword')]"
					},
					"storageOption": {
						"value": "[variables('storageOption')]"
					},
					"masterPublicHostname": {
						"value": "[reference(variables('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn]"
					},
					"bastionHostname": {
						"value": "[variables('bastionHostname')]"
					},
					"projectName": {
						"value": "[parameters('projectName')]"
					},
					"apiKeyUsername": {
						"value": "[parameters('apiKeyUsername')]"
					},
					"apiKey": {
						"value": "[parameters('apiKey')]"
					},
					"location": {
						"value": "[variables('location')]"
					}
				}
			}
		},
		{
			"name": "CloudPakWOSDeployment",
			"condition": "[and(equals(parameters('cloudPakLicenseAgreement'), 'yes'), equals(parameters('installWatsonOpenscaleAndWatsonMachineLearning'), 'yes'))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountRegistry'))]",
				"[resourceId('Microsoft.Storage/storageAccounts', variables('dataStorageAccount'))]",
				"masterPrepLoop",
				"infraPrepLoop",
				"nodePrepLoop",
				"OpenShiftDeployment",
				"CloudPakWKCDeployment"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('cloudPakDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"cloudPakDeploymentScriptUrl": {
						"value": "[variables('cloudPakWOSDeploymentScriptUrl')]"
					},
					"cloudPakDeploymentScriptFileName": {
						"value": "[variables('cloudPakWOSDeploymentScriptFileName')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"ocuser": {
						"value": "[parameters('adminUsername')]"
					},
					"ocpassword": {
						"value": "[parameters('openshiftPassword')]"
					},
					"storageOption": {
						"value": "[variables('storageOption')]"
					},
					"masterPublicHostname": {
						"value": "[reference(variables('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn]"
					},
					"bastionHostname": {
						"value": "[variables('bastionHostname')]"
					},
					"projectName": {
						"value": "[parameters('projectName')]"
					},
					"apiKeyUsername": {
						"value": "[parameters('apiKeyUsername')]"
					},
					"apiKey": {
						"value": "[parameters('apiKey')]"
					},
					"location": {
						"value": "[variables('location')]"
					}
				}
			}
		},
		{
			"condition": "[equals(parameters('enableBackup'), 'true')]",
			"type": "Microsoft.RecoveryServices/vaults",
			"apiVersion": "2019-05-13",
			"location": "[variables('location')]",
			"name": "[variables('vaultName')]",
			"sku": {
				"name": "RS0",
				"tier": "Standard"
			},
			"properties": {
			}
		},
		{
			"condition": "[equals(parameters('enableBackup'), 'true')]",
			"type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
			"apiVersion": "2016-12-01",
			"name": "[concat(variables('vaultName'), '/', variables('backupFabric'), '/', variables('protectionContainer'), '/', variables('protectedItem'))]",
			"dependsOn": [
				"[concat('nfsVmDeployment', 0)]",
				"[resourceId('Microsoft.RecoveryServices/vaults', variables('vaultName'))]"
			],
			"properties": {
				"protectedItemType": "Microsoft.Compute/virtualMachines",
				"policyId": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', variables('vaultName'), variables('backupPolicyName'))]",
				"sourceResourceId": "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
			}
		}
	],
	"outputs": {
		"OpenShift Console Url": {
			"type": "string",
			"value": "[concat('https://', reference(variables('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn, '/console')]"
		},
		"OpenShift Bastion SSH": {
			"type": "string",
			"value": "[concat('ssh ', parameters('adminUsername'), '@', reference(variables('bastionPublicIpDnsLabel')).dnsSettings.fqdn)]"
		},
		"Cloud Pak for Data URL": {
			"type": "string",
			"value": "[concat('https://', parameters('projectName'), '-cpd-', parameters('projectName'), '.',  reference(resourceId('Microsoft.Network/publicIPAddresses',variables('infraLbPublicIpDnsLabel'))).IpAddress, '.nip.io')]"
		}
	}
}
