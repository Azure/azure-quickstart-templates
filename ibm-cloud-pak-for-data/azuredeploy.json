{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"_artifactsLocation": {
			"type": "string",
			"metadata": {
				"description": "The base URL where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
			},
			"defaultValue": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/ibm-cloud-pak-for-data/"
		},
		"_artifactsLocationSasToken": {
			"type": "securestring",
			"metadata": {
				"description": "Token for the base URL where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
			},
			"defaultValue": ""
		},
		"location": {
			"type": "string",
			"metadata": {
				"description": "Region where the resources should be created in"
			},
			"defaultValue": "[resourceGroup().location]"
		},
		"clusterName": {
			"type": "string",
			"metadata": {
				"description": "Cluster resources prefix"
			}
		},
		"dnsZone": {
			"type": "string",
			"metadata": {
				"description": "Domain name created with the App Service"
			}
		},
		"dnsZoneRG": {
			"type": "string",
			"metadata": {
				"description": "Resource Group that contains the domain name"
			}
		},
		"fipsEnabled": {
			"type": "bool",
			"defaultValue": true,
			"allowedValues": [
				true,
				false
			],
			"metadata": {
				"description": "Enable FIPS encryption"
			}
		},
		"privateOrPublicEndpoints": {
			"type": "string",
			"defaultValue": "public",
			"allowedValues": [
				"public",
				"private"
			],
			"metadata": {
				"description": "Public or private facing endpoints"
			}
		},
		"newOrExistingNetwork": {
			"type": "string",
			"defaultValue": "new",
			"allowedValues": [
				"new",
				"existing"
			],
			"metadata": {
				"description": "Deploy in new cluster or in existing cluster. If existing cluster, make sure the new resources are in the same zone"
			}
		},
		"existingVnetResourceGroupName": {
			"type": "string",
			"defaultValue": "myResourceGroup",
			"metadata": {
				"description": "Resource Group for Existing Vnet."
			}
		},
		"virtualNetworkName": {
			"type": "string",
			"defaultValue": "myVNet",
			"metadata": {
				"description": "Name of new or existing virtual network"
			}
		},
		"virtualNetworkCIDR": {
			"type": "string",
			"defaultValue": "10.0.0.0/16",
			"metadata": {
				"description": "VNet Address Prefix. Minimum address prefix is /16"
			}
		},
		"masterSubnetName": {
			"type": "string",
			"defaultValue": "masterSubnet",
			"metadata": {
				"description": "Name of new or existing master subnet"
			}
		},
		"masterSubnetPrefix": {
			"type": "string",
			"defaultValue": "10.0.1.0/24",
			"metadata": {
				"description": "Master subnet address prefix"
			}
		},
		"workerSubnetName": {
			"type": "string",
			"defaultValue": "workerSubnet",
			"metadata": {
				"description": "Name of new or existing worker subnet"
			}
		},
		"workerSubnetPrefix": {
			"type": "string",
			"defaultValue": "10.0.2.0/24",
			"metadata": {
				"description": "Worker subnet address prefix"
			}
		},
		"bastionSubnetName": {
			"type": "string",
			"defaultValue": "bastionSubnet",
			"metadata": {
				"description": "Name of new or existing bastion subnet"
			}
		},
		"bastionSubnetPrefix": {
			"type": "string",
			"defaultValue": "10.0.3.0/27",
			"metadata": {
				"description": "Worker subnet address prefix"
			}
		},
		"singleZoneOrMultiZone": {
			"type": "string",
			"defaultValue": "single",
			"allowedValues": [
				"single",
				"multi"
			],
			"metadata": {
				"description": "Deploy to a Single AZ or multiple AZs"
			}
		},
		"zone": {
			"type": "int",
			"defaultValue": 1,
			"allowedValues": [
				1,
				2,
				3
			],
			"metadata": {
				"description": "Zone to deploy resources (if single zone selected)"
			}
		},
		"bastionVmSize": {
			"type": "string",
			"defaultValue": "Standard_F8s",
			"metadata": {
				"description": "Bastion Host VM size. Use VMs with Premium Storage support only."
			}
		},
		"masterVmSize": {
			"type": "string",
			"defaultValue": "Standard_F8s",
			"metadata": {
				"description": "OpenShift Master VM size. Use VMs with Premium Storage support only."
			}
		},
		"workerVmSize": {
			"type": "string",
			"defaultValue": "Standard_F16s",
			"metadata": {
				"description": "OpenShift Node VM(s) size. Use VMs with Premium Storage support only."
			}
		},
		"masterInstanceCount": {
			"type": "int",
			"defaultValue": 3,
			"allowedValues": [
				1,
				3,
				5
			],
			"metadata": {
				"description": "Number of OpenShift masters."
			}
		},
		"workerInstanceCount": {
			"type": "int",
			"defaultValue": 3,
			"allowedValues": [
				3,
				4,
				5,
				6,
				7,
				8,
				9,
				10
			],
			"metadata": {
				"description": "Number of OpenShift nodes"
			}
		},
		"storageOption": {
			"type": "string",
			"defaultValue": "portworx",
			"allowedValues": [
				"portworx",
				"nfs"
			]
		},
		"pxSpecUrl": {
			"type": "string",
			"metadata": {
				"description": "Portworx Spec URL. See README on how to generate the URL"
			}
		},
		"dataDiskSize": {
			"type": "int",
			"defaultValue": 1024,
			"allowedValues": [
				512,
				1024,
				2048
			],
			"metadata": {
				"description": "Size of Datadisk in GB for NFS storage"
			}
		},
		"enableNfsBackup": {
			"type": "bool",
			"defaultValue": false,
			"allowedValues": [
				true,
				false
			],
			"metadata": {
				"description": "Enable Backup on NFS node"
			}
		},
		"adminUsername": {
			"type": "string",
			"minLength": 4,
			"metadata": {
				"description": "Administrator username on all VMs and first user created for OpenShift login"
			}
		},
		"openshiftPassword": {
			"type": "string",
			"minLength": 8,
			"metadata": {
				"description": "Administrator username on all VMs and first user created for OpenShift login"
			}
		},
		"projectName": {
			"type": "string",
			"defaultValue": "zen",
			"metadata": {
				"description": "Openshift Namespace to deploy project"
			}
		},
		"apiKey": {
			"type": "string",
			"metadata": {
				"description": "IBM Container Registry API Key. See README on how to obtain this"
			}
		},
		"sshPublicKey": {
			"type": "string",
			"metadata": {
				"description": "SSH public key for all VMs"
			}
		},
		"keyVaultResourceGroup": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Resource Group that contains the Key Vault"
			}
		},
		"keyVaultName": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Name of the Key Vault"
			}
		},
		"keyVaultSecretNamePullSecret": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Key Vault Secret Name that contains the Private Key"
			}
		},
		"aadClientId": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Azure AD Client ID"
			}
		},
		"aadClientSecret": {
			"type": "securestring",
			"defaultValue": "",
			"metadata": {
				"description": "Azure AD Client Secret"
			}
		},
		"installWatsonStudioLibrary": {
			"type": "string",
			"defaultValue": "no",
			"allowedValues": [
				"yes",
				"no"
			],
			"metadata": {
				"description": "Install Watson Studio Library"
			}
		},
		"installWatsonMachineLearning": {
			"type": "string",
			"defaultValue": "no",
			"allowedValues": [
				"yes",
				"no"
			],
			"metadata": {
				"description": "Install Watson Machine Learning"
			}
		},
		"installWatsonKnowledgeCatalog": {
			"type": "string",
			"defaultValue": "no",
			"allowedValues": [
				"yes",
				"no"
			],
			"metadata": {
				"description": "Install Watson Knowledge Catalog"
			}
		},
		"installDataVirtualization": {
			"type": "string",
			"defaultValue": "no",
			"allowedValues": [
				"yes",
				"no"
			],
			"metadata": {
				"description": "Install Data Virtualization"
			}
		},
		"installWatsonOpenscaleAndWatsonMachineLearning": {
			"type": "string",
			"defaultValue": "no",
			"allowedValues": [
				"yes",
				"no"
			],
			"metadata": {
				"description": "Install Watson OpenScale and Watson Machine Learning"
			}
		},
		"installCognosDashboard": {
			"type": "string",
			"defaultValue": "no",
			"allowedValues": [
				"yes",
				"no"
			],
			"metadata": {
				"description": "Install Cognos Dashboard"
			}
		},
		"cloudPakLicenseAgreement": {
			"type": "string",
			"defaultValue": "reject",
			"allowedValues": [
				"accept",
				"reject"
			],
			"metadata": {
				"description": "description"
			}
		}
	},
	"variables": {
		"networkResourceGroup": "[if(equals(parameters('newOrExistingNetwork'), 'existing'), parameters('existingVnetResourceGroupName'), resourceGroup().name)]",
		"redHatTags": {
			"app": "OpenshiftContainerPlatform",
			"version": "4.3.x",
			"platform": "AzurePublic"
		},
		"imageReference": {
			"publisher": "RedHat",
			"offer": "RHEL",
			"sku": "7-RAW",
			"version": "latest"
		},
		"bastionHostname": "bastionNode",
		"nfsHostname": "nfsNode",
		"nfsVmSize": "Standard_D8s_v3",
		"workerSecurityGroupName": "worker-nsg",
		"masterSecurityGroupName": "master-nsg",
		"bastionSecurityGroupName": "bastion-nsg",
		"diagStorageAccountName": "[concat('diag', uniqueString(resourceGroup().id))]",
		"bastionPublicIpDnsLabel": "[concat('bastiondns', uniqueString(resourceGroup().id))]",
		"sshKeyPath": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
		"clusterNodeDeploymentTemplateUrl": "[uri(parameters('_artifactsLocation'), concat('nested/clusternode.json', parameters('_artifactsLocationSasToken')))]",
		"openshiftDeploymentTemplateUrl": "[uri(parameters('_artifactsLocation'), concat('nested/openshiftdeploy.json', parameters('_artifactsLocationSasToken')))]",
		"openshiftDeploymentScriptUrl": "[uri(parameters('_artifactsLocation'), concat('scripts/deployOpenshift.sh', parameters('_artifactsLocationSasToken')))]",
		"cloudPakDeploymentTemplateUrl": "[uri(parameters('_artifactsLocation'), concat('nested/cloudpakdeploy.json', parameters('_artifactsLocationSasToken')))]",
		"cloudPakDeploymentScriptUrl": "[uri(parameters('_artifactsLocation'), concat('scripts/deployCloudPak.sh', parameters('_artifactsLocationSasToken')))]",
		"cloudPakConfigScriptFileName": "openshiftCloudPakConfig.sh",
		"cloudPakConfigScriptUrl": "[uri(parameters('_artifactsLocation'), concat('scripts/openshiftCloudPakConfig.sh', parameters('_artifactsLocationSasToken')))]",
		"nfsInstallScriptUrl": "[uri(parameters('_artifactsLocation'), concat('scripts/setup-nfs.sh', parameters('_artifactsLocationSasToken')))]",
		"openshiftDeploymentScriptFileName": "deployOpenshift.sh",
		"cloudPakDeploymentScriptFileName": "deployCloudPak.sh",
		"nfsInstallScriptFileName": "setup-nfs.sh",
		"vaultName": "[concat(variables('nfsHostname'), '-vault')]",
		"backupFabric": "Azure",
		"backupPolicyName": "DefaultPolicy",
		"protectionContainer": "[concat('iaasvmcontainer;iaasvmcontainerv2;', resourceGroup().name, ';', variables('nfsHostname'))]",
		"protectedItem": "[concat('vm;iaasvmcontainerv2;', resourceGroup().name, ';', variables('nfsHostname'))]"
	},
	"resources": [
		{
			"condition": "[equals(parameters('newOrExistingNetwork'), 'new')]",
			"type": "Microsoft.Network/virtualNetworks",
			"name": "[parameters('virtualNetworkName')]",
			"location": "[parameters('location')]",
			"tags": {
				"displayName": "VirtualNetwork",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"apiVersion": "2019-09-01",
			"properties": {
				"addressSpace": {
					"addressPrefixes": [
						"[parameters('virtualNetworkCIDR')]"
					]
				},
				"subnets": [
					{
						"name": "[parameters('bastionSubnetName')]",
						"properties": {
							"addressPrefix": "[parameters('bastionSubnetPrefix')]"
						}
					}
				]
			}
		},
		{
			"apiVersion": "2019-09-01",
			"type": "Microsoft.Network/virtualNetworks/subnets",
			"name": "[concat(parameters('virtualNetworkName'), '/', parameters('masterSubnetName'))]",
			"location": "[parameters('location')]",
			"properties": {
				"addressPrefix": "[parameters('masterSubnetPrefix')]",
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('masterSecurityGroupName'))]"
				}
			},
			"dependsOn": [
				"[resourceId('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]",
				"[resourceId('Microsoft.Network/networkSecurityGroups/', variables('masterSecurityGroupName'))]"
			]
		},
		{
			"apiVersion": "2019-09-01",
			"type": "Microsoft.Network/virtualNetworks/subnets",
			"name": "[concat(parameters('virtualNetworkName'), '/', parameters('workerSubnetName'))]",
			"location": "[parameters('location')]",
			"properties": {
				"addressPrefix": "[parameters('workerSubnetPrefix')]",
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('workerSecurityGroupName'))]"
				}
			},
			"dependsOn": [
				"[resourceId('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]",
				"[resourceId('Microsoft.Network/networkSecurityGroups/', variables('workerSecurityGroupName'))]"
			]
		},
		{
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[variables('bastionPublicIpDnsLabel')]",
			"location": "[parameters('location')]",
			"sku": {
				"name": "Standard"
			},
			"apiVersion": "2019-09-01",
			"tags": {
				"displayName": "BastionPublicIP",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"properties": {
				"publicIPAllocationMethod": "Static",
				"dnsSettings": {
					"domainNameLabel": "[variables('bastionPublicIpDnsLabel')]"
				}
			}
		},
		{
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('bastionHostname'), '-nic')]",
			"location": "[parameters('location')]",
			"apiVersion": "2019-09-01",
			"tags": {
				"displayName": "BastionNetworkInterface",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]",
				"[resourceId('Microsoft.Network/networkSecurityGroups/', variables('bastionSecurityGroupName'))]",
				"[resourceId('Microsoft.Network/publicIPAddresses/', variables('bastionPublicIpDnsLabel'))]"
			],
			"properties": {
				"ipConfigurations": [
					{
						"name": "[concat(variables('bastionHostname'), 'ipconfig')]",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"subnet": {
								"id": "[resourceId(variables('networkResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('bastionSubnetName'))]"
							},
							"publicIPAddress": {
								"id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('bastionPublicIpDnsLabel'))]"
							}
						}
					}
				],
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('bastionSecurityGroupName'))]"
				}
			}
		},
		{
			"condition": "[equals(parameters('storageOption'), 'nfs')]",
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('nfsHostname'), '-nic')]",
			"location": "[parameters('location')]",
			"apiVersion": "2019-09-01",
			"tags": {
				"displayName": "NFSNetworkInterface",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]",
				"[resourceId('Microsoft.Network/networkSecurityGroups/', variables('workerSecurityGroupName'))]",
				"[resourceId(variables('networkResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('workerSubnetName'))]"
			],
			"properties": {
				"ipConfigurations": [
					{
						"name": "[concat(variables('nfsHostname'), 'ipconfig')]",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"subnet": {
								"id": "[resourceId(variables('networkResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('workerSubnetName'))]"
							}
						}
					}
				],
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('workerSecurityGroupName'))]"
				}
			}
		},
		{
			"apiVersion": "2019-09-01",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[variables('bastionSecurityGroupName')]",
			"location": "[parameters('location')]",
			"tags": {
				"displayName": "BastionNSG",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"

			},
			"properties": {
				"securityRules": [
					{
						"name": "allowSSHin_all",
						"properties": {
							"description": "Allow SSH in from all locations",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "22",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 100,
							"direction": "Inbound"
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Storage/storageAccounts",
			"name": "[variables('diagStorageAccountName')]",
			"location": "[parameters('location')]",
			"kind": "Storage",
			"apiVersion": "2019-06-01",
			"tags": {
				"displayName": "[variables('diagStorageAccountName')]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"sku": {
				"name": "Standard_LRS",
				"tier": "Standard"
			}
		},
		{
			"name": "BastionVmDeployment",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('diagStorageAccountName'))]",
				"[resourceId('Microsoft.Network/networkInterfaces', concat(variables('bastionHostname'), '-nic'))]"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('clusterNodeDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[parameters('location')]"
					},
					"sshKeyPath": {
						"value": "[variables('sshKeyPath')]"
					},
					"sshPublicKey": {
						"value": "[parameters('sshPublicKey')]"
					},
					"dataDiskSize": {
						"value": "[parameters('dataDiskSize')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"vmSize": {
						"value": "[parameters('bastionVmSize')]"
					},
					"hostname": {
						"value": "[variables('bastionHostname')]"
					},
					"role": {
						"value": "bootnode"
					},
					"vmStorageType": {
						"value": "Premium_LRS"
					},
					"diagStorageAccount": {
						"value": "[variables('diagStorageAccountName')]"
					},
					"imageReference": {
						"value": "[variables('imageReference')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"singleZoneOrMultiZone": {
						"value": "[parameters('singleZoneOrMultiZone')]"
					},
					"zone": {
						"value": "[parameters('zone')]"
					}
				}
			}
		},
		{
			"apiVersion": "2019-09-01",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[variables('masterSecurityGroupName')]",
			"location": "[parameters('location')]",
			"tags": {
				"displayName": "MasterNSG",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"

			},
			"properties": {
				"securityRules": [
					{
						"name": "allowSSHin_all",
						"properties": {
							"description": "Allow SSH in from bastion node",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "22",
							"sourceAddressPrefix": "[parameters('bastionSubnetPrefix')]",
							"destinationAddressPrefix": "[parameters('masterSubnetPrefix')]",
							"access": "Allow",
							"priority": 100,
							"direction": "Inbound"
						}
					},
					{
						"name": "allowHTTPS_all",
						"properties": {
							"description": "Allow HTTPS connections from all locations",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "6443",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 200,
							"direction": "Inbound"
						}
					}
				]
			}
		},
		{
			"condition": "[equals(parameters('storageOption'), 'nfs')]",
			"type": "Microsoft.Network/networkSecurityGroups/securityRules",
			"apiVersion": "2019-04-01",
			"name": "[concat(variables('workerSecurityGroupName'), '/nfsIn')]",
			"dependsOn": [
				"[resourceId('Microsoft.Network/networkSecurityGroups', variables('workerSecurityGroupName'))]"
			],
			"properties": {
				"protocol": "Tcp",
				"sourcePortRange": "*",
				"destinationPortRange": "2049",
				"sourceAddressPrefix": "*",
				"destinationAddressPrefix": "*",
				"access": "Allow",
				"priority": 130,
				"direction": "Inbound"
			}
		},
		{
			"apiVersion": "2019-09-01",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[variables('workerSecurityGroupName')]",
			"location": "[parameters('location')]",
			"tags": {
				"displayName": "WorkerNSG",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"properties": {
				"securityRules": [
					{
						"name": "allowSSHin_all",
						"properties": {
							"description": "Allow SSH in from bastion node",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "22",
							"sourceAddressPrefix": "[parameters('bastionSubnetPrefix')]",
							"destinationAddressPrefix": "[parameters('workerSubnetPrefix')]",
							"access": "Allow",
							"priority": 100,
							"direction": "Inbound"
						}
					},
					{
						"name": "allowHTTPS_all",
						"properties": {
							"description": "Allow HTTPS connections from all locations",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "443",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 200,
							"direction": "Inbound"
						}
					},
					{
						"name": "allowHTTPIn_all",
						"properties": {
							"description": "Allow HTTP connections from all locations",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "80",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 300,
							"direction": "Inbound"
						}
					}
				]
			}
		},
		{
			"name": "OpenShiftDeployment",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"BastionVmDeployment"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('openshiftDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"location": {
						"value": "[parameters('location')]"
					},
					"openshiftDeploymentScriptUrl": {
						"value": "[variables('openshiftDeploymentScriptUrl')]"
					},
					"openshiftDeploymentScriptFileName": {
						"value": "[variables('openshiftDeploymentScriptFileName')]"
					},
					"masterInstanceCount": {
						"value": "[parameters('masterInstanceCount')]"
					},
					"workerInstanceCount": {
						"value": "[parameters('workerInstanceCount')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"openshiftPassword": {
						"value": "[parameters('openshiftPassword')]"
					},
					"aadClientId": {
						"value": "[parameters('aadClientId')]"
					},
					"aadClientSecret": {
						"value": "[parameters('aadClientSecret')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"sshPublicKey": {
						"value": "[parameters('sshPublicKey')]"
					},
					"pullSecret": {
						"reference": {
							"keyvault": {
								"id": "[resourceId(parameters('keyVaultResourceGroup'), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
							},
							"secretName": "[parameters('keyVaultSecretNamePullSecret')]"
						}
					},
					"virtualNetworkName": {
						"value": "[parameters('virtualNetworkName')]"
					},
					"virtualNetworkCIDR": {
						"value": "[parameters('virtualNetworkCIDR')]"
					},
					"pxSpecUrl": {
						"value": "[parameters('pxSpecUrl')]"
					},
					"storageOption": {
						"value": "[parameters('storageOption')]"
					},
					"bastionHostname": {
						"value": "[variables('bastionHostname')]"
					},
					"nfsHostname": {
						"value": "[variables('nfsHostname')]"
					},
					"singleZoneOrMultiZone": {
						"value": "[parameters('singleZoneOrMultiZone')]"
					},
					"dnsZone": {
						"value": "[parameters('dnsZone')]"
					},
					"dnsZoneRG": {
						"value": "[parameters('dnsZoneRG')]"
					},
					"masterInstanceType": {
						"value": "[parameters('masterVmSize')]"
					},
					"workerInstanceType": {
						"value": "[parameters('workerVmSize')]"
					},
					"clusterName": {
						"value": "[parameters('clusterName')]"
					},
					"networkResourceGroup": {
						"value": "[if(equals(parameters('newOrExistingNetwork'), 'new'), resourceGroup().name, parameters('existingVnetResourceGroupName'))]"
					},
					"masterSubnetName": {
						"value": "[parameters('masterSubnetName')]"
					},
					"workerSubnetName": {
						"value": "[parameters('workerSubnetName')]"
					},
					"fipsEnabled": {
						"value": "[parameters('fipsEnabled')]"
					},
					"privateOrPublic": {
						"value": "[if(equals(parameters('privateOrPublicEndpoints'), 'private'), 'Internal', 'External')]"
					}
				}
			}
		},
		{
			"condition": "[equals(parameters('storageOption'), 'nfs')]",
			"name": "nfsVmDeployment",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('diagStorageAccountName'))]"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('clusterNodeDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[parameters('location')]"
					},
					"sshKeyPath": {
						"value": "[variables('sshKeyPath')]"
					},
					"sshPublicKey": {
						"value": "[parameters('sshPublicKey')]"
					},
					"dataDiskSize": {
						"value": "[parameters('dataDiskSize')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"vmSize": {
						"value": "[variables('nfsVmSize')]"
					},
					"hostname": {
						"value": "[variables('nfsHostname')]"
					},
					"role": {
						"value": "datanode"
					},
					"vmStorageType": {
						"value": "Premium_LRS"
					},
					"diagStorageAccount": {
						"value": "[variables('diagStorageAccountName')]"
					},
					"imageReference": {
						"value": "[variables('imageReference')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"singleZoneOrMultiZone": {
						"value": "[parameters('singleZoneOrMultiZone')]"
					},
					"zone": {
						"value": "[parameters('zone')]"
					}
				}
			}
		},
		{
			"condition": "[equals(parameters('storageOption'), 'nfs')]",
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('nfsHostname'), '/installNfsServer')]",
			"location": "[parameters('location')]",
			"apiVersion": "2019-07-01",
			"tags": {
				"displayName": "InstallNfsServer",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"nfsVmDeployment"
			],
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('nfsInstallScriptUrl')]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('bash ', variables('nfsInstallScriptFileName'))]"
				}
			}
		},
		{
			"condition": "[equals(parameters('enableNfsBackup'), 'true')]",
			"type": "Microsoft.RecoveryServices/vaults",
			"apiVersion": "2019-05-13",
			"location": "[parameters('location')]",
			"name": "[variables('vaultName')]",
			"sku": {
				"name": "RS0",
				"tier": "Standard"
			},
			"properties": {
			}
		},
		{
			"condition": "[equals(parameters('enableNfsBackup'), 'true')]",
			"type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
			"apiVersion": "2016-12-01",
			"name": "[concat(variables('vaultName'), '/', variables('backupFabric'), '/', variables('protectionContainer'), '/', variables('protectedItem'))]",
			"dependsOn": [
				"nfsVmDeployment",
				"[resourceId('Microsoft.RecoveryServices/vaults', variables('vaultName'))]"
			],
			"properties": {
				"protectedItemType": "Microsoft.Compute/virtualMachines",
				"policyId": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', variables('vaultName'), variables('backupPolicyName'))]",
				"sourceResourceId": "[resourceId('Microsoft.Compute/virtualMachines', variables('nfsHostname'))]"
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('bastionHostname'), '/deployOpenshift')]",
			"location": "[parameters('location')]",
			"apiVersion": "2019-07-01",
			"dependsOn": [
				"BastionVmDeployment",
				"OpenShiftDeployment"
			],
			"tags": {
				"displayName": "CloudPakConfig",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('cloudPakConfigScriptUrl')]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('bash ', variables('cloudPakConfigScriptFileName'), ' \"', parameters('_artifactsLocation'), '\"', ' \"', parameters('_artifactsLocationSasToken'), '\"', ' \"', parameters('adminUsername'), '\"', ' \"', parameters('workerInstanceCount'), '\"', ' \"', parameters('projectName'), '\"', ' \"', parameters('apiKey'), '\"', ' \"', parameters('fipsEnabled'), '\"')]"
				}
			}
		},
		{
			"name": "CloudPakLiteDeployment",
			"condition": "[equals(parameters('cloudPakLicenseAgreement'), 'accept')]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"nfsVmDeployment",
				"OpenShiftDeployment",
				"[concat('Microsoft.Compute/virtualMachines/', variables('bastionHostname'), '/extensions/deployOpenshift')]"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('cloudPakDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"assembly": {
						"value": "lite"
					},
					"cloudPakDeploymentScriptUrl": {
						"value": "[variables('cloudPakDeploymentScriptUrl')]"
					},
					"cloudPakDeploymentScriptFileName": {
						"value": "[variables('cloudPakDeploymentScriptFileName')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"ocuser": {
						"value": "[parameters('adminUsername')]"
					},
					"ocpassword": {
						"value": "[parameters('openshiftPassword')]"
					},
					"storageOption": {
						"value": "[parameters('storageOption')]"
					},
					"bastionHostname": {
						"value": "[variables('bastionHostname')]"
					},
					"projectName": {
						"value": "[parameters('projectName')]"
					},
					"location": {
						"value": "[parameters('location')]"
					},
					"clusterName": {
						"value": "[parameters('clusterName')]"
					},
					"domainName": {
						"value": "[parameters('dnsZone')]"
					}
				}
			}
		},
		{
			"name": "CloudPakDVDeployment",
			"condition": "[and(equals(parameters('cloudPakLicenseAgreement'), 'accept'), equals(parameters('installDataVirtualization'), 'yes'))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"nfsVmDeployment",
				"OpenShiftDeployment",
				"[concat('Microsoft.Compute/virtualMachines/', variables('bastionHostname'), '/extensions/deployOpenshift')]",
				"CloudPakLiteDeployment"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('cloudPakDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"assembly": {
						"value": "dv"
					},
					"cloudPakDeploymentScriptUrl": {
						"value": "[variables('cloudPakDeploymentScriptUrl')]"
					},
					"cloudPakDeploymentScriptFileName": {
						"value": "[variables('cloudPakDeploymentScriptFileName')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"ocuser": {
						"value": "[parameters('adminUsername')]"
					},
					"ocpassword": {
						"value": "[parameters('openshiftPassword')]"
					},
					"storageOption": {
						"value": "[parameters('storageOption')]"
					},
					"bastionHostname": {
						"value": "[variables('bastionHostname')]"
					},
					"projectName": {
						"value": "[parameters('projectName')]"
					},
					"location": {
						"value": "[parameters('location')]"
					},
					"clusterName": {
						"value": "[parameters('clusterName')]"
					},
					"domainName": {
						"value": "[parameters('dnsZone')]"
					}
				}
			}
		},
		{
			"name": "CloudPakCDEDeployment",
			"condition": "[and(equals(parameters('cloudPakLicenseAgreement'), 'accept'), equals(parameters('installCognosDashboard'), 'yes'))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"nfsVmDeployment",
				"OpenShiftDeployment",
				"[concat('Microsoft.Compute/virtualMachines/', variables('bastionHostname'), '/extensions/deployOpenshift')]",
				"CloudPakDVDeployment"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('cloudPakDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"assembly": {
						"value": "cde"
					},
					"cloudPakDeploymentScriptUrl": {
						"value": "[variables('cloudPakDeploymentScriptUrl')]"
					},
					"cloudPakDeploymentScriptFileName": {
						"value": "[variables('cloudPakDeploymentScriptFileName')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"ocuser": {
						"value": "[parameters('adminUsername')]"
					},
					"ocpassword": {
						"value": "[parameters('openshiftPassword')]"
					},
					"storageOption": {
						"value": "[parameters('storageOption')]"
					},
					"bastionHostname": {
						"value": "[variables('bastionHostname')]"
					},
					"projectName": {
						"value": "[parameters('projectName')]"
					},
					"location": {
						"value": "[parameters('location')]"
					},
					"clusterName": {
						"value": "[parameters('clusterName')]"
					},
					"domainName": {
						"value": "[parameters('dnsZone')]"
					}
				}
			}
		},
		{
			"name": "CloudPakWSLDeployment",
			"condition": "[and(equals(parameters('cloudPakLicenseAgreement'), 'accept'), equals(parameters('installWatsonStudioLibrary'), 'yes'))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"nfsVmDeployment",
				"OpenShiftDeployment",
				"[concat('Microsoft.Compute/virtualMachines/', variables('bastionHostname'), '/extensions/deployOpenshift')]",
				"CloudPakCDEDeployment"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('cloudPakDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"assembly": {
						"value": "wsl"
					},
					"cloudPakDeploymentScriptUrl": {
						"value": "[variables('cloudPakDeploymentScriptUrl')]"
					},
					"cloudPakDeploymentScriptFileName": {
						"value": "[variables('cloudPakDeploymentScriptFileName')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"ocuser": {
						"value": "[parameters('adminUsername')]"
					},
					"ocpassword": {
						"value": "[parameters('openshiftPassword')]"
					},
					"storageOption": {
						"value": "[parameters('storageOption')]"
					},
					"bastionHostname": {
						"value": "[variables('bastionHostname')]"
					},
					"projectName": {
						"value": "[parameters('projectName')]"
					},
					"location": {
						"value": "[parameters('location')]"
					},
					"clusterName": {
						"value": "[parameters('clusterName')]"
					},
					"domainName": {
						"value": "[parameters('dnsZone')]"
					}
				}
			}
		},
		{
			"name": "CloudPakWMLDeployment",
			"condition": "[and(equals(parameters('cloudPakLicenseAgreement'), 'accept'), equals(parameters('installWatsonMachineLearning'), 'yes'))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"nfsVmDeployment",
				"OpenShiftDeployment",
				"[concat('Microsoft.Compute/virtualMachines/', variables('bastionHostname'), '/extensions/deployOpenshift')]",
				"CloudPakWSLDeployment"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('cloudPakDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"assembly": {
						"value": "wml"
					},
					"cloudPakDeploymentScriptUrl": {
						"value": "[variables('cloudPakDeploymentScriptUrl')]"
					},
					"cloudPakDeploymentScriptFileName": {
						"value": "[variables('cloudPakDeploymentScriptFileName')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"ocuser": {
						"value": "[parameters('adminUsername')]"
					},
					"ocpassword": {
						"value": "[parameters('openshiftPassword')]"
					},
					"storageOption": {
						"value": "[parameters('storageOption')]"
					},
					"bastionHostname": {
						"value": "[variables('bastionHostname')]"
					},
					"projectName": {
						"value": "[parameters('projectName')]"
					},
					"location": {
						"value": "[parameters('location')]"
					},
					"clusterName": {
						"value": "[parameters('clusterName')]"
					},
					"domainName": {
						"value": "[parameters('dnsZone')]"
					}
				}
			}
		},
		{
			"name": "CloudPakWKCDeployment",
			"condition": "[and(equals(parameters('cloudPakLicenseAgreement'), 'accept'), equals(parameters('installWatsonKnowledgeCatalog'), 'yes'))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"nfsVmDeployment",
				"OpenShiftDeployment",
				"[concat('Microsoft.Compute/virtualMachines/', variables('bastionHostname'), '/extensions/deployOpenshift')]",
				"CloudPakWMLDeployment"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('cloudPakDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"assembly": {
						"value": "wkc"
					},
					"cloudPakDeploymentScriptUrl": {
						"value": "[variables('cloudPakDeploymentScriptUrl')]"
					},
					"cloudPakDeploymentScriptFileName": {
						"value": "[variables('cloudPakDeploymentScriptFileName')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"ocuser": {
						"value": "[parameters('adminUsername')]"
					},
					"ocpassword": {
						"value": "[parameters('openshiftPassword')]"
					},
					"storageOption": {
						"value": "[parameters('storageOption')]"
					},
					"bastionHostname": {
						"value": "[variables('bastionHostname')]"
					},
					"projectName": {
						"value": "[parameters('projectName')]"
					},
					"location": {
						"value": "[parameters('location')]"
					},
					"clusterName": {
						"value": "[parameters('clusterName')]"
					},
					"domainName": {
						"value": "[parameters('dnsZone')]"
					}
				}
			}
		},
		{
			"name": "CloudPakWOSDeployment",
			"condition": "[and(equals(parameters('cloudPakLicenseAgreement'), 'accept'), equals(parameters('installWatsonOpenscaleAndWatsonMachineLearning'), 'yes'))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"dependsOn": [
				"nfsVmDeployment",
				"OpenShiftDeployment",
				"[concat('Microsoft.Compute/virtualMachines/', variables('bastionHostname'), '/extensions/deployOpenshift')]",
				"CloudPakWKCDeployment"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('cloudPakDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"assembly": {
						"value": "aiopenscale"
					},
					"cloudPakDeploymentScriptUrl": {
						"value": "[variables('cloudPakDeploymentScriptUrl')]"
					},
					"cloudPakDeploymentScriptFileName": {
						"value": "[variables('cloudPakDeploymentScriptFileName')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"ocuser": {
						"value": "[parameters('adminUsername')]"
					},
					"ocpassword": {
						"value": "[parameters('openshiftPassword')]"
					},
					"storageOption": {
						"value": "[parameters('storageOption')]"
					},
					"bastionHostname": {
						"value": "[variables('bastionHostname')]"
					},
					"projectName": {
						"value": "[parameters('projectName')]"
					},
					"location": {
						"value": "[parameters('location')]"
					},
					"clusterName": {
						"value": "[parameters('clusterName')]"
					},
					"domainName": {
						"value": "[parameters('dnsZone')]"
					}
				}
			}
		}
	],
	"outputs": {
		"Openshift Console URL": {
			"type": "string",
			"value": "[concat('https://console-openshift-console.apps.', parameters('clusterName'), '.', parameters('dnsZone'))]"
		},
		"BastionVM SSH": {
			"type": "string",
			"value": "[concat('ssh ', parameters('adminUsername'), '@', reference(variables('bastionPublicIpDnsLabel')).dnsSettings.fqdn)]"
		}
	}
}