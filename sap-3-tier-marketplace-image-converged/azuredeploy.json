{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "sapSystemId": {
      "type": "string",
      "maxLength": 3,
      "minLength": 3,
      "metadata": {
        "description": "SAP System ID."
      }
    },
    "stackType": {
      "type": "string",
      "allowedValues": [
        "ABAP",
        "JAVA",
        "ABAP+JAVA"
      ],
      "defaultValue": "ABAP",
      "metadata": {
        "description": "The stack type of the SAP system."
      }
    },
    "osType": {
      "type": "string",
      "allowedValues": [
        "Windows Server 2012 Datacenter",
        "Windows Server 2012 R2 Datacenter",
        "Windows Server 2016 Datacenter",
        "SLES 12",
        "SLES 12 BYOS",
        "RHEL 7.2"
      ],
      "defaultValue": "Windows Server 2012 R2 Datacenter",
      "metadata": {
        "description": "The type of the operating system you want to deploy."
      }
    },
    "dbType": {
      "type": "string",
      "allowedValues": [
        "SQL",
        "HANA"
      ],
      "defaultValue": "SQL",
      "metadata": {
        "description": "The database type you want to use on the cluster. This information is used to create the load balancer"
      }
    },
    "sapSystemSize": {
      "type": "string",
      "allowedValues": [
        "Demo",
        "Small < 30.000 SAPS",
        "Medium < 70.000 SAPS",
        "Large < 180.000 SAPS",
        "X-Large < 250.000 SAPS"
      ],
      "defaultValue": "Small < 30.000 SAPS",
      "metadata": {
        "description": "The size of the SAP System you want to deploy."
      }
    },
    "systemAvailability": {
      "type": "string",
      "allowedValues": [
        "HA",
        "Not HA"
      ],
      "defaultValue": "Not HA",
      "metadata": {
        "description": "Determines whether this is a high available deployment or not. A HA deployment contains multiple instances of single point of failures."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "minLength": 12,
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "newOrExistingSubnet": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Determines whether a new virtual network and subnet should be created or an existing subnet should be used."
      }
    },
    "subnetId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The id of the subnet you want to use."
      }
    }
  },
  "variables": {
    "github": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/sap-2-tier-marketplace-image/shared/",
    "images": {
      "Windows Server 2012 Datacenter": {
        "sku": "2012-Datacenter",
        "offer": "WindowsServer",
        "publisher": "MicrosoftWindowsServer",
        "version": "latest",
        "OSType": "Windows",
        "Plan": {},
        "UsePlan": false
      },
      "Windows Server 2012 R2 Datacenter": {
        "sku": "2012-R2-Datacenter",
        "offer": "WindowsServer",
        "publisher": "MicrosoftWindowsServer",
        "version": "latest",
        "OSType": "Windows",
        "Plan": {},
        "UsePlan": false
      },
      "Windows Server 2016 Datacenter": {
        "sku": "2016-Datacenter",
        "offer": "WindowsServer",
        "publisher": "MicrosoftWindowsServer",
        "version": "latest",
        "OSType": "Windows",
        "Plan": {},
        "UsePlan": false
      },
      "SLES 12": {
        "sku": "12-SP1",
        "offer": "SLES-SAP",
        "publisher": "SUSE",
        "version": "latest",
        "OSType": "Linux",
        "Plan": {},
        "UsePlan": false
      },
      "SLES 12 BYOS": {
        "sku": "12-SP1",
        "offer": "SLES-SAP-BYOS",
        "publisher": "SUSE",
        "OSType": "Linux",
        "version": "latest",
        "Plan": {},
        "UsePlan": false
      },
      "RHEL 7.2": {
        "sku": "7.2",
        "offer": "RHEL",
        "publisher": "RedHat",
        "version": "latest",
        "OSType": "Linux",
        "Plan": {},
        "UsePlan": false
      }
    },
    "imageSku": "[variables('images')[parameters('osType')].sku]",
    "imagePublisher": "[variables('images')[parameters('osType')].publisher]",
    "imageOffer": "[variables('images')[parameters('osType')].offer]",
    "imageVersion": "[variables('images')[parameters('osType')].version]",
    "internalOSType": "[variables('images')[parameters('osType')].OSType]",
    "planRefernce": "[variables('images')[parameters('osType')].Plan]",
    "usePlanRefernce": "[variables('images')[parameters('osType')].UsePlan]",
    "csExtension": {
      "Windows": {
        "Publisher": "Microsoft.Compute",
        "Name": "CustomScriptExtension",
        "Version": "1.7",
        "script": "[concat(variables('github'), 'noop.ps1')]",
        "scriptCall": "powershell.exe -ExecutionPolicy bypass -File noop.ps1"
      },
      "Linux": {
        "Publisher": "Microsoft.OSTCExtensions",
        "Name": "CustomScriptForLinux",
        "Version": "1.3",
        "script": "[concat(variables('github'), 'noop.sh')]",
        "scriptCall": "sh noop.sh"
      }
    },
    "cseExtPublisher": "[variables('csExtension')[variables('internalOSType')].Publisher]",
    "cseExtName": "[variables('csExtension')[variables('internalOSType')].Name]",
    "cseExtVersion": "[variables('csExtension')[variables('internalOSType')].Version]",
    "csExtensionScript": "[variables('csExtension')[variables('internalOSType')].script]",
    "csExtensionscriptCall": "[variables('csExtension')[variables('internalOSType')].scriptCall]",
    "vmSizes": {
      "Demo": {
        "Not HA": {
          "clserversize": "Standard_DS12_v2",
          "clservercount": 1,
          "clserverdisks": [
            {
              "size": 128
            }
          ],
          "diserversize": "Standard_DS2_v2",
          "diservercount": 1
        },
        "HA": {
          "clserversize": "Standard_DS12_v2",
          "clservercount": 2,
          "clserverdisks": [
            {
              "size": 128
            }
          ],
          "diserversize": "Standard_DS2_v2",
          "diservercount": 2
        }
      },
      "Small < 30.000 SAPS": {
        "Not HA": {
          "clserversize": "Standard_DS13_v2",
          "clservercount": 1,
          "clserverdisks": [
            {
              "size": 512
            },
            {
              "size": 512
            },
            {
              "size": 512
            },
            {
              "size": 512
            },
            {
              "size": 512
            }
          ],
          "diserversize": "Standard_DS13_v2",
          "diservercount": 1
        },
        "HA": {
          "clserversize": "Standard_DS13_v2",
          "clservercount": 2,
          "clserverdisks": [
            {
              "size": 512
            },
            {
              "size": 512
            },
            {
              "size": 512
            },
            {
              "size": 512
            },
            {
              "size": 512
            }
          ],
          "diserversize": "Standard_DS13_v2",
          "diservercount": 2
        }
      },
      "Medium < 70.000 SAPS": {
        "Not HA": {
          "clserversize": "Standard_DS14_v2",
          "clservercount": 1,
          "clserverdisks": [
            {
              "size": 512
            },
            {
              "size": 512
            },
            {
              "size": 512
            },
            {
              "size": 512
            },
            {
              "size": 512
            },
            {
              "size": 512
            },
            {
              "size": 512
            }
          ],
          "diserversize": "Standard_DS13_v2",
          "diservercount": 4
        },
        "HA": {
          "clserversize": "Standard_DS14_v2",
          "clservercount": 2,
          "clserverdisks": [
            {
              "size": 512
            },
            {
              "size": 512
            },
            {
              "size": 512
            },
            {
              "size": 512
            },
            {
              "size": 512
            },
            {
              "size": 512
            },
            {
              "size": 512
            }
          ],
          "diserversize": "Standard_DS13_v2",
          "diservercount": 4
        }
      },
      "Large < 180.000 SAPS": {
        "Not HA": {
          "clserversize": "Standard_GS4",
          "clservercount": 1,
          "clserverdisks": [
            {
              "size": 1023
            },
            {
              "size": 1023
            },
            {
              "size": 1023
            },
            {
              "size": 1023
            },
            {
              "size": 1023
            },
            {
              "size": 512
            }
          ],
          "diserversize": "Standard_DS14_v2",
          "diservercount": 6
        },
        "HA": {
          "clserversize": "Standard_GS4",
          "clservercount": 2,
          "clserverdisks": [
            {
              "size": 1023
            },
            {
              "size": 1023
            },
            {
              "size": 1023
            },
            {
              "size": 1023
            },
            {
              "size": 1023
            },
            {
              "size": 512
            }
          ],
          "diserversize": "Standard_DS14_v2",
          "diservercount": 6
        }
      },
      "X-Large < 250.000 SAPS": {
        "Not HA": {
          "clserversize": "Standard_GS5",
          "clservercount": 1,
          "clserverdisks": [
            {
              "size": 1023
            },
            {
              "size": 1023
            },
            {
              "size": 1023
            },
            {
              "size": 1023
            },
            {
              "size": 1023
            },
            {
              "size": 1023
            },
            {
              "size": 1023
            }
          ],
          "diserversize": "Standard_DS14_v2",
          "diservercount": 10
        },
        "HA": {
          "clserversize": "Standard_GS5",
          "clservercount": 2,
          "clserverdisks": [
            {
              "size": 1023
            },
            {
              "size": 1023
            },
            {
              "size": 1023
            },
            {
              "size": 1023
            },
            {
              "size": 1023
            },
            {
              "size": 1023
            },
            {
              "size": 1023
            }
          ],
          "diserversize": "Standard_DS14_v2",
          "diservercount": 10
        }
      }
    },
    "clvmSize": "[variables('vmSizes')[parameters('sapSystemSize')][parameters('systemAvailability')].clserversize]",
    "clvmCount": "[variables('vmSizes')[parameters('sapSystemSize')][parameters('systemAvailability')].clservercount]",
    "clvmDataDisks": "[variables('vmSizes')[parameters('sapSystemSize')][parameters('systemAvailability')].clserverdisks]",
    "divmSize": "[variables('vmSizes')[parameters('sapSystemSize')][parameters('systemAvailability')].diserversize]",
    "divmCount": "[variables('vmSizes')[parameters('sapSystemSize')][parameters('systemAvailability')].diservercount]",
    "sidlower": "[toLower(parameters('sapSystemId'))]",
    "vmName": "[variables('sidlower')]",
    "storageAccountName": "[concat(variables('sidlower'), uniqueString(variables('sidlower'), resourceGroup().id))]",
    "vnetName": "[concat(variables('sidlower'), '-vnet')]",
    "publicIPAddressType": "Dynamic",
    "addressPrefix": "10.0.0.0/16",
    "subnetName": "Subnet",
    "subnetPrefix": "10.0.0.0/24",
    "subnets": {
      "new": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '/subnets/', variables('subnetName'))]",
      "existing": "[parameters('subnetId')]"
    },
    "selectedSubnetId": "[variables('subnets')[parameters('newOrExistingSubnet')]]",
    "nestedDeploymentName": "nestedTemplate",
    "nestedDeploymentNameVNet": "[concat(variables('nestedDeploymentName'), 'vnet')]",
    "nestedDeploymentNamePIP": "[concat(variables('nestedDeploymentName'), 'pip')]",
    "nestedDeploymentNameCL": "[concat(variables('nestedDeploymentName'), 'cl')]",
    "nestedDeploymentNameDI": "[concat(variables('nestedDeploymentName'), 'di')]",
    "nestedDeploymentNameProf": "[concat(variables('nestedDeploymentName'), 'prof')]",
    "nestedDeploymentNameNIC": "[concat(variables('nestedDeploymentName'), 'nic')]",
    "nestedDeploymentNameNICCL": "[concat(variables('nestedDeploymentNameNIC'), 'cl')]",
    "nestedDeploymentNameNICDI": "[concat(variables('nestedDeploymentNameNIC'), 'di')]",
    "nestedDeploymentNameLBCL": "[concat(variables('nestedDeploymentName'), 'lbcl')]",
    "publicIpNameCL": "[concat(variables('sidlower'), '-pip-cl')]",
    "avSetNameCL": "[concat(variables('sidlower'), '-avset-cl')]",
    "nestedDeploymentNameNSG": "[concat(variables('nestedDeploymentNameCL'), 'nsg')]",
    "nsgNameCL": "[concat(variables('sidlower'), '-nsg')]",
    "storageAccountNameCL": "[concat('ascs', variables('storageAccountName'))]",
    "internalStorageTypeCL": "Premium_LRS",
    "loadBalancerNameCL": "[concat(variables('sidlower'), '-lb-cl')]",
    "vmNameCL": "[concat(variables('vmName'), '-cl')]",
    "nicNameCL": "[concat(variables('sidlower'), '-nic-cl')]",
    "avSetNameDI": "[concat(variables('sidlower'), '-avset-di')]",
    "nicNameDI": "[concat(variables('sidlower'), '-nic-di')]",
    "storageAccountNameDI": "[concat('di', variables('storageAccountName'))]",
    "internalStorageTypeDI": "Premium_LRS",
    "vmNameDI": "[concat(variables('vmName'), '-di')]",
    "osDiskType": "image",
    "apiVerion": "2015-06-15",
    "apiVerionRm": "2015-01-01"
  },
  "resources": [
    {
      "apiVersion": "2015-01-01",
      "name": "[variables('nestedDeploymentNameNSG')]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('github'), parameters('newOrExistingSubnet'), 'nsg.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "nsgName": {
            "value": "[variables('nsgNameCL')]"
          },
          "osType": {
            "value": "[variables('internalOSType')]"
          }
        }
      }
    },
    {
      "apiVersion": "2015-01-01",
      "name": "[variables('nestedDeploymentNameVnet')]",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', variables('nestedDeploymentNameNSG'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('github'), parameters('newOrExistingSubnet'), 'vnetnsg.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vnetName": {
            "value": "[variables('vnetName')]"
          },
          "addressPrefix": {
            "value": "[variables('addressPrefix')]"
          },
          "subnetName": {
            "value": "[variables('subnetName')]"
          },
          "subnetPrefix": {
            "value": "[variables('subnetPrefix')]"
          },
          "nsgName": {
            "value": "[variables('nsgNameCL')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('avSetNameCL')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "platformFaultDomainCount": 3,
        "platformUpdateDomainCount": 20
      }
    },
    {
      "apiVersion": "2015-01-01",
      "name": "[concat(variables('nestedDeploymentNamePIP'), '-', copyIndex())]",
      "type": "Microsoft.Resources/deployments",
      "copy": {
        "name": "pipLoop",
        "count": "[variables('clvmCount')]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('github'), parameters('newOrExistingSubnet'), 'pip.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "publicIpName": {
            "value": "[concat(variables('publicIpNameCL'), '-', copyIndex())]"
          },
          "publicIPAddressType": {
            "value": "[variables('publicIPAddressType')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat(variables('storageAccountNameCL'), copyIndex())]",
      "apiVersion": "2015-06-15",
      "copy": {
        "name": "storageAccountCLLoop",
        "count": "[variables('clvmCount')]"
      },
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[variables('internalStorageTypeCL')]"
      }
    },
    {
      "apiVersion": "2015-01-01",
      "name": "[variables('nestedDeploymentNameLBCL')]",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', variables('nestedDeploymentNameVnet'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('github'), 'loadbalancer.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "loadBalancerName": {
            "value": "[variables('loadBalancerNameCL')]"
          },
          "sapSystemCount": {
            "value": 1
          },
          "stackType": {
            "value": "[parameters('stackType')]"
          },
          "osType": {
            "value": "[variables('internalOSType')]"
          },
          "createXSCS": {
            "value": true
          },
          "createDB": {
            "value": true
          },
          "dbType": {
            "value": "[parameters('dbType')]"
          },
          "subnetId": {
            "value": "[variables('selectedSubnetId')]"
          },
          "github": {
            "value": "[variables('github')]"
          }
        }
      }
    },
    {
      "apiVersion": "2015-01-01",
      "name": "[concat(variables('nestedDeploymentNameNICCL'), '-', copyIndex())]",
      "type": "Microsoft.Resources/deployments",
      "copy": {
        "name": "nicConfigCLLoop",
        "count": "[variables('clvmCount')]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('github'), 'nic-config.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vnetName": {
            "value": "[variables('vnetName')]"
          },
          "subnetName": {
            "value": "[variables('subnetName')]"
          },
          "publicIpName": {
            "value": "[concat(variables('publicIpNameCL'), '-', copyIndex())]"
          },
          "nsgName": {
            "value": ""
          },
          "newOrExistingSubnet": {
            "value": "[parameters('newOrExistingSubnet')]"
          },
          "subnetId": {
            "value": "[parameters('subnetId')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicNameCL'), '-', copyIndex())]",
      "apiVersion": "2017-06-01",
      "copy": {
        "name": "nicCLLoop",
        "count": "[variables('clvmCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', variables('nestedDeploymentNamePIP'), '-', copyIndex())]",
        "[concat('Microsoft.Resources/deployments/', variables('nestedDeploymentNameNICCL'), '-', copyIndex())]",
        "[concat('Microsoft.Resources/deployments/', variables('nestedDeploymentNameVnet'))]",
        "[concat('Microsoft.Resources/deployments/', variables('nestedDeploymentNameLBCL'))]"
      ],
      "location": "[resourceGroup().location]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": "[reference(concat(variables('nestedDeploymentNameNICCL'), '-', copyIndex())).outputs.selectedConfiguration.value.publicIPAddress]",
              "subnet": "[reference(concat(variables('nestedDeploymentNameNICCL'), '-', copyIndex())).outputs.selectedConfiguration.value.subnet]",
              "loadBalancerBackendAddressPools": "[reference(variables('nestedDeploymentNameLBCL')).outputs.nicBackAddressPools.value]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-01-01",
      "name": "[concat(variables('nestedDeploymentNameProf'), '-cl-', copyIndex())]",
      "type": "Microsoft.Resources/deployments",
      "copy": {
        "name": "osDiskPartsCLLoop",
        "count": "[variables('clvmCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', concat(variables('storageAccountNameCL'), copyIndex()))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('github'), 'os-disk-parts.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "imageSku": {
            "value": "[variables('imageSku')]"
          },
          "imagePublisher": {
            "value": "[variables('imagePublisher')]"
          },
          "imageOffer": {
            "value": "[variables('imageOffer')]"
          },
          "imageVersion": {
            "value": "[variables('imageVersion')]"
          },
          "userImageVhdUri": {
            "value": ""
          },
          "userImageStorageAccount": {
            "value": ""
          },
          "osDiskVhdUri": {
            "value": ""
          },
          "osDiskType": {
            "value": "[variables('osDiskType')]"
          },
          "osType": {
            "value": "[variables('internalOSType')]"
          },
          "sidlower": {
            "value": "[variables('sidlower')]"
          },
          "vmName": {
            "value": "[concat(variables('vmNameCL'), '-', copyIndex())]"
          },
          "storageAccountName": {
            "value": "[concat(variables('storageAccountNameCL'), copyIndex())]"
          }
        }
      }
    },
    {
      "apiVersion": "2015-01-01",
      "name": "[concat(variables('nestedDeploymentNameCL'), '-', copyIndex())]",
      "type": "Microsoft.Resources/deployments",
      "copy": {
        "name": "vmCLLoop",
        "count": "[variables('clvmCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicNameCL'), '-', copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('avSetNameCL'))]",
        "[concat('Microsoft.Resources/deployments/', variables('nestedDeploymentNameProf'), '-cl-', copyIndex())]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('github'), 'server.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "imageReference": {
            "value": "[reference(concat(variables('nestedDeploymentNameProf'), '-cl-', copyIndex())).outputs.imageReference.value]"
          },
          "planReference": {
            "value": "[variables('planRefernce')]"
          },
          "usePlanReference": {
            "value": "[variables('usePlanRefernce')]"
          },
          "osDisk": {
            "value": "[reference(concat(variables('nestedDeploymentNameProf'), '-cl-', copyIndex())).outputs.osDisk.value]"
          },
          "osDiskType": {
            "value": "[variables('osDiskType')]"
          },
          "sidlower": {
            "value": "[variables('sidlower')]"
          },
          "vmName": {
            "value": "[concat(variables('vmNameCL'), '-', copyIndex())]"
          },
          "vmSize": {
            "value": "[variables('clvmSize')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "cseExtPublisher": {
            "value": "[variables('cseExtPublisher')]"
          },
          "cseExtName": {
            "value": "[variables('cseExtName')]"
          },
          "cseExtVersion": {
            "value": "[variables('cseExtVersion')]"
          },
          "csExtensionScript": {
            "value": "[variables('csExtensionScript')]"
          },
          "csExtensionscriptCall": {
            "value": "[variables('csExtensionscriptCall')]"
          },
          "avSetName": {
            "value": "[variables('avSetNameCL')]"
          },
          "storageAccountName": {
            "value": "[concat(variables('storageAccountNameCL'), copyIndex())]"
          },
          "nicName": {
            "value": "[concat(variables('nicNameCL'), '-', copyIndex())]"
          },
          "dataDiskSizes": {
            "value": "[variables('clvmDataDisks')]"
          },
          "github": {
            "value": "[variables('github')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('avSetNameDI')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "platformFaultDomainCount": 3,
        "platformUpdateDomainCount": 20
      }
    },
    {
      "apiVersion": "2015-01-01",
      "name": "[concat(variables('nestedDeploymentNameNICDI'), '-', copyIndex())]",
      "type": "Microsoft.Resources/deployments",
      "copy": {
        "name": "nicConfigDILoop",
        "count": "[variables('divmCount')]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('github'), 'nic-config.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vnetName": {
            "value": "[variables('vnetName')]"
          },
          "subnetName": {
            "value": "[variables('subnetName')]"
          },
          "publicIpName": {
            "value": ""
          },
          "nsgName": {
            "value": ""
          },
          "newOrExistingSubnet": {
            "value": "[parameters('newOrExistingSubnet')]"
          },
          "subnetId": {
            "value": "[parameters('subnetId')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicNameDI'), '-', copyindex())]",
      "apiVersion": "2017-06-01",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', variables('nestedDeploymentNameVnet'))]",
        "[concat('Microsoft.Resources/deployments/', variables('nestedDeploymentNameNICDI'), '-', copyIndex())]"
      ],
      "copy": {
        "name": "nicDILoop",
        "count": "[variables('divmCount')]"
      },
      "location": "[resourceGroup().location]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": "[reference(concat(variables('nestedDeploymentNameNICDI'), '-', copyIndex())).outputs.selectedConfiguration.value.subnet]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat(variables('storageAccountNameDI'), copyindex()) ]",
      "apiVersion": "2015-06-15",
      "copy": {
        "name": "storageAccountDILoop",
        "count": "[add(mul(mod(variables('divmCount'), 2), -1), 2)]"
      },
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[variables('internalStorageTypeDI')]"
      }
    },
    {
      "apiVersion": "2015-01-01",
      "name": "[concat(variables('nestedDeploymentNameProf'), '-di-', copyIndex())]",
      "type": "Microsoft.Resources/deployments",
      "copy": {
        "name": "osDiskPartsDILoop",
        "count": "[variables('divmCount')]"
      },
      "dependsOn": [
        "storageAccountDILoop"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('github'), 'os-disk-parts.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "imageSku": {
            "value": "[variables('imageSku')]"
          },
          "imagePublisher": {
            "value": "[variables('imagePublisher')]"
          },
          "imageOffer": {
            "value": "[variables('imageOffer')]"
          },
          "userImageVhdUri": {
            "value": ""
          },
          "userImageStorageAccount": {
            "value": ""
          },
          "osDiskVhdUri": {
            "value": ""
          },
          "osDiskType": {
            "value": "[variables('osDiskType')]"
          },
          "osType": {
            "value": "[variables('internalOSType')]"
          },
          "sidlower": {
            "value": "[variables('sidlower')]"
          },
          "vmName": {
            "value": "[concat(variables('vmNameDI'), '-', copyIndex())]"
          },
          "storageAccountName": {
            "value": "[concat(variables('storageAccountNameDI'), mod(copyIndex(), 2))]"
          }
        }
      }
    },
    {
      "apiVersion": "2015-01-01",
      "name": "[concat(variables('nestedDeploymentNameDI'), '-', copyIndex())]",
      "type": "Microsoft.Resources/deployments",
      "copy": {
        "name": "vmDILoop",
        "count": "[variables('divmCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicNameDI'), '-', copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('avSetNameDI'))]",
        "[concat('Microsoft.Resources/deployments/', variables('nestedDeploymentNameProf'), '-di-', copyIndex())]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('github'), 'server.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "imageReference": {
            "value": "[reference(concat(variables('nestedDeploymentNameProf'), '-di-', copyIndex())).outputs.imageReference.value]"
          },
          "planReference": {
            "value": "[variables('planRefernce')]"
          },
          "usePlanReference": {
            "value": "[variables('usePlanRefernce')]"
          },
          "osDisk": {
            "value": "[reference(concat(variables('nestedDeploymentNameProf'), '-di-', copyIndex())).outputs.osDisk.value]"
          },
          "osDiskType": {
            "value": "[variables('osDiskType')]"
          },
          "sidlower": {
            "value": "[variables('sidlower')]"
          },
          "vmName": {
            "value": "[concat(variables('vmNameDI'), '-', copyIndex())]"
          },
          "vmSize": {
            "value": "[variables('divmSize')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "cseExtPublisher": {
            "value": "[variables('cseExtPublisher')]"
          },
          "cseExtName": {
            "value": "[variables('cseExtName')]"
          },
          "cseExtVersion": {
            "value": "[variables('cseExtVersion')]"
          },
          "csExtensionScript": {
            "value": "[variables('csExtensionScript')]"
          },
          "csExtensionscriptCall": {
            "value": "[variables('csExtensionscriptCall')]"
          },
          "avSetName": {
            "value": "[variables('avSetNameDI')]"
          },
          "storageAccountName": {
            "value": "[concat(variables('storageAccountNameDI'), mod(copyIndex(), 2))]"
          },
          "nicName": {
            "value": "[concat(variables('nicNameDI'), '-', copyIndex())]"
          },
          "dataDiskSizes": {
            "value": [
              {
                "size": 128
              }
            ]
          },
          "github": {
            "value": "[variables('github')]"
          }
        }
      }
    }
  ]
}