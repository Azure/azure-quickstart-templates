{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "name_prefix": {
            "defaultValue": "BackupReport-LogicApp",
            "type": "String"
        },
        "connections_azuremonitorlogs_externalid": {
			"defaultValue": "[concat(resourceGroup().id,'/providers/Microsoft.Web/connections/azuremonitorlogs')]",
            "type": "String"
        },
        "connections_office365_externalid": {
			"defaultValue": "[concat(resourceGroup().id, '/providers/Microsoft.Web/connections/office365')]",
			"type": "String"
		},
		"workspace": {
			"type": "String"
		},
		"workspaceList": {
			"defaultValue": [
                "/subscriptions/172424a4-d65f-421e-a8de-197d98aabeba/resourceGroups/testrg/providers/Microsoft.OperationalInsights/workspaces/LaBvtWorkspace-DontUse",
                "/subscriptions/ef4ab5a7-c2c0-4304-af80-af49f48af3d1/resourceGroups/WonderDemoMonitoringRG/providers/Microsoft.OperationalInsights/workspaces/WonderDemoMonitoring"
            ],
			"type": "Array"
		},
		"location": {
			"defaultValue": "eastus",
			"type": "String"
		},
		"frequency": {
			"defaultValue": "Minute",
			"type": "String"
		},
		"emailId": {
            "type": "String"
        },
		"rangeStart": {
			"defaultValue": "12/8/2020, 12:00:00.000 AM",
            "type": "String"
        },
		"rangeEnd": {
			"defaultValue": "12/15/2020, 12:00:00.000 AM",
            "type": "String"
        },
		"vaultSubscriptionList": {
			"defaultValue": "\"*\"",
            "type": "String"
        },		
		"vaultLocationList": {
			"defaultValue": "\"*\"",
            "type": "String"
        },
		"vaultList": {
			"defaultValue": "\"*\"",
            "type": "String"
        },
		"datasourceTypeList": {
			"defaultValue": "\"*\"",
            "type": "String"
        },
		"excludeLegacyEvent": {
			"defaultValue": true,
            "type": "Bool"
        },
		"aggregationType": {
			"defaultValue": "\"Daily\"",
            "type": "String"
        }
    },
    "variables": {},
    "resources": [
        {
			"type": "Microsoft.Web/connections",
			"apiVersion": "2016-06-01",
			"name": "office365",
			"location": "[parameters('location')]",
			"properties": {
				"api": {
					"id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('location'), '/managedApis/office365')]"
				},
				"displayName": "@parameters('$connections')['office365']['connectionName']"
			}
		},
		{
			"type": "Microsoft.Web/connections",
			"apiVersion": "2016-06-01",
			"name": "azuremonitorlogs",
			"location": "[parameters('location')]",
			"properties": {
				"api": {
					"id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('location'), '/managedApis/azuremonitorlogs')]"
				},
				"displayName": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
			}
		},
		{
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[concat(parameters('name_prefix'), '-Policy')]",
            "location": "[parameters('location')]",            
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "AggregationType": {
                            "defaultValue": "[parameters('aggregationType')]",
                            "type": "String"
                        },
                        "DatasourceTypeList": {
                            "defaultValue": "[parameters('datasourceTypeList')]",
                            "type": "String"
                        },
                        "ExcludeLegacyEvent": {
                            "defaultValue": "[parameters('excludeLegacyEvent')]",
                            "type": "Bool"
                        },
                        "RangeEnd": {
                            "defaultValue": "[parameters('rangeEnd')]",
                            "type": "String"
                        },
                        "RangeStart": {
                            "defaultValue": "[parameters('rangeStart')]",
                            "type": "String"
                        },
                        "VaultList": {
                            "defaultValue": "[parameters('vaultList')]",
                            "type": "String"
                        },
                        "VaultLocationList": {
                            "defaultValue": "[parameters('vaultLocationList')]",
                            "type": "String"
                        },
                        "VaultSubscriptionList": {
                            "defaultValue": "[parameters('vaultSubscriptionList')]",
                            "type": "String"
                        },
                        "WorkSpaceList": {
                            "defaultValue": "[parameters('workspaceList')]",
                            "type": "Array"
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
								"frequency": "[parameters('frequency')]",
                                "interval": 10
                            },
                            "type": "Recurrence"
                        }
                    },
                    "actions": {
                        "Create_CSV_table": {
                            "runAfter": {
                                "Run_query_and_list_results": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Table",
                            "inputs": {
                                "format": "CSV",
                                "from": "@body('Run_query_and_list_results')?['value']"
                            }
                        },
                        "For_each": {
                            "foreach": "@parameters('WorkSpaceList')",
                            "actions": {
                                "Append_to_string_variable": {
                                    "runAfter": {},
                                    "type": "AppendToStringVariable",
                                    "inputs": {
                                        "name": "AzureDiagnostics_Incomplete",
                                        "value": " workspace('@{items('For_each')}').AzureDiagnostics,"
                                    }
                                },
                                "Append_to_string_variable_2": {
                                    "runAfter": {
                                        "Append_to_string_variable": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "AppendToStringVariable",
                                    "inputs": {
                                        "name": "CoreAzureBackup_Incomplete",
                                        "value": " workspace('@{items('For_each')}').CoreAzureBackup,"
                                    }
                                },
                                "Append_to_string_variable_3": {
                                    "runAfter": {
                                        "Append_to_string_variable_2": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "AppendToStringVariable",
                                    "inputs": {
                                        "name": "AddonAzureBackupJobs_Incomplete",
                                        "value": " workspace('@{items('For_each')}').AddonAzureBackupJobs,"
                                    }
                                },
                                "Append_to_string_variable_4": {
                                    "runAfter": {
                                        "Append_to_string_variable_3": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "AppendToStringVariable",
                                    "inputs": {
                                        "name": "AddonAzureBackupPolicy_Incomplete",
                                        "value": " workspace('@{items('For_each')}').AddonAzureBackupPolicy,"
                                    }
                                },
                                "Append_to_string_variable_5": {
                                    "runAfter": {
                                        "Append_to_string_variable_4": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "AppendToStringVariable",
                                    "inputs": {
                                        "name": "AddonAzureBackupProtectedInstance_Incomplete",
                                        "value": " workspace('@{items('For_each')}').AddonAzureBackupProtectedInstance,"
                                    }
                                },
                                "Append_to_string_variable_6": {
                                    "runAfter": {
                                        "Append_to_string_variable_5": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "AppendToStringVariable",
                                    "inputs": {
                                        "name": "AddonAzureBackupStorage_Incomplete",
                                        "value": " workspace('@{items('For_each')}').AddonAzureBackupStorage,"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_9": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Initialize_variable": {
                            "runAfter": {
                                "Initialize_variable_3": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "BackupInstanceFunction",
                                        "type": "string",
                                        "value": "@{variables('WorkspaceList_Custom')}\n@{variables('ReportFilter_Latest')}\nlet _ProtectionStateList = \"*\";\nlet _DatasourceSetName = \"*\";\nlet _BackupInstanceName = \"*\";\nlet _DisplayAllFields = true;\n// Other Vars\nlet AsonDay = iff((_RangeEnd-startofday(now()) == 1d),_RangeEnd-2d, _RangeEnd-1d);\nlet AzureStorageCutoffDate = datetime(6/01/2020, 12:00:00.000 AM);\n// HelperFunctions\nlet Extend_DatasourceType = (T:(BackupManagementType:string, BackupItemType:string))\n{\nT | extend DatasourceType = iff(BackupManagementType == \"IaaSVM\", \"Azure Virtual Machine\", \niff(BackupManagementType == \"MAB\", \"Azure Backup Agent\", \niff(BackupManagementType == \"DPM\", \"DPM\", \niff(BackupManagementType == \"AzureBackupServer\", \"Azure Backup Server\", \niff(BackupManagementType == \"AzureStorage\", \"Azure Storage (Azure Files)\", \niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\", \"SQL in Azure VM\", \niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\", \"SAP HANA in Azure VM\", \"\")))))))\n};\nlet Extend_DatasourceARMType = (T:(BackupManagementType:string, BackupItemType:string))\n{\nT | extend DatasourceARMType = iff(BackupManagementType == \"IaaSVM\", \"Microsoft.Compute/virtualMachines\", \niff(BackupManagementType == \"MAB\", strcat(\"Azure Backup Agent\", \";\", BackupItemType), \niff(BackupManagementType == \"DPM\", strcat(\"DPM\", \";\", BackupItemType), \niff(BackupManagementType == \"AzureBackupServer\", strcat(\"Azure Backup Server\", \";\", BackupItemType), \niff(BackupManagementType == \"AzureStorage\", \"Microsoft.Storage/storageAccounts/fileServices/shares\", \niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\", \"SQLDataBase\", \niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\", \"SAPHanaDatabase\", \"\")))))))\n};\nlet Extend_BackupInstanceId = (T:(ResourceId:string, BackupManagementType:string, BackupItemType:string, ProtectedContainerName:string, BackupItemName:string))\n{\nT | extend BackupInstanceId =  toupper(iff ((BackupManagementType == \"IaaSVM\" and BackupItemType == \"VM\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/IaasVMContainer;\", ProtectedContainerName, \"/protectedItems/VM;\", ProtectedContainerName),\niff((BackupManagementType == \"AzureStorage\" and BackupItemType == \"AzureFileShare\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/StorageContainer;\", ProtectedContainerName, \"/protectedItems/AzureFileShare;\", BackupItemName) , \niff((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\", ProtectedContainerName, \"/protectedItems/SQLDataBase;\", BackupItemName) , \niff((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\", ProtectedContainerName, \"/protectedItems/SAPHanaDatabase;\", BackupItemName), \"\")))))\n};\nlet Extend_DatasourceSetResourceId_DatasourceSetType_DatasourceResourceId = (T:(ResourceId:string, ProtectedContainerName:string, BackupManagementType:string, BackupItemType:string, BackupItemUniqueId:string, BackupItemName:string, BackupItemFriendlyName:string))\n{\nT | extend prefix = array_strcat(array_split(split(ResourceId,\"/\"), 4)[0] ,\"/\")\n|  extend container_array = split(ProtectedContainerName,\";\")\n|  extend container_arraylen = array_length(container_array)\n| extend containerNameString = iff(container_arraylen == 3, ProtectedContainerName, \"\")\n| parse containerNameString with entityType:string \";\" rgName:string \";\" entityName:string\n| extend entityURL = iff((BackupManagementType == \"AzureStorage\" and BackupItemType == \"AzureFileShare\"), iff(entityType == \"storage\", \"/Microsoft.Storage/storageAccounts/\", \"/Microsoft.ClassicStorage/storageAccounts/\"), iff((BackupManagementType == \"IaaSVM\" and BackupItemType == \"VM\"), iff(entityType =~ \"iaasvmcontainerv2\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), iff(((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\") or (BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\")), iff(entityType =~ \"compute\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")))\n| extend DatasourceSetResourceId = toupper(iff(BackupManagementType in (\"DPM\", \"AzureBackupServer\", \"MAB\"), \"\" , iff(containerNameString != \"\", strcat(prefix, \"/\", rgName, \"/providers\", entityURL, entityName), ResourceId)))\n//DatasourceType\n| extend DatasourceSetType = iff(BackupManagementType == \"IaaSVM\", iff(entityType =~ \"iaasvmcontainerv2\", \"Microsoft.Compute/virtualMachines\", \"Microsoft.ClassicCompute/virtualMachines\"),  \niff(BackupManagementType == \"MAB\", \"Azure Backup Agent\", \niff(BackupManagementType == \"DPM\", \"DPM\", \niff(BackupManagementType == \"AzureBackupServer\", \"Azure Backup Server\", \niff(BackupManagementType == \"AzureStorage\", iff(entityType == \"storage\", \"Microsoft.Storage/storageAccounts\", \"Microsoft.ClassicStorage/storageAccounts\"), \niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\", iff(entityType =~ \"compute\", \"Microsoft.Compute/virtualMachines\", \"Microsoft.ClassicCompute/virtualMachines\"), \niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\", iff(entityType =~ \"compute\", \"Microsoft.Compute/virtualMachines\", \"Microsoft.ClassicCompute/virtualMachines\"), \"\")))))))\n| extend DatasourceResourceId = toupper(iff(BackupManagementType in (\"DPM\", \"AzureBackupServer\", \"MAB\"), BackupItemUniqueId, \niff(BackupManagementType == \"IaaSVM\", DatasourceSetResourceId, \niff(BackupManagementType == \"AzureStorage\", strcat(DatasourceSetResourceId, \"/fileServices/default/shares/\", BackupItemFriendlyName),\niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\",strcat(DatasourceSetResourceId, \"/providers/Microsoft.RecoveryServices/backupProtectedItem/SQLDataBase;\", BackupItemName),\niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\",strcat(DatasourceSetResourceId, \"/providers/Microsoft.RecoveryServices/backupProtectedItem/SAPHanaDatabase;\", BackupItemName),\"\"))))))\n| project-away prefix, container_array, container_arraylen, containerNameString, entityURL \n};\n// Source Tables\nlet VaultUnderAzureDiagnostics = ()\n{\nAzureDiagnostics\n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\"\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), VaultTags = columnifexists(\"VaultTags_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceGroupName =  columnifexists(\"ResourceGroupName_s\", \"\"), SubscriptionId = toupper(SubscriptionId), StorageReplicationType = columnifexists(\"StorageReplicationType_s\", \"\"), ResourceId, TimeGenerated \n| where SubscriptionId in~ (_VaultSubscriptionList) or '*' in (_VaultSubscriptionList)\n| where AzureDataCenter in~ (_VaultLocationList) or '*' in (_VaultLocationList)\n| where VaultName in~  (_VaultList) or '*' in (_VaultList)\n| summarize arg_max(TimeGenerated, *) by ResourceId\n| project StorageReplicationType, VaultUniqueId, VaultName, VaultTags, SubscriptionId, ResourceGroupName, AzureDataCenter, ResourceId, TimeGenerated\n};\nlet VaultUnderResourceSpecific = ()\n{\nCoreAzureBackup\n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where OperationName == \"Vault\" \n| project StorageReplicationType, VaultUniqueId, VaultName, VaultTags, SubscriptionId = toupper(SubscriptionId), ResourceGroupName, AzureDataCenter, ResourceId, TimeGenerated \n| where SubscriptionId in~ (_VaultSubscriptionList) or '*' in (_VaultSubscriptionList)\n| where AzureDataCenter in~ (_VaultLocationList) or '*' in (_VaultLocationList)\n| where VaultName in~  (_VaultList) or '*' in (_VaultList)\n| summarize arg_max(TimeGenerated, *) by ResourceId\n};\nlet ResourceIdListUnderAzureDiagnostics = materialize(VaultUnderAzureDiagnostics | distinct ResourceId);\nlet ResourceIdListUnderResourceSpecific = materialize(VaultUnderResourceSpecific | distinct ResourceId);\nlet BackupItemUnderAzureDiagnostics = ()\n{\nlet SourceBackupItemTable = AzureDiagnostics\n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),SecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"),  ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\n//Handle MAB system state\n// Excluding SecondaryBackupProtectionState, BackupItemAppVersion, ProtectionGroupName\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, ProtectionGroupName, BackupItemFriendlyName, BackupItemType, BackupManagementType, TimeGenerated, ResourceId\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\");\nlet BackupItemTable = Extend_DatasourceType(SourceBackupItemTable)\n| where DatasourceType in~ (_DatasourceTypeList) or '*' in (_DatasourceTypeList)\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\nVaultUnderAzureDiagnostics | join   (\n   BackupItemTable \n) on ResourceId\n| project-away ResourceId1, TimeGenerated1;\n};\nlet BackupItemUnderResourceSpecific = ()\n{\nlet SourceBackupItemTable = CoreAzureBackup\n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\n//Handle MAB system state\n// Excluding SecondaryBackupProtectionState, BackupItemAppVersion, ProtectionGroupName\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, ProtectionGroupName, BackupItemFriendlyName, BackupItemType, BackupManagementType, TimeGenerated, ResourceId\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\");\nlet BackupItemTable = Extend_DatasourceType(SourceBackupItemTable)\n| where DatasourceType in~ (_DatasourceTypeList) or '*' in (_DatasourceTypeList)\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\nVaultUnderResourceSpecific | join   (\n   BackupItemTable \n) on ResourceId\n| project-away ResourceId1, TimeGenerated1;\n};\nlet BackupItemAssociationHistoryUnderAzureDiagnostics = ()\n{\n let BackupItemAssociationTable = AzureDiagnostics \n // Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderAzureDiagnostics)\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\"), PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\nTimeGenerated, ResourceId  \n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n// Handle MAB SystemState\n// PolicyUniqueId can be either guid or string due to AzureDiagnostics behaviour\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\nBackupItemAssociationTable\n};\nlet BackupItemAssociationHistoryUnderResourceSpecific = ()\n{\nlet BackupItemAssociationTable = CoreAzureBackup \n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderResourceSpecific)\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n// Handle MAB SystemState\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\nBackupItemAssociationTable\n};\nlet BackupItemAssociationUnderAzureDiagnostics = ()\n{\n let BackupItemAssociationTable = AzureDiagnostics \n // Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderAzureDiagnostics)\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\nTimeGenerated, ResourceId  \n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n// Handle MAB SystemState\n// PolicyUniqueId can be either guid or string due to AzureDiagnostics behaviour\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\nBackupItemAssociationTable\n};\nlet BackupItemAssociationUnderResourceSpecific = ()\n{\nlet BackupItemAssociationTable = CoreAzureBackup \n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderResourceSpecific)\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n// Handle MAB SystemState\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\nBackupItemAssociationTable\n};\nlet BackupItemFrontEndSizeHistoryUnderAzureDiagnostics = ()\n{\n let BackupItemFrontEndSizeTable = AzureDiagnostics \n // Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderAzureDiagnostics)\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\nBackupItemFrontEndSizeTable\n};\nlet BackupItemFrontEndSizeHistoryUnderResourceSpecific = ()\n{\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderResourceSpecific)\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\n| project BackupItemFrontEndSize, BackupItemUniqueId, BackupManagementType, TimeGenerated, ResourceId \n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\nBackupItemFrontEndSizeTable\n};\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\n{\n let BackupItemFrontEndSizeTable = AzureDiagnostics \n // Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderAzureDiagnostics)\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\nBackupItemFrontEndSizeTable\n};\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\n{\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderResourceSpecific)\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\n| project BackupItemFrontEndSize, BackupItemUniqueId, BackupManagementType, TimeGenerated, ResourceId \n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\nBackupItemFrontEndSizeTable\n};\nlet StorageAssociationHistoryUnderAzureDiagnostics = ()\n{\n let StorageAssociationTable = AzureDiagnostics \n // Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderAzureDiagnostics)\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\nStorageAssociationTable\n};\nlet StorageAssociationHistoryUnderResourceSpecific = ()\n{\nlet StorageAssociationTable = AddonAzureBackupStorage \n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now()) \n| where ResourceId in (ResourceIdListUnderResourceSpecific)\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\n| project BackupItemUniqueId, VaultUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementType, TimeGenerated, ResourceId\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\") \n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\nStorageAssociationTable\n};\nlet StorageAssociationUnderAzureDiagnostics = ()\n{\n let StorageAssociationTable = AzureDiagnostics \n // Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderAzureDiagnostics)\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\nStorageAssociationTable\n};\nlet StorageAssociationUnderResourceSpecific = ()\n{\nlet StorageAssociationTable = AddonAzureBackupStorage \n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderResourceSpecific)\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\n| project BackupItemUniqueId, VaultUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementType, TimeGenerated, ResourceId \n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\nStorageAssociationTable\n};\nlet RecoveryPointUnderAzureDiagnostics = ()\n{\n let RecoveryPointTable = AzureDiagnostics \n // Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderAzureDiagnostics)\n| where OperationName == \"RecoveryPoint\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\n| project LatestRecoveryPointLocation = columnifexists(\"LatestRecoveryPointLocation_s\", \"\"), OldestRecoveryPointLocation = columnifexists(\"OldestRecoveryPointLocation_s\", \"\"), LatestRecoveryPointTime = todatetime(columnifexists(\"LatestRecoveryPointTime_s\", \"\")), OldestRecoveryPointTime = todatetime(columnifexists(\"OldestRecoveryPointTime_s\", \"\")),\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n// Interested in only Vault/Cloud RPs\n| where LatestRecoveryPointLocation has \"Cloud\" \n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\nRecoveryPointTable\n};\nlet RecoveryPointUnderResourceSpecific = ()\n{\n let RecoveryPointTable = CoreAzureBackup \n // Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderResourceSpecific)\n| where OperationName == \"RecoveryPoint\" and  State != \"Deleted\"\n| project LatestRecoveryPointLocation, OldestRecoveryPointLocation, LatestRecoveryPointTime, OldestRecoveryPointTime,\nBackupItemUniqueId, BackupManagementType, TimeGenerated, ResourceId\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n// Interested in only Vault/Cloud RPs\n| where LatestRecoveryPointLocation has \"Cloud\" \n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\nRecoveryPointTable\n};\nlet RecoveryPointHistoryUnderAzureDiagnostics = ()\n{\n let RecoveryPointTable = AzureDiagnostics \n // Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderAzureDiagnostics)\n| where OperationName == \"RecoveryPoint\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\n| project LatestRecoveryPointLocation = columnifexists(\"LatestRecoveryPointLocation_s\", \"\"), OldestRecoveryPointLocation = columnifexists(\"OldestRecoveryPointLocation_s\", \"\"), LatestRecoveryPointTime = todatetime(columnifexists(\"LatestRecoveryPointTime_s\", \"\")), OldestRecoveryPointTime = todatetime(columnifexists(\"OldestRecoveryPointTime_s\", \"\")),\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n// Interested in only Vault/Cloud RPs\n| where LatestRecoveryPointLocation has \"Cloud\" \n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\nRecoveryPointTable\n};\nlet RecoveryPointHistoryUnderResourceSpecific = ()\n{\n let RecoveryPointTable = CoreAzureBackup \n // Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderResourceSpecific)\n| where OperationName == \"RecoveryPoint\" and  State != \"Deleted\"\n| project LatestRecoveryPointLocation, OldestRecoveryPointLocation, LatestRecoveryPointTime, OldestRecoveryPointTime,\nBackupItemUniqueId, BackupManagementType, TimeGenerated, ResourceId\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n// Interested in only Vault/Cloud RPs\n| where LatestRecoveryPointLocation has \"Cloud\" \n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\nRecoveryPointTable\n};\nlet ProtectedContainerUnderAzureDiagnostics = ()\n{\nlet ProtectedContainerTable = AzureDiagnostics\n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\nVaultUnderAzureDiagnostics | join   (\n   ProtectedContainerTable \n) on ResourceId;\n};\nlet ProtectedContainerUnderResourceSpecific = ()\n{\nlet ProtectedContainerTable = CoreAzureBackup\n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\n| project ProtectedContainerUniqueId,  ProtectedContainerFriendlyName, AgentVersion,\nProtectedContainerOSType, ProtectedContainerOSVersion, ProtectedContainerWorkloadType,  ProtectedContainerName, ProtectedContainerProtectionState, ProtectedContainerLocation, ProtectedContainerType,\nBackupManagementType, TimeGenerated, ResourceId\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\nVaultUnderResourceSpecific | join   (\n   ProtectedContainerTable \n) on ResourceId;\n};\nlet PolicyUnderAzureDiagnostics = ()\n{\nlet PolicyTable = AzureDiagnostics\n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderAzureDiagnostics)\n| where OperationName == \"Policy\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\"\n| project PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = columnifexists(\"PolicyName_s\", \"\"), ResourceId, BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupManagementType, PolicyName, ResourceId, TimeGenerated \n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\nPolicyTable\n};\nlet PolicyUnderResourceSpecific = ()\n{\nlet PolicyTable = AddonAzureBackupPolicy\n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderResourceSpecific)\n| where OperationName == \"Policy\" \n| project PolicyUniqueId, PolicyName, ResourceId, TimeGenerated, BackupManagementType\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\nPolicyTable\n};\n// BusinessLogic\nlet LatestBackupItemDimensionTable = () {union isfuzzy = true \n(BackupItemUnderAzureDiagnostics()),\n(BackupItemUnderResourceSpecific())\n| where BackupItemUniqueId != \"\"\n// To show as per as on 'AsonDay'\n| where startofday(TimeGenerated) == AsonDay\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId\n| where isempty(_BackupInstanceName) or _BackupInstanceName == \"*\" or  BackupItemFriendlyName contains (_BackupInstanceName)\n| extend BackupItemProtectionState = iff(BackupItemProtectionState in (\"Protected\", \"ActivelyProtected\",\"ProtectionError\"), \"Protected\", iff(BackupItemProtectionState in (\"IRPending\"), \"InitialBackupPending\", iff(isnotempty(BackupItemProtectionState),\"ProtectionStopped\",BackupItemProtectionState)))\n| where BackupItemProtectionState in~ (_ProtectionStateList) or '*' in (_ProtectionStateList)\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, DatasourceType, BackupItemProtectionState,\nStorageReplicationType, ResourceId, VaultUniqueId, VaultName, VaultTags, SubscriptionId, ResourceGroupName, AzureDataCenter};\nlet TotalBackupItemDimensionTable = () {union isfuzzy = true \n(BackupItemUnderAzureDiagnostics()),\n(BackupItemUnderResourceSpecific())\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\n| where isempty(_BackupInstanceName) or _BackupInstanceName == \"*\" or  BackupItemFriendlyName contains (_BackupInstanceName)\n| extend BackupItemProtectionState = iff(BackupItemProtectionState in (\"Protected\", \"ActivelyProtected\",\"ProtectionError\"), \"Protected\", iff(BackupItemProtectionState in (\"IRPending\"), \"InitialBackupPending\", iff(isnotempty(BackupItemProtectionState),\"ProtectionStopped\",BackupItemProtectionState)))\n| where BackupItemProtectionState in~ (_ProtectionStateList) or '*' in (_ProtectionStateList)\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, DatasourceType, BackupItemProtectionState,\nStorageReplicationType, ResourceId, VaultUniqueId, VaultName, VaultTags, SubscriptionId, ResourceGroupName, AzureDataCenter};\nlet BI_CombinationUnderAzureDiagnostics = ()\n{\nlet JoinWithPolicy = (T:(PolicyUniqueId:string, ResourceId:string))\n{\nT | join kind= leftouter (\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, ResourceId) on PolicyUniqueId, ResourceId\n};\nlet JoinWithRP = (T:(BackupItemUniqueId:string))\n{\nT | join kind= leftouter (\n RecoveryPointUnderAzureDiagnostics | project BackupItemUniqueId, OldestRecoveryPointTime, LatestRecoveryPointTime) on BackupItemUniqueId\n};\nlet Base = () {ProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \n| join kind= rightouter  (\n    BackupItemAssociationUnderAzureDiagnostics \n\t// To show as per as on 'AsonDay'\n\t| where startofday(TimeGenerated) == AsonDay\n\t| project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId\n) on ProtectedContainerUniqueId \n| project BackupItemUniqueId, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId\n};\nlet Base_Size = ()\n{\nBase\n| join kind= leftouter (\n   BackupItemFrontEndSizeUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \n) on BackupItemUniqueId\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\n| join kind= leftouter (\n   StorageAssociationUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, BackupItemUniqueId, TimeGenerated\n) on BackupItemUniqueId\n| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, BackupItemFrontEndSize,\n StorageConsumedInMBs, TimeGenerated, ResourceId\n};\nlet Base_Policy = ()\n{\nJoinWithPolicy(Base) \n| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName, TimeGenerated, ResourceId\n};\nlet Base_RP = ()\n{\nJoinWithRP(Base)\n| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated, ResourceId\n};\nlet Base_Policy_RP = ()\n{\nJoinWithRP(Base_Policy)\n| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated, ResourceId\n};\nlet Base_Size_RP = ()\n{\nJoinWithRP(Base_Size)\n| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, BackupItemFrontEndSize,\n StorageConsumedInMBs, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated, ResourceId\n};\nlet Base_Size_Policy = ()\n{\nJoinWithPolicy(Base_Size)\n| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName,BackupItemFrontEndSize, StorageConsumedInMBs, TimeGenerated, ResourceId\n};\nlet Base_Size_Policy_RP = ()\n{\nJoinWithRP(Base_Size_Policy)\n| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName,BackupItemFrontEndSize, StorageConsumedInMBs, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated, ResourceId\n};\nunion ( Base | where _DisplayAllFields == false ),\t   \n\t   ( Base_Size_Policy_RP | where _DisplayAllFields== true)\n};\nlet BI_CombinationUnderResourceSpecific = ()\n{\nlet JoinWithPolicy = (T:(PolicyUniqueId:string, ResourceId:string))\n{\nT | join kind= leftouter (\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, ResourceId) on PolicyUniqueId, ResourceId\n};\nlet JoinWithRP = (T:(BackupItemUniqueId:string))\n{\nT | join kind= leftouter (\n RecoveryPointUnderResourceSpecific | project BackupItemUniqueId, OldestRecoveryPointTime, LatestRecoveryPointTime) on BackupItemUniqueId\n};\nlet Base = () {ProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \n| join kind= rightouter  (\n    BackupItemAssociationUnderResourceSpecific \n\t// To show as per as on 'AsonDay'\n\t| where startofday(TimeGenerated) == AsonDay\n\t| project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId\n) on ProtectedContainerUniqueId \n| project BackupItemUniqueId, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId\n};\nlet Base_Size = ()\n{\nBase\n| join kind= leftouter (\n   BackupItemFrontEndSizeUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \n) on BackupItemUniqueId\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\n| join kind= leftouter (\n   StorageAssociationUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, BackupItemUniqueId, TimeGenerated\n) on BackupItemUniqueId\n| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, BackupItemFrontEndSize,\n StorageConsumedInMBs, TimeGenerated, ResourceId\n};\nlet Base_Policy = ()\n{\nJoinWithPolicy(Base) \n| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName, TimeGenerated, ResourceId\n};\nlet Base_RP = ()\n{\nJoinWithRP(Base)\n| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated, ResourceId\n};\nlet Base_Policy_RP = ()\n{\nJoinWithRP(Base_Policy)\n| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated, ResourceId\n};\nlet Base_Size_RP = ()\n{\nJoinWithRP(Base_Size)\n| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, BackupItemFrontEndSize,\n StorageConsumedInMBs, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated, ResourceId\n};\nlet Base_Size_Policy = ()\n{\nJoinWithPolicy(Base_Size)\n| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName,BackupItemFrontEndSize, StorageConsumedInMBs, TimeGenerated, ResourceId\n};\nlet Base_Size_Policy_RP = ()\n{\nJoinWithRP(Base_Size_Policy)\n| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName,BackupItemFrontEndSize, StorageConsumedInMBs, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated, ResourceId\n};\nunion ( Base | where _DisplayAllFields == false ),\t   \n\t   ( Base_Size_Policy_RP | where _DisplayAllFields== true)  \n};\nlet BI_HistoryCombinationUnderAzureDiagnostics = ()\n{\n\tlet JoinWithPolicy = (T:(PolicyUniqueId:string, ResourceId:string))\n\t{\n\tT | join kind= leftouter (\n\t PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, ResourceId) on PolicyUniqueId, ResourceId\n\t};\n\tlet JoinWithRP = (T:(BackupItemUniqueId:string, TimeRangeEndDay:datetime))\n\t{\n\tT | join kind= leftouter (\n\t RecoveryPointHistoryUnderAzureDiagnostics | project BackupItemUniqueId, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeRangeEndDay) on BackupItemUniqueId, TimeRangeEndDay\n\t};\n\tlet Base = ()\n\t{\n\tProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \n\t| join  kind= rightouter  (\n\t\tBackupItemAssociationHistoryUnderAzureDiagnostics |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\n\t) on ProtectedContainerUniqueId\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_Size = ()\n\t{\n\tBase\n\t| join kind= leftouter (\n\t   BackupItemFrontEndSizeHistoryUnderAzureDiagnostics | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay \n\t) on BackupItemUniqueId, TimeRangeEndDay\n\t// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\n\t| join kind= leftouter (\n\t   StorageAssociationHistoryUnderAzureDiagnostics | project StorageConsumedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay\n\t) on BackupItemUniqueId, TimeRangeEndDay\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, BackupItemFrontEndSize,\n\t StorageConsumedInMBs, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_Policy = ()\n\t{\n\tJoinWithPolicy(Base) \n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_RP = ()\n\t{\n\tJoinWithRP(Base)\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_Policy_RP = ()\n\t{\n\tJoinWithRP(Base_Policy)\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_Size_RP = ()\n\t{\n\tJoinWithRP(Base_Size)\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, BackupItemFrontEndSize,\n\t StorageConsumedInMBs, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_Size_Policy = ()\n\t{\n\tJoinWithPolicy(Base_Size)\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName,BackupItemFrontEndSize, StorageConsumedInMBs, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_Size_Policy_RP = ()\n\t{\n\tJoinWithRP(Base_Size_Policy)\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName,BackupItemFrontEndSize, StorageConsumedInMBs, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tunion ( Base | where _DisplayAllFields == false ),\t   \n\t   ( Base_Size_Policy_RP | where _DisplayAllFields== true)\n};\nlet BI_HistoryCombinationUnderResourceSpecific = ()\n{\n\tlet JoinWithPolicy = (T:(PolicyUniqueId:string, ResourceId:string))\n\t{\n\tT | join kind= leftouter (\n\t PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, ResourceId) on PolicyUniqueId, ResourceId\n\t};\n\tlet JoinWithRP = (T:(BackupItemUniqueId:string, TimeRangeEndDay:datetime))\n\t{\n\tT | join kind= leftouter (\n\t RecoveryPointHistoryUnderResourceSpecific | project BackupItemUniqueId, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeRangeEndDay) on BackupItemUniqueId, TimeRangeEndDay\n\t};\n\tlet Base = ()\n\t{\n\tProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \n\t| join  kind= rightouter  (\n\t\tBackupItemAssociationHistoryUnderResourceSpecific |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\n\t) on ProtectedContainerUniqueId\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_Size = ()\n\t{\n\tBase\n\t| join kind= leftouter (\n\t   BackupItemFrontEndSizeHistoryUnderResourceSpecific | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay \n\t) on BackupItemUniqueId, TimeRangeEndDay\n\t// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\n\t| join kind= leftouter (\n\t   StorageAssociationHistoryUnderResourceSpecific | project StorageConsumedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay\n\t) on BackupItemUniqueId, TimeRangeEndDay\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, BackupItemFrontEndSize,\n\t StorageConsumedInMBs, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_Policy = ()\n\t{\n\tJoinWithPolicy(Base) \n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_RP = ()\n\t{\n\tJoinWithRP(Base)\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_Policy_RP = ()\n\t{\n\tJoinWithRP(Base_Policy)\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_Size_RP = ()\n\t{\n\tJoinWithRP(Base_Size)\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, BackupItemFrontEndSize,\n\t StorageConsumedInMBs, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_Size_Policy = ()\n\t{\n\tJoinWithPolicy(Base_Size)\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName,BackupItemFrontEndSize, StorageConsumedInMBs, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_Size_Policy_RP = ()\n\t{\n\tJoinWithRP(Base_Size_Policy)\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName,BackupItemFrontEndSize, StorageConsumedInMBs, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tunion ( Base | where _DisplayAllFields == false ),\t   \n\t   ( Base_Size_Policy_RP | where _DisplayAllFields== true)\n};\nlet LatestBackupItemAssociationAndStorageConsumptionHistoryTable = ()\n//let partition_data = (p:long, n:long)\n{\nTotalBackupItemDimensionTable | join  \n(union isfuzzy = true  \n(BI_HistoryCombinationUnderAzureDiagnostics() | where _IncludeLegacyEvent == true\n),\n(BI_HistoryCombinationUnderResourceSpecific())\n//| where hash(BackupItemUniqueId, n) == p\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay)\n  on BackupItemUniqueId\n| where isempty(_DatasourceSetName) or _DatasourceSetName == \"*\" or ProtectedContainerFriendlyName contains (_DatasourceSetName)\n| project BackupItemUniqueId, BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, DatasourceType, BackupItemProtectionState, VaultUniqueId,\nVaultName, VaultTags, SubscriptionId, ResourceGroupName, AzureDataCenter, TimeGenerated, ResourceId,  ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, PolicyName, BackupItemFrontEndSize, StorageConsumedInMBs, BackupManagementServerUniqueId, StorageReplicationType, OldestRecoveryPointTime, LatestRecoveryPointTime\n};\nlet LatestBackupItemAssociationAndStorageConsumptionTable = ()\n{\nLatestBackupItemDimensionTable | join \n(union isfuzzy = true  \n(BI_CombinationUnderAzureDiagnostics() | where _IncludeLegacyEvent == true\n),\n(BI_CombinationUnderResourceSpecific())\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId\n)on BackupItemUniqueId\n| where isempty(_DatasourceSetName) or _DatasourceSetName == \"*\" or ProtectedContainerFriendlyName contains (_DatasourceSetName)\n| project BackupItemUniqueId, BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, DatasourceType, BackupItemProtectionState, VaultUniqueId,\nVaultName, VaultTags, SubscriptionId, ResourceGroupName, AzureDataCenter, TimeGenerated, ResourceId,  ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, PolicyName, BackupItemFrontEndSize, StorageConsumedInMBs, BackupManagementServerUniqueId, StorageReplicationType, OldestRecoveryPointTime, LatestRecoveryPointTime\n};\nlet FinalTable = () {union (LatestBackupItemAssociationAndStorageConsumptionTable | where (_RangeEnd-_RangeStart == 1d)), (LatestBackupItemAssociationAndStorageConsumptionHistoryTable | where (_RangeEnd-_RangeStart > 1d))\n| project BackupItemName, BackupItemFriendlyName, BackupItemProtectionState, PolicyUniqueId, PolicyName = iff(BackupItemProtectionState == \"ProtectionStopped\", \"(none)\", PolicyName), SubscriptionId, ResourceGroupName, AzureDataCenter, VaultUniqueId, VaultName, VaultTags, BackupManagementType, BackupItemType, DatasourceType, BackupItemFrontEndSize,  StorageConsumedInMBs = iff(isempty(StorageConsumedInMBs), todouble(0), StorageConsumedInMBs), ResourceId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemUniqueId, StorageReplicationType, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated\n};\nlet FinalTable_V1Vault = () {Extend_DatasourceARMType(Extend_BackupInstanceId(Extend_DatasourceSetResourceId_DatasourceSetType_DatasourceResourceId(FinalTable)))\n|  extend container_array = split(ProtectedContainerName,\";\")\n|  extend container_arraylen = array_length(container_array)\n| project UniqueId = BackupItemUniqueId, Id = BackupInstanceId, FriendlyName = BackupItemFriendlyName, ProtectionStatus = BackupItemProtectionState, LatestRecoveryPoint = LatestRecoveryPointTime, OldestRecoveryPoint = OldestRecoveryPointTime, SourceSizeInMBs = BackupItemFrontEndSize, VaultStore_StorageConsumptionInMBs = StorageConsumedInMBs, DataSourceFriendlyName = BackupItemFriendlyName, DatasourceType, DatasourceARMType, DatasourceResourceId, DatasourceSetFriendlyName = ProtectedContainerFriendlyName,   DatasourceSetResourceId, DatasourceSetType,  PolicyName, PolicyUniqueId, PolicyId = strcat(ResourceId, \"/backupPolicies/\", PolicyName),  VaultResourceId = ResourceId, VaultUniqueId, VaultName, VaultTags, VaultStore_StorageReplicationType = StorageReplicationType, VaultSubscriptionId = SubscriptionId, VaultLocation = AzureDataCenter, VaultType = \"Microsoft.RecoveryServices/vaults\", TimeGenerated};\n// FinalTable_DPPVault to be added later\nFinalTable_V1Vault \n| where \"Microsoft.RecoveryServices/vaults\" in~ (_VaultTypeList) or '*' in (_VaultTypeList)"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_10": {
                            "runAfter": {
                                "Initialize_variable_8": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "AddonAzureBackupProtectedInstance_Incomplete",
                                        "type": "string",
                                        "value": "let AddonAzureBackupProtectedInstance = ()\n{\nunion"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_11": {
                            "runAfter": {
                                "Initialize_variable_17": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "ReportFilter_Trend",
                                        "type": "string",
                                        "value": "let _RangeStart = datetime(@{parameters('RangeStart')}) ;\nlet _RangeEnd = datetime(@{parameters('RangeEnd')}) ;\nlet _VaultSubscriptionList = split(@{parameters('VaultSubscriptionList')}, ',');\nlet _VaultLocationList = split(@{parameters('VaultLocationList')}, ',');\nlet _VaultList = split(@{parameters('VaultList')}, ',');\nlet _VaultTypeList = \"*\";\nlet _IncludeLegacyEvent= not(@{parameters('ExcludeLegacyEvent')});\nlet _DatasourceTypeList =  split(@{parameters('DatasourceTypeList')}, ',');\nlet _AggregationType = @{parameters('AggregationType')};"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_17": {
                            "runAfter": {
                                "For_each": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "WorkspaceList_Custom",
                                        "type": "string",
                                        "value": "@{concat(concat(substring(variables('AddonAzureBackupStorage_Incomplete'),0,sub(length(variables('AddonAzureBackupStorage_Incomplete')),1)),'};'),\r\nconcat(substring(variables('AddonAzureBackupProtectedInstance_Incomplete'),0,sub(length(variables('AddonAzureBackupProtectedInstance_Incomplete')),1)),'};'),\r\nconcat(substring(variables('AddonAzureBackupPolicy_Incomplete'),0,sub(length(variables('AddonAzureBackupPolicy_Incomplete')),1)),'};'),\r\nconcat(substring(variables('AddonAzureBackupJobs_Incomplete'),0,sub(length(variables('AddonAzureBackupJobs_Incomplete')),1)),'};'),\r\nconcat(substring(variables('CoreAzureBackup_Incomplete'),0,sub(length(variables('CoreAzureBackup_Incomplete')),1)),'};'),\r\nconcat(substring(variables('AzureDiagnostics_Incomplete'),0,sub(length(variables('AzureDiagnostics_Incomplete')),1)),'};'))}"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_2": {
                            "runAfter": {
                                "Create_CSV_table": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "visual",
                                        "type": "string",
                                        "value": "<div>\n<h3>Active Policy Trend</h3>\n<br>\n<img src=\"cid:@{body('Run_query_and_visualize_results')?['attachmentName']}\" width:\"50px\"/>\n<br>\n<h3> Cloud Storage Trend</h3> \n<br>\n<img src=\"cid:@{body('Run_query_and_visualize_results_2')?['attachmentName']}\" width:\"50px\"/>\n<br>\n</div>"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_3": {
                            "runAfter": {
                                "Initialize_variable_11": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "ReportFilter_Latest",
                                        "type": "string",
                                        "value": "let _RangeStart = datetime(@{parameters('RangeStart')}) ;\nlet _RangeEnd = datetime(@{parameters('RangeEnd')}) ;\nlet _VaultSubscriptionList = split(@{parameters('VaultSubscriptionList')}, ',');\nlet _VaultLocationList = split(@{parameters('VaultLocationList')}, ',');\nlet _VaultList = split(@{parameters('VaultList')}, ',');\nlet _VaultTypeList = \"*\";\nlet _IncludeLegacyEvent= not(@{parameters('ExcludeLegacyEvent')});\nlet _DatasourceTypeList =  split(@{parameters('DatasourceTypeList')}, ',');"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_4": {
                            "runAfter": {
                                "Initialize_variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "BackupInstanceTrendFunction",
                                        "type": "string",
                                        "value": "@{variables('WorkspaceList_Custom')}\n@{variables('ReportFilter_Trend')}\nlet _ProtectionStateList = \"*\";\nlet _DatasourceSetName = \"*\";\nlet _BackupInstanceName = \"*\";\nlet _DisplayAllFields = true;\n// Other Vars\nlet AsonDay = iff((_RangeEnd-startofday(now()) == 1d),_RangeEnd-2d, _RangeEnd-1d);\nlet AzureStorageCutoffDate = datetime(6/01/2020, 12:00:00.000 AM);\n// HelperFunctions\nlet Extend_DatasourceType = (T:(BackupManagementType:string, BackupItemType:string))\n{\nT | extend DatasourceType = iff(BackupManagementType == \"IaaSVM\", \"Azure Virtual Machine\", \niff(BackupManagementType == \"MAB\", \"Azure Backup Agent\", \niff(BackupManagementType == \"DPM\", \"DPM\", \niff(BackupManagementType == \"AzureBackupServer\", \"Azure Backup Server\", \niff(BackupManagementType == \"AzureStorage\", \"Azure Storage (Azure Files)\", \niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\", \"SQL in Azure VM\", \niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\", \"SAP HANA in Azure VM\", \"\")))))))\n};\nlet Extend_DatasourceARMType = (T:(BackupManagementType:string, BackupItemType:string))\n{\nT | extend DatasourceARMType = iff(BackupManagementType == \"IaaSVM\", \"Microsoft.Compute/virtualMachines\", \niff(BackupManagementType == \"MAB\", strcat(\"Azure Backup Agent\", \";\", BackupItemType), \niff(BackupManagementType == \"DPM\", strcat(\"DPM\", \";\", BackupItemType), \niff(BackupManagementType == \"AzureBackupServer\", strcat(\"Azure Backup Server\", \";\", BackupItemType), \niff(BackupManagementType == \"AzureStorage\", \"Microsoft.Storage/storageAccounts/fileServices/shares\", \niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\", \"SQLDataBase\", \niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\", \"SAPHanaDatabase\", \"\")))))))\n};\nlet Extend_BackupInstanceId = (T:(ResourceId:string, BackupManagementType:string, BackupItemType:string, ProtectedContainerName:string, BackupItemName:string))\n{\nT | extend BackupInstanceId =  toupper(iff ((BackupManagementType == \"IaaSVM\" and BackupItemType == \"VM\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/IaasVMContainer;\", ProtectedContainerName, \"/protectedItems/VM;\", ProtectedContainerName),\niff((BackupManagementType == \"AzureStorage\" and BackupItemType == \"AzureFileShare\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/StorageContainer;\", ProtectedContainerName, \"/protectedItems/AzureFileShare;\", BackupItemName) , \niff((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\", ProtectedContainerName, \"/protectedItems/SQLDataBase;\", BackupItemName) , \niff((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\", ProtectedContainerName, \"/protectedItems/SAPHanaDatabase;\", BackupItemName), \"\")))))\n};\nlet Extend_DatasourceSetResourceId_DatasourceSetType_DatasourceResourceId = (T:(ResourceId:string, ProtectedContainerName:string, BackupManagementType:string, BackupItemType:string, BackupItemUniqueId:string, BackupItemName:string, BackupItemFriendlyName:string))\n{\nT | extend prefix = array_strcat(array_split(split(ResourceId,\"/\"), 4)[0] ,\"/\")\n|  extend container_array = split(ProtectedContainerName,\";\")\n|  extend container_arraylen = array_length(container_array)\n| extend containerNameString = iff(container_arraylen == 3, ProtectedContainerName, \"\")\n| parse containerNameString with entityType:string \";\" rgName:string \";\" entityName:string\n| extend entityURL = iff((BackupManagementType == \"AzureStorage\" and BackupItemType == \"AzureFileShare\"), iff(entityType == \"storage\", \"/Microsoft.Storage/storageAccounts/\", \"/Microsoft.ClassicStorage/storageAccounts/\"), iff((BackupManagementType == \"IaaSVM\" and BackupItemType == \"VM\"), iff(entityType =~ \"iaasvmcontainerv2\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), iff(((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\") or (BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\")), iff(entityType =~ \"compute\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")))\n| extend DatasourceSetResourceId = toupper(iff(BackupManagementType in (\"DPM\", \"AzureBackupServer\", \"MAB\"), \"\" , iff(containerNameString != \"\", strcat(prefix, \"/\", rgName, \"/providers\", entityURL, entityName), ResourceId)))\n//DatasourceType\n| extend DatasourceSetType = iff(BackupManagementType == \"IaaSVM\", iff(entityType =~ \"iaasvmcontainerv2\", \"Microsoft.Compute/virtualMachines\", \"Microsoft.ClassicCompute/virtualMachines\"),  \niff(BackupManagementType == \"MAB\", \"Azure Backup Agent\", \niff(BackupManagementType == \"DPM\", \"DPM\", \niff(BackupManagementType == \"AzureBackupServer\", \"Azure Backup Server\", \niff(BackupManagementType == \"AzureStorage\", iff(entityType == \"storage\", \"Microsoft.Storage/storageAccounts\", \"Microsoft.ClassicStorage/storageAccounts\"), \niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\", iff(entityType =~ \"compute\", \"Microsoft.Compute/virtualMachines\", \"Microsoft.ClassicCompute/virtualMachines\"), \niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\", iff(entityType =~ \"compute\", \"Microsoft.Compute/virtualMachines\", \"Microsoft.ClassicCompute/virtualMachines\"), \"\")))))))\n| extend DatasourceResourceId = toupper(iff(BackupManagementType in (\"DPM\", \"AzureBackupServer\", \"MAB\"), BackupItemUniqueId, \niff(BackupManagementType == \"IaaSVM\", DatasourceSetResourceId, \niff(BackupManagementType == \"AzureStorage\", strcat(DatasourceSetResourceId, \"/fileServices/default/shares/\", BackupItemFriendlyName),\niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\",strcat(DatasourceSetResourceId, \"/providers/Microsoft.RecoveryServices/backupProtectedItem/SQLDataBase;\", BackupItemName),\niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\",strcat(DatasourceSetResourceId, \"/providers/Microsoft.RecoveryServices/backupProtectedItem/SAPHanaDatabase;\", BackupItemName),\"\"))))))\n| project-away prefix, container_array, container_arraylen, containerNameString, entityURL \n};\n// Source Tables\nlet VaultUnderAzureDiagnostics = ()\n{\nAzureDiagnostics\n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\"\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), VaultTags = columnifexists(\"VaultTags_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceGroupName =  columnifexists(\"ResourceGroupName_s\", \"\"), SubscriptionId = toupper(SubscriptionId), StorageReplicationType = columnifexists(\"StorageReplicationType_s\", \"\"), ResourceId, TimeGenerated \n| where SubscriptionId in~ (_VaultSubscriptionList) or '*' in (_VaultSubscriptionList)\n| where AzureDataCenter in~ (_VaultLocationList) or '*' in (_VaultLocationList)\n| where VaultName in~  (_VaultList) or '*' in (_VaultList)\n| summarize arg_max(TimeGenerated, *) by ResourceId\n| project StorageReplicationType, VaultUniqueId, VaultName, VaultTags, SubscriptionId, ResourceGroupName, AzureDataCenter, ResourceId, TimeGenerated\n};\nlet VaultUnderResourceSpecific = ()\n{\nCoreAzureBackup\n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where OperationName == \"Vault\" \n| project StorageReplicationType, VaultUniqueId, VaultName, VaultTags, SubscriptionId = toupper(SubscriptionId), ResourceGroupName, AzureDataCenter, ResourceId, TimeGenerated \n| where SubscriptionId in~ (_VaultSubscriptionList) or '*' in (_VaultSubscriptionList)\n| where AzureDataCenter in~ (_VaultLocationList) or '*' in (_VaultLocationList)\n| where VaultName in~  (_VaultList) or '*' in (_VaultList)\n| summarize arg_max(TimeGenerated, *) by ResourceId\n};\nlet ResourceIdListUnderAzureDiagnostics = materialize(VaultUnderAzureDiagnostics | distinct ResourceId);\nlet ResourceIdListUnderResourceSpecific = materialize(VaultUnderResourceSpecific | distinct ResourceId);\nlet BackupItemUnderAzureDiagnostics = ()\n{\nlet SourceBackupItemTable = AzureDiagnostics\n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),SecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"),  ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\n//Handle MAB system state\n// Excluding SecondaryBackupProtectionState, BackupItemAppVersion, ProtectionGroupName\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, ProtectionGroupName, BackupItemFriendlyName, BackupItemType, BackupManagementType, TimeGenerated, ResourceId\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\");\nlet BackupItemTable = Extend_DatasourceType(SourceBackupItemTable)\n| where DatasourceType in~ (_DatasourceTypeList) or '*' in (_DatasourceTypeList)\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\nVaultUnderAzureDiagnostics | join   (\n   BackupItemTable \n) on ResourceId\n| project-away ResourceId1, TimeGenerated1;\n};\nlet BackupItemUnderResourceSpecific = ()\n{\nlet SourceBackupItemTable = CoreAzureBackup\n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\n//Handle MAB system state\n// Excluding SecondaryBackupProtectionState, BackupItemAppVersion, ProtectionGroupName\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, ProtectionGroupName, BackupItemFriendlyName, BackupItemType, BackupManagementType, TimeGenerated, ResourceId\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\");\nlet BackupItemTable = Extend_DatasourceType(SourceBackupItemTable)\n| where DatasourceType in~ (_DatasourceTypeList) or '*' in (_DatasourceTypeList)\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\nVaultUnderResourceSpecific | join   (\n   BackupItemTable \n) on ResourceId\n| project-away ResourceId1, TimeGenerated1;\n};\nlet BackupItemAssociationHistoryUnderAzureDiagnostics = ()\n{\n let BackupItemAssociationTable = AzureDiagnostics \n // Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderAzureDiagnostics)\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\"), PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\nTimeGenerated, ResourceId  \n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n| where (_AggregationType =~ \"Daily\") or (_AggregationType =~ \"Weekly\" and startofday(TimeGenerated) == startofweek(TimeGenerated)) or (_AggregationType =~ \"Monthly\" and startofday(TimeGenerated) == startofweek(TimeGenerated))\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n// Handle MAB SystemState\n// PolicyUniqueId can be either guid or string due to AzureDiagnostics behaviour\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\nBackupItemAssociationTable\n};\nlet BackupItemAssociationHistoryUnderResourceSpecific = ()\n{\nlet BackupItemAssociationTable = CoreAzureBackup \n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderResourceSpecific)\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n| where (_AggregationType =~ \"Daily\") or (_AggregationType =~ \"Weekly\" and startofday(TimeGenerated) == startofweek(TimeGenerated)) or (_AggregationType =~ \"Monthly\" and startofday(TimeGenerated) == startofweek(TimeGenerated))\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n// Handle MAB SystemState\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\nBackupItemAssociationTable\n};\nlet BackupItemAssociationUnderAzureDiagnostics = ()\n{\n let BackupItemAssociationTable = AzureDiagnostics \n // Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderAzureDiagnostics)\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\nTimeGenerated, ResourceId  \n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n// Handle MAB SystemState\n// PolicyUniqueId can be either guid or string due to AzureDiagnostics behaviour\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\nBackupItemAssociationTable\n};\nlet BackupItemAssociationUnderResourceSpecific = ()\n{\nlet BackupItemAssociationTable = CoreAzureBackup \n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderResourceSpecific)\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n// Handle MAB SystemState\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\nBackupItemAssociationTable\n};\nlet BackupItemFrontEndSizeHistoryUnderAzureDiagnostics = ()\n{\n let BackupItemFrontEndSizeTable = AzureDiagnostics \n // Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderAzureDiagnostics)\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n| where (_AggregationType =~ \"Daily\") or (_AggregationType =~ \"Weekly\" and startofday(TimeGenerated) == startofweek(TimeGenerated)) or (_AggregationType =~ \"Monthly\" and startofday(TimeGenerated) == startofweek(TimeGenerated))\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\nBackupItemFrontEndSizeTable\n};\nlet BackupItemFrontEndSizeHistoryUnderResourceSpecific = ()\n{\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderResourceSpecific)\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\n| project BackupItemFrontEndSize, BackupItemUniqueId, BackupManagementType, TimeGenerated, ResourceId \n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n| where (_AggregationType =~ \"Daily\") or (_AggregationType =~ \"Weekly\" and startofday(TimeGenerated) == startofweek(TimeGenerated)) or (_AggregationType =~ \"Monthly\" and startofday(TimeGenerated) == startofweek(TimeGenerated))\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\nBackupItemFrontEndSizeTable\n};\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\n{\n let BackupItemFrontEndSizeTable = AzureDiagnostics \n // Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderAzureDiagnostics)\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\nBackupItemFrontEndSizeTable\n};\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\n{\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderResourceSpecific)\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\n| project BackupItemFrontEndSize, BackupItemUniqueId, BackupManagementType, TimeGenerated, ResourceId \n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\nBackupItemFrontEndSizeTable\n};\nlet StorageAssociationHistoryUnderAzureDiagnostics = ()\n{\n let StorageAssociationTable = AzureDiagnostics \n // Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderAzureDiagnostics)\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n| where (_AggregationType =~ \"Daily\") or (_AggregationType =~ \"Weekly\" and startofday(TimeGenerated) == startofweek(TimeGenerated)) or (_AggregationType =~ \"Monthly\" and startofday(TimeGenerated) == startofweek(TimeGenerated))\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\nStorageAssociationTable\n};\nlet StorageAssociationHistoryUnderResourceSpecific = ()\n{\nlet StorageAssociationTable = AddonAzureBackupStorage \n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now()) \n| where ResourceId in (ResourceIdListUnderResourceSpecific)\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\n| project BackupItemUniqueId, VaultUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementType, TimeGenerated, ResourceId\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\") \n| where (_AggregationType =~ \"Daily\") or (_AggregationType =~ \"Weekly\" and startofday(TimeGenerated) == startofweek(TimeGenerated)) or (_AggregationType =~ \"Monthly\" and startofday(TimeGenerated) == startofweek(TimeGenerated))\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\nStorageAssociationTable\n};\nlet StorageAssociationUnderAzureDiagnostics = ()\n{\n let StorageAssociationTable = AzureDiagnostics \n // Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderAzureDiagnostics)\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\nStorageAssociationTable\n};\nlet StorageAssociationUnderResourceSpecific = ()\n{\nlet StorageAssociationTable = AddonAzureBackupStorage \n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderResourceSpecific)\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\n| project BackupItemUniqueId, VaultUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementType, TimeGenerated, ResourceId \n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\nStorageAssociationTable\n};\nlet RecoveryPointUnderAzureDiagnostics = ()\n{\n let RecoveryPointTable = AzureDiagnostics \n // Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderAzureDiagnostics)\n| where OperationName == \"RecoveryPoint\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\n| project LatestRecoveryPointLocation = columnifexists(\"LatestRecoveryPointLocation_s\", \"\"), OldestRecoveryPointLocation = columnifexists(\"OldestRecoveryPointLocation_s\", \"\"), LatestRecoveryPointTime = todatetime(columnifexists(\"LatestRecoveryPointTime_s\", \"\")), OldestRecoveryPointTime = todatetime(columnifexists(\"OldestRecoveryPointTime_s\", \"\")),\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n// Interested in only Vault/Cloud RPs\n| where LatestRecoveryPointLocation has \"Cloud\" \n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\nRecoveryPointTable\n};\nlet RecoveryPointUnderResourceSpecific = ()\n{\n let RecoveryPointTable = CoreAzureBackup \n // Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderResourceSpecific)\n| where OperationName == \"RecoveryPoint\" and  State != \"Deleted\"\n| project LatestRecoveryPointLocation, OldestRecoveryPointLocation, LatestRecoveryPointTime, OldestRecoveryPointTime,\nBackupItemUniqueId, BackupManagementType, TimeGenerated, ResourceId\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n// Interested in only Vault/Cloud RPs\n| where LatestRecoveryPointLocation has \"Cloud\" \n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\nRecoveryPointTable\n};\nlet RecoveryPointHistoryUnderAzureDiagnostics = ()\n{\n let RecoveryPointTable = AzureDiagnostics \n // Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderAzureDiagnostics)\n| where OperationName == \"RecoveryPoint\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\n| project LatestRecoveryPointLocation = columnifexists(\"LatestRecoveryPointLocation_s\", \"\"), OldestRecoveryPointLocation = columnifexists(\"OldestRecoveryPointLocation_s\", \"\"), LatestRecoveryPointTime = todatetime(columnifexists(\"LatestRecoveryPointTime_s\", \"\")), OldestRecoveryPointTime = todatetime(columnifexists(\"OldestRecoveryPointTime_s\", \"\")),\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n| where (_AggregationType =~ \"Daily\") or (_AggregationType =~ \"Weekly\" and startofday(TimeGenerated) == startofweek(TimeGenerated)) or (_AggregationType =~ \"Monthly\" and startofday(TimeGenerated) == startofweek(TimeGenerated))\n// Interested in only Vault/Cloud RPs\n| where LatestRecoveryPointLocation has \"Cloud\" \n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\nRecoveryPointTable\n};\nlet RecoveryPointHistoryUnderResourceSpecific = ()\n{\n let RecoveryPointTable = CoreAzureBackup \n // Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderResourceSpecific)\n| where OperationName == \"RecoveryPoint\" and  State != \"Deleted\"\n| project LatestRecoveryPointLocation, OldestRecoveryPointLocation, LatestRecoveryPointTime, OldestRecoveryPointTime,\nBackupItemUniqueId, BackupManagementType, TimeGenerated, ResourceId\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n| where (_AggregationType =~ \"Daily\") or (_AggregationType =~ \"Weekly\" and startofday(TimeGenerated) == startofweek(TimeGenerated)) or (_AggregationType =~ \"Monthly\" and startofday(TimeGenerated) == startofweek(TimeGenerated))\n// Interested in only Vault/Cloud RPs\n| where LatestRecoveryPointLocation has \"Cloud\" \n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\nRecoveryPointTable\n};\nlet ProtectedContainerUnderAzureDiagnostics = ()\n{\nlet ProtectedContainerTable = AzureDiagnostics\n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\nVaultUnderAzureDiagnostics | join   (\n   ProtectedContainerTable \n) on ResourceId;\n};\nlet ProtectedContainerUnderResourceSpecific = ()\n{\nlet ProtectedContainerTable = CoreAzureBackup\n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\n| project ProtectedContainerUniqueId,  ProtectedContainerFriendlyName, AgentVersion,\nProtectedContainerOSType, ProtectedContainerOSVersion, ProtectedContainerWorkloadType,  ProtectedContainerName, ProtectedContainerProtectionState, ProtectedContainerLocation, ProtectedContainerType,\nBackupManagementType, TimeGenerated, ResourceId\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\nVaultUnderResourceSpecific | join   (\n   ProtectedContainerTable \n) on ResourceId;\n};\nlet PolicyUnderAzureDiagnostics = ()\n{\nlet PolicyTable = AzureDiagnostics\n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderAzureDiagnostics)\n| where OperationName == \"Policy\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\"\n| project PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = columnifexists(\"PolicyName_s\", \"\"), ResourceId, BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupManagementType, PolicyName, ResourceId, TimeGenerated \n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\nPolicyTable\n};\nlet PolicyUnderResourceSpecific = ()\n{\nlet PolicyTable = AddonAzureBackupPolicy\n// Take records until previous day\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\n| where ResourceId in (ResourceIdListUnderResourceSpecific)\n| where OperationName == \"Policy\" \n| project PolicyUniqueId, PolicyName, ResourceId, TimeGenerated, BackupManagementType\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\nPolicyTable\n};\n// BusinessLogic\nlet TotalBackupItemDimensionTable = () {union isfuzzy = true \n(BackupItemUnderAzureDiagnostics()),\n(BackupItemUnderResourceSpecific())\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\n| where isempty(_BackupInstanceName) or _BackupInstanceName == \"*\" or  BackupItemFriendlyName contains (_BackupInstanceName)\n| extend BackupItemProtectionState = iff(BackupItemProtectionState in (\"Protected\", \"ActivelyProtected\",\"ProtectionError\"), \"Protected\", iff(BackupItemProtectionState in (\"IRPending\"), \"InitialBackupPending\", iff(isnotempty(BackupItemProtectionState),\"ProtectionStopped\",BackupItemProtectionState)))\n| where BackupItemProtectionState in~ (_ProtectionStateList) or '*' in (_ProtectionStateList)\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, DatasourceType, BackupItemProtectionState,\nStorageReplicationType, ResourceId, VaultUniqueId, VaultName, VaultTags, SubscriptionId, ResourceGroupName, AzureDataCenter};\nlet BI_HistoryCombinationUnderAzureDiagnostics = ()\n{\n\tlet JoinWithPolicy = (T:(PolicyUniqueId:string, ResourceId:string))\n\t{\n\tT | join kind= leftouter (\n\t PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, ResourceId) on PolicyUniqueId, ResourceId\n\t};\n\tlet JoinWithRP = (T:(BackupItemUniqueId:string, TimeRangeEndDay:datetime))\n\t{\n\tT | join kind= leftouter (\n\t RecoveryPointHistoryUnderAzureDiagnostics | project BackupItemUniqueId, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeRangeEndDay) on BackupItemUniqueId, TimeRangeEndDay\n\t};\n\tlet Base = ()\n\t{\n\tProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \n\t| join  kind= rightouter  (\n\t\tBackupItemAssociationHistoryUnderAzureDiagnostics |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\n\t) on ProtectedContainerUniqueId\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_Size = ()\n\t{\n\tBase\n\t| join kind= leftouter (\n\t   BackupItemFrontEndSizeHistoryUnderAzureDiagnostics | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay \n\t) on BackupItemUniqueId, TimeRangeEndDay\n\t// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\n\t| join kind= leftouter (\n\t   StorageAssociationHistoryUnderAzureDiagnostics | project StorageConsumedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay\n\t) on BackupItemUniqueId, TimeRangeEndDay\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, BackupItemFrontEndSize,\n\t StorageConsumedInMBs, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_Policy = ()\n\t{\n\tJoinWithPolicy(Base) \n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_RP = ()\n\t{\n\tJoinWithRP(Base)\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_Policy_RP = ()\n\t{\n\tJoinWithRP(Base_Policy)\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_Size_RP = ()\n\t{\n\tJoinWithRP(Base_Size)\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, BackupItemFrontEndSize,\n\t StorageConsumedInMBs, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_Size_Policy = ()\n\t{\n\tJoinWithPolicy(Base_Size)\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName,BackupItemFrontEndSize, StorageConsumedInMBs, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_Size_Policy_RP = ()\n\t{\n\tJoinWithRP(Base_Size_Policy)\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName,BackupItemFrontEndSize, StorageConsumedInMBs, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tunion ( Base | where _DisplayAllFields == false ),\t   \n\t   ( Base_Size_Policy_RP | where _DisplayAllFields== true)\n};\nlet BI_HistoryCombinationUnderResourceSpecific = ()\n{\n\tlet JoinWithPolicy = (T:(PolicyUniqueId:string, ResourceId:string))\n\t{\n\tT | join kind= leftouter (\n\t PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, ResourceId) on PolicyUniqueId, ResourceId\n\t};\n\tlet JoinWithRP = (T:(BackupItemUniqueId:string, TimeRangeEndDay:datetime))\n\t{\n\tT | join kind= leftouter (\n\t RecoveryPointHistoryUnderResourceSpecific | project BackupItemUniqueId, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeRangeEndDay) on BackupItemUniqueId, TimeRangeEndDay\n\t};\n\tlet Base = ()\n\t{\n\tProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \n\t| join  kind= rightouter  (\n\t\tBackupItemAssociationHistoryUnderResourceSpecific |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\n\t) on ProtectedContainerUniqueId\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_Size = ()\n\t{\n\tBase\n\t| join kind= leftouter (\n\t   BackupItemFrontEndSizeHistoryUnderResourceSpecific | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay \n\t) on BackupItemUniqueId, TimeRangeEndDay\n\t// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\n\t| join kind= leftouter (\n\t   StorageAssociationHistoryUnderResourceSpecific | project StorageConsumedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay\n\t) on BackupItemUniqueId, TimeRangeEndDay\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, BackupItemFrontEndSize,\n\t StorageConsumedInMBs, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_Policy = ()\n\t{\n\tJoinWithPolicy(Base) \n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_RP = ()\n\t{\n\tJoinWithRP(Base)\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_Policy_RP = ()\n\t{\n\tJoinWithRP(Base_Policy)\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_Size_RP = ()\n\t{\n\tJoinWithRP(Base_Size)\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, BackupItemFrontEndSize,\n\t StorageConsumedInMBs, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_Size_Policy = ()\n\t{\n\tJoinWithPolicy(Base_Size)\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName,BackupItemFrontEndSize, StorageConsumedInMBs, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tlet Base_Size_Policy_RP = ()\n\t{\n\tJoinWithRP(Base_Size_Policy)\n\t| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName,BackupItemFrontEndSize, StorageConsumedInMBs, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated, TimeRangeEndDay, ResourceId\n\t};\n\tunion ( Base | where _DisplayAllFields == false ),\t   \n\t   ( Base_Size_Policy_RP | where _DisplayAllFields== true)\n};\nlet LatestBackupItemAssociationAndStorageConsumptionHistoryTable = ()\n//let partition_data = (p:long, n:long)\n{\nTotalBackupItemDimensionTable | join  \n(union isfuzzy = true  \n(BI_HistoryCombinationUnderAzureDiagnostics() | where _IncludeLegacyEvent == true\n),\n(BI_HistoryCombinationUnderResourceSpecific())\n//| where hash(BackupItemUniqueId, n) == p\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay)\n  on BackupItemUniqueId\n| where isempty(_DatasourceSetName) or _DatasourceSetName == \"*\" or ProtectedContainerFriendlyName contains (_DatasourceSetName)\n| project BackupItemUniqueId, BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, DatasourceType, BackupItemProtectionState, VaultUniqueId,\nVaultName, VaultTags, SubscriptionId, ResourceGroupName, AzureDataCenter, TimeGenerated, ResourceId,  ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, PolicyName, BackupItemFrontEndSize, StorageConsumedInMBs, BackupManagementServerUniqueId, StorageReplicationType, OldestRecoveryPointTime, LatestRecoveryPointTime\n};\nlet FinalTable = () {\nLatestBackupItemAssociationAndStorageConsumptionHistoryTable\n| project BackupItemName, BackupItemFriendlyName, BackupItemProtectionState, PolicyUniqueId, PolicyName = iff(BackupItemProtectionState == \"ProtectionStopped\", \"(none)\", PolicyName), SubscriptionId, ResourceGroupName, AzureDataCenter, VaultUniqueId, VaultName, VaultTags, BackupManagementType, BackupItemType, DatasourceType, BackupItemFrontEndSize,  StorageConsumedInMBs = iff(isempty(StorageConsumedInMBs), todouble(0), StorageConsumedInMBs), ResourceId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemUniqueId, StorageReplicationType, OldestRecoveryPointTime, LatestRecoveryPointTime, TimeGenerated\n};\nlet FinalTable_V1Vault = () {Extend_DatasourceARMType(Extend_BackupInstanceId(Extend_DatasourceSetResourceId_DatasourceSetType_DatasourceResourceId(FinalTable)))\n|  extend container_array = split(ProtectedContainerName,\";\")\n|  extend container_arraylen = array_length(container_array)\n| project UniqueId = BackupItemUniqueId, Id = BackupInstanceId, FriendlyName = BackupItemFriendlyName, ProtectionStatus = BackupItemProtectionState, LatestRecoveryPoint = LatestRecoveryPointTime, OldestRecoveryPoint = OldestRecoveryPointTime, SourceSizeInMBs = BackupItemFrontEndSize, VaultStore_StorageConsumptionInMBs = StorageConsumedInMBs, DataSourceFriendlyName = BackupItemFriendlyName, DatasourceType, DatasourceARMType, DatasourceResourceId, DatasourceSetFriendlyName = ProtectedContainerFriendlyName,   DatasourceSetResourceId, DatasourceSetType,  PolicyName, PolicyUniqueId, PolicyId = strcat(ResourceId, \"/backupPolicies/\", PolicyName),  VaultResourceId = ResourceId, VaultUniqueId, VaultName, VaultTags, VaultStore_StorageReplicationType = StorageReplicationType, VaultSubscriptionId = SubscriptionId, VaultLocation = AzureDataCenter, VaultType = \"Microsoft.RecoveryServices/vaults\", TimeGenerated};\n// FinalTable_DPPVault to be added later\nFinalTable_V1Vault \n| where \"Microsoft.RecoveryServices/vaults\" in~ (_VaultTypeList) or '*' in (_VaultTypeList)"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_5": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "AzureDiagnostics_Incomplete",
                                        "type": "string",
                                        "value": "let AzureDiagnostics = ()\n{\nunion"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_6": {
                            "runAfter": {
                                "Initialize_variable_5": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "CoreAzureBackup_Incomplete",
                                        "type": "string",
                                        "value": "let CoreAzureBackup = ()\n{\nunion"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_7": {
                            "runAfter": {
                                "Initialize_variable_6": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "AddonAzureBackupJobs_Incomplete",
                                        "type": "string",
                                        "value": "let AddonAzureBackupJobs = ()\n{\nunion"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_8": {
                            "runAfter": {
                                "Initialize_variable_7": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "AddonAzureBackupPolicy_Incomplete",
                                        "type": "string",
                                        "value": "let AddonAzureBackupPolicy = ()\n{\nunion"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_9": {
                            "runAfter": {
                                "Initialize_variable_10": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "AddonAzureBackupStorage_Incomplete",
                                        "type": "string",
                                        "value": "let AddonAzureBackupStorage = ()\n{\nunion"
                                    }
                                ]
                            }
                        },
                        "Run_query_and_list_results": {
                            "runAfter": {
                                "Run_query_and_visualize_results_2": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@{variables('BackupInstanceFunction')}\n// query to transform function output\n| where PolicyUniqueId != \"\"\n| summarize sum(SourceSizeInMBs), sum(VaultStore_StorageConsumptionInMBs), count(UniqueId), StorageReplicationType = any(VaultStore_StorageReplicationType), PolicyName = any(PolicyName), Vault = any(VaultResourceId), PolicyId = any(PolicyId) by PolicyUniqueId, VaultResourceId",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/queryData",
                                "queries": {
                                    "resourcegroups": "[resourceGroup().name]",
                                    "resourcename": "[parameters('workspace')]",
                                    "resourcetype": "Log Analytics Workspace",
                                    "subscriptions": "[subscription().subscriptionId]",
                                    "timerange": "Set in query"
                                }
                            }
                        },
                        "Run_query_and_visualize_results": {
                            "runAfter": {
                                "Initialize_variable_4": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@{variables('BackupInstanceTrendFunction')}\n// query to transform function output\n| where PolicyUniqueId != \"\"\n| summarize ActivePolicyCount = dcount(strcat(VaultResourceId, PolicyUniqueId), 4) by TimeRangeEndDay =  startofday(TimeGenerated)\n",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/visualizeQuery",
                                "queries": {
									"resourcegroups": "[resourceGroup().name]",
									"resourcename": "[parameters('workspace')]",
                                    "resourcetype": "Log Analytics Workspace",
									"subscriptions": "[subscription().subscriptionId]",
									"timerange": "Set in query",
                                    "visType": "Time Chart"
                                }
                            }
                        },
                        "Run_query_and_visualize_results_2": {
                            "runAfter": {
                                "Run_query_and_visualize_results": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@{variables('BackupInstanceTrendFunction')}\n// query to transform function output\n| summarize StorageConsumedInGBs = sum(VaultStore_StorageConsumptionInMBs)/(1024) by  TimeRangeEndDay = startofday(TimeGenerated)\n",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/visualizeQuery",
                                "queries": {
									"resourcegroups": "[resourceGroup().name]",
									"resourcename": "[parameters('workspace')]",
                                    "resourcetype": "Log Analytics Workspace",
									"subscriptions": "[subscription().subscriptionId]",
									"timerange": "Set in query",
                                    "visType": "Time Chart"
                                }
                            }
                        },
                        "Send_an_email_(V2)": {
                            "runAfter": {
                                "Initialize_variable_2": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "Attachments": [
                                        {
                                            "ContentBytes": "@{body('Run_query_and_visualize_results')?['attachmentContent']}",
                                            "Name": "@body('Run_query_and_visualize_results')?['attachmentName']"
                                        },
                                        {
                                            "ContentBytes": "@{body('Run_query_and_visualize_results_2')?['attachmentContent']}",
                                            "Name": "@body('Run_query_and_visualize_results_2')?['attachmentName']"
                                        },
                                        {
                                            "ContentBytes": "@{base64(body('Create_CSV_table'))}",
                                            "Name": "ActivePoliciesList.csv"
                                        }
                                    ],
                                    "Body": "<p><u><strong><br>\nBackupInstances Report<br>\n<br>\n</strong></u><u><strong>@{variables('visual')}</strong></u><u><strong><br>\n<br>\n<br>\n</strong></u><br>\n<br>\n</p>",
                                    "Subject": "Policies Report",
									"To": "[parameters('emailId')]"                                
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['office365']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/v2/Mail"
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azuremonitorlogs": {
                                "connectionId": "[parameters('connections_azuremonitorlogs_externalid')]",
                                "connectionName": "azuremonitorlogs",
								"id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('location'), '/managedApis/azuremonitorlogs')]"
                            },
                            "office365": {
                                "connectionId": "[parameters('connections_office365_externalid')]",
                                "connectionName": "office365",
								"id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('location'), '/managedApis/office365')]"
                            }
                        }
                    }
                }
            }
        }
    ]
}