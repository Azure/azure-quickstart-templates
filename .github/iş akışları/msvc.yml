# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# Find more information at:
# https://github.com/microsoft/msvc-code-analysis-action

name: Microsoft C++ Code Analysis

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '17 20 * * 3'
- ad: Microsoft C++ Kod Analizi Eylemi
  kullanır: microsoft/msvc-code-analysis-action@v0.1.0
  ile birlikte:
    # Halihazırda oluşturulmuş olması gereken CMake derleme dizini.
    cmakeBuildDirectory:
    # Kullanılacak yapı Yapılandırması (Sürüm, Hata Ayıklama vb.). Bu, çok konfigürasyonlu bir CMake oluşturucu kullanıyorsanız gereklidir.
    buildConfiguration: # isteğe bağlı
    # Hangi kontrollerin çalıştırılacağını belirlemek için kullanılan kural kümesi dosyası.
    kural kümesi: # isteğe bağlı, varsayılan NativeRecommendedRules.ruleset'tir
    # Verilen yol için "ignoredTargetPaths" ve "ignoreSystemHeaders" ayarıyla aynıdır. Bu, her iki seçenek için de ayrı ayrı önerilir.
    yok sayılanYollar: # isteğe bağlı
    # Bu yollar içinde tanımlanan tüm CMake hedefleri analizden çıkarılacaktır. Bu, testleri veya yerel olarak oluşturulmuş bağımlılıkları hariç tutmak için kullanışlıdır. Liste ";" ayrılmış, tam dizin yolları gerektirir ve "github.workspace" ile mutlak veya göreli olabilir
    görmezden gelinenTargetPaths: # isteğe bağlı
    # Bu yol içinde yer alan tüm içerikler analizden çıkarılacaktır. Bu, yalnızca mevcut yolları filtreler ve derleyiciye herhangi bir ek içerik eklemez. Bu, CMake'e eklenen hedef içerikleri veya diğer özel içerikleri hariç tutmak için kullanışlıdır. Liste ";" ayrılmış, tam dizin yolları gerektirir ve "github.workspace" ile mutlak veya göreli olabilir
    yok sayılanIncludePaths: # isteğe bağlı
    # CMake'de SYSTEM olarak işaretlenmiş herhangi bir üstbilgiden gelen uyarıları yok saymak için /harici bağımsız değişkenleri kullanır.
    görmezdenSystemHeaders: # isteğe bağlı, varsayılan değer doğrudur
    # SARIF dosyasını oluşturmak için isteğe bağlı yol. Sağlanmamışsa, CMake derleme dizininde "results.sarif" oluşturulacaktır. Yol, mutlak veya "github.workspace" ile ilgili olabilir.
    Sonuç Yolu: # isteğe bağlı
    # Visual Studio Komut İstemi'ni kullanarak verilen MSVC araç seti için örtük içermeleri/lib'leri yükleyin. Halihazırda yüklenmişse veya özel bir dahil etme yolu gerekliyse false olarak ayarlayın.
    loadImplicitCompilerEnv: # isteğe bağlı, varsayılan değer doğrudur
    # Derleyicinin her örneğine iletilecek isteğe bağlı parametreler.
    ek Args: # isteğe bağlı
env:
  # Path to the CMake build directory.
  build: '${{ github.workspace }}/build'

permissions:
  contents: read

jobs:
  analyze:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    name: Analyze
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure CMake
        run: cmake -B ${{ env.build }}

      # Build is not required unless generated source files are used
      # - name: Build CMake
      #   run: cmake --build ${{ env.build }}

      - name: Initialize MSVC Code Analysis
        uses: microsoft/msvc-code-analysis-action@04825f6d9e00f87422d6bf04e1a38b1f3ed60d99
        # Provide a unique ID to access the sarif output path
        id: run-analysis
        with:
          cmakeBuildDirectory: ${{ env.build }}
          # Ruleset file that will determine what checks will be run
          ruleset: NativeRecommendedRules.ruleset

      # Upload SARIF file to GitHub Code Scanning Alerts
      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.run-analysis.outputs.sarif }}

      # Upload SARIF file as an Artifact to download and view
      # - name: Upload SARIF as an Artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: sarif-file
      #     path: ${{ steps.run-analysis.outputs.sarif }}
