# This workflow will build and push a Docker container to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-custom-container?tabs=dotnet&pivots=container-linux
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Create a GitHub Personal access token with "repo" and "read:packages" permissions. 
#
# 4. Create three app settings on your Azure Web app:
#       DOCKER_REGISTRY_SERVER_URL: Set this to "https://ghcr.io"
#       DOCKER_REGISTRY_SERVER_USERNAME: Set this to the GitHub username or organization that owns the repository
#       DOCKER_REGISTRY_SERVER_PASSWORD: Set this to the value of your PAT token from the previous step
#
# 5. Change the value for the AZURE_WEBAPP_NAME.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and deploy a container to an Azure Web App  

env:
  AZURE_WEBAPP_NAME: your-app-name  # set this to the name of your Azure Web App

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub container registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Build and push container image to registry
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ghcr.io/${{ env.REPO }}:${{ github.sha }}
          file: ./Dockerfile

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          images: 'ghcr.io/${{ env.REPO }}:${{ github.sha }}'
- ad: Azure Resource Manager (ARM) Şablonunu Dağıt
  kullanır: Azure/arm-deploy@v1
  ile birlikte:
    # Dağıtımın kapsamını sağlayın. Geçerli değerler: 'resourcegroup', 'managementgroup', 'abonelik'
    kapsam:
    # Azure Oturum Açma tarafından belirlenen Abonelik Kimliğini geçersiz kılın.
    abonelik Kimliği: # isteğe bağlı
    # Yalnızca Yönetim Grubu Dağıtımları için gerekli olan Yönetim Grubu Kimliğini belirtin.
    yönetimGroupId: # isteğe bağlı
    # Yalnızca yönetim Grubu veya Abonelik dağıtımları için gerekli olan hedef bölgeyi sağlayın.
    bölge: # isteğe bağlı
    # Yalnızca kaynak Grubu dağıtımları için gerekli olan bir kaynak grubunun adını sağlayın.
    resourceGroupName: # isteğe bağlı
    # Azure Resource Manager şablonunun yolunu veya URL'sini belirtin.
    şablon:
    # Artımlı (yalnızca kaynak grubuna kaynak ekleyin) veya Tamamlandı (kaynak grubundan fazladan kaynakları kaldırın) veya Doğrula (yalnızca şablonu doğrular).
    dağıtımModu: # isteğe bağlı
    # Oluşturulacak kaynak grubu dağıtımının adını belirtir.
    dağıtımAdı: # isteğe bağlı
    # Dağıtım parametre değerlerini sağlayın.
    parametreler: # isteğe bağlı
    # Az cli'nin stderr akışına bazı veriler yazılırsa eylemin başarısız olup olmayacağını belirtin. Geçerli değerler: true, false
    failOnStdErr: # isteğe bağlı, varsayılan değer doğrudur
    # Dağıtım için ek bağımsız değişkenleri belirtin.
    ekArgümanlar: # isteğe bağlı
