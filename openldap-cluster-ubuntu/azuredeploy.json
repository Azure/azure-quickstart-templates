{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for the Virtual Machine administrator. Do not use simple names such as 'admin'."
      }
    },
    "vmAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine administrator."
      }
    },
    "directoryAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the OpenLDAP directory administrator."
      }
    },
    "organization": {
      "type": "string",
      "metadata": {
        "description": "Name of the organization for which the directory is being created."
      }
    },
    "namePrefix": {
      "type": "string",
      "metadata": {
        "description": "Unique name that will be used to generate various other names including the name of the Public IP used to access the Virtual Machine."
      }
    },
    "vmCount": {
        "type": "int",
        "defaultValue": 2,
        "allowedValues": [
          1,
          2,
          3,
          4,
          5
        ],
        "metadata": {
            "description": "Number of VMs in the cluster."
        }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_A0",
      "allowedValues": [
        "Standard_A0",
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A9",
        "Standard_A10",
        "Standard_A11",
        "Standard_D1",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4",
        "Standard_D11",
        "Standard_D12",
        "Standard_D13",
        "Standard_D14"
      ],
      "metadata": {
        "description": "The size of the VM."
      }
    }
  },
  "variables": {
    "newStorageAccountName": "[concat(uniquestring(resourceGroup().id), 'olc')]",
    "imagePublisher": "Canonical",
    "imageOffer": "UbuntuServer",
    "ubuntuOSVersion": "14.04.2-LTS",
    "OSDiskName": "[concat(parameters('namePrefix'),'Disk')]",
    "nicName": "[concat(parameters('namePrefix'),'Nic')]",
    "addressPrefix": "10.0.0.0/16",
    "subnetName": "Subnet",
    "subnetPrefix": "10.0.1.0/24",
    "privateIPAddressPrefix": "10.0.1.1",
    "storageAccountType": "Standard_LRS",
    "publicIPAddressName": "[concat(parameters('namePrefix'),'IP')]",
    "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]",
    "publicIPAddressType": "Dynamic",
    "vmStorageAccountContainerName": "vhds",
    "vmName": "[concat(parameters('namePrefix'),'VM')]",
    "virtualNetworkName": "[concat(parameters('namePrefix'),'VNet')]",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
    "availabilitySetName": "[concat(parameters('namePrefix'),'AvSet')]",
    "lbName": "[concat(parameters('namePrefix'),'LB')]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('lbName'))]",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontend')]",
    "lbProbeID": "[concat(variables('lbID'),'/probes/tcpProbe')]",
    "lbPoolID": "[concat(variables('lbID'),'/backendAddressPools/LoadBalancerBackend')]",
    "installScriptName": "install_openldap.sh",
    "fileUriBase": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/openldap-cluster-ubuntu/",
    "ldifUriBase": "[concat(variables('fileUriBase'), 'ldif/')]",
    "installScriptUri": "[concat(variables('fileUriBase'), variables('installScriptName'))]",
    "installCommand": "[concat('bash ', variables('installScriptName'), ' ', parameters('vmAdminUsername'), ' ', parameters('vmAdminPassword'), ' ', parameters('directoryAdminPassword'), ' ', parameters('namePrefix'), ' ', resourceGroup().location, ' ', parameters('organization'), ' ',variables('privateIPAddressPrefix'), ' ', parameters('vmCount'))]",
    "apiVersion": "2015-06-15"
  },
  "resources": [
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('newStorageAccountName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetName')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "properties": {}
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[parameters('namePrefix')]"
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicName'),copyIndex())]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/',variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/loadBalancers/',variables('lbName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress" :"[concat(variables('privateIPAddressPrefix'), copyindex())]",
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('lbID'),'/backendAddressPools/LoadBalancerBackend')]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('lbID'),'/inboundNatRules/SSH-VM',copyindex())]"
                }
              ]
            }
          }
        ]
      },
      "copy": {
        "name": "networkInterfacesCopy",
        "count": "[parameters('vmCount')]"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "name": "[variables('lbName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location":"[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/',variables('publicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontend",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPAddressID')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "LoadBalancerBackend"
          }
        ],
        "inboundNatRules": [
          {
            "name":"SSH-VM0",
            "properties": {
              "frontendIPConfiguration": {
                "id":"[variables('frontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPort": 2200,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name":"SSH-VM1",
            "properties": {
              "frontendIPConfiguration": {
                "id":"[variables('frontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPort": 2201,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name":"SSH-VM2",
            "properties": {
              "frontendIPConfiguration": {
                "id":"[variables('frontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPort": 2202,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name":"SSH-VM3",
            "properties": {
              "frontendIPConfiguration": {
                "id":"[variables('frontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPort": 2203,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name":"SSH-VM4",
            "properties": {
              "frontendIPConfiguration": {
                "id":"[variables('frontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPort": 2204,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "HTTPRule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "SourceIP",
              "probe": {
                "id": "[variables('lbProbeID')]"
              }
            }
          },
          {
            "name": "HTTPSRule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "tcp",
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "SourceIP",
              "probe": {
                "id": "[variables('lbProbeID')]"
              }
            }
          },
          {
            "name": "LDAPRule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "tcp",
              "frontendPort": 389,
              "backendPort": 389,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "SourceIP",
              "probe": {
                "id": "[variables('lbProbeID')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "tcpProbe",
            "properties": {
              "protocol": "tcp",
              "port": 80,
              "intervalInSeconds": "5",
              "numberOfProbes": "2"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmName'),copyIndex())]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/',variables('newStorageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/',concat(variables('nicName'),copyIndex()))]",
        "[concat('Microsoft.Compute/availabilitySets/',variables('availabilitySetName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computername": "[concat(variables('vmName'),copyIndex())]",
          "adminUsername": "[parameters('vmAdminUsername')]",
          "adminPassword": "[parameters('vmAdminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[variables('ubuntuOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://',variables('newStorageAccountName'),'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/',concat(variables('OSDiskName'),copyIndex()),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicName'),copyIndex()))]"
            }
          ]
        }
      },
      "copy": {
        "name": "virtualMachinesCopy",
        "count": "[parameters('vmCount')]"
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(concat(variables('vmName'),copyIndex()),'/newuserscript')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/',concat(variables('vmName'),copyIndex()))]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.4",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[variables('installScriptUri')]",
            "[concat(variables('ldifUriBase'), 'forceTLS.ldif')]",
            "[concat(variables('ldifUriBase'), 'setTLSConfig.ldif')]",
            "[concat(variables('ldifUriBase'), 'config_1_loadSyncProvModule.ldif')]",
            "[concat(variables('ldifUriBase'), 'config_2_setServerID.ldif')]",
            "[concat(variables('ldifUriBase'), 'config_3_setConfigPW.ldif')]",
            "[concat(variables('ldifUriBase'), 'config_3a_addOlcRootDN.ldif')]",
            "[concat(variables('ldifUriBase'), 'config_4_addConfigReplication.ldif')]",
            "[concat(variables('ldifUriBase'), 'config_5_addSyncProv.ldif')]",
            "[concat(variables('ldifUriBase'), 'config_6_addSyncRepl.ldif')]",
            "[concat(variables('ldifUriBase'), 'config_7_testConfigReplication.ldif')]",
            "[concat(variables('ldifUriBase'), 'hdb_1_addSyncProvToHDB.ldif')]",
            "[concat(variables('ldifUriBase'), 'hdb_2_addOlcSuffix.ldif')]",
            "[concat(variables('ldifUriBase'), 'hdb_3_addOlcRootDN.ldif')]",
            "[concat(variables('ldifUriBase'), 'hdb_4_addOlcRootPW.ldif')]",
            "[concat(variables('ldifUriBase'), 'hdb_5_addOlcSyncRepl.ldif')]",
            "[concat(variables('ldifUriBase'), 'hdb_6_addOlcMirrorMode.ldif')]",
            "[concat(variables('ldifUriBase'), 'hdb_7_addIndexHDB.ldif')]"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat(variables('installCommand'), ' ', copyIndex())]"
        }
      },
      "copy": {
        "name": "extensionsCopy",
        "count": "[parameters('vmCount')]"
      }
    }
  ]
}
