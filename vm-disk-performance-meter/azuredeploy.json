{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmSize": {
      "type": "string",
      "allowedValues": [
        "Basic_A0",
        "Basic_A4",
        "Standard_A1",
        "Standard_A5",
        "Standard_A8",
        "Standard_D4",
        "Standard_D14",
        "Standard_DS1",
        "Standard_DS14",
        "Standard_D1_v2",
        "Standard_D15_v2",
        "Standard_DS1_v2",
        "Standard_DS15_v2",
        "Standard_F1",
        "Standard_F16",
        "Standard_F1s",
        "Standard_F16s",
        "Standard_G1",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS5",
        "Standard_NV6",
        "Standard_NC6"
      ],
      "defaultValue": "Standard_A5",
      "metadata": {
        "description": "Size of the VM that runs the test."
      }
    },
    "dataDiskStorageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "Storage Account type for the test disk"
      }
    },
    "dataDiskHostCaching": {
      "type": "string",
      "defaultValue": "ReadWrite",
      "allowedValues": [
        "",
        "ReadOnly",
        "ReadWrite"
      ],
      "metadata": {
        "description": "Storage Account type for the test disk"
      }
    },
    "testType": {
      "type": "string",
      "allowedValues": [
        "read",
        "write",
        "randread",
        "randwrite",
        "randtrim",
        "rw",
        "readwrite",
        "randrw"
      ],
      "defaultValue": "randrw",
      "metadata": {
        "description": "Disk test type to run. (rand: random, sequential otherwise; rw - read/write)"
      }
    },
    "testSize": {
      "type": "string",
      "allowedValues": [
        "32m",
        "64m",
        "128m",
        "256m",
        "512m",
        "1g",
        "2g"
      ],
      "defaultValue": "128m",
      "metadata": {
        "description": "Size of the file to test."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the test VMs."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the test VMs."
      }
    }
  },
  "variables": {
    "osVersion": "14.04.5-LTS",
    "imagePublisher": "Canonical",
    "imageOffer": "UbuntuServer",
    "OSDiskName": "osdiskforwindowssimple",
    "nicName": "testVMNic",
    "addressPrefix": "10.0.0.0/16",
    "subnetName": "Subnet",
    "subnetPrefix": "10.0.0.0/24",
    "storageAccountType": "Standard_LRS",
    "publicIPAddressName": "publicIP",
    "publicIPAddressType": "Static",
    "vmStorageAccountContainerName": "vhds",
    "virtualNetworkName": "testVNET",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "scriptFolder": "scripts",
    "scriptFileName": "testBandwidth.ps1",
    "vhdStorageAccountName": "[concat(uniqueString(resourceGroup().id), 'storage')]",
    "dataStorageAccountName": "[concat(uniqueString(resourceGroup().id), 'datastorage')]",
    "frontEndNSGName": "[concat('webtestnsg-', uniqueString(resourceGroup().id))]",
    "vmName": "testVM",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
    "qs": "'",
    "diskCmd": "(echo n; echo p; echo 1; echo; echo; echo w) | fdisk /dev/sdc > /dev/null && mkfs -t ext4 /dev/sdc1 > /dev/null && mkdir /datadisk && mount /dev/sdc1 /datadisk",
    "installCmd": "apt-get update > /dev/null && apt-get -y install fio > /dev/null",
    "cfgCmd": "[concat('echo [io] > t && echo rw=', parameters('testType'), ' >> t && echo size=', parameters('testSize'), ' >> t && echo directory=/datadisk >> t')]",
    "warmupCmd": "fio t > /dev/null",
    "runCmd": "fio t | grep -E \"read :|write:\" | tr \"\n\" \";\" | tr -s [:space:] | sed \"s/ :/:/g\" | sed \"s/= /=/g\" ",
    "fullCmd": "[concat('sudo bash -c ', variables('qs'), variables('diskCmd'), ' && ', variables('installCmd'), ' && ', variables('cfgCmd'), ' && ', variables('warmupCmd'), ' && ', variables('runCmd'), variables('qs'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('vhdStorageAccountName')]",
      "apiVersion": "2016-01-01",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "[variables('storageAccountType')]"
      },
      "kind": "Storage"
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('dataStorageAccountName')]",
      "apiVersion": "2016-01-01",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "[parameters('dataDiskStorageAccountType')]"
      },
      "kind": "Storage"
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('publicIPAddressName')]",
        "[variables('virtualNetworkName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('frontEndNSGName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "NSG"
      },
      "dependsOn": [
        "[variables('publicIPAddressName')]"
      ],
      "properties": {
        "securityRules": [
          {
            "name": "ssh-rule",
            "properties": {
              "description": "Allow SSH",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vmName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('vhdStorageAccountName')]",
        "[variables('nicName')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[variables('osVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat(reference(variables('vhdStorageAccountName'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',variables('OSDiskName'),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "name": "datadisk",
              "diskSizeGB": "1023",
              "lun": 0,
              "vhd": {
                "uri": "[concat(reference(variables('dataStorageAccountName'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',variables('vmName'),'dataDisk1.vhd')]"
              },
              "caching": "[parameters('dataDiskHostCaching')]",
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
            }
          ]
        }
      },
      "resources": [
        {
          "type": "extensions",
          "name": "CustomScriptExtension",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[variables('vmName')]"
          ],
          "location": "[resourceGroup().location]",
          "properties": {
            "publisher": "Microsoft.OSTCExtensions",
            "type": "CustomScriptForLinux",
            "typeHandlerVersion": "1.5",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "commandToExecute": "[variables('fullCmd')]"
            }
          }
        }
      ]
    }
  ],
  "outputs": {
    "testresult": {
      "type": "string",
      "value": "[trim(split(reference('CustomScriptExtension').instanceView.statuses[0].message, '\n')[2])]"
    }
  }
}
