{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "prefix": {
      "type": "string",
      "minLength": 2,
      "maxLength": 10,
      "metadata": {
        "description": "The prefix name of machines. The machine names will be {prefix}DC, {prefix}PS1, {prefix}Sys1 and {prefix}Sys2. "
      }
    },
    "adminUsername": {
      "type": "string",
      "minLength": 2,
      "maxLength": 10,
      "metadata": {
        "description": "The name of the administrator account of the new VM. "
      }
    },
    "adminPassword": {
      "type": "securestring",
      "minLength": 8,
      "metadata": {
        "description": "Input must meet password complexity requirements as documented for property 'adminPassword' in https://docs.microsoft.com/en-us/rest/api/compute/virtualmachines/virtualmachines-create-or-update"
      }
    },
    "existingDomainAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username of the account on the AD domain. "
      }
    },
    "existingDomainAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password of the account on the AD domain"
      }
    },
    "existingDomainDnsIPAddress": {
      "type": "string",
      "metadata": {
        "description": "DNS IP Address on the AD domain."
      }
    },
    "existingDomainFQDN": {
      "type": "string",
      "metadata": {
        "description": "Fully qualified domain name of the AD domain. "
      }
    },
    "existingVnetResourcegroup": {
      "type": "string",
      "metadata": {
        "description": "Existing azure virtual network resource group. "
      }
    },
    "exsitingVnetName": {
      "type": "string",
      "metadata": {
        "description": "Existing VNET that contains the domain controller"
      }
    },
    "existingSubnetName": {
      "type": "string",
      "metadata": {
        "description": "Existing subnet that contains the domain controller."
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
          "description": "The base URI where artifacts required by this template are located including a trailing '/'"
      },
      "defaultValue": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/sccm-currentbranch/"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
      },
      "defaultValue": ""
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    }
  },
  "variables": {
    "Quotes": "\"",
    "storageAccountName": "[concat(uniqueString(resourceGroup().id),'storage')]",
    "containerName": "[concat(toLower(parameters('prefix')), 'container')]",
    "vnetId": "[resourceId(parameters('existingVnetResourcegroup'), 'Microsoft.Network/virtualNetworks', parameters('exsitingVnetName'))]",
    "generalSettings": {
      "storageAccountType": "Standard_LRS",
      "diskstorageAccountType": "Premium_LRS",
      "virtualMachinessize": "Standard_D2s_v3"
    },
    "networkSettings": {
      "subnetRef": "[resourceId(parameters('existingVnetResourcegroup'),'Microsoft.Network/virtualNetworks/subnets', parameters('exsitingVnetName'), parameters('existingSubnetName'))]",
      "privateIPAllocationMethod": "Dynamic",
      "privateIPAddressVersion": "IPv4"
    },
    "securityGroupRule": {
      "name": "default-allow-rdp",
      "priority": 1000,
      "sourceAddressPrefix": "*",
      "protocol": "Tcp",
      "destinationPortRange": "3389",
      "access": "Allow",
      "direction": "Inbound",
      "sourcePortRange": "*",
      "destinationAddressPrefix": "*"
    },
    "vmrole": [
      "PS1",
      "DPMP",
      "Other",
      "SQL"
    ]
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2018-07-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[variables('generalSettings').storageAccountType]"
      },
      "kind": "StorageV2",
      "properties": {},
      "resources": [
        {
          "type": "blobServices/containers",
          "apiVersion": "2018-07-01",
          "name": "[concat('default/', variables('containerName'))]",
          "dependsOn": [
            "[variables('storageAccountName')]"
          ]
        }
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2018-06-01",
      "name": "[concat(parameters('prefix'),variables('vmrole')[copyIndex()])]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vmcopy",
        "count": 3
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', toLower(parameters('prefix')), '-ni-',variables('vmrole')[copyIndex()])]"
      ],
      "properties": {
        "osProfile": {
          "computerName": "[concat(parameters('prefix'),variables('vmrole')[copyIndex()])]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "provisionVmAgent": "true"
          }
        },
        "hardwareProfile": {
          "vmSize": "[variables('generalSettings').virtualMachinessize]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2016-Datacenter",
            "version": "latest"
          },
          "osDisk": {
            "osType": "Windows",
            "name": "[concat(parameters('prefix'),variables('vmrole')[copyIndex()],'-OsDisk')]",
            "createOption": "FromImage",
            "caching": "ReadWrite",
            "managedDisk": {
              "storageAccountType": "[variables('generalSettings').diskstorageAccountType]"
            },
            "diskSizeGB": 150
          },
          "dataDisks": []
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(toLower(parameters('prefix')), '-ni-',variables('vmrole')[copyIndex()]))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": false
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2018-06-01",
      "name": "[concat(parameters('prefix'),variables('vmrole')[copyIndex()],'/WorkFlow')]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "extensioncopy",
        "count": 4
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/',parameters('prefix'),variables('vmrole')[copyIndex()])]",
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
      ],
      "properties": {
        "type": "CustomScriptExtension",
        "publisher": "Microsoft.Compute",
        "typeHandlerVersion": "1.4",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[uri(parameters('_artifactsLocation'),concat('scripts/WorkFlow-',variables('vmrole')[copyIndex()],'.ps1',parameters('_artifactsLocationSasToken')))]",
            "[uri(parameters('_artifactsLocation'),concat('scripts/InstallADDS.ps1',parameters('_artifactsLocationSasToken')))]",
            "[uri(parameters('_artifactsLocation'),concat('scripts/InstallADK.ps1',parameters('_artifactsLocationSasToken')))]",
            "[uri(parameters('_artifactsLocation'),concat('scripts/InstallDP.ps1',parameters('_artifactsLocationSasToken')))]",
            "[uri(parameters('_artifactsLocation'),concat('scripts/InstallFeature.ps1',parameters('_artifactsLocationSasToken')))]",
            "[uri(parameters('_artifactsLocation'),concat('scripts/InstallMP.ps1',parameters('_artifactsLocationSasToken')))]",
            "[uri(parameters('_artifactsLocation'),concat('scripts/InstallSCCM.ps1',parameters('_artifactsLocationSasToken')))]",
            "[uri(parameters('_artifactsLocation'),concat('scripts/JoinDomain.ps1',parameters('_artifactsLocationSasToken')))]",
            "[uri(parameters('_artifactsLocation'),concat('scripts/main.ps1',parameters('_artifactsLocationSasToken')))]",
            "[uri(parameters('_artifactsLocation'),concat('scripts/OpenFirewallPort.ps1',parameters('_artifactsLocationSasToken')))]",
            "[uri(parameters('_artifactsLocation'),concat('scripts/SetAutoLogOn.ps1',parameters('_artifactsLocationSasToken')))]",
            "[uri(parameters('_artifactsLocation'),concat('scripts/UpgradeSCCM.ps1',parameters('_artifactsLocationSasToken')))]"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -file WorkFlow-',variables('vmrole')[copyIndex()],'.ps1 ',parameters('existingDomainDnsIPAddress'),' ',parameters('existingDomainFQDN'),' ',parameters('existingDomainAdminUsername'),' ',parameters('existingDomainAdminPassword'),' ',concat(reference(variables('storageAccountName')).primaryEndpoints.blob, variables('containerName'),' ',variables('Quotes'),listKeys(concat('Microsoft.Storage/storageAccounts/', variables('StorageAccountName')), '2018-07-01').keys[0].value,variables('Quotes'),' ',parameters('adminUsername')))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2018-08-01",
      "name": "[concat(toLower(parameters('prefix')), '-ni-',variables('vmrole')[copyIndex()])]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "nicopy",
        "count": 4
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', toLower(parameters('prefix')), '-nsg')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "subnet": {
                "id": "[variables('networkSettings').subnetRef]"
              },
              "privateIPAllocationMethod": "[variables('networkSettings').privateIPAllocationMethod]",
              "privateIPAddressVersion": "[variables('networkSettings').privateIPAddressVersion]"
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/networkSecurityGroups',  concat(toLower(parameters('prefix')), '-nsg'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2018-08-01",
      "name": "[concat(toLower(parameters('prefix')), '-nsg')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "[variables('securityGroupRule').name]",
            "properties": {
              "priority": "[variables('securityGroupRule').priority]",
              "sourceAddressPrefix": "[variables('securityGroupRule').sourceAddressPrefix]",
              "protocol": "[variables('securityGroupRule').protocol]",
              "destinationPortRange": "[variables('securityGroupRule').destinationPortRange]",
              "access": "[variables('securityGroupRule').access]",
              "direction": "[variables('securityGroupRule').direction]",
              "sourcePortRange": "[variables('securityGroupRule').sourcePortRange]",
              "destinationAddressPrefix": "[variables('securityGroupRule').destinationAddressPrefix]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2018-06-01",
      "name": "[concat(parameters('prefix'),variables('vmrole')[3])]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', toLower(parameters('prefix')), '-ni-',variables('vmrole')[3])]"
      ],
      "properties": {
        "osProfile": {
          "computerName": "[concat(parameters('prefix'),variables('vmrole')[3])]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "provisionVmAgent": "true"
          }
        },
        "hardwareProfile": {
          "vmSize": "[variables('generalSettings').virtualMachinessize]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftSQLServer",
            "offer": "SQL2016SP1-WS2016",
            "sku": "Enterprise",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[variables('generalSettings').diskstorageAccountType]"
            }
          },
          "dataDisks": [
            {
              "createOption": "Empty",
              "lun": 0,
              "diskSizeGB": "1023",
              "caching": "ReadOnly",
              "managedDisk": {
                "storageAccountType": "[variables('generalSettings').diskstorageAccountType]"
              }
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(toLower(parameters('prefix')), '-ni-',variables('vmrole')[3]))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": false
          }
        }
      }
    }
  ],
  "outputs": {

  }
}
